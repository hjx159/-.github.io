<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>水文 &amp; 摄影</title>
        <subtitle>为了能更好地访问图片，你需要一点魔法</subtitle>
        <icon>http://example.com/images/favicon.ico</icon>
        <link>http://example.com</link>
        <author>
          <name>范特东东东</name>
        </author>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Fri, 19 Jan 2024 11:24:09 +0800</pubDate>
        <lastBuildDate>Fri, 19 Jan 2024 11:24:09 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://example.com/docker/docker-javaguide/</guid>
            <title>docker-javaguide</title>
            <link>http://example.com/docker/docker-javaguide/</link>
            <category term="docker" scheme="http://example.com/categories/docker/" />
            <pubDate>Fri, 19 Jan 2024 11:24:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;docker-核心概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-核心概念&#34;&gt;#&lt;/a&gt; Docker 核心概念&lt;/h1&gt;
&lt;h2 id=&#34;容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器&#34;&gt;#&lt;/a&gt; 容器&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Docker 是世界领先的软件容器平台&lt;/strong&gt;，所以想要搞懂 Docker 的概念我们必须先从容器开始说起。&lt;/p&gt;
&lt;h3 id=&#34;容器是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器是什么&#34;&gt;#&lt;/a&gt; 容器是什么&lt;/h3&gt;
&lt;p&gt;一句话概括容器：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;容器就是将软件打包成标准化单元，以用于开发、交付和部署。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;容器镜像是轻量的、可执行的独立软件包&lt;/strong&gt;，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器化软件适用于基于 Linux 和 Windows 的应用，在任何环境中都能够始终如一地运行。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器赋予了软件独立性&lt;/strong&gt;，使其免受外在环境差异（例如，开发和预演环境的差异）的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果需要通俗地描述容器的话，我觉得容器就是一个存放东西的地方，就像书包可以装各种文具、衣柜可以放各种衣服、鞋架可以放各种鞋子一样。我们现在所说的容器存放的东西可能更偏向于应用比如网站、程序甚至是系统环境。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/container.png&#34; alt=&#34;认识容器&#34; /&gt;&lt;/p&gt;
&lt;center&gt;认识容器&lt;/center&gt;
&lt;h3 id=&#34;图解物理机-虚拟机-容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图解物理机-虚拟机-容器&#34;&gt;#&lt;/a&gt; 图解：物理机、虚拟机、容器&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;物理机：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/github/javaguide/tools/docker/%E7%89%A9%E7%90%86%E6%9C%BA%E5%9B%BE%E8%A7%A3.jpeg&#34; alt=&#34;物理机&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虚拟机：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/github/javaguide/tools/docker/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9B%BE%E8%A7%A3.jpeg&#34; alt=&#34;虚拟机&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/javaguide/image-20211110104003678.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通过上面这三张抽象图，我们可以大概通过类比概括出：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;容器虚拟化的是操作系统而不是硬件，容器之间是共享同一套操作系统资源的&lt;/font&gt;。虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统。&lt;font color=&#39;red&#39;&gt;因此容器的隔离级别会稍低一些&lt;/font&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker-思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-思想&#34;&gt;#&lt;/a&gt; Docker 思想&lt;/h2&gt;
&lt;h3 id=&#34;docker-是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-是什么&#34;&gt;#&lt;/a&gt; Docker 是什么&lt;/h3&gt;
&lt;p&gt;通过四点向你说明 Docker 到底是个什么东西。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Docker 是世界领先的&lt;font color=&#39;red&#39;&gt;软件容器平台&lt;/font&gt;，基于&lt;font color=&#39;red&#39;&gt; Go 语言&lt;/font&gt; 进行开发实现。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker 可以&lt;font color=&#39;red&#39;&gt;对进程进行封装隔离&lt;/font&gt;，属于操作系统层面的虚拟化技术&lt;/strong&gt;。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Docker 能够自动执行重复性任务，例如搭建和配置开发环境&lt;/font&gt;，从而解放了开发人员。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户可以方便地&lt;font color=&#39;red&#39;&gt;创建和使用容器&lt;/font&gt;，把自己的应用放入容器。容器还可以进行&lt;font color=&#39;red&#39;&gt;版本管理、复制、分享、修改&lt;/font&gt;，就像管理普通的代码一样。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;docker-思想-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-思想-2&#34;&gt;#&lt;/a&gt; Docker 思想&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;集装箱&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标准化&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;运输方式&lt;/li&gt;
&lt;li&gt;存储方式&lt;/li&gt;
&lt;li&gt;API 接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隔离&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;docker-容器的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-容器的特点&#34;&gt;#&lt;/a&gt; Docker 容器的特点&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;轻量&lt;/font&gt;&lt;/strong&gt; : 在一台机器上运行的多个 Docker 容器可以&lt;font color=&#39;red&#39;&gt;共享这台机器的操作系统内核&lt;/font&gt;；它们能够迅速启动，只需&lt;font color=&#39;red&#39;&gt;占用很少的计算和内存资源&lt;/font&gt;。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;标准&lt;/font&gt;&lt;/strong&gt; : Docker 容器&lt;font color=&#39;red&#39;&gt;基于开放式标准&lt;/font&gt;，能够在所有主流 Linux 版本、Microsoft Windows 以及包括 VM、裸机服务器和云在内的任何基础设施上运行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;安全&lt;/font&gt;&lt;/strong&gt; : Docker 赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker &lt;font color=&#39;red&#39;&gt;默认提供最强的隔离&lt;/font&gt;，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。&lt;/p&gt;
&lt;h3 id=&#34;为什么使用-docker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么使用-docker&#34;&gt;#&lt;/a&gt; 为什么使用 Docker&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;借助 Docker，开发者可以将他们的应用以及依赖包&lt;strong&gt;打包&lt;/strong&gt;到一个&lt;strong&gt;轻量级、可移植&lt;/strong&gt;的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;容器是完全使用&lt;font color=&#39;red&#39;&gt;沙箱机制，相互之间不会有任何接口&lt;/font&gt;（类似 iPhone 的 app），更重要的是容器性能&lt;font color=&#39;red&#39;&gt;开销极低&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;传统的开发流程中，我们的项目通常需要使用 MySQL、Redis、FastDFS 等等环境，这些环境都是需要我们手动去进行下载并配置的，安装配置流程极其复杂，而且不同系统下的操作也不一样。&lt;/p&gt;
&lt;p&gt;Docker 的出现完美地解决了这一问题，我们&lt;font color=&#39;red&#39;&gt;可以在容器中安装 MySQL、Redis 等软件环境，使得应用和环境架构分开&lt;/font&gt;，它的优势在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;一致的运行环境&lt;/font&gt;：Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码在我机器上没问题啊” 这类问题；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;快速启动&lt;/font&gt;：可以做到秒级、甚至毫秒级的启动时间，大大的节约了开发、测试、部署的时间；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;隔离性&lt;/font&gt;：避免公用的服务器，资源会容易受到其他用户的影响；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;弹性伸缩，快速扩展&lt;/font&gt;：善于处理集中爆发的服务器使用压力；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;迁移方便&lt;/font&gt;：可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;持续交付和部署&lt;/font&gt;：使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署；&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;容器-vs-虚拟机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器-vs-虚拟机&#34;&gt;#&lt;/a&gt; 容器 vs 虚拟机&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;容器是一种虚拟化技术，常与虚拟机作比较。而 &lt;font color=&#39;red&#39;&gt;Docker 只是容器的一种实现&lt;/font&gt;，是一个容器化的解决方案和平台。不要把二者混为一谈。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;每当说起容器，我们不得不将其与虚拟机做一个比较。就我而言，对于两者无所谓谁会取代谁，而是&lt;font color=&#39;red&#39;&gt;两者可以和谐共存&lt;/font&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单来说：&lt;strong&gt;容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为&lt;font color=&#39;red&#39;&gt;容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高&lt;/font&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240121175824099.png&#34; alt=&#34;image-20240121175824099&#34; /&gt;&lt;/p&gt;
&lt;center&gt;虚拟化（Hypervisor）技术&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240121180015087.png&#34; alt=&#34;image-20240121180015087&#34; /&gt;&lt;/p&gt;
&lt;center&gt;虚拟机（VM）示意图&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240121180238543.png&#34; alt=&#34;image-20240121180238543&#34; /&gt;&lt;/p&gt;
&lt;center&gt;容器示意图&lt;/center&gt;
&lt;h3 id=&#34;对比图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对比图&#34;&gt;#&lt;/a&gt; 对比图&lt;/h3&gt;
&lt;p&gt;传统虚拟机技术（VM）是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而&lt;font color=&#39;red&#39;&gt;容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核&lt;/font&gt;，而且也没有进行硬件虚拟。&lt;font color=&#39;red&#39;&gt;因此容器要比传统虚拟机更为轻便&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/2e2b95eebf60b6d03f6c1476f4d7c697.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;二者总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二者总结&#34;&gt;#&lt;/a&gt; 二者总结&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/4ef8691d67eb1eb53217099d0a691eb5.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;容器是一个应用层抽象，用于将代码和依赖资源打包在一起。多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行&lt;/font&gt;&lt;/strong&gt;。与虚拟机相比， &lt;strong&gt;容器占用的空间较少&lt;/strong&gt;（容器镜像大小通常只有几十兆），&lt;strong&gt;瞬间就能完成启动&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;虚拟机 (VM) 是一个物理硬件层抽象，用于将一台服务器变成多台服务器&lt;/font&gt;。&lt;/strong&gt; 管理程序允许多个 VM 在一台机器上运行。每个 VM 都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此 &lt;strong&gt;占用大量空间&lt;/strong&gt; 。而且 VM &lt;strong&gt;启动也十分缓慢&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过 Docker 官网，我们知道了这么多 Docker 的优势，但是大家也没有必要完全否定虚拟机技术，因为两者有不同的使用场景。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;虚拟机更擅长于彻底隔离整个运行环境&lt;/font&gt;&lt;/strong&gt;。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。而 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Docker 通常用于隔离不同的应用&lt;/font&gt;&lt;/strong&gt; ，例如前端，后端以及数据库。&lt;/p&gt;
&lt;h3 id=&#34;二者可共存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二者可共存&#34;&gt;#&lt;/a&gt; 二者可共存&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/056c87751b9dd7b56f4264240fe96d00.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Docker与虚拟机的共存关系&lt;/center&gt;
&lt;h2 id=&#34;docker-基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-基本概念&#34;&gt;#&lt;/a&gt; Docker 基本概念&lt;/h2&gt;
&lt;p&gt;Docker 中有非常重要的三个基本概念，理解了这三个概念，就理解了 Docker 的整个生命周期。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;镜像（Image）&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;Image 是一个只读的模板&lt;/font&gt;，可以用来创建多个 Container 。相当于是一个 root 文件系统，是&lt;font color=&#39;red&#39;&gt;用于创建 Container 的模板&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;容器（Container）&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;Container 是 Image 的一个运行实例&lt;/font&gt;，它提供了一个独立的可移植的环境，可以在这个环境中运行应用程序。Image 和 Container 的关系，就像是面向对象程序设计中的类和实例一样，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Image 是静态的定义（类），Container 是 Image 运行时的实体（实例）&lt;/font&gt;&lt;/strong&gt;。Container 是独立运行的一个或一组应用，&lt;font color=&#39;red&#39;&gt;是 Image 运行时的实体&lt;/font&gt;，可以被创建、启动、停止、删除、暂停等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;仓库（Repository）&lt;/font&gt;&lt;/strong&gt;：用来&lt;font color=&#39;red&#39;&gt;存放 Image &lt;/font&gt;的仓库，类似于代码控制中心。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;注册表（Registry）&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;包含多个 Repository，每个 Repository 可以包含多个 Tag，每个 Tag 对应一个 Image &lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;理解了这三个概念，就理解了&lt;font color=&#39;red&#39;&gt; Docker 的整个生命周期&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/docker-overview.png&#34; alt=&#34;An Introductory Guide To Docker for Beginners&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Docker 基本概念&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240121181052546.png&#34; alt=&#34;image-20240121181052546&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Docker 架构&lt;/center&gt;
&lt;h3 id=&#34;镜像image一个特殊的文件系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#镜像image一个特殊的文件系统&#34;&gt;#&lt;/a&gt; 镜像（Image）：一个特殊的文件系统&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;操作系统分为内核和用户空间&lt;/strong&gt;。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Image 就相当于是一个 root 文件系统。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Image 是一个特殊的文件系统，除了&lt;font color=&#39;red&#39;&gt;提供容器运行时所需的程序、库、资源、配置等文件&lt;/font&gt;外，还&lt;font color=&#39;red&#39;&gt;包含了一些为运行时准备的配置参数（如匿名卷、环境变量、用户等）&lt;/font&gt;。&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;Image 不包含任何动态数据，其内容在构建之后也不会被改变&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;Docker 设计时，就充分利用 &lt;strong&gt;Union FS&lt;/strong&gt; 的技术，将其设计为&lt;strong&gt;分层存储的架构&lt;/strong&gt;。Image 实际是由多层文件系统联合组成。&lt;/p&gt;
&lt;p&gt;**&lt;font color=&#39;red&#39;&gt;Image 是逐层构建的，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。&lt;/font&gt;** 比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随 Image 。因此在构建 Image 的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。&lt;/p&gt;
&lt;p&gt;分层存储的特征还使得&lt;font color=&#39;red&#39;&gt; Image 的复用、定制&lt;/font&gt;变的更为容易。甚至可以用之前构建好的 Image 作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的 Image 。&lt;/p&gt;
&lt;h3 id=&#34;容器containerimage-运行时的实体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器containerimage-运行时的实体&#34;&gt;#&lt;/a&gt; 容器（Container）：Image 运行时的实体&lt;/h3&gt;
&lt;p&gt;镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Image 是静态的定义，Container 是 Image 运行时的实体&lt;/font&gt;。Container 可以被创建、启动、停止、删除、暂停等&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Container 的实质是进程，但与直接在宿主执行的进程不同，&lt;font color=&#39;red&#39;&gt;Container 进程运行于属于自己的独立的命名空间&lt;/font&gt;。前面讲过 Image 使用的是分层存储，&lt;font color=&#39;red&#39;&gt;Container 也是分层存储&lt;/font&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Container 存储层的生存周期和 Container 一样&lt;/font&gt;，Container 消亡时，Container 存储层也随之消亡。因此，任何保存于 Container 存储层的信息都会随 Container 删除而丢失。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;按照 Docker 最佳实践的要求，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Container 不应该向其存储层内写入任何数据&lt;/font&gt;&lt;/strong&gt; ，容器存储层要保持无状态化。&lt;strong&gt;所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录&lt;/strong&gt;，在这些位置的读写会跳过容器存储层，直接对宿主 (或网络存储) 发生读写，其性能和稳定性更高。&lt;font color=&#39;red&#39;&gt;数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡&lt;/font&gt;。因此，&lt;strong&gt;使用数据卷后，容器可以随意删除、重新 run ，数据却不会丢失。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;仓库repository集中存放-image-文件的地方&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#仓库repository集中存放-image-文件的地方&#34;&gt;#&lt;/a&gt; 仓库（Repository）：集中存放 Image 文件的地方&lt;/h3&gt;
&lt;h4 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h4&gt;
&lt;p&gt;Image 构建完成后，可以很容易的在当前宿主上运行，但是，&lt;strong&gt;如果需要在其它服务器上使用这个 Image，我们就需要&lt;font color=&#39;red&#39;&gt;一个集中的存储、分发 Image 的服务&lt;/font&gt;，Docker Registry 就是这样的服务。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;一个 Registry 中可以包含多个 Repository，每个 Repository 可以包含多个 Tag，每个 Tag 对应一个 Image&lt;/font&gt;&lt;/strong&gt;。所以说：镜像仓库是 Docker 用来集中存放镜像文件的地方，类似于我们之前常用的代码仓库。&lt;/p&gt;
&lt;p&gt;通常，&lt;strong&gt;一个 Repository 会包含同一个软件不同版本的 Image&lt;/strong&gt;，而 &lt;strong&gt;tag 就常用于对应该软件的各个版本&lt;/strong&gt; 。我们可以通过 &lt;code&gt;&amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt;&lt;/code&gt;  的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这里补充一下 &lt;code&gt; Docker Registry 公开服务&lt;/code&gt; 和 &lt;code&gt;私有 Docker Registry &lt;/code&gt; 的概念：&lt;/p&gt;
&lt;h4 id=&#34;registry-公开服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#registry-公开服务&#34;&gt;#&lt;/a&gt; Registry 公开服务&lt;/h4&gt;
&lt;p&gt;Docker Registry 公开服务是开放给用户使用、允许用户管理 Image 的 Registry 服务。一般这类公开服务&lt;font color=&#39;red&#39;&gt;允许用户免费上传、下载公开的 Image&lt;/font&gt;，并可能提供收费服务供用户管理私有 Image 。&lt;font color=&#39;red&#39;&gt;最常使用的 Registry 公开服务是官方的 &lt;strong&gt;Docker Hub&lt;/strong&gt; ，这也是默认的 Registry&lt;/font&gt;，并拥有大量的高质量的官方镜像，网址为：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=&#34;&gt;https://hub.docker.com/&lt;/span&gt; 。官方是这样介绍 Docker Hub 的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker Hub 是 Docker 官方提供的一项服务，用于与您的团队查找和共享容器镜像。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如我们想要搜索自己想要的镜像：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240120142613581.png&#34; alt=&#34;利用Docker Hub 搜索镜像&#34; /&gt;&lt;/p&gt;
&lt;center&gt;利用Docker Hub 搜索镜像&lt;/center&gt;
&lt;p&gt;在 Docker Hub 的搜索结果中，有几项关键的信息有助于我们选择合适的镜像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OFFICIAL Image&lt;/strong&gt;：代表镜像为 Docker 官方提供和维护，相对来说稳定性和安全性较高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stars&lt;/strong&gt;：和点赞差不多的意思，类似 GitHub 的 Star。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Downloads&lt;/strong&gt;：代表镜像被拉取的次数，基本上能够表示镜像被使用的频度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，除了直接通过 Docker Hub 网站搜索镜像这种方式外，我们&lt;font color=&#39;red&#39;&gt;还可以通过  &lt;code&gt;docker search&lt;/code&gt;  这个命令搜索 Docker Hub 中的镜像&lt;/font&gt;，搜索的结果是一致的。&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;➜  ~ &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; search mysql&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mysql                             MySQL is a widely used, open-source relation…   &lt;span class=&#34;token number&#34;&gt;8763&lt;/span&gt;                &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;OK&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mariadb                           MariaDB is a community-developed fork of MyS…   &lt;span class=&#34;token number&#34;&gt;3073&lt;/span&gt;                &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;OK&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mysql/mysql-server                Optimized MySQL Server Docker images. Create…   &lt;span class=&#34;token number&#34;&gt;650&lt;/span&gt;                                     &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;OK&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在国内访问 &lt;strong&gt;Docker Hub&lt;/strong&gt; 可能会比较慢，&lt;font color=&#39;red&#39;&gt;国内也有一些云服务商&lt;/font&gt;提供类似于 Docker Hub 的公开服务。比如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudGVueGNsb3VkLmNvbS8=&#34;&gt;时速云镜像库&lt;/span&gt;、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuMTYzeXVuLmNvbS9wcm9kdWN0L3JlcG8=&#34;&gt;网易云镜像服务&lt;/span&gt;、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZGFvY2xvdWQuaW8v&#34;&gt;DaoCloud 镜像市场&lt;/span&gt;、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9wcm9kdWN0L2NvbnRhaW5lcnNlcnZpY2U/dXRtX2NvbnRlbnQ9c2VfMTI5MjgzNg==&#34;&gt;阿里云镜像库&lt;/span&gt;等。&lt;/p&gt;
&lt;h4 id=&#34;私有-registry&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#私有-registry&#34;&gt;#&lt;/a&gt; 私有 Registry&lt;/h4&gt;
&lt;p&gt;除了使用公开服务外，用户还可以 **&lt;font color=&#39;red&#39;&gt;在本地搭建私有 Docker Registry&lt;/font&gt;** 。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。开源的 Docker Registry 镜像只提供了 Docker Registry API 的服务端实现，足以支持 docker 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。&lt;/p&gt;
&lt;h3 id=&#34;dockerfile&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dockerfile&#34;&gt;#&lt;/a&gt; Dockerfile&lt;/h3&gt;
&lt;p&gt;容器化的过程包括三个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;编写 Dockerfile&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用 Dockerfile &lt;strong&gt;构建 Image&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用 Image &lt;strong&gt;创建和运行 Container&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Dockerfile 是一个包含指令的文本文件&lt;/font&gt;&lt;/strong&gt;，用于告诉 Docker 如何构建应用程序的 Image，包括应用程序的命令、依赖、配置环境和运行环境等内容。&lt;font color=&#39;red&#39;&gt;一般在项目根目录下创建一个名为  &lt;code&gt;Dockerfile&lt;/code&gt;  的文件&lt;/font&gt;，第一个字母 D 大写，其他都小写。&lt;/p&gt;
&lt;p&gt;有了 Image 之后，就可以使用该 Image 来创建 Container，并&lt;font color=&#39;red&#39;&gt;在 Container 中运行应用程序&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240121194842382.png&#34; alt=&#34;image-20240121194842382&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;docker-compose&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-compose&#34;&gt;#&lt;/a&gt; Docker Compose&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;docker compose 可以定义和运行多个 docker 容器和应用程序，解决服务之间关联关系的问题&lt;/font&gt;。通过一个单独的  &lt;code&gt;docker-compose.yml&lt;/code&gt;  配置文件，将一组互相关联的容器组合在一起，形成一个项目，然后&lt;font color=&#39;red&#39;&gt;使用一条命令  &lt;code&gt;docker compose up&lt;/code&gt;  就可以启动、停止或重建这些服务，方便管理&lt;/font&gt;。这对于提高开发效率和减少沟通成本非常有用，建议初学者学习使用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240121194754264.png&#34; alt=&#34;image-20240121194754264&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker-常见命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-常见命令&#34;&gt;#&lt;/a&gt; Docker 常见命令&lt;/h2&gt;
&lt;h3 id=&#34;基本命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本命令&#34;&gt;#&lt;/a&gt; 基本命令&lt;/h3&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; version &lt;span class=&#34;token comment&#34;&gt;# 查看 docker 版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; images &lt;span class=&#34;token comment&#34;&gt;# 查看所有已下载镜像，等价于：docker image ls 命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; container &lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 查看所有容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#查看正在运行的容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; image prune &lt;span class=&#34;token comment&#34;&gt;# 清理临时的、没有被使用的镜像文件。-a, --all: 删除所有没有用的镜像，而不仅仅是临时文件；&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;拉取镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拉取镜像&#34;&gt;#&lt;/a&gt; 拉取镜像&lt;/h3&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; search mysql &lt;span class=&#34;token comment&#34;&gt;# 查看 mysql 相关镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; pull mysql:5.7 &lt;span class=&#34;token comment&#34;&gt;# 拉取 mysql 镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; image &lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 查看所有已下载镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;删除镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除镜像&#34;&gt;#&lt;/a&gt; 删除镜像&lt;/h3&gt;
&lt;p&gt;比如我们要删除我们下载的 mysql 镜像。&lt;/p&gt;
&lt;p&gt;通过  &lt;code&gt;docker rmi [image]&lt;/code&gt;  （等价于 &lt;code&gt;docker image rm [image]&lt;/code&gt; ）删除镜像之前&lt;font color=&#39;red&#39;&gt;首先要确保这个镜像没有被容器引用&lt;/font&gt;（可以通过 tag 名称或者 image ID 删除）。&lt;/p&gt;
&lt;p&gt;举个例子，通过我们前面讲的 &lt;code&gt;docker ps&lt;/code&gt;  命令即可查看。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;➜  ~ &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;c4cd691d9f80        mysql:5.7           &lt;span class=&#34;token string&#34;&gt;&#34;docker-entrypoint.s…&#34;&lt;/span&gt;   &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt; weeks ago         Up &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; days          &lt;span class=&#34;token number&#34;&gt;0.0&lt;/span&gt;.0.0:3306-&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3306&lt;/span&gt;/tcp, &lt;span class=&#34;token number&#34;&gt;33060&lt;/span&gt;/tcp   mysql&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看到 mysql 正在被 id 为 c4cd691d9f80 的容器引用，我们需要首先通过  &lt;code&gt;docker stop c4cd691d9f80&lt;/code&gt;  或者  &lt;code&gt;docker stop mysql&lt;/code&gt;  暂停这个容器。&lt;/p&gt;
&lt;p&gt;然后查看 mysql 镜像的 id&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;➜  ~ &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; images&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mysql                   &lt;span class=&#34;token number&#34;&gt;5.7&lt;/span&gt;                 f6509bac4980        &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; months ago        373MB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;font color=&#39;red&#39;&gt;通过 IMAGE ID 或者 REPOSITORY 名字即可删除&lt;/font&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; rmi f6509bac4980 &lt;span class=&#34;token comment&#34;&gt;#  或者 docker rmi mysql&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;docker-两句口号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-两句口号&#34;&gt;#&lt;/a&gt; Docker 两句口号&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;“Build, Ship and Run（搭建、发送、运行）”&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;“Build once，Run anywhere（搭建一次，到处能用）”&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你搜索 Docker 官网，会发现如下的字样：&lt;strong&gt;“Docker - Build, Ship, and Run Any App, Anywhere”&lt;/strong&gt;。那么 Build, Ship, and Run 到底是在干什么呢？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/docker-build-ship-run.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Build（构建镜像）&lt;/font&gt;&lt;/strong&gt;：镜像就像是集装箱，包括文件以及运行环境等等资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Ship（运输镜像）&lt;/font&gt;&lt;/strong&gt;：主机和仓库间运输，这里的仓库就像是超级码头一样。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Run（运行镜像）&lt;/font&gt;&lt;/strong&gt;：运行的镜像就是一个容器，容器就是运行程序的地方。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Docker 运行过程也就是去仓库把镜像拉到本地，然后用一条命令把镜像运行起来变成容器&lt;/font&gt;。所以，我们也常常将 Docker 称为码头工人或码头装卸工，这和 Docker 的中文翻译搬运工人如出一辙。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker-底层原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-底层原理&#34;&gt;#&lt;/a&gt; Docker 底层原理&lt;/h2&gt;
&lt;h3 id=&#34;虚拟化技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟化技术&#34;&gt;#&lt;/a&gt; 虚拟化技术&lt;/h3&gt;
&lt;p&gt;首先，Docker &lt;strong&gt;容器虚拟化技术&lt;/strong&gt;为基础的软件，那么什么是虚拟化技术呢？&lt;/p&gt;
&lt;p&gt;简单点来说，虚拟化技术可以这样定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虚拟化技术是一种资源管理技术，是将计算机的各种&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUE4JTg4JUU3JUFFJTk3JUU2JUE5JTlGJUU3JUE3JTkxJUU1JUFEJUI4&#34;&gt;实体资源&lt;/span&gt;（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQ1BV&#34;&gt;CPU&lt;/span&gt;、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTg2JTg1JUU1JUFEJTk4&#34;&gt;内存&lt;/span&gt;、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUEzJTgxJUU3JTlCJTk4JUU3JUE5JUJBJUU5JTk3JUI0&#34;&gt;磁盘空间&lt;/span&gt;、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUI2JUIyJUU4JUI3JUFGJUU5JTgxJUE5JUU5JTg1JThEJUU1JTk5JUE4&#34;&gt;网络适配器&lt;/span&gt;等），予以抽象、转换后呈现出来并可供分割、组合为一个或多个电脑配置环境。由此，打破实体结构间的不可切割的障碍，使用户可以比原本的配置更好的方式来应用这些电脑硬件资源。这些资源的新虚拟部分是不受现有资源的架设方式，地域或物理配置所限制。一般所指的虚拟化资源包括计算能力和数据存储。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;docker-基于-lxc-虚拟容器技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-基于-lxc-虚拟容器技术&#34;&gt;#&lt;/a&gt; Docker 基于 LXC 虚拟容器技术&lt;/h3&gt;
&lt;p&gt;Docker 技术是基于 &lt;strong&gt;LXC（Linux container- Linux 容器）虚拟容器技术&lt;/strong&gt;的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LXC，其名称来自 Linux 软件容器（Linux Containers）的缩写，一种操作系统层虚拟化（Operating system–level virtualization）技术，为 Linux 内核容器功能的一个用户空间接口。它将应用软件系统打包成一个软件容器（Container），内含应用软件本身的代码，以及所需要的操作系统核心和库。通过统一的名字空间和共用 API 来分配不同软件容器的可用硬件资源，创造出应用程序的独立沙箱运行环境，使得 Linux 用户可以容易的创建和管理系统或应用容器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;LXC 技术主要是借助 Linux 内核中提供的 CGroup 功能和 namespace 来实现的，通过 LXC 可以为软件提供一个独立的操作系统运行环境&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;cgroup 和 namespace 介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;namespace 是 Linux 内核用来隔离内核资源的方式。&lt;/font&gt;&lt;/strong&gt; 通过 namespace 可以让一些进程只能看到与自己相关的一部分资源，而另外一些进程也只能看到与它们自己相关的资源，这两拨进程根本就感觉不到对方的存在。具体的实现方式是把一个或多个进程的相关资源指定在同一个 namespace 中。Linux namespaces 是对全局系统资源的一种封装隔离，使得处于不同 namespace 的进程拥有独立的全局系统资源，改变一个 namespace 中的系统资源只会影响当前 namespace 里的进程，对其他 namespace 中的进程没有影响。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;CGroup 是 Control Groups 的缩写，是 Linux 内核提供的一种可以限制、记录、隔离进程组 (process groups) 所使用的物力资源 (如 cpu memory i/o 等等) 的机制&lt;/font&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cgroup 和 namespace 两者对比：&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;两者都是将进程进行分组&lt;/font&gt;，但是两者的作用还是有本质区别。&lt;font color=&#39;red&#39;&gt;namespace 是为了隔离进程组之间的资源，而 cgroup 是为了对一组进程进行统一的资源监控和限制&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;本文主要把 Docker 中的一些常见概念做了详细的阐述，但是并不涉及 Docker 的安装、镜像的使用、容器的操作等内容。这部分东西，希望读者自己可以通过阅读书籍与官方文档的形式掌握。如果觉得官方文档阅读起来很费力的话，这里推荐以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;《Docker 技术入门与实战第二版》[&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly95ZWFzeS5naXRib29rLmlvL2RvY2tlcl9wcmFjdGljZS8=&#34;&gt;前言 - Docker — 从入门到实践 (gitbook.io)&lt;/span&gt;]&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MzI2MDA5OA==&#34;&gt;10 分钟看懂 Docker 和 K8S&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaW5mb3EuY24vYXJ0aWNsZS90ZTcwRmxTeXhobHRMMUNyN2d6TQ==&#34;&gt;从零开始入门 K8s：详解 K8s 容器基本概念&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;docker-实战&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-实战&#34;&gt;#&lt;/a&gt; Docker 实战&lt;/h1&gt;
&lt;h2 id=&#34;安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h2&gt;
&lt;h3 id=&#34;windows&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows&#34;&gt;#&lt;/a&gt; Windows&lt;/h3&gt;
&lt;h3 id=&#34;mac&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mac&#34;&gt;#&lt;/a&gt; Mac&lt;/h3&gt;
&lt;p&gt;直接使用 Homebrew 安装即可&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brew &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--cask&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;linux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux&#34;&gt;#&lt;/a&gt; Linux&lt;/h3&gt;
&lt;p&gt;下面来看看 Linux 中如何安装 Docker，这里以 &lt;strong&gt;CentOS7&lt;/strong&gt; 为例。&lt;/p&gt;
&lt;p&gt;在测试或开发环境中，Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，执行这个脚本后就会自动地将一切准备工作做好，并且把 Docker 的稳定版本安装在系统中。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-fsSL&lt;/span&gt; get.docker.com &lt;span class=&#34;token parameter variable&#34;&gt;-o&lt;/span&gt; get-docker.sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sh&lt;/span&gt; get-docker.sh &lt;span class=&#34;token parameter variable&#34;&gt;--mirror&lt;/span&gt; Aliyun&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;安装完成后直接启动服务：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl start &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;推荐设置开机自启，执行指令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl &lt;span class=&#34;token builtin class-name&#34;&gt;enable&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;几个概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#几个概念&#34;&gt;#&lt;/a&gt; 几个概念&lt;/h2&gt;
&lt;h3 id=&#34;镜像image&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#镜像image&#34;&gt;#&lt;/a&gt; 镜像（Image）&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Image 是一个只读的模板，可以用来创建多个 Container &lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;容器container&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器container&#34;&gt;#&lt;/a&gt; 容器（Container）&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Container 是根据 Image 创建的运行实例&lt;/font&gt;，Docker 利用 Container 独立运行一个或一组应用。它可以被启动、开始、停止、删除，每个 Container 都是相互隔离的、保证安全的平台。 可以把 Container 看作是一个简易的 Linux 环境和运行在其中的应用程序。Container 的定义和 Image 几乎一模一样，也是一堆层的统一视角，&lt;font color=&#39;red&#39;&gt;唯一区别在于 Container 的最上面那一层是可读可写的&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;仓库repository&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#仓库repository&#34;&gt;#&lt;/a&gt; 仓库（Repository）&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;仓库（Repository）是集中存放 Image 文件的场所&lt;/font&gt;。仓库（Repository）和仓库注册服务器（Registry）是有区别的，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Registry 上往往存放着多个 Repository，每个 Repository 中又包含了多个 Image，每个 Image 有不同的 Tag&lt;/font&gt;&lt;/strong&gt;。Repository 分为公开 Repository 和私有 Repository 两种形式，&lt;font color=&#39;red&#39;&gt;最大的公开 Repository 是 DockerHub&lt;/font&gt;，存放了数量庞大的镜像供用户下载，&lt;font color=&#39;red&#39;&gt;国内的公开仓库有阿里云、网易云&lt;/font&gt;等&lt;/p&gt;
&lt;h3 id=&#34;总结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-2&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;p&gt;通俗点说，一个 Image 就代表一个软件；而基于某个 Image 运行就是生成一个程序实例，这个程序实例就是 Container ；而 Repository 是用来存储 Docker 中所有 Image 的。&lt;/p&gt;
&lt;p&gt;其中 Repository 又分为远程 Repository 和本地 Repository。&lt;/p&gt;
&lt;p&gt;和 Maven 类似，倘若每次都从远程下载依赖，则会大大降低效率。为此，Maven 的策略是第一次访问依赖时，将其下载到本地仓库，第二次、第三次使用时直接用本地仓库的依赖即可，Docker 的远程 Repository 和本地 Repository 的作用也是类似的。&lt;/p&gt;
&lt;h2 id=&#34;初体验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初体验&#34;&gt;#&lt;/a&gt; 初体验&lt;/h2&gt;
&lt;p&gt;下面我们来对 Docker 进行一个初步的使用，这里以下载一个 MySQL 的镜像为例 &lt;code&gt;(在CentOS7下进行)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;和 GitHub 一样，Docker 也提供了一个 DockerHub 用于查询各种镜像的地址和安装教程，为此，我们先访问 DockerHub：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=&#34;&gt;https://hub.docker.com/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/dockerhub-com.png&#34; alt=&#34;DockerHub&#34; /&gt;&lt;/p&gt;
&lt;center&gt;DockerHub&lt;/center&gt;
&lt;p&gt;在左上角的搜索框中输入 &lt;code&gt;MySQL&lt;/code&gt;  并回车：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/dockerhub-mysql.png&#34; alt=&#34;DockerHub 搜索 MySQL&#34; /&gt;&lt;/p&gt;
&lt;center&gt;DockerHub 搜索 MySQL&lt;/center&gt;
&lt;p&gt;可以看到相关 MySQL 的镜像非常多，若右上角有 &lt;code&gt;OFFICIAL IMAGE&lt;/code&gt;  标识，则说明是官方镜像，所以我们点击第一个 MySQL 镜像：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/dockerhub-mysql-official-image.png&#34; alt=&#34;MySQL 官方镜像&#34; /&gt;&lt;/p&gt;
&lt;center&gt;MySQL 官方镜像&lt;/center&gt;
&lt;p&gt;右边提供了下载 MySQL 镜像的指令为 &lt;code&gt;docker pull MySQL&lt;/code&gt; ，但该指令始终会下载 MySQL 镜像的最新版本。&lt;/p&gt;
&lt;p&gt;若是想下载指定版本的镜像，则点击下面的 &lt;code&gt;View Available Tags&lt;/code&gt; ：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/dockerhub-mysql-view-available-tags.png&#34; alt=&#34;查看其他版本的 MySQL&#34; /&gt;&lt;/p&gt;
&lt;center&gt;查看其他版本的 MySQL&lt;/center&gt;
&lt;p&gt;这里就可以看到各种版本的镜像，右边有下载的指令，所以若是想下载 5.7.32 版本的 MySQL 镜像，则执行：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; pull MySQL:5.7.32&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr /&gt;
&lt;p&gt;然而下载镜像的过程是非常慢的，所以我们需要配置一下镜像源加速下载，访问 &lt;code&gt;阿里云&lt;/code&gt; 官网，点击&lt;font color=&#39;red&#39;&gt;控制台&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/docker-aliyun-mirror-admin.png&#34; alt=&#34;阿里云镜像加速&#34; /&gt;&lt;/p&gt;
&lt;center&gt;阿里云镜像加速&lt;/center&gt;
&lt;p&gt;然后点击左上角的菜单，在弹窗的窗口中，将鼠标悬停在&lt;font color=&#39;red&#39;&gt;产品与服务&lt;/font&gt;上，并在右侧搜索&lt;font color=&#39;red&#39;&gt;容器镜像服务&lt;/font&gt;，最后点击容器镜像服务：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/docker-aliyun-mirror-admin-accelerator.png&#34; alt=&#34;阿里云镜像加速&#34; /&gt;&lt;/p&gt;
&lt;center&gt;阿里云镜像加速&lt;/center&gt;
&lt;p&gt;点击左侧的镜像加速器，并依次执行右侧的配置指令即可。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; /etc/docker&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;tee&lt;/span&gt; /etc/docker/daemon.json &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;EOF&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &#34;registry-mirrors&#34;: [&#34;https://679xpnpz.mirror.aliyuncs.com&#34;]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;EOF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; systemctl daemon-reload&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; systemctl restart &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;image-指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#image-指令&#34;&gt;#&lt;/a&gt; Image 指令&lt;/h2&gt;
&lt;p&gt;若想 **&lt;font color=&#39;red&#39;&gt;查看 Docker 中当前拥有哪些镜像&lt;/font&gt;**，则可以使用  &lt;code&gt;docker images&lt;/code&gt;  命令。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@izrcf5u3j3q8xaz ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# docker images&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;REPOSITORY    TAG       IMAGE ID       CREATED         SIZE&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;MySQL         &lt;span class=&#34;token number&#34;&gt;5.7&lt;/span&gt;.32    f07dfa83b528   &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; days ago     448MB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tomcat        latest    feba8d001e3f   &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; weeks ago     649MB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nginx         latest    ae2feff98a0c   &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; weeks ago     133MB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hello-world   latest    bf756fb1ae65   &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; months ago   &lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;.3kB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其中 &lt;code&gt;REPOSITORY&lt;/code&gt; &lt;font color=&#39;red&#39;&gt;为镜像名&lt;/font&gt;， &lt;code&gt;TAG&lt;/code&gt;  为版本标志， &lt;code&gt;IMAGE ID&lt;/code&gt;  为镜像 id (唯一的)， &lt;code&gt;CREATED&lt;/code&gt;  为创建时间，注意这个时间并不是我们将镜像下载到 Docker 中的时间，而是&lt;font color=&#39;red&#39;&gt;镜像创建者创建的时间&lt;/font&gt;， &lt;code&gt;SIZE&lt;/code&gt;  为镜像大小。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;该指令能够 **&lt;font color=&#39;red&#39;&gt;根据镜像名查询指定镜像&lt;/font&gt;**：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; image MySQL&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;若如此做，则会查询出 Docker 中的所有 MySQL 镜像：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@izrcf5u3j3q8xaz ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# docker images MySQL&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;REPOSITORY   TAG       IMAGE ID       CREATED         SIZE&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;MySQL        &lt;span class=&#34;token number&#34;&gt;5.6&lt;/span&gt;       0ebb5600241d   &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; days ago     302MB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;MySQL        &lt;span class=&#34;token number&#34;&gt;5.7&lt;/span&gt;.32    f07dfa83b528   &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; days ago     448MB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;MySQL        &lt;span class=&#34;token number&#34;&gt;5.5&lt;/span&gt;       d404d78aa797   &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt; months ago   205MB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;该指令还能够携带 &lt;code&gt;-q&lt;/code&gt;  参数： &lt;code&gt;docker images -q&lt;/code&gt;  ，  &lt;code&gt;-q&lt;/code&gt; &lt;font color=&#39;red&#39;&gt;表示仅显示镜像的 id&lt;/font&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@izrcf5u3j3q8xaz ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# docker images -q&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;0ebb5600241d&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;f07dfa83b528&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;feba8d001e3f&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;d404d78aa797&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr /&gt;
&lt;p&gt;若是要 **&lt;font color=&#39;red&#39;&gt;下载指定版本的镜像&lt;/font&gt;**，则使用：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; pull MySQL:5.7&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;docker pull&lt;/code&gt;  是固定的，后面写上需要下载的镜像名及版本标志；若是不写版本标志，而是直接执行 &lt;code&gt;docker pull MySQL&lt;/code&gt; ，则会下载镜像的最新版本。&lt;/p&gt;
&lt;p&gt;一般在下载镜像前我们需要 **&lt;font color=&#39;red&#39;&gt;搜索一下镜像有哪些版本&lt;/font&gt;** 才能对指定版本进行下载，使用指令：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; search MySQL&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/docker-search-mysql-terminal.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;不过该指令只能查看 MySQL 相关的镜像信息，而不能知道有哪些版本，若想知道版本，则只能这样查询：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; search MySQL:5.5&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;若是查询的版本不存在，则结果为空：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/docker-search-mysql-404-terminal.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;**&lt;font color=&#39;red&#39;&gt;删除镜像&lt;/font&gt;** 使用指令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; image &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; MySQL:5.5&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;若是不指定版本，则默认删除的也是最新版本。&lt;/p&gt;
&lt;p&gt;还可以通过&lt;font color=&#39;red&#39;&gt;指定镜像 id 进行删除&lt;/font&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; image &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; bf756fb1ae65&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然而此时报错了：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@izrcf5u3j3q8xaz ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# docker image rm bf756fb1ae65&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Error response from daemon: conflict: unable to delete bf756fb1ae65 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;must be forced&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; - image is being used by stopped container d5b6c177c151&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是因为要删除的 &lt;code&gt;hello-world&lt;/code&gt;  镜像正在运行中，所以无法删除镜像，此时需要&lt;font color=&#39;red&#39;&gt;强制执行删除&lt;/font&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; image &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; bf756fb1ae65&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;font color=&#39;red&#39;&gt;该指令会将镜像和通过该镜像执行的容器全部删除，谨慎使用&lt;/font&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Docker 还提供了 **&lt;font color=&#39;red&#39;&gt;删除镜像的简化版本&lt;/font&gt;**： &lt;code&gt;docker rmi 镜像名:版本标志&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;此时我们即可借助 &lt;code&gt;rmi&lt;/code&gt;  和 &lt;code&gt;-q&lt;/code&gt;  进行一些联合操作，比如现在想删除所有的 MySQL 镜像，那么你需要查询出 MySQL 镜像的 id，并根据这些 id 一个一个地执行 &lt;code&gt;docker rmi&lt;/code&gt;  进行删除，但是现在，我们可以这样：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; rmi &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; images MySQL &lt;span class=&#34;token parameter variable&#34;&gt;-q&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;首先通过 &lt;code&gt;docker images MySQL -q&lt;/code&gt;  查询出 MySQL 的所有镜像 id， &lt;code&gt;-q&lt;/code&gt;  表示仅查询 id，并将这些 id 作为参数传递给 &lt;code&gt;docker rmi -f&lt;/code&gt;  指令，这样所有的 MySQL 镜像就都被删除了。&lt;/p&gt;
&lt;h2 id=&#34;container-指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#container-指令&#34;&gt;#&lt;/a&gt; Container 指令&lt;/h2&gt;
&lt;p&gt;掌握了镜像的相关指令之后，我们需要了解一下容器的指令，容器是基于镜像的。&lt;/p&gt;
&lt;p&gt;若需要 **&lt;font color=&#39;red&#39;&gt;通过 Image 运行一个 Container&lt;/font&gt;**，则使用：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run tomcat:8.0-jre8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当然了，运行的前提是你拥有这个镜像，所以&lt;font color=&#39;red&#39;&gt;先下载镜像&lt;/font&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; pull tomcat:8.0-jre8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr /&gt;
&lt;p&gt;下载完成后就可以运行了，运行后 **&lt;font color=&#39;red&#39;&gt;查看一下当前运行的 Container&lt;/font&gt;**： &lt;code&gt;docker ps&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/docker-ps-terminal.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;CONTAINER_ID&lt;/code&gt;  为容器的 id， &lt;code&gt;IMAGE&lt;/code&gt;  为镜像名， &lt;code&gt;COMMAND&lt;/code&gt; &lt;font color=&#39;red&#39;&gt;为容器内执行的命令&lt;/font&gt;， &lt;code&gt;CREATED&lt;/code&gt;  为容器的创建时间， &lt;code&gt;STATUS&lt;/code&gt;  为容器的状态， &lt;code&gt;PORTS&lt;/code&gt; &lt;font color=&#39;red&#39;&gt;为容器内服务监听的端口&lt;/font&gt;， &lt;code&gt;NAMES&lt;/code&gt; &lt;font color=&#39;red&#39;&gt;为容器的名称&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;该指令有几个参数，比如 &lt;code&gt;-a&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;该参数会&lt;font color=&#39;red&#39;&gt;将运行和非运行的容器全部列举出来&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-q&lt;/code&gt;  参数将&lt;font color=&#39;red&#39;&gt;查询结果只显示容器 id&lt;/font&gt;： &lt;code&gt;docker ps -q&lt;/code&gt;  。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@izrcf5u3j3q8xaz ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# docker ps -q&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;f3aac8ee94a3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;074bf575249b&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;1d557472a708&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;4421848ba294&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;若是组合使用，则查询运行和非运行的所有容器 id： &lt;code&gt;docker ps -qa&lt;/code&gt;  。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@izrcf5u3j3q8xaz ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# docker ps -aq&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;f3aac8ee94a3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;7f7b0e80c841&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;074bf575249b&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a1e830bddc4c&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;1d557472a708&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;4421848ba294&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b0440c0a219a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;c2f5d78c5d1a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;5831d1bab2a6&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;d5b6c177c151&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr /&gt;
&lt;p&gt;通过该方式运行的 tomcat 是不能直接被外部访问的，因为容器具有隔离性，若是想直接通过 8080 端口访问容器内部的 tomcat，则需要 **&lt;font color=&#39;red&#39;&gt;对宿主机端口与 Container 内的端口进行映射&lt;/font&gt;**：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8080&lt;/span&gt;:8080 tomcat:8.0-jre8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;解释一下这两个端口的作用 ( &lt;code&gt;8080:8080&lt;/code&gt; )，&lt;font color=&#39;red&#39;&gt;第一个为宿主机端口，第二个为容器内的端口&lt;/font&gt;，外部访问 8080 端口就会通过映射访问容器内的 8080 端口。&lt;/p&gt;
&lt;p&gt;此时外部就可以访问 Tomcat 了：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/docker-run-tomact-8080.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;若是这样进行映射：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8088&lt;/span&gt;:8080 tomcat:8.0-jre8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;则外部需访问 8088 端口才能访问 tomcat，需要注意的是，每次运行的容器都是相互独立的，所以&lt;font color=&#39;red&#39;&gt;同时运行多个 tomcat 容器并不会产生端口的冲突&lt;/font&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;通过 &lt;code&gt;-d&lt;/code&gt; ，容器还能够以后台的方式运行&lt;/font&gt;，这样就不会占用终端：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8080&lt;/span&gt;:8080 tomcat:8.0-jre8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;启动容器时默认会给容器一个名称，但&lt;font color=&#39;red&#39;&gt;容器名称其实是可以通过 &lt;code&gt;--name&lt;/code&gt;  设置的&lt;/font&gt;，使用指令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8080&lt;/span&gt;:8080 &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; tomcat01 tomcat:8.0-jre8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此时的容器名称即为 tomcat01，&lt;font color=&#39;red&#39;&gt;容器名称必须是唯一的&lt;/font&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;接下来是 **&lt;font color=&#39;red&#39;&gt;容器的运行、重启、暂停、杀死&lt;/font&gt;** 指令，因为非常简单，就不过多介绍了。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; start c2f5d78c5d1a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过该指令能够将已经停止运行的容器运行起来，可以通过容器的 id 启动，也可以通过容器的名称启动。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; restart c2f5d78c5d1a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;该指令能够重启指定的容器。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; stop c2f5d78c5d1a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;该指令能够停止指定的容器。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;kill&lt;/span&gt; c2f5d78c5d1a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;该指令能够直接杀死指定的容器。&lt;/p&gt;
&lt;p&gt;以上指令&lt;font color=&#39;red&#39;&gt;都能够通过容器的 id 和容器名称两种方式配合使用&lt;/font&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;当容器被停止之后，容器虽然不再运行了，但仍然是存在的，若是想 **&lt;font color=&#39;red&#39;&gt;删除容器&lt;/font&gt;**，则使用指令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; d5b6c177c151&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;需要注意的是&lt;font color=&#39;red&#39;&gt;容器的 id 无需全部写出来，只需唯一标识即可&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;若是想 **&lt;font color=&#39;red&#39;&gt;删除正在运行的容器&lt;/font&gt;**，则需要添加 &lt;code&gt;-f&lt;/code&gt;  参数强制删除：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; d5b6c177c151&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;若是想 **&lt;font color=&#39;red&#39;&gt;删除所有容器&lt;/font&gt;**，则可以使用组合指令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-qa&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;先通过 &lt;code&gt;docker ps -qa&lt;/code&gt;  查询出所有容器的 id，然后通过 &lt;code&gt;docker rm -f&lt;/code&gt;  进行删除。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;当容器以后台的方式运行时，我们无法知晓容器的运行状态，若此时需要 **&lt;font color=&#39;red&#39;&gt;查看容器的运行日志&lt;/font&gt;**，则使用指令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; logs 289cc00dc5ed&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这样的方式显示的日志并不是实时的，若是想&lt;font color=&#39;red&#39;&gt;实时显示&lt;/font&gt;，需要使用 &lt;code&gt;-f&lt;/code&gt;  参数：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; logs &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; 289cc00dc5ed&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过 &lt;code&gt;-t&lt;/code&gt;  参数还能够&lt;font color=&#39;red&#39;&gt;显示日志的时间戳&lt;/font&gt;，通常与 &lt;code&gt;-f&lt;/code&gt;  参数联合使用：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; logs &lt;span class=&#34;token parameter variable&#34;&gt;-ft&lt;/span&gt; 289cc00dc5ed&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;查看容器内运行了哪些进程&lt;/font&gt;&lt;/strong&gt;，可以使用指令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;top&lt;/span&gt; 289cc00dc5ed&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;若是 **&lt;font color=&#39;red&#39;&gt;想与容器进行交互&lt;/font&gt;**，则使用指令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-it&lt;/span&gt; 289cc00dc5ed &lt;span class=&#34;token function&#34;&gt;bash&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;font color=&#39;red&#39;&gt;此时终端将会进入容器内部，执行的指令都将在容器中生效&lt;/font&gt;，在容器内只能执行一些比较简单的指令，如：ls、cd 等，若是想退出容器终端，重新回到 CentOS 中，则执行 &lt;code&gt;exit&lt;/code&gt;  即可。&lt;/p&gt;
&lt;p&gt;现在我们已经能够进入容器终端执行相关操作了，那么该如何向 tomcat 容器中部署一个项目呢？&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; ./test.html 289cc00dc5ed:/usr/local/tomcat/webapps&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过 &lt;code&gt;docker cp&lt;/code&gt;  指令能够将文件从 CentOS 复制到容器中， &lt;code&gt;./test.html&lt;/code&gt;  为 CentOS 中的资源路径， &lt;code&gt;289cc00dc5ed&lt;/code&gt;  为容器 id， &lt;code&gt;/usr/local/tomcat/webapps&lt;/code&gt;  为容器的资源路径，此时 &lt;code&gt;test.html&lt;/code&gt;  文件将会被复制到该路径下。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@izrcf5u3j3q8xaz ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# docker exec -it 289cc00dc5ed bash&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root@289cc00dc5ed:/usr/local/tomcat&lt;span class=&#34;token comment&#34;&gt;# cd webapps&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root@289cc00dc5ed:/usr/local/tomcat/webapps&lt;span class=&#34;token comment&#34;&gt;# ls&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;test.html&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root@289cc00dc5ed:/usr/local/tomcat/webapps&lt;span class=&#34;token comment&#34;&gt;#&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;若是想将容器内的文件复制到 CentOS 中，则反过来写即可：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; 289cc00dc5ed:/usr/local/tomcat/webapps/test.html ./&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;所以现在若是想要部署项目，则先将项目上传到 CentOS，然后将项目从 CentOS 复制到容器内，此时启动容器即可。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;虽然使用 Docker 启动软件环境非常简单，但同时也面临着一个问题，我们无法 **&lt;font color=&#39;red&#39;&gt;查看容器内部具体的细节，比如监听的端口、绑定的 ip 地址等等&lt;/font&gt;**，好在这些 Docker 都帮我们想到了，只需使用指令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; inspect 923c969b0d91&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/docker-inspect-terminal.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最后再介绍几个容器和镜像相关的指令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; commit &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;描述信息&#34;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;镜像作者&#34;&lt;/span&gt; tomcat01 my_tomcat:1.0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;tomcat01 为 Container 名称，my_tomcat 为打包后的 Image 名称，1.0 是对应的 tag。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;该指令能够 **&lt;font color=&#39;red&#39;&gt;将 Container 打包成一个 Image&lt;/font&gt;**，此时查询镜像：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos-7 _data&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# docker images&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;my_tomcat           &lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt;                 79ab047fade5        &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; seconds ago       463MB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tomcat              &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;                   a041be4a5ba5        &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; weeks ago         533MB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;MySQL               latest              db2b37ec6181        &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; months ag&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;若是想 **&lt;font color=&#39;red&#39;&gt;将 Image 备份出来&lt;/font&gt;** 出来，则可以使用指令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; save my_tomcat:1.0 &lt;span class=&#34;token parameter variable&#34;&gt;-o&lt;/span&gt; my-tomcat-1.0.tar&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos-7 ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# docker save my_tomcat:1.0 -o my-tomcat-1.0.tar&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos-7 ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# ls&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;anaconda-ks.cfg  initial-setup-ks.cfg  公共  视频  文档  音乐&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;get-docker.sh    my-tomcat-1.0.tar     模板  图片  下载  桌面&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;将 .tar 格式的 Image 加载到 Docker 中&lt;/font&gt;&lt;/strong&gt;，执行指令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; load &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; my-tomcat-1.0.tar&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root@centos-7 ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# docker load -i my-tomcat-1.0.tar&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b28ef0b6fef8: Loading layer &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;105&lt;/span&gt;.5MB/105.5MB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;0b703c74a09c: Loading layer &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;23&lt;/span&gt;.99MB/23.99MB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Loaded image: my_tomcat:1.0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos-7 ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# docker images&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;my_tomcat           &lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt;                 79ab047fade5        &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt; minutes ag&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;数据卷volume&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据卷volume&#34;&gt;#&lt;/a&gt; 数据卷（volume）&lt;/h2&gt;
&lt;p&gt;学习了容器的相关指令之后，我们来了解一下&lt;font color=&#39;red&#39;&gt; Docker 中的数据卷，它能够实现&lt;strong&gt;宿主机与容器之间的文件共享&lt;/strong&gt;，它的好处在于我们&lt;strong&gt;对宿主机的文件进行修改将直接影响容器&lt;/strong&gt;，而无需再将宿主机的文件再复制到容器中&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;现在若是想将宿主机中 &lt;code&gt;/opt/apps&lt;/code&gt;  目录与容器中 &lt;code&gt;webapps&lt;/code&gt;  目录 **&lt;font color=&#39;red&#39;&gt;做一个数据卷&lt;/font&gt;**，则应该通过 &lt;code&gt;-v&lt;/code&gt;  参数这样编写指令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8080&lt;/span&gt;:8080 &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; tomcat01 &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; /opt/apps:/usr/local/tomcat/webapps tomcat:8.0-jre8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然而此时访问 tomcat 会发现无法访问：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/docker-data-volume-webapp-8080.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这就说明我们的数据卷设置成功了，Docker 会将容器内的 &lt;code&gt;webapps&lt;/code&gt;  目录与 &lt;code&gt;/opt/apps&lt;/code&gt;  目录进行同步，而此时 &lt;code&gt;/opt/apps&lt;/code&gt;  目录是空的，导致 &lt;code&gt;webapps&lt;/code&gt;  目录也会变成空目录，所以就访问不到了。&lt;/p&gt;
&lt;p&gt;此时我们只需向 &lt;code&gt;/opt/apps&lt;/code&gt;  目录下添加文件，就会使得 &lt;code&gt;webapps&lt;/code&gt;  目录也会拥有相同的文件，达到文件共享，测试一下：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos-7 opt&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cd apps/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos-7 apps&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# vim test.html&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos-7 apps&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# ls&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;test.html&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos-7 apps&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cat test.html&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;h&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;1&lt;/span&gt;&gt;&lt;/span&gt;This is a &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt; html&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;/h&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;1&lt;/span&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 &lt;code&gt;/opt/apps&lt;/code&gt;  目录下创建了一个  &lt;code&gt;test.html&lt;/code&gt;  文件，那么容器内的 &lt;code&gt;webapps&lt;/code&gt;  目录是否会有该文件呢？进入容器的终端：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos-7 apps&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# docker exec -it tomcat01 bash&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root@115155c08687:/usr/local/tomcat&lt;span class=&#34;token comment&#34;&gt;# cd webapps/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root@115155c08687:/usr/local/tomcat/webapps&lt;span class=&#34;token comment&#34;&gt;# ls&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;test.html&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;容器内确实已经有了该文件，那接下来我们编写一个简单的 Web 应用：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HelloServlet&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServlet&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doGet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; req&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; resp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        resp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getWriter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello World!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doPost&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; req&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; resp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;doGet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;req&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;resp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是一个非常简单的 Servlet，我们将其打包上传到 &lt;code&gt;/opt/apps&lt;/code&gt;  中，那么容器内肯定就会同步到该文件，此时进行访问：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/docker-data-volume-webapp-8080-hello-world.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这种方式设置的数据卷称为&lt;font color=&#39;red&#39;&gt;自定义数据卷&lt;/font&gt;，因为数据卷的目录是由我们自己设置的，Docker 还为我们提供了 **&lt;font color=&#39;red&#39;&gt;另外一种设置数据卷的方式&lt;/font&gt;**：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8080&lt;/span&gt;:8080 &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; tomcat01 &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; aa:/usr/local/tomcat/webapps tomcat:8.0-jre8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此时的 &lt;code&gt;aa&lt;/code&gt;  并不是数据卷的目录，而是&lt;font color=&#39;red&#39;&gt;数据卷的别名&lt;/font&gt;，Docker 会为我们自动创建一个名为 &lt;code&gt;aa&lt;/code&gt;  的数据卷，并且会将容器内 &lt;code&gt;webapps&lt;/code&gt;  目录下的所有内容复制到数据卷中，&lt;font color=&#39;red&#39;&gt;该数据卷的位置在&lt;/font&gt; &lt;code&gt;/var/lib/docker/volumes&lt;/code&gt;  目录下：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos-7 volumes&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# pwd&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/var/lib/docker/volumes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos-7 volumes&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cd aa/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos-7 aa&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# ls&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;_data&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos-7 aa&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cd _data/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@centos-7 _data&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# ls&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docs  examples  host-manager  manager  ROOT&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此时我们只需修改该目录的内容就能能够影响到容器。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/project/12306/12306%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
            <title>12306项目学习笔记</title>
            <link>http://example.com/project/12306/12306%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
            <pubDate>Thu, 18 Jan 2024 20:27:39 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;项目介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目介绍&#34;&gt;#&lt;/a&gt; 项目介绍&lt;/h1&gt;
&lt;h2 id=&#34;项目简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目简介&#34;&gt;#&lt;/a&gt; 项目简介&lt;/h2&gt;
&lt;p&gt;提供了两种版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SpringBoot 聚合服务版本&lt;/strong&gt;：适合测试和部署，可以直接启动  &lt;code&gt;aggregation-service&lt;/code&gt;  聚合服务和网关服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SpringCloud 微服务版本&lt;/strong&gt;：适合学习微服务设计，可以分别启动支付、订单、用户、购票和网关服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/12306-base-biz-20230801.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;12306基础业务&lt;/center&gt;
&lt;p&gt;在系统设计中，采用最新 JDK17 + SpringBoot3&amp;amp;SpringCloud &lt;strong&gt;微服务架构&lt;/strong&gt;，构建高并发、大数据量下仍然能提供高效可靠的 12306 购票服务。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1676637853202-c2af9e93-fe03-4c01-9fed-20ca07263476.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;常见的微服务架构&lt;/center&gt;
&lt;p&gt;下方的&lt;strong&gt;架构图&lt;/strong&gt;全面描述了项目的服务集合、组件库列表和基础设置层等要素，有助于用户快速了解 12306 平台的顶层设计和业务细节，从零到一进行构建。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802104007774.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;12306项目架构图&lt;/center&gt;
&lt;p&gt;项目中的文档包括三部分，&lt;strong&gt;快速开始&lt;/strong&gt;、&lt;strong&gt;核心技术文档&lt;/strong&gt;以及&lt;strong&gt;从零到一开发&lt;/strong&gt;。可根据自己的兴趣选择深入了解核心技术或从零到一复刻系统。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-machen.oss-cn-beijing.aliyuncs.com/12306%E6%96%87%E7%AB%A0%E7%BB%93%E6%9E%84-20230917.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;12306文章结构&lt;/center&gt;
&lt;h2 id=&#34;技术架构选型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技术架构选型&#34;&gt;#&lt;/a&gt; 技术架构选型&lt;/h2&gt;
&lt;h2 id=&#34;接口文档&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口文档&#34;&gt;#&lt;/a&gt; 接口文档&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcGlmb3guY29tL2FwaWRvYy9zaGFyZWQtODZkOWQzYmUtOGExNS00NTNmLTg1YTYtNDQyMDE4MGE5MTVlL2FwaS04NTYyNzc3OA==&#34;&gt;用户登录 - 12306 (apifox.com)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;学习路线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#学习路线&#34;&gt;#&lt;/a&gt; 学习路线&lt;/h2&gt;
&lt;p&gt;12306 铁路购票系统的学习主要分为三块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;组件库开发&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;业务梳理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;业务系统开发&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240119014418408.png&#34; alt=&#34;image-20240119014418408&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;组件库开发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组件库开发&#34;&gt;#&lt;/a&gt; 组件库开发&lt;/h3&gt;
&lt;p&gt;组件库的产出源于&lt;font color=&#39;red&#39;&gt;对公共功能的封装&lt;/font&gt;，避免了在不同项目之间相互复制代码的情况。当然，如果这种复制代码的方式出现问题，那么需要同时对所有项目进行改造，从成本和优雅设计的角度来看并不可取。&lt;/p&gt;
&lt;p&gt;为了统一各个项目可能使用的公共内容，我们在这里规划了常用且通用的功能点，供大家使用，以提高编码效率。如果有一些好的想法，在通用的前提下，可以联系我们将其加入到各自语义的起始包中。&lt;/p&gt;
&lt;p&gt;组件库的开发宗旨是汇总资源，更高效地提供业务敏捷开发的能力，后续的迭代也将遵循这一原则。目前，这只是一个起点，是整体规划的一部分，还有许多可以提升的空间。&lt;/p&gt;
&lt;p&gt;目前&lt;font color=&#39;red&#39;&gt;已有组件如下&lt;/font&gt;，可能新增加的组件更新不及时，实际以代码库  &lt;code&gt;/frameworks&lt;/code&gt;  目录下为准。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://user-images.githubusercontent.com/77398366/229265310-7fa8b406-b621-4334-91d6-911c0b95dce3.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;业务梳理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#业务梳理&#34;&gt;#&lt;/a&gt; 业务梳理&lt;/h3&gt;
&lt;p&gt;在 12306 铁路购票系统中，包括会员、购票、订单、支付以及网关服务。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/12306_biz_20230720-1.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;系统开发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统开发&#34;&gt;#&lt;/a&gt; 系统开发&lt;/h3&gt;
&lt;p&gt;当你对 12306 系统的业务有了初步认识，就可以考虑对这个系统进行从零到一的开发。&lt;/p&gt;
&lt;p&gt;在正式开发框架之前，你需要把一些&lt;strong&gt;前置技术&lt;/strong&gt;都有一定的掌握。不然极有可能是稀里糊涂的写，虽然写完了，但是吸收情况达不到最终的理想效果。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;技术&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;官网&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Spring Boot&lt;/td&gt;
&lt;td&gt;基础框架&lt;/td&gt;
&lt;td&gt;3.0.7&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWJvb3Q=&#34;&gt;https://spring.io/projects/spring-boot(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;MyBatis-Plus&lt;/td&gt;
&lt;td&gt;持久层框架&lt;/td&gt;
&lt;td&gt;3.5.3.1&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYW9taWRvdS5jb20v&#34;&gt;https://baomidou.com(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;HikariCP&lt;/td&gt;
&lt;td&gt;数据库连接池&lt;/td&gt;
&lt;td&gt;5.0.1&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JyZXR0d29vbGRyaWRnZS9IaWthcmlDUA==&#34;&gt;https://github.com/brettwooldridge/HikariCP(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Redis&lt;/td&gt;
&lt;td&gt;分布式缓存数据库&lt;/td&gt;
&lt;td&gt;Latest&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby8=&#34;&gt;https://redis.io(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;RocketMQ&lt;/td&gt;
&lt;td&gt;消息队列&lt;/td&gt;
&lt;td&gt;2.2.3&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yb2NrZXRtcS5hcGFjaGUub3JnLw==&#34;&gt;https://rocketmq.apache.org(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;ShardingSphere&lt;/td&gt;
&lt;td&gt;数据库生态系统&lt;/td&gt;
&lt;td&gt;5.3.2&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaGFyZGluZ3NwaGVyZS5hcGFjaGUub3JnLw==&#34;&gt;https://shardingsphere.apache.org(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;SpringCloud Alibaba&lt;/td&gt;
&lt;td&gt;分布式框架&lt;/td&gt;
&lt;td&gt;2022.0.0.0-RC2&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvc3ByaW5nLWNsb3VkLWFsaWJhYmE=&#34;&gt;https://github.com/alibaba/spring-cloud-alibaba(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;SpringCloud Gateway&lt;/td&gt;
&lt;td&gt;网关框架&lt;/td&gt;
&lt;td&gt;2022.0.3&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3VkLWdhdGV3YXk=&#34;&gt;https://spring.io/projects/spring-cloud-gateway(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;FastJson2&lt;/td&gt;
&lt;td&gt;JSON 序列化工具&lt;/td&gt;
&lt;td&gt;2.0.36&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvZmFzdGpzb24y&#34;&gt;https://github.com/alibaba/fastjson2(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Canal&lt;/td&gt;
&lt;td&gt;BinLog 订阅组件&lt;/td&gt;
&lt;td&gt;1.1.6&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvY2FuYWw=&#34;&gt;https://github.com/alibaba/canal(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;HuTool&lt;/td&gt;
&lt;td&gt;小而全的工具集项目&lt;/td&gt;
&lt;td&gt;5.8.2&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odXRvb2wuY24v&#34;&gt;https://hutool.cn(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;Swagger3&lt;/td&gt;
&lt;td&gt;项目 API 文档框架&lt;/td&gt;
&lt;td&gt;3.x&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3N3YWdnZXIuaW8v&#34;&gt;http://swagger.io(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;Knife4j&lt;/td&gt;
&lt;td&gt;Swagger 增强框架&lt;/td&gt;
&lt;td&gt;3.x&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2MueGlhb21pbmZvLmNvbS8=&#34;&gt;https://doc.xiaominfo.com(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;Maven&lt;/td&gt;
&lt;td&gt;项目构建管理&lt;/td&gt;
&lt;td&gt;3.9.1&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21hdmVuLmFwYWNoZS5vcmcv&#34;&gt;http://maven.apache.org(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;Redisson&lt;/td&gt;
&lt;td&gt;Redis Java 客户端&lt;/td&gt;
&lt;td&gt;3.21.3&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpc3Nvbi5vcmcv&#34;&gt;https://redisson.org(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;Sentinel&lt;/td&gt;
&lt;td&gt;流控防护框架&lt;/td&gt;
&lt;td&gt;1.8.6&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvU2VudGluZWw=&#34;&gt;https://github.com/alibaba/Sentinel(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;Hippo4j&lt;/td&gt;
&lt;td&gt;动态线程池框架&lt;/td&gt;
&lt;td&gt;1.5.0&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oaXBwbzRqLmNuLw==&#34;&gt;https://hippo4j.cn(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;XXL-Job&lt;/td&gt;
&lt;td&gt;分布式定时任务框架&lt;/td&gt;
&lt;td&gt;2.4.0&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy54dXh1ZWxpLmNvbS94eGwtam9i&#34;&gt;http://www.xuxueli.com/xxl-job(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;SkyWalking&lt;/td&gt;
&lt;td&gt;分布式链路追踪框架&lt;/td&gt;
&lt;td&gt;9.5.0&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9za3l3YWxraW5nLmFwYWNoZS5vcmcv&#34;&gt;https://skywalking.apache.org(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;JetCache&lt;/td&gt;
&lt;td&gt;Java 缓存框架&lt;/td&gt;
&lt;td&gt;2.7.3&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvamV0Y2FjaGU=&#34;&gt;https://github.com/alibaba/jetcache(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;TTL&lt;/td&gt;
&lt;td&gt;增强版 ThreadLocal&lt;/td&gt;
&lt;td&gt;2.14.3&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvdHJhbnNtaXR0YWJsZS10aHJlYWQtbG9jYWw=&#34;&gt;https://github.com/alibaba/transmittable-thread-local(opens new window)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;另外，我们在手摸手从零到一开发章节中，会有非常详细的系列教程，帮助大家梳理以及开发。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230917193923363.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;快速开始&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快速开始&#34;&gt;#&lt;/a&gt; 快速开始&lt;/h1&gt;
&lt;h2 id=&#34;克隆项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#克隆项目&#34;&gt;#&lt;/a&gt; 克隆项目&lt;/h2&gt;
&lt;h3 id=&#34;拉取项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拉取项目&#34;&gt;#&lt;/a&gt; 拉取项目&lt;/h3&gt;
&lt;p&gt;打开 Gitee 项目地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vbmFnZW9mZmVyLzEyMzA2&#34;&gt;https://gitee.com/nageoffer/12306&lt;/span&gt; 复制对应的 SSH 或 HTTP 克隆地址。&lt;/p&gt;
&lt;p&gt;12306 现在的代码还在不断更新迭代，每次打开项目都可以选择  &lt;code&gt;Pull&lt;/code&gt;  下最新代码。&lt;/p&gt;
&lt;p&gt;打开 IntelliJ  IDEA，菜单栏顶部找到  &lt;code&gt;Git -&amp;gt; Clone&lt;/code&gt;  选项，等待克隆及 Maven 初始化即可。&lt;/p&gt;
&lt;p&gt;拉下来后，可在项目根目录执行  &lt;code&gt;mvn clean install&lt;/code&gt;  测试是否具备运行环境。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;⚠️&lt;/strong&gt; &lt;strong&gt;重要提示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;建议大家在打开项目时，都执行下  &lt;code&gt;Update Project&lt;/code&gt;  流程&lt;/font&gt;，因为代码目前还在快速迭代中，避免错过新功能。&lt;/p&gt;
&lt;h3 id=&#34;服务模块列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务模块列表&#34;&gt;#&lt;/a&gt; 服务模块列表&lt;/h3&gt;
&lt;h4 id=&#34;springboot-单体版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springboot-单体版本&#34;&gt;#&lt;/a&gt; SpringBoot 单体版本&lt;/h4&gt;
&lt;p&gt;如果你想&lt;font color=&#39;red&#39;&gt;以小成本启动前后端系统&lt;/font&gt;，后端项目仅启动  &lt;code&gt;aggregation-service&lt;/code&gt;  和  &lt;code&gt;gateway-service&lt;/code&gt;  服务即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q： &lt;code&gt;aggregation-service&lt;/code&gt;  服务是做什么的？&lt;/p&gt;
&lt;p&gt;A：为了减少大家本地启动内存压力以及服务器部署压力，将订单、支付、用户以及购票系统进行了聚合，启动网关和  &lt;code&gt;aggregation-service&lt;/code&gt;  服务即可享受 12306 购票系统全部功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;springcloud-分布式版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springcloud-分布式版本&#34;&gt;#&lt;/a&gt; SpringCloud 分布式版本&lt;/h4&gt;
&lt;p&gt;如果你是想跑&lt;font color=&#39;red&#39;&gt;微服务全流程&lt;/font&gt;，需依次启动  &lt;code&gt;pay-service&lt;/code&gt; 、 &lt;code&gt;order-service&lt;/code&gt; 、 &lt;code&gt;ticket-service&lt;/code&gt; 、 &lt;code&gt;user-service&lt;/code&gt;  以及  &lt;code&gt;gateway-service&lt;/code&gt;  等服务。&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;figcaption data-lang=&#34;plain&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── aggregation-service  || -- # 聚合服务&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── gateway-service  || -- # 网关服务&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── order-service  || -- # 订单服务&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── pay-service  || -- # 支付服务&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── ticket-service  || -- # 购票服务&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;└── user-service  || -- # 用户服务&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;项目工程的目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目工程的目录结构&#34;&gt;#&lt;/a&gt; 项目工程的目录结构&lt;/h3&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── checkstyle  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 代码格式检查组件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── 12306_checkstyle.xml  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 代码格式检查组件规则配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   └── 12306_checkstyle_suppression.xml  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 忽略代码格式检查组件规则配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── console-vue  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;#  12306 前端控制台项目&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── README.md&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── babel.config.js&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── jsconfig.json&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── node_modules&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── package.json&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── public&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── src&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── vue.config.js&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   └── yarn.lock&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── dependencies  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;#  12306 后端项目全局依赖版本控制&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   └── pom.xml&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── &lt;span class=&#34;token function&#34;&gt;format&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;#  12306 后端项目格式化组件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── 12306_spotless_formatter.xml  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;#  12306 后端项目格式化组件规则配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   └── license-header  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;#  12306 后端项目开源协议头格式化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── frameworks  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;#  12306 基础架构组件库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── base  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;#  12306 顶层抽象基础组件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── bizs  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;#  12306 业务相关基础组件，比如用户上下文等&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── cache  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 缓存基础组件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── common  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 公共工具包组件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── convention  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 项目规约组件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── database  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 数据库持久层组件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── designpattern  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 设计模式抽象基础组件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── distributedid  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 分布式 ID 基础组件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── idempotent  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 幂等基础组件，包括 HTTP 及不同消息队列实现&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── log  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 日志打印基础组件库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   └── web  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 Web 相关基础组件库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── pom.xml&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── resources  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 项目数据库初始化及其它&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── data  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 数据库数据初始化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   └── db  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 数据库初始化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── services  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 后端项目集合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── aggregation-service  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 SpringBoot 聚合模式服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── gateway-service  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 网关服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── order-service  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 订单服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── pay-service  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 支付服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── ticket-service  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 购票服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   └── user-service  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 用户服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── pom.xml&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;└── tests  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 单元测试集合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── general  &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; -- &lt;span class=&#34;token comment&#34;&gt;# 12306 通用单元测试&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;└── pom.xml&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── LICENSE&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── mvnw&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── mvnw.cmd&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── pom.xml&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── README.md&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;设置-jdk-版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置-jdk-版本&#34;&gt;#&lt;/a&gt; 设置 JDK 版本&lt;/h3&gt;
&lt;p&gt;12306 系统框架底层依赖 SpringBoot3，而这个版本对 JDK 的要求最低是 17。所以，我们需要 **&lt;font color=&#39;red&#39;&gt;将项目的 JDK 修改为 17 版本&lt;/font&gt;**，避免项目编译或运行报错。&lt;/p&gt;
&lt;h2 id=&#34;数据库初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库初始化&#34;&gt;#&lt;/a&gt; 数据库初始化&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;下文中 Linux 路径中出现的符号  &lt;code&gt;~&lt;/code&gt;  表示根路径  &lt;code&gt;$&amp;#123;HOME&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;安装-mysql-5736&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-mysql-5736&#34;&gt;#&lt;/a&gt; 安装 MySQL 5.7.36&lt;/h3&gt;
&lt;p&gt;Windows、Linux 以及 Mac M1 以下电脑通过以下 Docker 命令下载 MySQL 镜像，并启动 MySQL 容器：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; mysql &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3306&lt;/span&gt;:3306 &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;MYSQL_ROOT_HOST&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;root &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; mysql:5.7.36&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--name mysql&lt;/code&gt; ：指定容器的名称为 mysql。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p 3306:3306&lt;/code&gt; ：将容器的 3306 端口挂载到宿主机的 3306 端口上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e MYSQL_ROOT_HOST=&#39;%&#39;&lt;/code&gt; ：允许 root 用户在任何主机访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e MYSQL_ROOT_PASSWORD=root&lt;/code&gt; ：指定 MySQL 的 root 用户的密码为 root。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; ：以后台的方式运行，后面是  &lt;code&gt;Image:Tag&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将 MySQL 容器内的配置文件复制到 Linux 中：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 在 Linux 中新建本地目录～/docker/software/mysql/conf。-p 表示没有该目录则自动创建。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; ~/docker/software/mysql/conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将 MySQL 容器内的配置文件复制到 Linux 本地目录中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; mysql:/etc/mysql/mysql.conf.d/mysqld.cnf ~/docker/software/mysql/conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 Linux 中打开  &lt;code&gt;~/docker/software/mysql/conf&lt;/code&gt;  mysqld.cnf 文件，增加以下内容：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了后续 Canal 对接，这里直接开启 BinLog 相关配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 在 Linux 中打开配置文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; ~/docker/software/mysql/conf/mysqld.cnf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 向配置文件中添加如下内容，注意是在在 [mysqld] 目录中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;log-bin&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;mysql-bin  &lt;span class=&#34;token comment&#34;&gt;# 开启 binlog&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;binlog-format&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ROW  &lt;span class=&#34;token comment&#34;&gt;# 选择 ROW 模式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server-id&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;删除原 MySQL 容器，通过新配置创建新的容器：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 删除运行中的 MySQL 容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; mysql&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 运行 Docker 容器命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; mysql &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3306&lt;/span&gt;:3306 &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; /etc/localtime:/etc/localtime &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; ~/docker/software/mysql/conf:/etc/mysql/mysql.conf.d &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; ~/docker/software/mysql/log:/var/log/mysql &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; ~/docker/software/mysql/data:/var/lib/mysql &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;root &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; mysql:5.7.36&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/localtime&lt;/code&gt; ：时间同步&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/docker/software/mysql/conf&lt;/code&gt; ：同步 MySQL 配置文件，上面配置的内容就会覆盖容器中的配置文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/docker/software/mysql/log&lt;/code&gt; ：同步 MySQL 日志目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/docker/software/mysql/data&lt;/code&gt; ：同步 MySQL 的一些文件内容（对数据进行备份）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MYSQL_ROOT_PASSWORD=root&lt;/code&gt; ：默认 root 的密码是 root&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入到 MySQL 的命令行模式来给 root 账号授权所有 ip 能够访问。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 使用 MySQL 容器中的命令行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-it&lt;/span&gt; mysql /bin/bash&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 使用 MySQL 命令打开客户端：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mysql &lt;span class=&#34;token parameter variable&#34;&gt;-uroot&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-proot&lt;/span&gt; --default-character-set&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;utf8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 接着创建一个账户，该账号所有 IP 都能够访问&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grant all privileges on *.* to &lt;span class=&#34;token string&#34;&gt;&#39;root&#39;&lt;/span&gt; @&lt;span class=&#34;token string&#34;&gt;&#39;%&#39;&lt;/span&gt; identified by &lt;span class=&#34;token string&#34;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 刷新生效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;FLUSH PRIVILEGES&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;查看 binlog 日志是否已经开启。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 查看 binlog 日志是否开启&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;show variables like &lt;span class=&#34;token string&#34;&gt;&#39;log_%&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 查看主结点当前状态&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;show master status&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果 log_bin 为 ON，即为开启状态。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1670219063740-9658993e-ac4f-42dc-9634-d716a07dc08c.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;为了避免以后每次启动 Linux 服务器都需要手动运行 MySQL 等容器，可以将其修改为 **&lt;font color=&#39;red&#39;&gt;开机时自动运行&lt;/font&gt;**：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; update mysql &lt;span class=&#34;token parameter variable&#34;&gt;--restart&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;always&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;重启 Linux 后，通过  &lt;code&gt;sudo docker ps&lt;/code&gt;  命令验证 MySQL 已经自动运行。&lt;/p&gt;
&lt;h3 id=&#34;通过-navicat-idea-建立数据库连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过-navicat-idea-建立数据库连接&#34;&gt;#&lt;/a&gt; 通过 Navicat / IDEA 建立数据库连接&lt;/h3&gt;
&lt;p&gt;自定义连接名，IP 填写 Linux 的 IP 地址，端口号默认为 3306，用户名和密码默认为 root。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240124161737463.png&#34; alt=&#34;image-20240124161737463&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240124162008565.png&#34; alt=&#34;image-20240124162008565&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;建库建表-初始化数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建库建表-初始化数据&#34;&gt;#&lt;/a&gt; 建库建表 &amp;amp; 初始化数据&lt;/h3&gt;
&lt;p&gt;两种启动模式分别对应不同的数据库表模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SpringBoot 模式：仅分表，不分库。数据库名称是统一的  &lt;code&gt;12306&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;SpringCloud 模式：分库又分表&lt;/font&gt;&lt;/strong&gt;。数据库名称是  &lt;code&gt;12306_业务_分库数&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两种模式的分表模式一致。所以说，启动 SpringBoot 模式时，导入 12306 数据库。&lt;font color=&#39;red&#39;&gt;启动 SpringCloud 时，需要创建与 12306 相关的数据库及表结构&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;这里启动 SpringCloud 模式，执行数据库建表语句和初始化数据 SQL 文件，文件夹地址： &lt;code&gt;/resources/&amp;#123;data or db&amp;#125;/12306-springcloud-xx.sql&lt;/code&gt; ，如果后续遇到代码中关于数据库相关的报错，重新执行下对应库的 SQL 文件。&lt;/p&gt;
&lt;p&gt;MySQL 数据库中创建多个 12306 业务相关 DB，以下&lt;strong&gt;建库 SQL 可以在 IDEA 插件 “数据库” 中通过新建 “查询控制台” 执行&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240124162134366.png&#34; alt=&#34;image-20240124162134366&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240124162215075.png&#34; alt=&#34;image-20240124162215075&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DATABASE&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*!32312 IF NOT EXISTS*/&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;12306_ticket&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci */&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DATABASE&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*!32312 IF NOT EXISTS*/&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;12306_order_0&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci */&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DATABASE&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*!32312 IF NOT EXISTS*/&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;12306_order_1&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci */&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DATABASE&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*!32312 IF NOT EXISTS*/&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;12306_pay_0&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci */&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DATABASE&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*!32312 IF NOT EXISTS*/&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;12306_pay_1&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci */&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DATABASE&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*!32312 IF NOT EXISTS*/&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;12306_user_0&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci */&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DATABASE&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*!32312 IF NOT EXISTS*/&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;12306_user_1&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci */&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1）进入  &lt;code&gt;12306_ticket&lt;/code&gt;  数据库 **&lt;font color=&#39;red&#39;&gt;依次导入&lt;/font&gt;** 项目中下述建表 SQL 语句。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最好在 Navicat 中执行以下 SQL 文件，因为在 IDEA 中可能会遇到最大堆空间不足的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;resources/db/12306-springcloud-ticket.sql&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;resources/data/12306-springcloud-ticket.sql&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2）进入  &lt;code&gt;12306_user_0&lt;/code&gt;  数据库 **&lt;font color=&#39;red&#39;&gt;依次导入&lt;/font&gt;** 项目中下述建表 SQL 语句，该 SQL 文件包含了  &lt;code&gt;12306_user_0&lt;/code&gt;  和  &lt;code&gt;12306_user_1&lt;/code&gt;  两个数据库的数据。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;resources/db/12306-springcloud-user.sql&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;resources/data/12306-springcloud-user.sql&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;3）进入  &lt;code&gt;12306_pay_0&lt;/code&gt;  数据库导入项目中下述建表 SQL 语句，该 SQL 文件包含了  &lt;code&gt;12306_pay_0&lt;/code&gt;  和  &lt;code&gt;12306_pay_1&lt;/code&gt;  两个数据库的数据。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;resources/db/12306-springcloud-pay.sql&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;4）进入  &lt;code&gt;12306_order_0&lt;/code&gt;  数据库导入项目中下述建表 SQL 语句，该 SQL 文件包含了  &lt;code&gt;12306_order_0&lt;/code&gt;  和  &lt;code&gt;12306_order_1&lt;/code&gt;  两个数据库的数据。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;resources/db/12306-springcloud-order.sql&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;修改-mysql-相关的项目配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改-mysql-相关的项目配置&#34;&gt;#&lt;/a&gt; 修改 MySQL 相关的项目配置&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;在 Linux 服务器中创建好 MySQL 后，由于项目中默认的配置信息是连接到本地的 MySQL 上，因此默认的 IP 全是 127.0.0.1，需要修改成自己的 Linux 服务器 IP，即 192.168.0.2&lt;/font&gt;&lt;/strong&gt;。需要修改项目的数据库配置信息，缺点是在之后 update project 时可能冲突：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要是确认三个配置参数 &lt;code&gt;jdbcUrl&lt;/code&gt; 、 &lt;code&gt;username&lt;/code&gt; 、 &lt;code&gt;password&lt;/code&gt; ，主要是 &lt;strong&gt;IP 地址、端口号、数据库名称、用户名、密码&lt;/strong&gt;，如果不一致请记得修改。&lt;/p&gt;
&lt;p&gt;特别地，如果 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;MySQL/Redis/Nacos/RocketMQ&lt;/font&gt;&lt;/strong&gt; 是安装在 Linux 中，那么需要将  &lt;code&gt;127.0.0.1&lt;/code&gt;  修改为 Linux 的 IP 地址，例如我的是  &lt;code&gt;192.168.0.2&lt;/code&gt;  ，后续会说明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以 SpringBoot 单体服务举例，修改  &lt;code&gt;aggregation-service&lt;/code&gt;  目录中的  &lt;code&gt;shardingsphere-config-dev.yaml&lt;/code&gt;  即可：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1691894880930-7aee6932-b5a5-458f-84bb-dacf70fe4b78.png&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以 SpringCloud 微服务举例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;aggregation-service&lt;/code&gt; ：由于我采用的 SpringCloud 微服务模式不涉及该 service，因此不用修改相关配置文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gateway-service&lt;/code&gt; ：该 service 不涉及 MySQL 配置，不用修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;order-service&lt;/code&gt; 、 &lt;code&gt;pay-service&lt;/code&gt; 、 &lt;code&gt;user-service&lt;/code&gt; ：修改各自目录下的  &lt;code&gt;shardingsphere-config.yaml&lt;/code&gt;  文件，&lt;font color=&#39;red&#39;&gt;主要是 jdbcUrl 参数，将其中的 127.0.0.1 修改成 Linux 服务器 IP，即 192.168.0.2&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240124235121774.png&#34; alt=&#34;image-20240124235121774&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ticket-service&lt;/code&gt; ：修改目录下的  &lt;code&gt;application.yaml&lt;/code&gt;  文件，&lt;font color=&#39;red&#39;&gt;将 spring.datasource.url 中的 127.0.0.1 修改为 192.168.0.2&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240124235317255.png&#34; alt=&#34;image-20240124235317255&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装后端环境中间件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装后端环境中间件&#34;&gt;#&lt;/a&gt; 安装后端环境（中间件）&lt;/h2&gt;
&lt;h3 id=&#34;云环境安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云环境安装&#34;&gt;#&lt;/a&gt; 云环境安装&lt;/h3&gt;
&lt;h3 id=&#34;linux-服务器安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux-服务器安装&#34;&gt;#&lt;/a&gt; Linux 服务器安装&lt;/h3&gt;
&lt;h4 id=&#34;redis-latest&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-latest&#34;&gt;#&lt;/a&gt; Redis Latest&lt;/h4&gt;
&lt;p&gt;通过简易版方式安装，主打的就是有问题铲了重装。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt;:6379 &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; redis  &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; redis redis-server &lt;span class=&#34;token parameter variable&#34;&gt;--requirepass&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;123456&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;同样地，也将 Redis 修改为 **&lt;font color=&#39;red&#39;&gt;开机时自动运行&lt;/font&gt;**：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; update redis &lt;span class=&#34;token parameter variable&#34;&gt;--restart&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;always&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;rocketmq-451&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rocketmq-451&#34;&gt;#&lt;/a&gt; RocketMQ 4.5.1&lt;/h4&gt;
&lt;h5 id=&#34;安装-nameserver&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-nameserver&#34;&gt;#&lt;/a&gt; 安装 NameServer&lt;/h5&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9876&lt;/span&gt;:9876 &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; rmqnamesrv foxiswho/rocketmq:server-4.5.1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;安装-brocker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-brocker&#34;&gt;#&lt;/a&gt; 安装 Brocker&lt;/h5&gt;
&lt;p&gt;1）新建配置目录&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; ~/docker/software/rocketmq/conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2）新建配置文件 broker.conf&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brokerClusterName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; DefaultCluster&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brokerName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; broker-a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brokerId &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;deleteWhen &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; 04&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fileReservedTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;48&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brokerRole &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ASYNC_MASTER&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flushDiskType &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ASYNC_FLUSH&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 此处为本地 ip, 如果部署服务器，需要填写服务器外网 ip, 例如 192.168.0.2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brokerIP1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; xx.xx.xx.xx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;3）创建容器&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10911&lt;/span&gt;:10911 &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10909&lt;/span&gt;:10909 &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; rmqbroker &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--link&lt;/span&gt; rmqnamesrv:namesrv &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; ~/docker/software/rocketmq/conf/broker.conf:/etc/rocketmq/broker.conf &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;NAMESRV_ADDR=namesrv:9876&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;JAVA_OPTS=-Duser.home=/opt&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;JAVA_OPT_EXT=-server -Xms512m -Xmx512m&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;foxiswho/rocketmq:broker-4.5.1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;安装-rocketmq-控制台&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-rocketmq-控制台&#34;&gt;#&lt;/a&gt; 安装 rocketmq 控制台&lt;/h5&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; pull apacherocketmq/rocketmq-dashboard&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--link&lt;/span&gt; rmqnamesrv:namesrv &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;JAVA_OPTS=-Drocketmq.config.namesrvAddr=namesrv:9876 -Drocketmq.config.isVIPChannel=false&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; rmqconsole &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8088&lt;/span&gt;:8080 &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-t&lt;/span&gt; apacherocketmq/rocketmq-dashboard&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;运行成功，稍等几秒启动时间，浏览器输入  &lt;code&gt;localhost:8088&lt;/code&gt;  查看。&lt;/p&gt;
&lt;p&gt;同样地，也将 NameServer、Brocker、rocketmq 控制台 修改为 **&lt;font color=&#39;red&#39;&gt;开机时自动运行&lt;/font&gt;**：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; update rmqnamesrv &lt;span class=&#34;token parameter variable&#34;&gt;--restart&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;always&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; update rmqbroker &lt;span class=&#34;token parameter variable&#34;&gt;--restart&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;always&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; update rmqconsole &lt;span class=&#34;token parameter variable&#34;&gt;--restart&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;always&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;nacos-212&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nacos-212&#34;&gt;#&lt;/a&gt; Nacos 2.1.2&lt;/h4&gt;
&lt;p&gt;通过简易版方式安装，主打的就是有问题铲了重装。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8848&lt;/span&gt;:8848 &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9848&lt;/span&gt;:9848 &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; nacos2 &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;MODE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;standalone &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;TIME_ZONE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Asia/Shanghai&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nacos/nacos-server:v2.1.2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;运行成功，稍等几秒启动时间，浏览器输入  &lt;code&gt;http://localhost:8848/nacos/index.html&lt;/code&gt;  查看控制台，用户名和密码均为 nacos。&lt;/p&gt;
&lt;p&gt;同样地，也将 Nacos2 修改为 **&lt;font color=&#39;red&#39;&gt;开机时自动运行&lt;/font&gt;**：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; update nacos2 &lt;span class=&#34;token parameter variable&#34;&gt;--restart&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;always&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;修改中间件相关的项目配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改中间件相关的项目配置&#34;&gt;#&lt;/a&gt; 修改中间件相关的项目配置&lt;/h4&gt;
&lt;p&gt;如果 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Redis/Nacos/RocketMQ&lt;/font&gt;&lt;/strong&gt; 是安装在 Linux 中，那么需要修改项目中的配置信息。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;通过添加 VM options（JVM 参数）修改各 service 的配置信息，好处是不需要修改项目代码，不会冲突&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;VM options 添加方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;规则 1：-D 开头 + 参数名 = 参数值&lt;/li&gt;
&lt;li&gt;规则 2：= 两侧没有空格&lt;/li&gt;
&lt;li&gt;规则 3：不同参数之间空格分隔&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// 如下所示我们增加两个参数 Env 和 Name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-DEnv&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;prod &lt;span class=&#34;token parameter variable&#34;&gt;-DName&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;zhangsan&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/42bafc4558f74e6b83e543042cecca90.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VM options 获取方法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// System.getProperty (&#34;参数名&#34;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Env&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;由此得知，VM options 可以任意设置，即使是无用的参数也没有关系！&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，参考以下 VM options 示例模板，根据实际情况给出各个 service 的具体 VM 参数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;-Dspring.data.redis.password=Sm9sVXBOYJjI030b5tz0trjpzvZzRhtZmEbv0uOImcD1wEDOPfeaqNU4PxHob/Wp
-Dspring.data.redis.port=19389
-Dunique-name=-自定义名称，可以切换为自己的名称
-Dframework.cache.redis.prefix=自定义名称，可以切换为自己的名称:
-Dspring.data.redis.host=Redis域名
-Drocketmq.name-server=RocketMQ域名
-Dspring.cloud.nacos.discovery.server-addr=Nacos域名
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;aggregation-service&lt;/code&gt; ：SpringCloud 微服务模式并不使用该 service，因此不用修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gateway-service&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-Dunique-name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;-fantedong&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-Dspring.cloud.nacos.discovery.server-addr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.0.2:8848&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;order-service&lt;/code&gt; 、 &lt;code&gt;pay-service&lt;/code&gt; 、 &lt;code&gt;ticket-service&lt;/code&gt; ：对我而言，Redis 在安装时设定的 password 正好是项目中配置的原始密码 123456，port 也正好是 6379，因此这两个参数不需要修改。设置自定义名称 unique-name 为 fantedong 。然后因为 Redis 是在自己的 Linux 服务器中的，所以不需要设置 framework.cache.redis.prefix 。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;由于 Redis/RocketMQ/Nacos 都是安装在 Linux 服务器中，因此需要修改填写服务器的 IP 地址，即 192.168.0.2 &lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-Dunique-name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;-fantedong&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-Dspring.data.redis.host&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.0.2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-Drocketmq.name-server&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.0.2:9876&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-Dspring.cloud.nacos.discovery.server-addr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.0.2:8848&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;user-service&lt;/code&gt; ：没有用到 RocketMQ 。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-Dunique-name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;-fantedong&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-Dspring.data.redis.host&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.0.2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-Dspring.cloud.nacos.discovery.server-addr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.0.2:8848&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后，因为 VM options 可以任意设置，图个方便省事，这里为  &lt;code&gt;gateway-service&lt;/code&gt; 、 &lt;code&gt;order-service&lt;/code&gt; 、 &lt;code&gt;pay-service&lt;/code&gt; 、 &lt;code&gt;ticket-service&lt;/code&gt; 、 &lt;code&gt;user-service&lt;/code&gt;  均添加以下 VM options：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-Dunique-name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;-fantedong&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-Dspring.data.redis.host&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.0.2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-Drocketmq.name-server&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.0.2:9876&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-Dspring.cloud.nacos.discovery.server-addr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.0.2:8848&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;启动后端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动后端&#34;&gt;#&lt;/a&gt; 启动后端&lt;/h2&gt;
&lt;h3 id=&#34;将-gateway-service-配置为分布式方式启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将-gateway-service-配置为分布式方式启动&#34;&gt;#&lt;/a&gt; 将 gateway-service 配置为分布式方式启动&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;gateway-service&lt;/code&gt;  配置中默认是 SpringBoot 单体模式，如果是以分布式方式启动，需要修改  &lt;code&gt;application.yaml&lt;/code&gt;  配置文件中的属性。&lt;/p&gt;
&lt;p&gt;SpringBoot 单体模式：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; index12306&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;gateway$&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;unique&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;service&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;profiles&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;active&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; aggregation&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# active: dev&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;nacos&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;discovery&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;server-addr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 127.0.0.1&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8848&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;SpringCloud 分布式模式：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; index12306&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;gateway$&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;unique&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;service&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;profiles&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# active: aggregation&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;active&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; dev&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;nacos&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;discovery&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;server-addr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 127.0.0.1&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8848&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看到，我们将  &lt;code&gt;spring.profiles.active&lt;/code&gt;  从 aggregation 修改为了 dev。&lt;/p&gt;
&lt;p&gt;aggregation 代表着聚合模式也就是 SpringBoot 单体模式，dev 是分布式模式，分别对应两个配置文件。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1691039852586-c1cadfec-3770-4eb0-89b1-7625d640c559.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通过 Spring 机制，加载不同的配置文件，起到网关调用不同模式服务的作用。&lt;/p&gt;
&lt;p&gt;星球小伙伴修改网关配置后，问题得到解决。&lt;/p&gt;
&lt;p&gt;实际上，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;还是建议通过添加 VM options 的方式更改此配置&lt;/font&gt;&lt;/strong&gt;，只需在&lt;a href=&#34;#%E4%BF%AE%E6%94%B9%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E7%9A%84%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE&#34;&gt;修改中间件相关的项目配置&lt;/a&gt;中最后确定的 VM options 基础上添加一行  &lt;code&gt;-Dspring.profiles.active=dev&lt;/code&gt;  即可：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-Dunique-name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;-fantedong&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-Dspring.data.redis.host&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.0.2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-Drocketmq.name-server&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.0.2:9876&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-Dspring.cloud.nacos.discovery.server-addr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.0.2:8848&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-Dspring.profiles.active&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;dev&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;仅修改 GatewayServiceApplication 的运行配置即可。&lt;/p&gt;
&lt;h3 id=&#34;启动后端服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动后端服务&#34;&gt;#&lt;/a&gt; 启动后端服务&lt;/h3&gt;
&lt;p&gt;如果你想&lt;font color=&#39;red&#39;&gt;以小成本启动前后端系统（SpringBoot）&lt;/font&gt;，后端项目仅启动  &lt;code&gt;aggregation-service&lt;/code&gt;  和  &lt;code&gt;gateway-service&lt;/code&gt;  服务即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q： &lt;code&gt;aggregation-service&lt;/code&gt;  服务是做什么的？&lt;/p&gt;
&lt;p&gt;A：为了减少大家本地启动内存压力以及服务器部署压力，将订单、支付、用户以及购票系统进行了聚合，启动网关和  &lt;code&gt;aggregation-service&lt;/code&gt;  服务即可享受 12306 购票系统全部功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你是想跑&lt;font color=&#39;red&#39;&gt;微服务全流程（SpringCloud）&lt;/font&gt;，需依次启动  &lt;code&gt;pay-service&lt;/code&gt; 、 &lt;code&gt;order-service&lt;/code&gt; 、 &lt;code&gt;ticket-service&lt;/code&gt; 、 &lt;code&gt;user-service&lt;/code&gt;  以及  &lt;code&gt;gateway-service&lt;/code&gt;  等服务。&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;figcaption data-lang=&#34;plain&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── aggregation-service  || -- # 聚合服务&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── gateway-service  || -- # 网关服务&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── order-service  || -- # 订单服务&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── pay-service  || -- # 支付服务&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── ticket-service  || -- # 购票服务&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;└── user-service  || -- # 用户服务&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;安装前端环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装前端环境&#34;&gt;#&lt;/a&gt; 安装前端环境&lt;/h2&gt;
&lt;h2 id=&#34;启动前端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动前端&#34;&gt;#&lt;/a&gt; 启动前端&lt;/h2&gt;
&lt;h2 id=&#34;问题调试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题调试&#34;&gt;#&lt;/a&gt; 问题调试&lt;/h2&gt;
&lt;h3 id=&#34;pay-service-目录下的-payserviceapplicationjava-启动类无法识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pay-service-目录下的-payserviceapplicationjava-启动类无法识别&#34;&gt;#&lt;/a&gt; pay-service 目录下的 PayServiceApplication.java 启动类无法识别&lt;/h3&gt;
&lt;p&gt;解决方法是右键该目录下的 java 文件夹，标记为  &lt;code&gt;sources root&lt;/code&gt;  目录，然后右键 pay-service 目录，选择  &lt;code&gt;maven-重新加载项目&lt;/code&gt; ，解决。&lt;/p&gt;
&lt;h3 id=&#34;windows-系统启动支付服务时报错-command-line-is-too-long-shorten-the-command-line-and-rerun&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows-系统启动支付服务时报错-command-line-is-too-long-shorten-the-command-line-and-rerun&#34;&gt;#&lt;/a&gt; Windows 系统启动支付服务时报错 Command line is too long Shorten the command line and rerun&lt;/h3&gt;
&lt;p&gt;该问题仅 Windows 系统电脑会出现。&lt;/p&gt;
&lt;p&gt;问题现状：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1691204207160-af495b10-eb96-4ea4-976f-f2bbc4575324.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;1）打开服务控制器&lt;/p&gt;
&lt;p&gt;2）选择支付服务 PayServiceApplication，点击 Modify options，点击 shorten command line&lt;/p&gt;
&lt;p&gt;3）选择 JAR manifest&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20240125031400152.png&#34; alt=&#34;image-20240125031400152&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;linux-服务器的磁盘空间不足无法通过-docker-运行-mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux-服务器的磁盘空间不足无法通过-docker-运行-mysql&#34;&gt;#&lt;/a&gt; Linux 服务器的磁盘空间不足，无法通过 docker 运行 MySQL&lt;/h3&gt;
&lt;p&gt;目前想法：转到 Windows 本地运行 MySQL 。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/distributed-microservices/API%E7%BD%91%E5%85%B3&amp;SpringCloud%20Gateway/</guid>
            <title>API网关 &amp; SpringCloud Gateway</title>
            <link>http://example.com/distributed-microservices/API%E7%BD%91%E5%85%B3&amp;SpringCloud%20Gateway/</link>
            <category term="分布式微服务" scheme="http://example.com/categories/distributed-microservices/" />
            <pubDate>Sat, 06 Jan 2024 12:04:44 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/spring-cloud-gateway-workflow.png&#34; alt=&#34;Spring Cloud Gateway 的工作流程&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;api网关基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#api网关基础&#34;&gt;#&lt;/a&gt; API 网关基础&lt;/h1&gt;
&lt;h2 id=&#34;网关是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网关是什么&#34;&gt;#&lt;/a&gt; 网关是什么？&lt;/h2&gt;
&lt;p&gt;微服务背景下，一个系统被拆分为多个服务，但是像安全认证，流量控制，日志，监控等功能是每个服务都需要的，&lt;font color=&#39;red&#39;&gt;没有网关的话，就需要在每个服务中单独实现这些功能&lt;/font&gt;，这使得我们做了很多重复的事情，并且没有一个全局的视图来统一管理这些功能。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/api-gateway-overview.png&#34; alt=&#34;网关示意图&#34; /&gt;&lt;/p&gt;
&lt;center&gt;网关示意图&lt;/center&gt;
&lt;p&gt;一般情况下，网关可以为我们提供&lt;font color=&#39;red&#39;&gt;请求转发、安全认证（身份 / 权限认证）、流量控制、负载均衡、降级熔断、日志、监控、参数校验、协议转换&lt;/font&gt;等功能。&lt;/p&gt;
&lt;p&gt;上面介绍了这么多功能，实际上，网关主要做了两件事情：&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;请求转发&lt;/font&gt;&lt;/strong&gt; + &lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;请求过滤&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;由于引入网关之后，会多一步网络转发，因此性能会有一点影响（几乎可以忽略不计，尤其是内网访问的情况下）。另外，我们&lt;font color=&#39;red&#39;&gt;需要保障网关服务的高可用，避免单点风险&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;如下图所示，&lt;font color=&#39;red&#39;&gt;网关服务外层通过  &lt;code&gt;Nginx&lt;/code&gt; （其他负载均衡设备 / 软件也行）进⾏负载转发，以达到⾼可⽤&lt;/font&gt;。Nginx 在部署的时候，尽量也要考虑高可用，避免单点风险。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/server-load-balancing.png&#34; alt=&#34;基于 Nginx 的服务端负载均衡&#34; /&gt;&lt;/p&gt;
&lt;center&gt;基于 Nginx 的服务端负载均衡&lt;/center&gt;
&lt;h2 id=&#34;网关的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网关的功能&#34;&gt;#&lt;/a&gt; 网关的功能&lt;/h2&gt;
&lt;p&gt;绝大部分网关可以提供下面这些功能（有一些功能需要借助其他框架或者中间件）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;请求转发&lt;/strong&gt;：将请求转发到目标微服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;：根据各个微服务实例的负载情况或者具体的负载均衡策略配置对请求实现动态的负载均衡。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全认证&lt;/strong&gt;：对用户请求进行身份验证，并仅允许可信客户端访问 API，并且还能够使用类似 RBAC 等方式来授权。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;参数校验&lt;/strong&gt;：支持参数映射与校验逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;日志记录&lt;/strong&gt;：记录所有请求的行为日志供后续使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;监控告警&lt;/strong&gt;：从业务指标、机器指标、JVM 指标等方面进行监控，并提供配套的告警机制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;流量控制&lt;/strong&gt;：对请求的流量进行控制，也就是限制某一时刻内的请求数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;熔断降级&lt;/strong&gt;：实时监控请求的统计信息，达到配置的失败阈值后，自动熔断，返回默认值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;响应缓存&lt;/strong&gt;：当用户请求获取的是一些静态的或更新不频繁的数据时，一段时间内多次请求获取到的数据很可能是一样的。对于这种情况可以将响应缓存起来。这样用户请求可以直接在网关层得到响应数据，无需再去访问业务服务，减轻业务服务的负担。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;响应聚合&lt;/strong&gt;：某些情况下用户请求要获取的响应内容可能会来自于多个业务服务。网关作为业务服务的调用方，可以把多个服务的响应整合起来，再一并返回给用户。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;灰度发布&lt;/strong&gt;：将请求动态分流到不同的服务版本（最基本的一种灰度发布）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;异常处理&lt;/strong&gt;：对于业务服务返回的异常响应，可以在网关层在返回给用户之前做转换处理。这样可以把一些业务侧返回的异常细节隐藏，转换成用户友好的错误提示返回。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API 文档：&lt;/strong&gt; 如果计划将 API 暴露给组织以外的开发人员，那么必须考虑使用 API 文档，例如 Swagger 或 OpenAPI。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;协议转换&lt;/strong&gt;：通过协议转换整合后台基于 REST、AMQP、Dubbo 等不同风格和实现技术的微服务，面向 Web Mobile、开放平台等特定客户端提供统一服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;证书管理&lt;/strong&gt;：将 SSL 证书部署到 API 网关，由一个统一的入口管理接口，降低了证书更换时的复杂度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图来源于 [百亿规模 API 网关服务 Shepherd 的设计与实现 - 美团技术团队 - 2021 这篇文章。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/up-35e102c633bbe8e0dea1e075ea3fee5dcfb.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;常见的网关系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的网关系统&#34;&gt;#&lt;/a&gt; 常见的网关系统&lt;/h2&gt;
&lt;h3 id=&#34;netflix-zuul&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#netflix-zuul&#34;&gt;#&lt;/a&gt; Netflix Zuul&lt;/h3&gt;
&lt;p&gt;Zuul 是 Netflix 开发的一款提供动态路由、监控、弹性、安全的网关服务，基于 Java 技术栈开发，可以和 Eureka、Ribbon、Hystrix 等组件配合使用。&lt;/p&gt;
&lt;p&gt;Zuul 核心架构如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/zuul-core-architecture.webp&#34; alt=&#34;Zuul 核心架构&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Zuul 核心架构&lt;/center&gt;
&lt;p&gt;Zuul 主要通过&lt;font color=&#39;red&#39;&gt;过滤器&lt;/font&gt;（类似于 AOP）来过滤请求，从而实现网关必备的各种功能。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/zuul-request-lifecycle.webp&#34; alt=&#34;Zuul 请求声明周期&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Zuul 请求声明周期&lt;/center&gt;
&lt;p&gt;我们可以&lt;font color=&#39;red&#39;&gt;自定义过滤器来处理请求&lt;/font&gt;，并且，Zuul 生态本身就有很多现成的过滤器供我们使用。就比如&lt;font color=&#39;red&#39;&gt;限流&lt;/font&gt;可以直接用国外朋友写的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21hcmNvc2JhcmJlcm8vc3ByaW5nLWNsb3VkLXp1dWwtcmF0ZWxpbWl0&#34;&gt;spring-cloud-zuul-ratelimit&lt;/span&gt; (这里只是举例说明，一般是配合 hystrix 来做限流)：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring-cloud-starter-netflix-zuul&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;com.marcosbarbero.cloud&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring-cloud-zuul-ratelimit&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;2.2.0.RELEASE&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9uZXRmbGl4dGVjaGJsb2cuY29tL2Fubm91bmNpbmctenV1bC1lZGdlLXNlcnZpY2UtaW4tdGhlLWNsb3VkLWFiM2FmNWJlMDhlZQ==&#34;&gt;Zuul 1.x&lt;/span&gt; 基于同步 IO，性能较差。&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9uZXRmbGl4dGVjaGJsb2cuY29tL29wZW4tc291cmNpbmctenV1bC0yLTgyZWE0NzZjYjJiMw==&#34;&gt;Zuul 2.x&lt;/span&gt; &lt;font color=&#39;red&#39;&gt;基于 Netty 实现了异步 IO&lt;/font&gt;，性能得到了大幅改进。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/zuul2-core-architecture.png&#34; alt=&#34;Zuul2 架构&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GitHub 地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvenV1bA==&#34;&gt;https://github.com/Netflix/zuul&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;官方 Wiki： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvenV1bC93aWtp&#34;&gt;https://github.com/Netflix/zuul/wiki&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spring-cloud-gateway&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-gateway&#34;&gt;#&lt;/a&gt; Spring Cloud Gateway&lt;/h3&gt;
&lt;p&gt;SpringCloud Gateway 属于 Spring Cloud 生态系统中的网关，其诞生的目标是&lt;font color=&#39;red&#39;&gt;为了替代老牌网关 &lt;strong&gt;Zuul&lt;/strong&gt;&lt;/font&gt;。准确点来说，应该是 Zuul 1.x。SpringCloud Gateway 起步要比 Zuul 2.x 更早。&lt;/p&gt;
&lt;p&gt;为了提升网关的性能，SpringCloud Gateway &lt;font color=&#39;red&#39;&gt;基于 Spring WebFlux&lt;/font&gt; 。Spring WebFlux 使用 Reactor 库来实现&lt;font color=&#39;red&#39;&gt;响应式编程模型&lt;/font&gt;，底层&lt;font color=&#39;red&#39;&gt;基于 Netty 实现同步非阻塞的 I/O&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;![img](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vc3MuamF2YWd1aWRlLmNuL2dpdGh1Yi9qYXZhZ3VpZGUvc3lzdGVtLWRlc2lnbi9kaXN0cmlidXRlZC1zeXN0ZW0vYXBpLWdhdGV3YXkvc3ByaW5nY2xvdWQtZ2F0ZXdheS0=&#34;&gt;https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/springcloud-gateway-&lt;/span&gt; demo.png)&lt;/p&gt;
&lt;p&gt;Spring Cloud Gateway 不仅提供统一的路由方式，并且 **&lt;font color=&#39;red&#39;&gt;基于 Filter 链&lt;/font&gt;** 的方式提供了网关基本的功能，例如：安全，监控 / 指标，限流。&lt;/p&gt;
&lt;p&gt;Spring Cloud Gateway 和 Zuul 2.x 的差别不大，也是通过过滤器来处理请求。不过，目前更加&lt;font color=&#39;red&#39;&gt;推荐使用 Spring Cloud Gateway &lt;/font&gt;而非 Zuul，Spring Cloud 生态对其支持更加友好。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Github 地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1jbG91ZC9zcHJpbmctY2xvdWQtZ2F0ZXdheQ==&#34;&gt;https://github.com/spring-cloud/spring-cloud-gateway&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;官网： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3VkLWdhdGV3YXk=&#34;&gt;https://spring.io/projects/spring-cloud-gateway&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;openresty&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#openresty&#34;&gt;#&lt;/a&gt; OpenResty&lt;/h3&gt;
&lt;p&gt;根据官方介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenResty 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/api-gatewaynginx-lua-openresty.png&#34; alt=&#34;OpenResty 和 Nginx 以及 Lua 的关系&#34; /&gt; OpenResty 和 Nginx 以及 Lua 的关系&lt;/p&gt;
&lt;p&gt;OpenResty 基于 Nginx，主要还是看中了其优秀的高并发能力。不过，由于 Nginx 采用 C 语言开发，二次开发门槛较高。如果想在 Nginx 上实现一些自定义的逻辑或功能，就需要编写 C 语言的模块，并重新编译 Nginx。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，OpenResty 通过实现  &lt;code&gt;ngx_lua&lt;/code&gt;  和  &lt;code&gt;stream_lua&lt;/code&gt;  等 Nginx 模块，把 Lua/LuaJIT 完美地整合进了 Nginx，从而让我们能够在 Nginx 内部里嵌入 Lua 脚本，使得可以通过简单的 Lua 语言来扩展网关的功能，比如实现自定义的路由规则、过滤器、缓存策略等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lua 是一种非常快速的动态脚本语言，它的运行速度接近于 C 语言。LuaJIT 是 Lua 的一个即时编译器，它可以显著提高 Lua 代码的执行效率。LuaJIT 将一些常用的 Lua 函数和工具库预编译并缓存，这样在下次调用时就可以直接使用缓存的字节码，从而大大加快了执行速度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于 OpenResty 的入门以及网关安全实战推荐阅读这篇文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvM0hnbFpzMDZXOTV2RjN0U2EzS3JYdw==&#34;&gt;每个后端都应该了解的 OpenResty 入门以及网关安全实战&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Github 地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL29wZW5yZXN0eS9vcGVucmVzdHk=&#34;&gt;https://github.com/openresty/openresty&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;官网地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vcGVucmVzdHkub3JnLw==&#34;&gt;https://openresty.org/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kong&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kong&#34;&gt;#&lt;/a&gt; Kong&lt;/h3&gt;
&lt;p&gt;Kong 是一款基于 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL29wZW5yZXN0eS8=&#34;&gt;OpenResty&lt;/span&gt; （Nginx + Lua）的高性能、云原生、可扩展、生态丰富的网关系统，主要由 3 个组件组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kong Server：基于 Nginx 的服务器，用来接收 API 请求。&lt;/li&gt;
&lt;li&gt;Apache Cassandra/PostgreSQL：用来存储操作数据。&lt;/li&gt;
&lt;li&gt;Kong Dashboard：官方推荐 UI 管理工具，当然，也可以使用 RESTful 方式 管理 Admin api。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/kong-way.webp&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由于默认使用 Apache Cassandra/PostgreSQL 存储数据，Kong 的&lt;font color=&#39;red&#39;&gt;整个架构比较臃肿，并且会带来高可用的问题&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;Kong 提供了&lt;font color=&#39;red&#39;&gt;插件机制&lt;/font&gt;来扩展其功能，插件在 API 请求响应循环的生命周期中被执行。比如在服务上启用 Zipkin 插件：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-X&lt;/span&gt; POST http://kong:8001/services/&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;service&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;/plugins &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token parameter variable&#34;&gt;--data&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;name=zipkin&#34;&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token parameter variable&#34;&gt;--data&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;config.http_endpoint=http://your.zipkin.collector:9411/api/v2/spans&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token parameter variable&#34;&gt;--data&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;config.sample_ratio=0.001&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Kong 本身就是一个 Lua 应用程序，并且是在 Openresty 的基础之上做了一层封装的应用。归根结底就是利用 Lua 嵌入 Nginx 的方式，赋予了 Nginx 可编程的能力，这样以插件的形式在 Nginx 这一层能够做到无限想象的事情。例如限流、安全访问策略、路由、负载均衡等等。编写一个 Kong 插件，就是按照 Kong 插件编写规范，写一个自己自定义的 Lua 脚本，然后加载到 Kong 中，最后引用即可。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/kong-gateway-overview.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;除了 Lua，Kong 还可以基于 Go 、JavaScript、Python 等语言开发插件，得益于对应的 PDK（插件开发工具包）。&lt;/p&gt;
&lt;p&gt;关于 Kong 插件的详细介绍，推荐阅读官方文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmtvbmdocS5jb20vZ2F0ZXdheS9sYXRlc3Qva29uZy1wbHVnaW5zLw==&#34;&gt;https://docs.konghq.com/gateway/latest/kong-plugins/&lt;/span&gt;，写的比较详细。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Github 地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0tvbmcva29uZw==&#34;&gt;https://github.com/Kong/kong&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;官网地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rb25naHEuY29tL2tvbmc=&#34;&gt;https://konghq.com/kong&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;apisix&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apisix&#34;&gt;#&lt;/a&gt; APISIX&lt;/h3&gt;
&lt;p&gt;APISIX 是一款基于 OpenResty 和 etcd 的高性能、云原生、可扩展的网关系统。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;etcd 是使用 Go 语言开发的一个开源的、高可用的分布式 key-value 存储系统，使用 Raft 协议做分布式共识。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与传统 API 网关相比，APISIX 具有&lt;font color=&#39;red&#39;&gt;动态路由&lt;/font&gt;和&lt;font color=&#39;red&#39;&gt;插件热加载&lt;/font&gt;，特别适合微服务系统下的 API 管理。并且，APISIX 与 SkyWalking（分布式链路追踪系统）、Zipkin（分布式链路追踪系统）、Prometheus（监控系统） 等 DevOps 生态工具对接都十分方便。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/apisix-architecture.png&#34; alt=&#34;APISIX 架构图&#34; /&gt;&lt;/p&gt;
&lt;center&gt;APISIX 架构图&lt;/center&gt;
&lt;p&gt;作为 Nginx 和 Kong 的替代项目，&lt;font color=&#39;red&#39;&gt;APISIX 目前已经是 Apache 顶级开源项目，并且是最快毕业的国产开源项目&lt;/font&gt;。国内目前已经有很多知名企业（比如金山、有赞、爱奇艺、腾讯、贝壳）使用 APISIX 处理核心的业务流量。&lt;/p&gt;
&lt;p&gt;根据官网介绍：“APISIX 已经生产可用，功能、性能、架构全面优于 Kong”。&lt;/p&gt;
&lt;p&gt;APISIX 同样支持定制化的插件开发。开发者除了能够使用 Lua 语言开发插件，还能通过下面两种方式开发来避开 Lua 语言的学习成本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 Plugin Runner 来支持更多的主流编程语言（比如 Java、Python、Go 等等）。通过这样的方式，可以让后端工程师通过本地 RPC 通信，使用熟悉的编程语言开发 APISIX 的插件。这样做的好处是减少了开发成本，提高了开发效率，但是在性能上会有一些损失。&lt;/li&gt;
&lt;li&gt;使用 Wasm（WebAssembly） 开发插件。Wasm 被嵌入到了 APISIX 中，用户可以使用 Wasm 去编译成 Wasm 的字节码在 APISIX 中运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Wasm 是基于堆栈的虚拟机的二进制指令格式，一种低级汇编语言，旨在非常接近已编译的机器代码，并且非常接近本机性能。Wasm 最初是为浏览器构建的，但是随着技术的成熟，在服务器端看到了越来越多的用例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/up-a240d3b113cde647f5850f4c7cc55d4ff5c.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Github 地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9hcGlzaXg=&#34;&gt;https://github.com/apache/apisix&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;官网地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcGlzaXguYXBhY2hlLm9yZy96aC8=&#34;&gt;https://apisix.apache.org/zh/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shenyu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shenyu&#34;&gt;#&lt;/a&gt; Shenyu&lt;/h3&gt;
&lt;p&gt;Shenyu 是一款&lt;font color=&#39;red&#39;&gt;基于 WebFlux &lt;/font&gt;的可扩展、高性能、&lt;font color=&#39;red&#39;&gt;响应式网关&lt;/font&gt;，Apache 顶级开源项目。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/shenyu-architecture.png&#34; alt=&#34;Shenyu 架构&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Shenyu 架构&lt;/center&gt;
&lt;p&gt;Shenyu 通过&lt;font color=&#39;red&#39;&gt;插件&lt;/font&gt;扩展功能，插件是 ShenYu 的灵魂，并且插件也是可扩展和热插拔的。不同的插件实现不同的功能。Shenyu 自带了诸如&lt;font color=&#39;red&#39;&gt;限流、熔断、转发、重写、重定向、和路由监控&lt;/font&gt;等插件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Github 地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9pbmN1YmF0b3Itc2hlbnl1&#34;&gt;https://github.com/apache/incubator-shenyu&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;官网地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaGVueXUuYXBhY2hlLm9yZy8=&#34;&gt;https://shenyu.apache.org/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何选择&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何选择&#34;&gt;#&lt;/a&gt; 如何选择？&lt;/h2&gt;
&lt;p&gt;上面介绍的几个常见的网关系统，最常用的是 Spring Cloud Gateway、Kong、APISIX 这三个。&lt;/p&gt;
&lt;p&gt;对于公司业务以 Java 为主要开发语言的情况下，Spring Cloud Gateway 通常是个不错的选择，其优点有：简单易用、成熟稳定、与 Spring Cloud 生态系统兼容、Spring 社区成熟等等。不过，Spring Cloud Gateway 也有一些局限性和不足之处，一般还需要结合其他网关一起使用比如 OpenResty。并且，&lt;font color=&#39;red&#39;&gt;Spring Cloud Gateway 的性能相比较于 Kong 和 APISIX 还是差一些&lt;/font&gt;。如果对性能要求比较高的话，Spring Cloud Gateway 不是一个好的选择。&lt;/p&gt;
&lt;p&gt;Kong 和 APISIX 功能更丰富，性能更强大，技术架构更贴合云原生。Kong 是开源 API 网关的鼻祖，生态丰富，用户群体庞大。APISIX 属于后来者，更优秀一些，根据 APISIX 官网介绍：“APISIX 已经生产可用，功能、性能、架构全面优于 Kong”。下面简单对比一下二者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APISIX 基于 etcd 来做配置中心，不存在单点问题，云原生友好；而&lt;font color=&#39;red&#39;&gt; Kong 基于 Apache Cassandra/PostgreSQL ，存在单点风险&lt;/font&gt;，需要额外的基础设施保障做高可用。&lt;/li&gt;
&lt;li&gt;APISIX 支持热更新，并且实现了毫秒级别的热更新响应；而&lt;font color=&#39;red&#39;&gt; Kong 不支持热更新&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;APISIX 的性能要优于 Kong &lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;APISIX 支持的插件更多&lt;/font&gt;，功能更丰富。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;springcloud-gateway-常见问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springcloud-gateway-常见问题&#34;&gt;#&lt;/a&gt; SpringCloud Gateway 常见问题&lt;/h1&gt;
&lt;h2 id=&#34;是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么&#34;&gt;#&lt;/a&gt; 是什么&lt;/h2&gt;
&lt;p&gt;Spring Cloud Gateway 属于 Spring Cloud 生态系统中的网关，其诞生的目标是为了替代老牌网关 &lt;strong&gt;Zuul&lt;/strong&gt;。准确点来说，应该是 Zuul 1.x。Spring Cloud Gateway 起步要比 Zuul 2.x 更早。&lt;/p&gt;
&lt;p&gt;为了提升网关的性能，Spring Cloud Gateway 基于 Spring WebFlux 。Spring WebFlux 使用 Reactor 库来实现响应式编程模型，底层基于 Netty 实现同步非阻塞的 I/O。&lt;/p&gt;
&lt;p&gt;![img](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vc3MuamF2YWd1aWRlLmNuL2dpdGh1Yi9qYXZhZ3VpZGUvc3lzdGVtLWRlc2lnbi9kaXN0cmlidXRlZC1zeXN0ZW0vYXBpLWdhdGV3YXkvc3ByaW5nY2xvdWQtZ2F0ZXdheS0=&#34;&gt;https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/springcloud-gateway-&lt;/span&gt; demo.png)&lt;/p&gt;
&lt;p&gt;Spring Cloud Gateway 不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控 / 指标，限流。&lt;/p&gt;
&lt;p&gt;Spring Cloud Gateway 和 Zuul 2.x 的差别不大，也是通过过滤器来处理请求。不过，目前更加推荐使用 Spring Cloud Gateway 而非 Zuul，Spring Cloud 生态对其支持更加友好。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub 地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1jbG91ZC9zcHJpbmctY2xvdWQtZ2F0ZXdheQ==&#34;&gt;https://github.com/spring-cloud/spring-cloud-gateway&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;官网： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3VkLWdhdGV3YXk=&#34;&gt;https://spring.io/projects/spring-cloud-gateway&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/distributed-microservices/%E5%88%86%E5%B8%83%E5%BC%8FID&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</guid>
            <title>分布式理论&amp;算法&amp;协议</title>
            <link>http://example.com/distributed-microservices/%E5%88%86%E5%B8%83%E5%BC%8FID&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</link>
            <category term="分布式微服务" scheme="http://example.com/categories/distributed-microservices/" />
            <pubDate>Sat, 06 Jan 2024 12:02:34 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;cap-base-理论详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cap-base-理论详解&#34;&gt;#&lt;/a&gt; CAP &amp;amp; BASE 理论详解&lt;/h1&gt;
&lt;h2 id=&#34;cap-理论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cap-理论&#34;&gt;#&lt;/a&gt; CAP 理论&lt;/h2&gt;
&lt;h3 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231217154635468.png&#34; alt=&#34;CAP理论&#34; /&gt;&lt;/p&gt;
&lt;p&gt;CAP 理论指的是 **&lt;font color=&#39;#B32015&#39;&gt;在一个分布式系统中，在设计读写操作时，只能同时满足以下三点中的两个：一致性（C）、可用性（A）、分区容错性（P）&lt;/font&gt;**。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;一致性（ &lt;code&gt;C&lt;/code&gt; onsistency）&lt;/font&gt;：分布式系统中多个主机之间是否能够保持数据一致的特性。即，&lt;font color=&#39;red&#39;&gt;当系统数据发生更新操作后，各个主机中的数据仍然处于一致的状态&lt;/font&gt;。所有节点访问同一份最新的数据副本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;可用性（ &lt;code&gt;A&lt;/code&gt; vailability）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;系统提供的服务必须一直处于可用的状态&lt;/font&gt;。即，对于用户的每一个请求，系统（非故障节点）总是可以在有限的时间内对用户做出合理响应（不是错误 / 超时的响应）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;分区容错性（ &lt;code&gt;P&lt;/code&gt; artition tolerance）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;分布式系统在遇到任何&lt;strong&gt;网络分区故障&lt;/strong&gt;时，仍能够保证对外提供（满足一致性和可用性的）服务&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/partition-tolerance.png&#34; alt=&#34;partition-tolerance&#34; /&gt;&lt;/p&gt;
&lt;center&gt;partition-tolerance&lt;/center&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;网络分区&lt;/strong&gt;：分布式系统中，多个节点之间的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）&lt;font color=&#39;red&#39;&gt;某些节点之间不连通了，整个网络就分成了几块区域&lt;/font&gt;，这就叫网络分区。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不是所谓的3选2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不是所谓的3选2&#34;&gt;#&lt;/a&gt; 不是所谓的 “3 选 2”&lt;/h3&gt;
&lt;p&gt;大部分人解释这一定律时，常常简单的表述为：“一致性、可用性、分区容忍性三者你只能同时达到其中两个，不可能同时达到”。实际上这是一个非常具有误导性质的说法，而且在 CAP 理论诞生 12 年之后，CAP 之父也在 2012 年重写了之前的论文。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1。也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。&lt;/p&gt;
&lt;p&gt;简而言之就是：&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者强一致性 C&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此，&lt;font color=&#39;red&#39;&gt;分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构&lt;/font&gt;。比如 ZooKeeper、HBase 就是 CP 架构，Cassandra、Eureka 就是 AP 架构，Nacos 不仅支持 CP 架构也支持 AP 架构。&lt;/p&gt;
&lt;p&gt;为啥不可能选择 CA 架构呢？举个例子：若系统出现 “分区”，系统中的某个节点在进行写操作。为了保证 C，必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;选择 CP 还是 AP 的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;另外，需要补充说明的一点是：&lt;font color=&#39;red&#39;&gt;如果网络分区正常的话（系统在绝大部分时候所处的状态），也就说不需要保证 P 的时候，C 和 A 能够同时保证。&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&#34;cap-实际应用案例注册中心&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cap-实际应用案例注册中心&#34;&gt;#&lt;/a&gt; CAP 实际应用案例：注册中心&lt;/h3&gt;
&lt;p&gt;我这里以注册中心来探讨一下 CAP 的实际应用。考虑到很多小伙伴不知道注册中心是干嘛的，这里简单以 Dubbo 为例说一说。&lt;/p&gt;
&lt;p&gt;下图是 Dubbo 的架构图。注册中心 Registry 在其中扮演了什么角色呢？提供了什么服务呢？&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;注册中心负责服务地址的注册与查找，相当于服务的目录，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231217154850034.png&#34; alt=&#34;image-20231217154850034&#34; /&gt;&lt;/p&gt;
&lt;p&gt;常见的可以作为注册中心的组件有：ZooKeeper、Eureka、Nacos...。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;**ZooKeeper 保证的是 CP。** 任何时刻对 ZooKeeper 的读请求都能得到一致性的结果，但是，&lt;font color=&#39;red&#39;&gt;ZooKeeper 不保证每次请求的可用性，比如在 Leader 选举过程中，或者半数以上的机器不可用的时候，或者当 Leader 节点中的数据发生了变化但 Follower 还没有同步完成之前，整个 ZooKeeper 集群是不对外提供服务的&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eureka 保证的则是 AP。&lt;/strong&gt; Eureka 在设计的时候就是优先保证 A （可用性）。&lt;font color=&#39;red&#39;&gt;在 Eureka 中不存在什么 Leader 节点，每个节点都是一样的、平等的&lt;/font&gt;。因此 Eureka 不会像 ZooKeeper 那样出现选举过程中或者半数以上的机器不可用的时候服务就是不可用的情况。 &lt;font color=&#39;red&#39;&gt;Eureka 保证即使大部分节点挂掉也不会影响正常提供服务，只要有一个节点是可用的就行了，只不过这个节点上的数据可能并不是最新的&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nacos 不仅支持 CP 也支持 AP。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;🐛 修正（参见：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1NuYWlsY2xpbWIvSmF2YUd1aWRlL2lzc3Vlcy8xOTA2&#34;&gt;issue#1906&lt;/span&gt;）&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;ZooKeeper 通过可线性化（Linearizable）写入、全局 FIFO 顺序访问等机制来保障数据一致性。多节点部署的情况下， ZooKeeper 集群处于 Quorum 模式。Quorum 模式下的 ZooKeeper 集群，是一组 ZooKeeper 服务器节点组成的集合，其中大多数节点必须同意任何变更才能被视为有效。&lt;/p&gt;
&lt;p&gt;由于 Quorum 模式下的读请求不会触发各个 ZooKeeper 节点之间的数据同步，因此在某些情况下还是可能会存在读取到旧数据的情况，导致不同的客户端视图上看到的结果不同，这可能是由于网络延迟、丢包、重传等原因造成的。ZooKeeper 为了解决这个问题，提供了 Watcher 机制和版本号机制来帮助客户端检测数据的变化和版本号的变更，以保证数据的一致性。&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小结&#34;&gt;#&lt;/a&gt; 小结&lt;/h3&gt;
&lt;p&gt;在进行分布式系统设计和开发时，我们不应该仅仅局限在 CAP 问题上，还要关注系统的扩展性、可用性等等。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;在系统发生 “分区” 的情况下，CAP 理论只能满足 CP 或者 AP&lt;/font&gt;。要注意的是，这里的前提是系统发生了 “分区”。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;如果系统没有发生 “分区” 的话，节点间的网络连接通信正常的话，也就不存在 P 了。这个时候，我们就可以同时保证 C 和 A 了&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;总结：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;如果系统发生 “分区”，我们要考虑选择 CP 还是 AP。如果系统没有发生 “分区” 的话，我们要思考如何保证 CA 。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;base-理论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#base-理论&#34;&gt;#&lt;/a&gt; BASE 理论&lt;/h2&gt;
&lt;h3 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;BASE 是对 CAP 中一致性 C 和可用性 A 权衡的结果&lt;/font&gt;，其来源于对大规模互联网系统分布式实践的总结，是基于 CAP 定理逐步演化而来的，它大大降低了我们对系统的要求，由以下三个短语的简写组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt; &lt;code&gt;B&lt;/code&gt; asically  &lt;code&gt;A&lt;/code&gt; vailable（基本可用）&lt;/font&gt;：分布式系统在出现不可预知故障的时候，&lt;font color=&#39;red&#39;&gt;允许损失部分可用性&lt;/font&gt;。但这绝不等价于系统不可用。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt; &lt;code&gt;S&lt;/code&gt; oft state（软状态）&lt;/font&gt;：允许系统数据存在的中间状态，并认为该中间状态的存在不会影响系统的整体可用性。即，&lt;font color=&#39;red&#39;&gt;允许系统主机间进行数据同步的过程存在一定延时&lt;/font&gt;。软状态，其实就是一种灰度状态，过渡状态。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt; &lt;code&gt;E&lt;/code&gt; ventually consistent（最终一致性）&lt;/font&gt;：强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是&lt;font color=&#39;red&#39;&gt;需要系统保证最终数据能够达到一致，而不需要保证系统数据的实时一致性&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;核心思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#核心思想&#34;&gt;#&lt;/a&gt; 核心思想&lt;/h3&gt;
&lt;p&gt;BASE 理论的核心思想：&lt;font color=&#39;red&#39;&gt;即使无法做到强一致性 C ，但每个系统都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性 E &lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也就是 **&lt;font color=&#39;red&#39;&gt;牺牲数据的强一致性 C 来满足系统的基本可用性 BA&lt;/font&gt;** ，系统中一部分数据不可用或者不一致时，仍需要保持系统整体 “基本可用”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;**BASE 理论本质上是对 CAP 的延伸和补充，更具体地说，是对 CAP 中 AP 方案的一个补充。**AP 方案只是在系统发生分区的时候放弃一致性，而不是永远放弃一致性。&lt;font color=&#39;red&#39;&gt;在分区故障恢复后，系统应该达到最终一致性&lt;/font&gt;。这一点其实就是 BASE 理论延伸的地方。&lt;/p&gt;
&lt;h3 id=&#34;三要素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三要素&#34;&gt;#&lt;/a&gt; 三要素&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC81LzI0LzE2MzkxNDgwNmQ5ZTE1YzY&#34; alt=&#34;BASE理论三要素&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;基本可用ba&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本可用ba&#34;&gt;#&lt;/a&gt; 基本可用（BA）&lt;/h4&gt;
&lt;p&gt;基本可用是指分布式系统在出现不可预知故障的时候，&lt;font color=&#39;red&#39;&gt;允许损失部分可用性&lt;/font&gt;。但是，这绝不等价于系统不可用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;响应时间上的损失&lt;/strong&gt;：正常情况下，处理用户请求需要 0.5s 返回结果，但是由于系统出现故障，处理用户请求的时间变为 3 s。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统功能上的损失&lt;/strong&gt;：正常情况下，用户可以使用系统的全部功能，但是由于系统访问量突然剧增，系统的部分非核心功能无法使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;软状态s&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软状态s&#34;&gt;#&lt;/a&gt; 软状态（S）&lt;/h4&gt;
&lt;p&gt;软状态指允许系统中的数据存在中间状态（&lt;strong&gt;CAP 理论中的数据不一致&lt;/strong&gt;），并认为该中间状态的存在不会影响系统的整体可用性，即&lt;font color=&#39;red&#39;&gt;允许系统在不同节点的数据副本之间进行数据同步的过程存在延时&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;最终一致性e&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最终一致性e&#34;&gt;#&lt;/a&gt; 最终一致性（E）&lt;/h4&gt;
&lt;p&gt;最终一致性强调的是&lt;font color=&#39;red&#39;&gt;系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态&lt;/font&gt;。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，&lt;font color=&#39;red&#39;&gt;而不需要实时保证系统数据的强一致性&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分布式一致性的 3 种级别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;强一致性&lt;/strong&gt;：系统写入了什么，读出来的就是什么。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;弱一致性&lt;/strong&gt;：不一定可以读取到最新写入的值，也不保证多少时间之后读取到的数据是最新的，只是会尽量保证某个时刻达到数据一致的状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最终一致性&lt;/strong&gt;：弱一致性的升级版，系统会保证在一定时间内达到数据一致的状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;业界比较推崇是最终一致性级别，但是某些对数据一致要求十分严格的场景比如银行转账还是要保证强一致性。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那实现最终一致性的具体方式是什么呢？&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2drLmxpbmsvYS8xMHJaTQ==&#34;&gt;《分布式协议与算法实战》&lt;/span&gt; 中是这样介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;读时修复&lt;/strong&gt;：在读取数据时，检测数据的不一致，进行修复。比如 Cassandra 的 Read Repair 实现，具体来说，在向 Cassandra 系统查询数据的时候，如果检测到不同节点的副本数据不一致，系统就自动修复数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;写时修复&lt;/font&gt;&lt;/strong&gt;: 在写入数据，检测数据的不一致时，进行修复。比如 Cassandra 的 Hinted Handoff 实现。具体来说，Cassandra 集群的节点之间远程写数据的时候，如果写失败 就将数据缓存下来，然后定时重传，修复数据的不一致性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步修复&lt;/strong&gt;：这个是最常用的方式，通过定时对账检测副本数据的一致性，并修复。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;比较推荐 &lt;strong&gt;写时修复&lt;/strong&gt;，这种方式对性能消耗比较低。&lt;/p&gt;
&lt;h3 id=&#34;小结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小结-2&#34;&gt;#&lt;/a&gt; 小结&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;ACID 是数据库事务完整性的理论，CAP 是分布式系统设计理论，BASE 是 CAP 理论中 AP 方案的延伸。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;paxos-算法详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#paxos-算法详解&#34;&gt;#&lt;/a&gt; Paxos 算法详解&lt;/h1&gt;
&lt;h2 id=&#34;背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景&#34;&gt;#&lt;/a&gt; 背景&lt;/h2&gt;
&lt;p&gt;Paxos 算法是 Leslie Lamport（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JThFJUIxJUU2JTk2JUFGJUU1JTg4JUE5JUMyJUI3JUU1JTg1JUIwJUU0JUJDJUFGJUU3JTg5JUI5&#34;&gt;莱斯利・兰伯特&lt;/span&gt;）在 1990 年提出了一种 **&lt;font color=&#39;#B32015&#39;&gt;分布式系统共识算法&lt;/font&gt;**。这也是第一个被证明完备的共识算法（前提是不存在拜占庭将军问题，也就是没有恶意节点）。&lt;/p&gt;
&lt;p&gt;为了介绍 Paxos 算法，兰伯特专门写了一篇幽默风趣的论文。在这篇论文中，他虚拟了一个叫做 Paxos 的希腊城邦来更形象化地介绍 Paxos 算法。&lt;/p&gt;
&lt;p&gt;不过，审稿人并不认可这篇论文的幽默。于是，他们就给兰伯特说：“如果你想要成功发表这篇论文的话，必须删除所有 Paxos 相关的故事背景”。兰伯特一听就不开心了：“我凭什么修改啊，你们这些审稿人就是缺乏幽默细胞，发不了就不发了呗！”。&lt;/p&gt;
&lt;p&gt;于是乎，提出 Paxos 算法的那篇论文在当时并没有被成功发表。&lt;/p&gt;
&lt;p&gt;直到 1998 年，系统研究中心 (Systems Research Center，SRC）的两个技术研究员需要找一些合适的分布式算法来服务他们正在构建的分布式系统，Paxos 算法刚好可以解决他们的部分需求。因此，兰伯特就把论文发给了他们。在看了论文之后，这俩大佬觉得论文还是挺不错的。于是，兰伯特在 1998 年重新发表论文 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xhbXBvcnQuYXp1cmV3ZWJzaXRlcy5uZXQvcHVicy9sYW1wb3J0LXBheG9zLnBkZg==&#34;&gt;《The Part-Time Parliament》&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;论文发表之后，各路学者直呼看不懂，言语中还略显调侃之意。这谁忍得了，在 2001 年的时候，兰伯特专门又写了一篇 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xhbXBvcnQuYXp1cmV3ZWJzaXRlcy5uZXQvcHVicy9wYXhvcy1zaW1wbGUucGRm&#34;&gt;《Paxos Made Simple》&lt;/span&gt; 的论文来简化对 Paxos 的介绍，主要讲述&lt;font color=&#39;red&#39;&gt;两阶段共识协议&lt;/font&gt;部分，顺便还不忘嘲讽一下这群学者。&lt;/p&gt;
&lt;p&gt;《Paxos Made Simple》这篇论文就 14 页，相比于 《The Part-Time Parliament》的 33 页精简了不少。最关键的是这篇论文的摘要就一句话：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/paxos-made-simple-L9ik01kM.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Paxos algorithm, when presented in plain English, is very simple.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译过来的意思大概就是：&lt;font color=&#39;red&#39;&gt;当我用无修饰的英文来描述时，Paxos 算法真心简单！&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;有没有感觉到来自兰伯特大佬满满地嘲讽的味道？&lt;/p&gt;
&lt;h2 id=&#34;介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;Paxos 算法是第一个被证明完备的分布式系统共识算法。共识算法的作用是 **&lt;font color=&#39;red&#39;&gt;让分布式系统中的多个节点之间对某个提案（Proposal）达成一致的看法&lt;/font&gt;**。提案的含义在分布式系统中十分宽泛，像哪一个节点是 Leader 节点、多个事件发生的顺序等等都可以是一个提案。&lt;/p&gt;
&lt;p&gt;兰伯特当时提出的 Paxos 算法主要包含 2 个部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Basic Paxos 算法&lt;/font&gt;&lt;/strong&gt;：描述的是&lt;font color=&#39;red&#39;&gt;多节点之间如何就某个值 (提案 Value) 达成共识&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Multi-Paxos 思想&lt;/font&gt;&lt;/strong&gt;：描述的是执行多个 Basic Paxos 实例，就一系列值达成共识。&lt;font color=&#39;red&#39;&gt;Multi-Paxos 说白了就是执行多次 Basic Paxos &lt;/font&gt;，核心还是 Basic Paxos 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于 Paxos 算法在国际上被公认的非常难以理解和实现，因此不断有人尝试简化这一算法。到了 2013 年才诞生了&lt;font color=&#39;red&#39;&gt;一个比 Paxos 算法更易理解和实现的共识算法 —&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGlzdHJpYnV0ZWQtc3lzdGVtL3RoZW9yZW0mYW1wO2FsZ29yaXRobSZhbXA7cHJvdG9jb2wvcmFmdC1hbGdvcml0aG0uaHRtbA==&#34;&gt;Raft 算法&lt;/span&gt;&lt;/font&gt; 。更具体点来说，&lt;font color=&#39;red&#39;&gt;Raft 是 Multi-Paxos 的一个简化变种&lt;/font&gt;，其简化了 Multi-Paxos 的思想，变得更容易被理解以及工程实现。&lt;/p&gt;
&lt;p&gt;针对没有恶意节点的情况，除了 Raft 算法之外，当前最常用的一些共识算法比如 &lt;strong&gt;ZAB 协议&lt;/strong&gt;、 &lt;strong&gt;Fast Paxos&lt;/strong&gt; 算法都是基于 Paxos 算法改进的。&lt;/p&gt;
&lt;p&gt;针对存在恶意节点的情况，一般使用的是 &lt;strong&gt;工作量证明（POW，Proof-of-Work）&lt;/strong&gt;、 &lt;strong&gt;权益证明（PoS，Proof-of-Stake ）&lt;/strong&gt; 等共识算法。这类共识算法最典型的应用就是&lt;font color=&#39;red&#39;&gt;区块链&lt;/font&gt;，就比如说前段时间以太坊官方宣布其共识机制正在从工作量证明 (PoW) 转变为权益证明 (PoS)。&lt;/p&gt;
&lt;p&gt;区块链系统使用的共识算法需要解决的核心问题是 **&lt;font color=&#39;red&#39;&gt;拜占庭将军问题&lt;/font&gt;** ，这和我们日常接触到的 ZooKeeper、Etcd、Consul 等分布式中间件不太一样。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下面我们来对 Paxos 算法的定义做一个总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Paxos 算法是兰伯特在 1990 年提出了一种分布式系统共识算法。&lt;/li&gt;
&lt;li&gt;兰伯特当时提出的 Paxos 算法主要包含 2 个部分: Basic Paxos 算法和 Multi-Paxos 思想。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;Raft 算法、ZAB 协议、 Fast Paxos 算法都是基于 Paxos 算法改进而来&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basic-paxos-算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#basic-paxos-算法&#34;&gt;#&lt;/a&gt; Basic Paxos 算法&lt;/h2&gt;
&lt;p&gt;Basic Paxos 中存在 3 个重要的角色：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;提议者（Proposer）&lt;/font&gt;&lt;/strong&gt;：也可以叫做协调者（coordinator），提议者&lt;font color=&#39;red&#39;&gt;负责接受客户端的请求，并发起提案&lt;/font&gt;。提案信息通常包括提案编号 (Proposal ID) 、提议的值 (Value)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;接受者（Acceptor）&lt;/font&gt;&lt;/strong&gt;：也可以叫做投票员（voter），&lt;font color=&#39;red&#39;&gt;负责对提议者的提案进行投票，同时需要记住自己的投票历史&lt;/font&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;学习者（Learner）&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;如果有超过半数接受者就某个提议达成了共识，那么学习者就需要接受这个提议，并就该提议作出运算，然后将运算结果返回给客户端&lt;/font&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/up-890fa3212e8bf72886a595a34654918486c.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了减少实现该算法所需的节点数，&lt;font color=&#39;red&#39;&gt;一个节点可以身兼多个角色&lt;/font&gt;。并且，一个提案被选定需要被半数以上的 Acceptor 接受。这样的话，Basic Paxos 算法还&lt;font color=&#39;red&#39;&gt;具备容错性，在少于一半的节点出现故障时，集群仍能正常工作&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;multi-paxos-思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#multi-paxos-思想&#34;&gt;#&lt;/a&gt; Multi Paxos 思想&lt;/h2&gt;
&lt;p&gt;Basic Paxos 算法的仅能就单个值达成共识，为了能够对一系列的值达成共识，我们需要用到 Multi Paxos 思想。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️&lt;strong&gt;注意&lt;/strong&gt;：Multi-Paxos 只是一种思想，这种思想的核心就是&lt;font color=&#39;red&#39;&gt;通过多个 Basic Paxos 实例就一系列值达成共识&lt;/font&gt;。也就是说，Basic Paxos 是 Multi-Paxos 思想的核心，Multi-Paxos 就是多执行几次 Basic Paxos。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于兰伯特提到的 Multi-Paxos 思想缺少代码实现的必要细节 (比如怎么选举领导者)，所以&lt;font color=&#39;red&#39;&gt;在理解和实现上比较困难&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;不过，也不需要担心，我们并不需要自己实现基于 Multi-Paxos 思想的共识算法，业界已经有了比较出名的实现。&lt;font color=&#39;red&#39;&gt;像 Raft 算法就是 Multi-Paxos 的一个变种，其简化了 Multi-Paxos 的思想，变得更容易被理解以及工程实现，实际项目中可以优先考虑 Raft 算法&lt;/font&gt;。&lt;/p&gt;
&lt;h1 id=&#34;raft-算法详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raft-算法详解&#34;&gt;#&lt;/a&gt; Raft 算法详解&lt;/h1&gt;
&lt;h2 id=&#34;背景-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景-2&#34;&gt;#&lt;/a&gt; 背景&lt;/h2&gt;
&lt;p&gt;当今的数据中心和应用程序在高度动态的环境中运行，为了应对高度动态的环境，它们通过额外的服务器进行横向扩展，并且根据需求进行扩展和收缩。同时，服务器和网络故障也很常见。&lt;/p&gt;
&lt;p&gt;因此，&lt;font color=&#39;red&#39;&gt;系统必须在正常操作期间处理服务器的上下线。它们必须对变故做出反应并在几秒钟内自动适应&lt;/font&gt;；对客户来说的话，明显的中断通常是不可接受的。&lt;/p&gt;
&lt;p&gt;幸运的是，&lt;font color=&#39;red&#39;&gt;分布式共识&lt;/font&gt;可以帮助应对这些挑战。&lt;/p&gt;
&lt;h3 id=&#34;拜占庭将军问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拜占庭将军问题&#34;&gt;#&lt;/a&gt; 拜占庭将军问题&lt;/h3&gt;
&lt;p&gt;在介绍共识算法之前，先介绍一个简化版拜占庭将军的例子来帮助理解共识算法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设多位拜占庭将军中没有叛军，信使的信息可靠但有可能被暗杀的情况下，将军们如何达成是否要进攻的一致性决定？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决方案大致可以理解成：&lt;font color=&#39;red&#39;&gt;先在所有的将军中选出一个大将军，用来做出所有的决定&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;举例如下：假如现在一共有 3 个将军 A，B 和 C，每个将军都有一个随机时间的倒计时器。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假设 A 将军的倒计时先结束，这个将军就把自己当成大将军候选人，然后派信使传递选举投票的信息给将军 B 和 C；&lt;/li&gt;
&lt;li&gt;如果将军 B 和 C 还没有把自己当作候选人（自己的倒计时还没有结束），并且没有把选举票投给其他人，它们就会把票投给将军 A；&lt;/li&gt;
&lt;li&gt;信使回到将军 A 时，它知道自己收到了足够的票数，成为了大将军，此后是否需要进攻就由大将军 A 决定；&lt;/li&gt;
&lt;li&gt;然后 A 将军再去派信使通知另外两个将军，自己已经成为了大将军。如果一段时间还没收到将军 B 和 C 的回复（信使可能会被暗杀），那就再重派一个信使，直到收到回复。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;共识算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共识算法&#34;&gt;#&lt;/a&gt; 共识算法&lt;/h3&gt;
&lt;p&gt;共识是可容错系统中的一个基本问题：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;即使面对故障，服务器也可以在共享状态上达成一致&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;共识算法允许&lt;font color=&#39;red&#39;&gt;一组节点像一个整体一样一起工作，即使其中的一些节点出现故障也能够继续工作下去&lt;/font&gt;，其正确性主要是源于复制状态机的性质：一组  &lt;code&gt;Server&lt;/code&gt;  的状态机计算相同状态的副本，即使有一部分的  &lt;code&gt;Server&lt;/code&gt;  宕机了，它们仍然能够继续运行。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/paxos-rsm-architecture.png&#34; alt=&#34;rsm-architecture.png&#34; /&gt;&lt;/p&gt;
&lt;center&gt;复制状态机架构&lt;/center&gt;
&lt;p&gt;一般通过使用&lt;font color=&#39;red&#39;&gt;复制日志&lt;/font&gt;来实现复制状态机。每个  &lt;code&gt;Server&lt;/code&gt;  存储着一份包括命令序列的日志文件，状态机会按顺序执行这些命令。因为每个日志包含相同的命令，并且顺序也相同，所以每个状态机处理相同的命令序列。由于状态机是确定性的，所以处理相同的状态，得到相同的输出。&lt;/p&gt;
&lt;p&gt;因此，&lt;font color=&#39;red&#39;&gt;共识算法的工作就是保持复制日志的一致性&lt;/font&gt;。服务器上的共识模块从客户端接收命令并将它们添加到日志中。它与其他服务器上的共识模块通信，以确保即使某些服务器发生故障。每个日志最终包含相同顺序的请求。一旦命令被正确地复制，它们就被称为已提交。每个服务器的状态机按照日志顺序处理已提交的命令，并将输出返回给客户端。因此，这些服务器形成了一个单一的、高度可靠的状态机。&lt;/p&gt;
&lt;p&gt;适用于实际系统的共识算法通常具有以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全。确保在非拜占庭条件（也就是上文中提到的简易版拜占庭）下的安全性，包括网络延迟、分区、包丢失、复制和重新排序。&lt;/li&gt;
&lt;li&gt;高可用。只要大多数服务器都是可操作的，并且可以相互通信，也可以与客户端进行通信，那么这些服务器就可以看作完全功能可用的。因此，一个典型的由五台服务器组成的集群可以容忍任何两台服务器端故障。假设服务器因停止而发生故障；它们稍后可能会从稳定存储上的状态中恢复并重新加入集群。&lt;/li&gt;
&lt;li&gt;一致性不依赖时序。错误的时钟和极端的消息延迟，在最坏的情况下也只会造成可用性问题，而不会产生一致性问题。&lt;/li&gt;
&lt;li&gt;在集群中大多数服务器响应，命令就可以完成，不会被少数运行缓慢的服务器来影响整体系统性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;raft-算法基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raft-算法基础&#34;&gt;#&lt;/a&gt; Raft 算法基础&lt;/h2&gt;
&lt;p&gt;Raft 算法是一种 **&lt;font color=&#39;#B32015&#39;&gt;通过对日志复制管理来达到集群节点一致性&lt;/font&gt;** 的算法。这个日志复制管理发生在集群节点中的 Leader 与 Followers 之间。&lt;font color=&#39;red&#39;&gt;Raft 通过选举出的 Leader 节点负责管理日志复制过程，以实现各个节点间数据的一致性&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;节点类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#节点类型&#34;&gt;#&lt;/a&gt; 节点类型&lt;/h3&gt;
&lt;p&gt;一个 Raft 集群包括若干服务器，在任意的时间，每个服务器一定会处于以下&lt;font color=&#39;red&#39;&gt;三个状态&lt;/font&gt;中的一个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Leader&lt;/code&gt; ：负责发起心跳；响应客户端的读写请求；创建、同步（复制）日志；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Candidate&lt;/code&gt; ：Leader 选举的候选人，由 Follower 转化而来；发起投票参与竞选；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Follower&lt;/code&gt; ：可以处理客户端的读请求；接受 Leader 的心跳；同步来自于 Leader 的日志；当接收到其它 Candidate 的投票请求后，可以进行投票；当 Leader 挂了后，会转变为 Candidate 发起 Leader 选举；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在正常的情况下，只有一个服务器是 Leader，剩下的服务器是 Follower。Follower 是被动的，它们不会发送任何请求，只是响应来自 Leader 和 Candidate 的请求。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/paxos-server-state.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;任期term&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任期term&#34;&gt;#&lt;/a&gt; 任期（term）&lt;/h3&gt;
&lt;p&gt;如下图所示，&lt;font color=&#39;red&#39;&gt;raft 算法将时间划分为任意长度的任期（term），任期用连续的数字表示，看作当前 term 号&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一个任期的开始都是一次选举，在选举开始时，一个或多个 Candidate 会尝试成为 Leader。&lt;/li&gt;
&lt;li&gt;如果一个 Candidate 赢得了选举，它就会在该任期内担任 Leader。&lt;/li&gt;
&lt;li&gt;如果没有选出 Leader，将会开启另一个任期，并立刻开始下一次选举。【t3】&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;raft 算法保证在给定的一个任期最少要有一个 Leader&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任期规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个节点都会存储当前的 term 号，当服务器之间进行通信时会交换当前的 term 号；&lt;/li&gt;
&lt;li&gt;如果有服务器发现自己的 term 号比其他人小，那么他会更新到较大的 term 值；&lt;/li&gt;
&lt;li&gt;如果一个 Candidate 或者 Leader 发现自己的 term 过期了，他会立即退回成 Follower；&lt;/li&gt;
&lt;li&gt;如果一台服务器收到的请求的 term 号是过期的，那么它会拒绝此次请求；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/paxos-term.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志&#34;&gt;#&lt;/a&gt; 日志&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;entry&lt;/code&gt;  ：每一个事件成为 entry，只有 Leader 可以创建 entry。entry 的内容为  &lt;code&gt;&amp;lt;term,index,cmd&amp;gt;&lt;/code&gt;  其中 cmd 是可以应用到状态机的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;log&lt;/code&gt;  ：&lt;font color=&#39;red&#39;&gt;由 entry 构成的数组&lt;/font&gt;，每一个 entry 都有一个表明自己在 log 中的 index。只有 Leader 才可以改变其他节点的 log。entry 总是先被 Leader 添加到自己的 log 数组中，然后再发起共识请求，获得同意后才会被 Leader 提交给状态机。Follower 只能从 Leader 获取新日志和当前的 commitIndex，然后把对应的 entry 应用到自己的状态机中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;leader-选举&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#leader-选举&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟Leader 选举&lt;/mark&gt;&lt;/h2&gt;
&lt;p&gt;Raft 算法使用&lt;font color=&#39;red&#39;&gt;心跳机制&lt;/font&gt;来触发集群中 Leader 的选举。&lt;/p&gt;
&lt;p&gt;如果一台服务器能够收到来自 Leader 或者 Candidate 的有效信息，那么它会一直保持为 Follower 状态，并且刷新自己的 electionElapsed（选举已用时间），重新计时。&lt;/p&gt;
&lt;p&gt;Leader 会向所有的 Follower 周期性发送心跳来保证自己的 Leader 地位。&lt;font color=&#39;red&#39;&gt;如果一个 Follower 在一个心跳超时周期内没有收到 Leader 的心跳信息，则认为 Leader 挂了，这叫做&lt;strong&gt;选举超时&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;为了开始新的选举，Follower 会自增自己的 term 号，并且转换状态为 Candidate。然后他会向所有节点发起 RequestVoteRPC 请求， Candidate 的状态会持续到以下情况发生：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;该节点赢得选举&lt;/font&gt;。条件是该 Candidate &lt;font color=&#39;red&#39;&gt;在一个任期内，收到了来自集群内的多数选票 &lt;code&gt;（N/2+1）&lt;/code&gt; &lt;/font&gt;，它就可以成为 Leader。然后会将消息广播给所有其它节点，通知大家我是新的 Leader 了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;其他节点赢得选举&lt;/font&gt;。在该 Candidate 等待选票的时候，它可能&lt;font color=&#39;red&#39;&gt;收到其他节点声明自己是 Leader 的心跳&lt;/font&gt;，此时有两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;对方的 term 号 ≥ 自己的 term 号，说明对方已经成为 Leader，则自己回退为 Follower&lt;/font&gt; 。&lt;/li&gt;
&lt;li&gt;对方的 term 号 ＜ 自己的 term 号，那么会拒绝该请求，并让对方节点更新 term 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;一轮选举结束无人胜出，重新选举&lt;/font&gt;。由于可能&lt;font color=&#39;red&#39;&gt;同一时刻出现多个 Candidate，导致没有 Candidate 获得大多数选票（即：没有收到过半选票，也没有收到新 Leader 通知）&lt;/font&gt;。如果没有其他手段来重新分配选票的话，那么可能会无限重复下去。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;raft 使用了 **&lt;font color=&#39;red&#39;&gt;随机的选举超时时间&lt;/font&gt;**（ &lt;code&gt;randomized election timeouts   &lt;/code&gt; ）来避免上述情况。&lt;font color=&#39;red&#39;&gt;其会为这些 Follower 随机分配一个选举发起时间 election timeout，只有到达了 election timeout 时间的 Follower 才能转变为 candidate，否则等待&lt;/font&gt;。那么 election timeout 较小的 Follower 则会转变为 candidate 然后先发起选举，一般情况下其会优先获取到过半选票成为新的 leader。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;日志复制数据同步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志复制数据同步&#34;&gt;#&lt;/a&gt; 日志复制（数据同步）&lt;/h2&gt;
&lt;p&gt;一旦选出了 Leader，它就开始接受客户端的请求。&lt;font color=&#39;red&#39;&gt;每一个客户端的请求都包含一条需要被复制状态机（ &lt;code&gt;Replicated State Machine&lt;/code&gt; ）执行的命令&lt;/font&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Leader 收到客户端请求后，会生成一个 entry，包含 &lt;code&gt;&amp;lt;index,term,cmd&amp;gt;&lt;/code&gt; 。将这个 entry 添加到自己的日志末尾后，&lt;font color=&#39;red&#39;&gt;向所有的节点广播该 entry，要求其他服务器复制这条 entry&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;如果 Follower 接受该 entry，则会将 entry 添加到自己的日志后面&lt;/font&gt;，同时返回给 Leader 同意。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Leader 收到了多数的成功响应，&lt;font color=&#39;red&#39;&gt;Leader 会将这个 entry 应用到自己的状态机中&lt;/font&gt;，之后可以认为这个 entry 是 committed 的，并且向客户端返回执行结果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;raft 保证以下两个性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在两个日志里，有两个 entry 拥有相同的 index 和 term，那么它们一定有相同的 cmd&lt;/li&gt;
&lt;li&gt;在两个日志里，有两个 entry 拥有相同的 index 和 term，那么它们前面的 entry 也一定相同&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通过 “仅有 Leader 可以生成 entry” 来保证第一个性质，第二个性质需要 **&lt;font color=&#39;red&#39;&gt;一致性检查&lt;/font&gt;** 来进行保证。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般情况下，Leader 和 Follower 的日志保持一致，然后，Leader 的崩溃会导致日志不一样，这样一致性检查会产生失败。&lt;font color=&#39;red&#39;&gt;Leader 通过强制 Follower 复制自己的日志来处理日志的不一致&lt;/font&gt;。这就意味着，在 Follower 上的冲突日志会被 Leader 的日志覆盖。为了使得 Follower 的日志和 Leader 的日志一致，Leader 需要找到 Follower 与它日志一致的地方，然后删除 Follower 在该位置之后的日志，接着把 Leader 自己在这之后的日志发送给 Follower。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Leader 给每一个 Follower 维护了一个  &lt;code&gt;nextIndex&lt;/code&gt; ，它表示 Leader 将要发送给该 Follower 的下一条日志条目的索引&lt;/font&gt;。当一个 Leader 开始掌权时，它会将  &lt;code&gt;nextIndex&lt;/code&gt;  初始化为它的最新的日志条目索引数 + 1。如果一个 Follower 的日志和 Leader 的不一致， &lt;code&gt;AppendEntries&lt;/code&gt;  一致性检查会在下一次  &lt;code&gt;AppendEntries RPC&lt;/code&gt;  时返回失败。在失败之后，Leader 会将  &lt;code&gt;nextIndex&lt;/code&gt;  递减然后重试  &lt;code&gt;AppendEntries RPC&lt;/code&gt; 。&lt;font color=&#39;red&#39;&gt;最终  &lt;code&gt;nextIndex&lt;/code&gt;  会达到一个 Leader 和 Follower 日志一致的地方&lt;/font&gt;。这时， &lt;code&gt;AppendEntries&lt;/code&gt;  会返回成功，Follower 中冲突的日志条目都被移除了，并且添加所缺少的上了 Leader 的日志条目。&lt;font color=&#39;red&#39;&gt;一旦  &lt;code&gt;AppendEntries&lt;/code&gt;  返回成功，Follower 和 Leader 的日志就一致了，这样的状态会保持到该任期结束&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&#34;leader-宕机处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#leader-宕机处理&#34;&gt;#&lt;/a&gt; Leader 宕机处理&lt;/h2&gt;
&lt;h3 id=&#34;请求到达前-leader-挂了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请求到达前-leader-挂了&#34;&gt;#&lt;/a&gt; 请求到达前 Leader 挂了&lt;/h3&gt;
&lt;p&gt;Leader 在 client 发送写操作请求到达之前就挂了，因为请求还没有到达集群，所以这个请求对于集群来说就没有存在过，&lt;font color=&#39;red&#39;&gt;对集群数据的一致性没有任何影响&lt;/font&gt;。Leader 挂了之后，&lt;font color=&#39;red&#39;&gt;会选举产生新的 Leader&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;由于 Stale Leader （旧领导）并未向 client 发送成功处理响应，所以&lt;font color=&#39;red&#39;&gt; client 会重新发送该写操作请求&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;未开始同步数据前-leader-挂了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#未开始同步数据前-leader-挂了&#34;&gt;#&lt;/a&gt; 未开始同步数据前 Leader 挂了&lt;/h3&gt;
&lt;p&gt;client 发送写操作请求给 Leader，请求到达 Leader 后，Leader 还没有开始向 Followers 发出数据就挂了。这时集群会&lt;font color=&#39;red&#39;&gt;选举产生新的 Leader&lt;/font&gt;。&lt;font color=&#39;red&#39;&gt;Stale Leader 重启后会作为 Follower 重新加入集群，并同步新 Leader 中的数据以保证数据一致性&lt;/font&gt;。之前接收到 client 的数据被丢弃。&lt;/p&gt;
&lt;p&gt;由于 Stale Leader 并未向 client 发送成功处理响应，所以&lt;font color=&#39;red&#39;&gt; client 会重新发送该写操作请求&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;同步完部分后-leader-挂了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步完部分后-leader-挂了&#34;&gt;#&lt;/a&gt; 同步完部分后 Leader 挂了&lt;/h3&gt;
&lt;p&gt;client 发送写操作请求给 Leader，Leader 接收完数据后向所有 Follower 发送数据。在部分 Follower 接收到数据后 Leader 挂了。由于 Leader 挂了，就&lt;font color=&#39;red&#39;&gt;会发起新的 Leader 选举&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;若 Leader 产生于已完成数据接收的 Follower&lt;/font&gt;，其会继续将前面接收到的写操作请求转换为日志，并写入到本地状态机，并向所有 Flollower 发出询问。在获取过半同意响应后会向所有 Followers 发送 commit 指令，同时向 client 进行响应。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;若 Leader 产生于尚未完成数据接收的 Follower&lt;/font&gt;，那么原来已完成接收的 Follower 则会放弃曾接收到的数据。由于 client 没有接收到响应，所以 client 会重新发送该写操作请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;commit-通知发出后-leader-挂了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#commit-通知发出后-leader-挂了&#34;&gt;#&lt;/a&gt; commit 通知发出后 Leader 挂了&lt;/h3&gt;
&lt;p&gt;client 发送写操作请求给 Leader， Leader 也成功向所有 Followers 发出的 commit 指令，并向 client 发出响应后，Leader 挂了。&lt;/p&gt;
&lt;p&gt;由于 Stale Leader 已经向 client 发送成功接收响应，且 commit 通知已经发出，说明&lt;font color=&#39;red&#39;&gt;这个写操作请求已经被 server 成功处理&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&#34;安全性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全性&#34;&gt;#&lt;/a&gt; 安全性&lt;/h2&gt;
&lt;h3 id=&#34;选举限制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选举限制&#34;&gt;#&lt;/a&gt; 选举限制&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Leader 需要保证自己存储全部已经提交的日志条目&lt;/font&gt;。这样才可以使日志条目只有一个流向：从 Leader 流向 Follower，Leader 永远不会覆盖已经存在的日志条目。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;每个 Candidate 发送 RequestVoteRPC 时，都会带上最后一个 entry 的信息。所有节点收到投票信息时，会对该 entry 进行比较，&lt;strong&gt;如果发现自己的日志更新，则拒绝投票给该 Candidate&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;判断日志新旧的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个日志的 term 不同，term 大的更新&lt;/li&gt;
&lt;li&gt;如果 term 相同，更长的 index 更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;节点崩溃&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#节点崩溃&#34;&gt;#&lt;/a&gt; 节点崩溃&lt;/h3&gt;
&lt;p&gt;如果 Leader 崩溃，集群中的节点在 electionTimeout 时间内没有收到 Leader 的心跳信息就会触发新一轮的 Leader 选举，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;在 Leader 选举期间，整个集群对外是不可用的&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果 Follower 和 Candidate 崩溃，处理方式会简单很多。之后发送给它的 RequestVoteRPC 和 AppendEntriesRPC 会失败。由于 raft 的所有请求都是幂等的，所以失败的话会无限的重试。如果崩溃恢复后，就可以收到新的请求，然后选择追加或者拒绝 entry。&lt;/p&gt;
&lt;h3 id=&#34;时间与可用性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#时间与可用性&#34;&gt;#&lt;/a&gt; 时间与可用性&lt;/h3&gt;
&lt;p&gt;raft 的要求之一就是&lt;font color=&#39;red&#39;&gt;安全性不依赖于时间：系统不能仅仅因为一些事件发生的比预想的快一些或者慢一些就产生错误&lt;/font&gt;。为了保证上述要求，最好能满足以下的时间条件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;broadcastTime &amp;lt;&amp;lt; electionTimeout &amp;lt;&amp;lt; MTBF
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;broadcastTime&lt;/code&gt; ：向其他节点并发发送消息的平均响应时间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;electionTimeout&lt;/code&gt; ：选举超时时间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MTBF(mean time between failures)&lt;/code&gt; ：单台机器的平均健康时间；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;broadcastTime&lt;/code&gt;  应该比 &lt;code&gt;electionTimeout&lt;/code&gt;  小一个数量级，为的是使 &lt;code&gt;Leader&lt;/code&gt;  能够持续发送心跳信息（heartbeat）来阻止 &lt;code&gt;Follower&lt;/code&gt;  开始选举；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;electionTimeout&lt;/code&gt;  也要比 &lt;code&gt;MTBF&lt;/code&gt;  小几个数量级，为的是使得系统稳定运行。当 &lt;code&gt;Leader&lt;/code&gt;  崩溃时，大约会在整个 &lt;code&gt;electionTimeout&lt;/code&gt;  的时间内不可用；我们希望这种情况仅占全部时间的很小一部分。&lt;/p&gt;
&lt;p&gt;由于 &lt;code&gt;broadcastTime&lt;/code&gt;  和 &lt;code&gt;MTBF&lt;/code&gt;  是由系统决定的属性，因此需要决定 &lt;code&gt;electionTimeout&lt;/code&gt;  的时间。&lt;/p&gt;
&lt;p&gt;一般来说，broadcastTime 一般为  &lt;code&gt;0.5～20ms&lt;/code&gt; ，electionTimeout 可以设置为  &lt;code&gt;10～500ms&lt;/code&gt; ，MTBF 一般为一两个月。&lt;/p&gt;
&lt;h2 id=&#34;动画演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动画演示&#34;&gt;#&lt;/a&gt; 动画演示&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RoZXNlY3JldGxpdmVzb2ZkYXRhLmNvbS9yYWZ0Lw==&#34;&gt;http://thesecretlivesofdata.com/raft/&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;raft-概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raft-概述&#34;&gt;#&lt;/a&gt; raft 概述&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145626883.png&#34; alt=&#34;image-20231218145626883&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145641429.png&#34; alt=&#34;image-20231218145641429&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;leader-选举-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#leader-选举-2&#34;&gt;#&lt;/a&gt; Leader 选举&lt;/h3&gt;
&lt;p&gt;在 Raft 中，有两个控制选举的超时设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt; &lt;code&gt;election timeout&lt;/code&gt; （选举超时）&lt;/font&gt;：表示 Follower 等待转变为 Candidate 的倒计时间，随机设置在 150ms ~ 300ms 之间。某个 Follower 率先选举超时后，它成为 Candidate，开始新的选举任期（term 加 1），并为自己投一票，同时向其他节点发送请求投票的消息。如果接收节点在本任期内尚未投票，那么它将投票给 Candidate。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt; &lt;code&gt;heartbeat timeout&lt;/code&gt; （心跳超时）&lt;/font&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218110127195.png&#34; alt=&#34;image-20231218110127195&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【&lt;font color=&#39;cornflowerblue&#39;&gt;election timeout（选举超时）&lt;/font&gt;&lt;/font&gt;表示 Follower 等待转变为 Candidate 的倒计时间，随机设置在 150ms ~ 300ms 之间。】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218142116228.png&#34; alt=&#34;image-20231218142116228&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【某个 Follower 率先选举超时后，它成为 Candidate，开始新的选举任期（term 加1），并为自己投一票】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218142238093.png&#34; alt=&#34;image-20231218142238093&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【同时 Candidate 向其他节点发送请求投票的消息】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218142326741.png&#34; alt=&#34;image-20231218142326741&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【如果接收节点在本任期内尚未投票，那么它将投票给 Candidate】&lt;/center&gt;
&lt;center&gt;【节点重置其选举超时】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218143246476.png&#34; alt=&#34;image-20231218143246476&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【一旦 Candidate 获得多数票，他就会成为 Leader】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218143321866.png&#34; alt=&#34;image-20231218143321866&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【Leader 开始向其 Follower 周期性地发送 Append Entries 消息。这些消息按照&lt;font color=&#39;cornflowerblue&#39;&gt; heartbeat timeout（心跳超时）&lt;/font&gt;&lt;/font&gt;指定的时间间隔发送。】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218143548477.png&#34; alt=&#34;image-20231218143548477&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【然后 Followers 回复每条 Append Entries 消息。】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144001221.png&#34; alt=&#34;image-20231218144001221&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【这个选举 term 将持续到某个 Follower 停止接收心跳，并成为 Candidate 为止。让我们阻止 Leader 并观看重新选举的发生。】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144043076.png&#34; alt=&#34;image-20231218144043076&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【节点 B 现在是第 2 个 term 的 Leader。需要多数票才能保证每个任期只能选举一名领导人。如果两个节点同时成为候选人，则可能会发生&lt;font color=&#39;red&#39;&gt;分裂投票&lt;/font&gt;&lt;/font&gt;。】&lt;/center&gt;
&lt;hr /&gt;
&lt;p&gt;分裂投票的例子：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144355618.png&#34; alt=&#34;image-20231218144355618&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144415586.png&#34; alt=&#34;image-20231218144415586&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144428586.png&#34; alt=&#34;image-20231218144428586&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144443566.png&#34; alt=&#34;image-20231218144443566&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144459719.png&#34; alt=&#34;image-20231218144459719&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;日志复制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志复制&#34;&gt;#&lt;/a&gt; 日志复制&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144528293.png&#34; alt=&#34;image-20231218144528293&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144543849.png&#34; alt=&#34;image-20231218144543849&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144606513.png&#34; alt=&#34;image-20231218144606513&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144617130.png&#34; alt=&#34;image-20231218144617130&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144634196.png&#34; alt=&#34;image-20231218144634196&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144648281.png&#34; alt=&#34;image-20231218144648281&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144657566.png&#34; alt=&#34;image-20231218144657566&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144711183.png&#34; alt=&#34;image-20231218144711183&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144727919.png&#34; alt=&#34;image-20231218144727919&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144744496.png&#34; alt=&#34;image-20231218144744496&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144802996.png&#34; alt=&#34;image-20231218144802996&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144841610.png&#34; alt=&#34;image-20231218144841610&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144911945.png&#34; alt=&#34;image-20231218144911945&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144924949.png&#34; alt=&#34;image-20231218144924949&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144938649.png&#34; alt=&#34;image-20231218144938649&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144957469.png&#34; alt=&#34;image-20231218144957469&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145013862.png&#34; alt=&#34;image-20231218145013862&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145026793.png&#34; alt=&#34;image-20231218145026793&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145349524.png&#34; alt=&#34;image-20231218145349524&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145426830.png&#34; alt=&#34;image-20231218145426830&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145447316.png&#34; alt=&#34;image-20231218145447316&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145505919.png&#34; alt=&#34;image-20231218145505919&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145519321.png&#34; alt=&#34;image-20231218145519321&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;gossip-协议详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gossip-协议详解&#34;&gt;#&lt;/a&gt; Gossip 协议详解&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;gossip：闲话、流言蜚语&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;背景-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景-3&#34;&gt;#&lt;/a&gt; 背景&lt;/h2&gt;
&lt;p&gt;在分布式系统中，不同的节点进行数据 / 信息共享是一个基本的需求。&lt;/p&gt;
&lt;p&gt;一种比较简单粗暴的方法就是&lt;strong&gt;集中式发散消息&lt;/strong&gt;，简单来说就是&lt;font color=&#39;red&#39;&gt;一个主节点同时共享最新信息给其他所有节点&lt;/font&gt;，比较适合中心化系统。这种方法的缺陷也很明显，节点多的时候不光&lt;font color=&#39;red&#39;&gt;同步消息的效率低，还太依赖与中心节点，存在单点风险问题&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;于是，&lt;strong&gt;分散式发散消息&lt;/strong&gt;的 &lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Gossip 协议&lt;/font&gt;&lt;/strong&gt; 就诞生了。&lt;/p&gt;
&lt;h2 id=&#34;介绍-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-2&#34;&gt;#&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;Gossip 协议 也叫 Epidemic 协议（流行病协议）或者 Epidemic propagation 算法（疫情传播算法），别名很多。不过这些名字的特点都具有 **&lt;font color=&#39;red&#39;&gt;随机传播特性&lt;/font&gt;**（联想一下病毒传播、癌细胞扩散等生活中常见的情景），这也正是 Gossip 协议最主要的特点。&lt;/p&gt;
&lt;p&gt;Gossip 协议最早是在 ACM 上的一篇 1987 年发表的论文 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC4xMTQ1LzQxODQwLjQxODQx&#34;&gt;《Epidemic Algorithms for Replicated Database Maintenance》&lt;/span&gt;中被提出的。根据论文标题，我们大概就能知道 Gossip 协议当时提出的主要应用是在&lt;font color=&#39;red&#39;&gt;分布式数据库系统中各个副本节点同步数据&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;正如 Gossip 协议其名一样，这是&lt;font color=&#39;red&#39;&gt;一种随机且带有传染性的方式，将信息传播到整个网络中，并在一定时间内，使得系统内的所有节点数据一致&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;在 Gossip 协议下，&lt;font color=&#39;red&#39;&gt;没有所谓的中心节点，每个节点周期性地随机找一个节点互相同步彼此的信息&lt;/font&gt;，理论上来说，各个节点的状态最终会保持一致。&lt;/p&gt;
&lt;p&gt;下面我们来对 Gossip 协议的定义做一个总结：&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;Gossip 协议是一种允许在分布式系统中共享状态的去中心化通信协议，通过这种通信协议，我们可以将信息传播给网络或集群中的所有成员。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用&#34;&gt;#&lt;/a&gt; 应用&lt;/h2&gt;
&lt;p&gt;NoSQL 数据库 Redis 和 Apache Cassandra、服务网格解决方案 Consul 等知名项目都用到了 Gossip 协议，学习 Gossip 协议有助于我们搞清很多技术的底层原理。&lt;/p&gt;
&lt;p&gt;我们这里以 &lt;font color=&#39;gree&#39;&gt;Redis Cluster&lt;/font&gt; 为例说明 Gossip 协议的实际应用。&lt;/p&gt;
&lt;p&gt;我们经常使用的分布式缓存 Redis 的官方集群解决方案（3.0 版本引入） Redis Cluster 就是&lt;font color=&#39;red&#39;&gt;基于 Gossip 协议来实现集群中各个节点数据的最终一致性&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/up-fcacc1eefca6e51354a5f1fc9f2919f51ec.png&#34; alt=&#34;Redis 的官方集群解决方案&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Redis 的官方集群解决方案&lt;/center&gt;
&lt;p&gt;Redis Cluster 是一个典型的分布式系统，分布式系统中的各个节点需要互相通信。既然要相互通信就要遵循一致的通信协议，&lt;font color=&#39;red&#39;&gt;Redis Cluster 中的各个节点基于 &lt;strong&gt;Gossip 协议&lt;/strong&gt; 来进行通信共享信息，每个 Redis 节点都维护了一份集群的状态信息&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;Redis Cluster 的节点之间会相互发送多种 Gossip 消息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;MEET&lt;/font&gt;&lt;/strong&gt;：在 Redis Cluster 中的某个 Redis 节点上执行  &lt;code&gt;CLUSTER MEET ip port&lt;/code&gt;  命令，&lt;font color=&#39;red&#39;&gt;可以向指定的 Redis 节点发送一条 MEET 信息，用于将其添加进 Redis Cluster 成为新的 Redis 节点&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;PING/PONG&lt;/font&gt;&lt;/strong&gt;：Redis Cluster 中的节点都会&lt;font color=&#39;red&#39;&gt;定时地向其他节点发送 PING 消息，来交换各个节点状态信息，检查各个节点状态&lt;/font&gt;，包括在线状态、疑似下线状态 PFAIL 和已下线状态 FAIL。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;FAIL&lt;/font&gt;&lt;/strong&gt;：Redis Cluster 中的节点 A 发现 B 节点 PFAIL，并且在下线报告的有效期限内集群中半数以上的节点将 B 节点标记为 PFAIL，节点 A 就会向集群广播一条 FAIL 消息，通知其他节点将故障节点 B 标记为 FAIL 。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图就是主从架构的 Redis Cluster 的示意图，图中的虚线代表的就是各个节点之间使用 Gossip 进行通信 ，实线表示主从复制。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-cluster-gossip-fO4qDqt2.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;有了 Redis Cluster 之后，不需要专门部署 Sentinel 集群服务了。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Redis Cluster 相当于是内置了 Sentinel 机制，内部的各个节点通过 Gossip 协议互相探测健康状态，在故障时可以自动切换&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;消息传播模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息传播模式&#34;&gt;#&lt;/a&gt; 消息传播模式&lt;/h2&gt;
&lt;p&gt;Gossip 设计了两种可能的消息传播模式：&lt;strong&gt;反熵（Anti-Entropy）&lt;/strong&gt; 和 &lt;strong&gt;传谣（Rumor-Mongering）&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;反熵anti-entropy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反熵anti-entropy&#34;&gt;#&lt;/a&gt; 反熵（Anti-Entropy）&lt;/h3&gt;
&lt;p&gt;根据维基百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;熵的概念最早起源于&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JTg5JUE5JUU3JTkwJTg2JUU1JUFEJUE2&#34;&gt;物理学&lt;/span&gt;，用于度量一个热力学系统的混乱程度。熵最好理解为&lt;font color=&#39;red&#39;&gt;不确定性的量度&lt;/font&gt;，而不是确定性的量度，因为越随机的信源的熵越大。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这里，你可以把反熵中的熵理解为节点之间数据的混乱程度 / 差异性，&lt;font color=&#39;red&#39;&gt;反熵就是指消除不同节点中数据的差异，提升节点间数据的相似度，从而降低熵值&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;具体是如何反熵的呢？&lt;font color=&#39;red&#39;&gt;集群中的节点，每隔段时间就随机选择某个其他节点，然后通过互相交换自己的所有数据，来消除两者之间的差异，实现数据的最终一致性&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;在实现反熵的时候，主要有推、拉和推拉三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推：就是将自己的所有副本数据，推给对方，修复对方副本中的熵。&lt;/li&gt;
&lt;li&gt;拉：就是拉取对方的所有副本数据，修复自己副本中的熵。&lt;/li&gt;
&lt;li&gt;推拉：就是同时修复自己副本和对方副本中的熵。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;伪代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/up-df16e98bf71e872a7e1f01ca31cee93d77b.png&#34; alt=&#34;反熵伪代码&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在我们实际应用场景中，&lt;font color=&#39;red&#39;&gt;一般不会采用随机的节点进行反熵&lt;/font&gt;，而是需要可以的设计一个闭环。这样的话，我们能够在一个确定的时间范围内实现各个节点数据的最终一致性，而不是基于随机的概率。像  &lt;code&gt;InfluxDB&lt;/code&gt;  就是这样来实现反熵的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/%E5%8F%8D%E7%86%B5-%E9%97%AD%E7%8E%AF-TwBsP6eP.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;节点 A 推送数据给节点 B，节点 B 获取到节点 A 中的最新数据。&lt;/li&gt;
&lt;li&gt;节点 B 推送数据给 C，节点 C 获取到节点 A，B 中的最新数据。&lt;/li&gt;
&lt;li&gt;节点 C 推送数据给 A，节点 A 获取到节点 B，C 中的最新数据。&lt;/li&gt;
&lt;li&gt;节点 A 再推送数据给 B 形成闭环，这样节点 B 就获取到节点 C 中的最新数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虽然反熵很简单实用，&lt;font color=&#39;red&#39;&gt;但是节点过多或者节点动态变化的话，反熵就不太适用了&lt;/font&gt;。这个时候，我们想要实现最终一致性就要靠 传谣 (Rumor mongering) 。&lt;/p&gt;
&lt;h3 id=&#34;传谣rumor-mongering&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传谣rumor-mongering&#34;&gt;#&lt;/a&gt; 传谣（Rumor-Mongering）&lt;/h3&gt;
&lt;p&gt;谣言传播指的是分布式系统中的一个节点一旦有了新数据之后，就会变为活跃节点，活跃节点会周期性地联系其他节点向其发送新数据，直到所有的节点都存储了该新数据。&lt;/p&gt;
&lt;p&gt;如下图所示（下图来自于&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tYW5hZ2VtZW50ZnJvbXNjcmF0Y2gud29yZHByZXNzLmNvbS8yMDE2LzA0LzAxL2ludHJvZHVjdGlvbi10by1nb3NzaXAv&#34;&gt; INTRODUCTION TO GOSSIP&lt;/span&gt; 这篇文章）：&lt;/p&gt;
&lt;p&gt;伪代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/20210605170707933.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;谣言传播比较适合节点数量比较多的情况，不过，这种模式下&lt;font color=&#39;red&#39;&gt;要尽量避免传播的信息包不能太大，避免网络消耗太大&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;小结-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小结-3&#34;&gt;#&lt;/a&gt; 小结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;反熵（Anti-Entropy）会传播节点的所有数据，而谣言传播（Rumor-Mongering）只会传播节点新增的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般会给反熵设计一个闭环。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;谣言传播（Rumor-Mongering）比较适合节点数量比较多或者节点动态变化的场景。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优缺点&#34;&gt;#&lt;/a&gt; 优缺点&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、相比于其他分布式协议 / 算法来说，&lt;font color=&#39;red&#39;&gt;Gossip 协议理解起来非常简单&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;2、能够容忍网络上节点的随意地增加或者减少，宕机或者重启，因为 Gossip 协议下这些&lt;font color=&#39;red&#39;&gt;节点都是平等的，去中心化的&lt;/font&gt;。新增加或者重启的节点在理想情况下最终是一定会和其他节点的状态达到一致。&lt;/p&gt;
&lt;p&gt;3、&lt;font color=&#39;red&#39;&gt;速度相对较快&lt;/font&gt;。节点数量比较多的情况下，扩散速度比一个主节点向其他节点传播信息要更快（多播）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺陷&lt;/strong&gt; :&lt;/p&gt;
&lt;p&gt;1、消息需要通过多个传播的轮次才能传播到整个网络中，因此，&lt;font color=&#39;red&#39;&gt;必然会出现各节点状态不一致的情况&lt;/font&gt;。毕竟，Gossip 协议强调的是最终一致，至于达到各个节点的状态一致需要多长时间，谁也无从得知。&lt;/p&gt;
&lt;p&gt;2、由于拜占庭将军问题，&lt;font color=&#39;red&#39;&gt;不允许存在恶意节点&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;3、可能会出现&lt;font color=&#39;red&#39;&gt;消息冗余&lt;/font&gt;的问题。由于消息传播的随机性，同一个节点可能会重复收到相同的消息。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Gossip 协议是一种&lt;font color=&#39;red&#39;&gt;允许在分布式系统中共享状态&lt;/font&gt;的通信协议，通过这种通信协议，我们可以将信息传播给网络或集群中的所有成员。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gossip 协议被 Redis、Apache Cassandra、Consul 等项目应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;谣言传播（Rumor-Mongering）比较适合节点数量比较多或者节点动态变化的场景&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/distributed-microservices/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA&amp;%E7%AE%97%E6%B3%95&amp;%E5%8D%8F%E8%AE%AE/</guid>
            <title>分布式理论&amp;算法&amp;协议</title>
            <link>http://example.com/distributed-microservices/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA&amp;%E7%AE%97%E6%B3%95&amp;%E5%8D%8F%E8%AE%AE/</link>
            <category term="分布式微服务" scheme="http://example.com/categories/distributed-microservices/" />
            <pubDate>Sat, 16 Dec 2023 15:52:05 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;cap-base-理论详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cap-base-理论详解&#34;&gt;#&lt;/a&gt; CAP &amp;amp; BASE 理论详解&lt;/h1&gt;
&lt;h2 id=&#34;cap-理论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cap-理论&#34;&gt;#&lt;/a&gt; CAP 理论&lt;/h2&gt;
&lt;h3 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231217154635468.png&#34; alt=&#34;CAP理论&#34; /&gt;&lt;/p&gt;
&lt;p&gt;CAP 理论指的是 **&lt;font color=&#39;#B32015&#39;&gt;在一个分布式系统中，在设计读写操作时，只能同时满足以下三点中的两个：一致性（C）、可用性（A）、分区容错性（P）&lt;/font&gt;**。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;一致性（ &lt;code&gt;C&lt;/code&gt; onsistency）&lt;/font&gt;：分布式系统中多个主机之间是否能够保持数据一致的特性。即，&lt;font color=&#39;red&#39;&gt;当系统数据发生更新操作后，各个主机中的数据仍然处于一致的状态&lt;/font&gt;。所有节点访问同一份最新的数据副本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;可用性（ &lt;code&gt;A&lt;/code&gt; vailability）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;系统提供的服务必须一直处于可用的状态&lt;/font&gt;。即，对于用户的每一个请求，系统（非故障节点）总是可以在有限的时间内对用户做出合理响应（不是错误 / 超时的响应）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;分区容错性（ &lt;code&gt;P&lt;/code&gt; artition tolerance）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;分布式系统在遇到任何&lt;strong&gt;网络分区故障&lt;/strong&gt;时，仍能够保证对外提供（满足一致性和可用性的）服务&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/partition-tolerance.png&#34; alt=&#34;partition-tolerance&#34; /&gt;&lt;/p&gt;
&lt;center&gt;partition-tolerance&lt;/center&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;网络分区&lt;/strong&gt;：分布式系统中，多个节点之间的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）&lt;font color=&#39;red&#39;&gt;某些节点之间不连通了，整个网络就分成了几块区域&lt;/font&gt;，这就叫网络分区。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不是所谓的3选2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不是所谓的3选2&#34;&gt;#&lt;/a&gt; 不是所谓的 “3 选 2”&lt;/h3&gt;
&lt;p&gt;大部分人解释这一定律时，常常简单的表述为：“一致性、可用性、分区容忍性三者你只能同时达到其中两个，不可能同时达到”。实际上这是一个非常具有误导性质的说法，而且在 CAP 理论诞生 12 年之后，CAP 之父也在 2012 年重写了之前的论文。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1。也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。&lt;/p&gt;
&lt;p&gt;简而言之就是：&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者强一致性 C&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此，&lt;font color=&#39;red&#39;&gt;分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构&lt;/font&gt;。比如 ZooKeeper、HBase 就是 CP 架构，Cassandra、Eureka 就是 AP 架构，Nacos 不仅支持 CP 架构也支持 AP 架构。&lt;/p&gt;
&lt;p&gt;为啥不可能选择 CA 架构呢？举个例子：若系统出现 “分区”，系统中的某个节点在进行写操作。为了保证 C，必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;选择 CP 还是 AP 的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;另外，需要补充说明的一点是：&lt;font color=&#39;red&#39;&gt;如果网络分区正常的话（系统在绝大部分时候所处的状态），也就说不需要保证 P 的时候，C 和 A 能够同时保证。&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&#34;cap-实际应用案例注册中心&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cap-实际应用案例注册中心&#34;&gt;#&lt;/a&gt; CAP 实际应用案例：注册中心&lt;/h3&gt;
&lt;p&gt;我这里以注册中心来探讨一下 CAP 的实际应用。考虑到很多小伙伴不知道注册中心是干嘛的，这里简单以 Dubbo 为例说一说。&lt;/p&gt;
&lt;p&gt;下图是 Dubbo 的架构图。注册中心 Registry 在其中扮演了什么角色呢？提供了什么服务呢？&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;注册中心负责服务地址的注册与查找，相当于服务的目录，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231217154850034.png&#34; alt=&#34;image-20231217154850034&#34; /&gt;&lt;/p&gt;
&lt;p&gt;常见的可以作为注册中心的组件有：ZooKeeper、Eureka、Nacos...。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;**ZooKeeper 保证的是 CP。** 任何时刻对 ZooKeeper 的读请求都能得到一致性的结果，但是，&lt;font color=&#39;red&#39;&gt;ZooKeeper 不保证每次请求的可用性，比如在 Leader 选举过程中，或者半数以上的机器不可用的时候，或者当 Leader 节点中的数据发生了变化但 Follower 还没有同步完成之前，整个 ZooKeeper 集群是不对外提供服务的&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eureka 保证的则是 AP。&lt;/strong&gt; Eureka 在设计的时候就是优先保证 A （可用性）。&lt;font color=&#39;red&#39;&gt;在 Eureka 中不存在什么 Leader 节点，每个节点都是一样的、平等的&lt;/font&gt;。因此 Eureka 不会像 ZooKeeper 那样出现选举过程中或者半数以上的机器不可用的时候服务就是不可用的情况。 &lt;font color=&#39;red&#39;&gt;Eureka 保证即使大部分节点挂掉也不会影响正常提供服务，只要有一个节点是可用的就行了，只不过这个节点上的数据可能并不是最新的&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nacos 不仅支持 CP 也支持 AP。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;🐛 修正（参见：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1NuYWlsY2xpbWIvSmF2YUd1aWRlL2lzc3Vlcy8xOTA2&#34;&gt;issue#1906&lt;/span&gt;）&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;ZooKeeper 通过可线性化（Linearizable）写入、全局 FIFO 顺序访问等机制来保障数据一致性。多节点部署的情况下， ZooKeeper 集群处于 Quorum 模式。Quorum 模式下的 ZooKeeper 集群，是一组 ZooKeeper 服务器节点组成的集合，其中大多数节点必须同意任何变更才能被视为有效。&lt;/p&gt;
&lt;p&gt;由于 Quorum 模式下的读请求不会触发各个 ZooKeeper 节点之间的数据同步，因此在某些情况下还是可能会存在读取到旧数据的情况，导致不同的客户端视图上看到的结果不同，这可能是由于网络延迟、丢包、重传等原因造成的。ZooKeeper 为了解决这个问题，提供了 Watcher 机制和版本号机制来帮助客户端检测数据的变化和版本号的变更，以保证数据的一致性。&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小结&#34;&gt;#&lt;/a&gt; 小结&lt;/h3&gt;
&lt;p&gt;在进行分布式系统设计和开发时，我们不应该仅仅局限在 CAP 问题上，还要关注系统的扩展性、可用性等等。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;在系统发生 “分区” 的情况下，CAP 理论只能满足 CP 或者 AP&lt;/font&gt;。要注意的是，这里的前提是系统发生了 “分区”。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;如果系统没有发生 “分区” 的话，节点间的网络连接通信正常的话，也就不存在 P 了。这个时候，我们就可以同时保证 C 和 A 了&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;总结：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;如果系统发生 “分区”，我们要考虑选择 CP 还是 AP。如果系统没有发生 “分区” 的话，我们要思考如何保证 CA 。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;base-理论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#base-理论&#34;&gt;#&lt;/a&gt; BASE 理论&lt;/h2&gt;
&lt;h3 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;BASE 是对 CAP 中一致性 C 和可用性 A 权衡的结果&lt;/font&gt;，其来源于对大规模互联网系统分布式实践的总结，是基于 CAP 定理逐步演化而来的，它大大降低了我们对系统的要求，由以下三个短语的简写组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt; &lt;code&gt;B&lt;/code&gt; asically  &lt;code&gt;A&lt;/code&gt; vailable（基本可用）&lt;/font&gt;：分布式系统在出现不可预知故障的时候，&lt;font color=&#39;red&#39;&gt;允许损失部分可用性&lt;/font&gt;。但这绝不等价于系统不可用。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt; &lt;code&gt;S&lt;/code&gt; oft state（软状态）&lt;/font&gt;：允许系统数据存在的中间状态，并认为该中间状态的存在不会影响系统的整体可用性。即，&lt;font color=&#39;red&#39;&gt;允许系统主机间进行数据同步的过程存在一定延时&lt;/font&gt;。软状态，其实就是一种灰度状态，过渡状态。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt; &lt;code&gt;E&lt;/code&gt; ventually consistent（最终一致性）&lt;/font&gt;：强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是&lt;font color=&#39;red&#39;&gt;需要系统保证最终数据能够达到一致，而不需要保证系统数据的实时一致性&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;核心思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#核心思想&#34;&gt;#&lt;/a&gt; 核心思想&lt;/h3&gt;
&lt;p&gt;BASE 理论的核心思想：&lt;font color=&#39;red&#39;&gt;即使无法做到强一致性 C ，但每个系统都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性 E &lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也就是 **&lt;font color=&#39;red&#39;&gt;牺牲数据的强一致性 C 来满足系统的基本可用性 BA&lt;/font&gt;** ，系统中一部分数据不可用或者不一致时，仍需要保持系统整体 “基本可用”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;**BASE 理论本质上是对 CAP 的延伸和补充，更具体地说，是对 CAP 中 AP 方案的一个补充。**AP 方案只是在系统发生分区的时候放弃一致性，而不是永远放弃一致性。&lt;font color=&#39;red&#39;&gt;在分区故障恢复后，系统应该达到最终一致性&lt;/font&gt;。这一点其实就是 BASE 理论延伸的地方。&lt;/p&gt;
&lt;h3 id=&#34;三要素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三要素&#34;&gt;#&lt;/a&gt; 三要素&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC81LzI0LzE2MzkxNDgwNmQ5ZTE1YzY&#34; alt=&#34;BASE理论三要素&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;基本可用ba&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本可用ba&#34;&gt;#&lt;/a&gt; 基本可用（BA）&lt;/h4&gt;
&lt;p&gt;基本可用是指分布式系统在出现不可预知故障的时候，&lt;font color=&#39;red&#39;&gt;允许损失部分可用性&lt;/font&gt;。但是，这绝不等价于系统不可用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;响应时间上的损失&lt;/strong&gt;：正常情况下，处理用户请求需要 0.5s 返回结果，但是由于系统出现故障，处理用户请求的时间变为 3 s。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统功能上的损失&lt;/strong&gt;：正常情况下，用户可以使用系统的全部功能，但是由于系统访问量突然剧增，系统的部分非核心功能无法使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;软状态s&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软状态s&#34;&gt;#&lt;/a&gt; 软状态（S）&lt;/h4&gt;
&lt;p&gt;软状态指允许系统中的数据存在中间状态（&lt;strong&gt;CAP 理论中的数据不一致&lt;/strong&gt;），并认为该中间状态的存在不会影响系统的整体可用性，即&lt;font color=&#39;red&#39;&gt;允许系统在不同节点的数据副本之间进行数据同步的过程存在延时&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;最终一致性e&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最终一致性e&#34;&gt;#&lt;/a&gt; 最终一致性（E）&lt;/h4&gt;
&lt;p&gt;最终一致性强调的是&lt;font color=&#39;red&#39;&gt;系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态&lt;/font&gt;。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，&lt;font color=&#39;red&#39;&gt;而不需要实时保证系统数据的强一致性&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分布式一致性的 3 种级别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;强一致性&lt;/strong&gt;：系统写入了什么，读出来的就是什么。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;弱一致性&lt;/strong&gt;：不一定可以读取到最新写入的值，也不保证多少时间之后读取到的数据是最新的，只是会尽量保证某个时刻达到数据一致的状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最终一致性&lt;/strong&gt;：弱一致性的升级版，系统会保证在一定时间内达到数据一致的状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;业界比较推崇是最终一致性级别，但是某些对数据一致要求十分严格的场景比如银行转账还是要保证强一致性。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那实现最终一致性的具体方式是什么呢？&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2drLmxpbmsvYS8xMHJaTQ==&#34;&gt;《分布式协议与算法实战》&lt;/span&gt; 中是这样介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;读时修复&lt;/strong&gt;：在读取数据时，检测数据的不一致，进行修复。比如 Cassandra 的 Read Repair 实现，具体来说，在向 Cassandra 系统查询数据的时候，如果检测到不同节点的副本数据不一致，系统就自动修复数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;写时修复&lt;/font&gt;&lt;/strong&gt;: 在写入数据，检测数据的不一致时，进行修复。比如 Cassandra 的 Hinted Handoff 实现。具体来说，Cassandra 集群的节点之间远程写数据的时候，如果写失败 就将数据缓存下来，然后定时重传，修复数据的不一致性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步修复&lt;/strong&gt;：这个是最常用的方式，通过定时对账检测副本数据的一致性，并修复。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;比较推荐 &lt;strong&gt;写时修复&lt;/strong&gt;，这种方式对性能消耗比较低。&lt;/p&gt;
&lt;h3 id=&#34;小结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小结-2&#34;&gt;#&lt;/a&gt; 小结&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;ACID 是数据库事务完整性的理论，CAP 是分布式系统设计理论，BASE 是 CAP 理论中 AP 方案的延伸。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;paxos-算法详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#paxos-算法详解&#34;&gt;#&lt;/a&gt; Paxos 算法详解&lt;/h1&gt;
&lt;h2 id=&#34;背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景&#34;&gt;#&lt;/a&gt; 背景&lt;/h2&gt;
&lt;p&gt;Paxos 算法是 Leslie Lamport（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JThFJUIxJUU2JTk2JUFGJUU1JTg4JUE5JUMyJUI3JUU1JTg1JUIwJUU0JUJDJUFGJUU3JTg5JUI5&#34;&gt;莱斯利・兰伯特&lt;/span&gt;）在 1990 年提出了一种 **&lt;font color=&#39;#B32015&#39;&gt;分布式系统共识算法&lt;/font&gt;**。这也是第一个被证明完备的共识算法（前提是不存在拜占庭将军问题，也就是没有恶意节点）。&lt;/p&gt;
&lt;p&gt;为了介绍 Paxos 算法，兰伯特专门写了一篇幽默风趣的论文。在这篇论文中，他虚拟了一个叫做 Paxos 的希腊城邦来更形象化地介绍 Paxos 算法。&lt;/p&gt;
&lt;p&gt;不过，审稿人并不认可这篇论文的幽默。于是，他们就给兰伯特说：“如果你想要成功发表这篇论文的话，必须删除所有 Paxos 相关的故事背景”。兰伯特一听就不开心了：“我凭什么修改啊，你们这些审稿人就是缺乏幽默细胞，发不了就不发了呗！”。&lt;/p&gt;
&lt;p&gt;于是乎，提出 Paxos 算法的那篇论文在当时并没有被成功发表。&lt;/p&gt;
&lt;p&gt;直到 1998 年，系统研究中心 (Systems Research Center，SRC）的两个技术研究员需要找一些合适的分布式算法来服务他们正在构建的分布式系统，Paxos 算法刚好可以解决他们的部分需求。因此，兰伯特就把论文发给了他们。在看了论文之后，这俩大佬觉得论文还是挺不错的。于是，兰伯特在 1998 年重新发表论文 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xhbXBvcnQuYXp1cmV3ZWJzaXRlcy5uZXQvcHVicy9sYW1wb3J0LXBheG9zLnBkZg==&#34;&gt;《The Part-Time Parliament》&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;论文发表之后，各路学者直呼看不懂，言语中还略显调侃之意。这谁忍得了，在 2001 年的时候，兰伯特专门又写了一篇 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xhbXBvcnQuYXp1cmV3ZWJzaXRlcy5uZXQvcHVicy9wYXhvcy1zaW1wbGUucGRm&#34;&gt;《Paxos Made Simple》&lt;/span&gt; 的论文来简化对 Paxos 的介绍，主要讲述&lt;font color=&#39;red&#39;&gt;两阶段共识协议&lt;/font&gt;部分，顺便还不忘嘲讽一下这群学者。&lt;/p&gt;
&lt;p&gt;《Paxos Made Simple》这篇论文就 14 页，相比于 《The Part-Time Parliament》的 33 页精简了不少。最关键的是这篇论文的摘要就一句话：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/paxos-made-simple-L9ik01kM.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Paxos algorithm, when presented in plain English, is very simple.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译过来的意思大概就是：&lt;font color=&#39;red&#39;&gt;当我用无修饰的英文来描述时，Paxos 算法真心简单！&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;有没有感觉到来自兰伯特大佬满满地嘲讽的味道？&lt;/p&gt;
&lt;h2 id=&#34;介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;Paxos 算法是第一个被证明完备的分布式系统共识算法。共识算法的作用是 **&lt;font color=&#39;red&#39;&gt;让分布式系统中的多个节点之间对某个提案（Proposal）达成一致的看法&lt;/font&gt;**。提案的含义在分布式系统中十分宽泛，像哪一个节点是 Leader 节点、多个事件发生的顺序等等都可以是一个提案。&lt;/p&gt;
&lt;p&gt;兰伯特当时提出的 Paxos 算法主要包含 2 个部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Basic Paxos 算法&lt;/font&gt;&lt;/strong&gt;：描述的是&lt;font color=&#39;red&#39;&gt;多节点之间如何就某个值 (提案 Value) 达成共识&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Multi-Paxos 思想&lt;/font&gt;&lt;/strong&gt;：描述的是执行多个 Basic Paxos 实例，就一系列值达成共识。&lt;font color=&#39;red&#39;&gt;Multi-Paxos 说白了就是执行多次 Basic Paxos &lt;/font&gt;，核心还是 Basic Paxos 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于 Paxos 算法在国际上被公认的非常难以理解和实现，因此不断有人尝试简化这一算法。到了 2013 年才诞生了&lt;font color=&#39;red&#39;&gt;一个比 Paxos 算法更易理解和实现的共识算法 —&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGlzdHJpYnV0ZWQtc3lzdGVtL3RoZW9yZW0mYW1wO2FsZ29yaXRobSZhbXA7cHJvdG9jb2wvcmFmdC1hbGdvcml0aG0uaHRtbA==&#34;&gt;Raft 算法&lt;/span&gt;&lt;/font&gt; 。更具体点来说，&lt;font color=&#39;red&#39;&gt;Raft 是 Multi-Paxos 的一个简化变种&lt;/font&gt;，其简化了 Multi-Paxos 的思想，变得更容易被理解以及工程实现。&lt;/p&gt;
&lt;p&gt;针对没有恶意节点的情况，除了 Raft 算法之外，当前最常用的一些共识算法比如 &lt;strong&gt;ZAB 协议&lt;/strong&gt;、 &lt;strong&gt;Fast Paxos&lt;/strong&gt; 算法都是基于 Paxos 算法改进的。&lt;/p&gt;
&lt;p&gt;针对存在恶意节点的情况，一般使用的是 &lt;strong&gt;工作量证明（POW，Proof-of-Work）&lt;/strong&gt;、 &lt;strong&gt;权益证明（PoS，Proof-of-Stake ）&lt;/strong&gt; 等共识算法。这类共识算法最典型的应用就是&lt;font color=&#39;red&#39;&gt;区块链&lt;/font&gt;，就比如说前段时间以太坊官方宣布其共识机制正在从工作量证明 (PoW) 转变为权益证明 (PoS)。&lt;/p&gt;
&lt;p&gt;区块链系统使用的共识算法需要解决的核心问题是 **&lt;font color=&#39;red&#39;&gt;拜占庭将军问题&lt;/font&gt;** ，这和我们日常接触到的 ZooKeeper、Etcd、Consul 等分布式中间件不太一样。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下面我们来对 Paxos 算法的定义做一个总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Paxos 算法是兰伯特在 1990 年提出了一种分布式系统共识算法。&lt;/li&gt;
&lt;li&gt;兰伯特当时提出的 Paxos 算法主要包含 2 个部分: Basic Paxos 算法和 Multi-Paxos 思想。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;Raft 算法、ZAB 协议、 Fast Paxos 算法都是基于 Paxos 算法改进而来&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basic-paxos-算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#basic-paxos-算法&#34;&gt;#&lt;/a&gt; Basic Paxos 算法&lt;/h2&gt;
&lt;p&gt;Basic Paxos 中存在 3 个重要的角色：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;提议者（Proposer）&lt;/font&gt;&lt;/strong&gt;：也可以叫做协调者（coordinator），提议者&lt;font color=&#39;red&#39;&gt;负责接受客户端的请求，并发起提案&lt;/font&gt;。提案信息通常包括提案编号 (Proposal ID) 、提议的值 (Value)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;接受者（Acceptor）&lt;/font&gt;&lt;/strong&gt;：也可以叫做投票员（voter），&lt;font color=&#39;red&#39;&gt;负责对提议者的提案进行投票，同时需要记住自己的投票历史&lt;/font&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;学习者（Learner）&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;如果有超过半数接受者就某个提议达成了共识，那么学习者就需要接受这个提议，并就该提议作出运算，然后将运算结果返回给客户端&lt;/font&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/up-890fa3212e8bf72886a595a34654918486c.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了减少实现该算法所需的节点数，&lt;font color=&#39;red&#39;&gt;一个节点可以身兼多个角色&lt;/font&gt;。并且，一个提案被选定需要被半数以上的 Acceptor 接受。这样的话，Basic Paxos 算法还&lt;font color=&#39;red&#39;&gt;具备容错性，在少于一半的节点出现故障时，集群仍能正常工作&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;multi-paxos-思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#multi-paxos-思想&#34;&gt;#&lt;/a&gt; Multi Paxos 思想&lt;/h2&gt;
&lt;p&gt;Basic Paxos 算法的仅能就单个值达成共识，为了能够对一系列的值达成共识，我们需要用到 Multi Paxos 思想。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️&lt;strong&gt;注意&lt;/strong&gt;：Multi-Paxos 只是一种思想，这种思想的核心就是&lt;font color=&#39;red&#39;&gt;通过多个 Basic Paxos 实例就一系列值达成共识&lt;/font&gt;。也就是说，Basic Paxos 是 Multi-Paxos 思想的核心，Multi-Paxos 就是多执行几次 Basic Paxos。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于兰伯特提到的 Multi-Paxos 思想缺少代码实现的必要细节 (比如怎么选举领导者)，所以&lt;font color=&#39;red&#39;&gt;在理解和实现上比较困难&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;不过，也不需要担心，我们并不需要自己实现基于 Multi-Paxos 思想的共识算法，业界已经有了比较出名的实现。&lt;font color=&#39;red&#39;&gt;像 Raft 算法就是 Multi-Paxos 的一个变种，其简化了 Multi-Paxos 的思想，变得更容易被理解以及工程实现，实际项目中可以优先考虑 Raft 算法&lt;/font&gt;。&lt;/p&gt;
&lt;h1 id=&#34;raft-算法详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raft-算法详解&#34;&gt;#&lt;/a&gt; Raft 算法详解&lt;/h1&gt;
&lt;h2 id=&#34;背景-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景-2&#34;&gt;#&lt;/a&gt; 背景&lt;/h2&gt;
&lt;p&gt;当今的数据中心和应用程序在高度动态的环境中运行，为了应对高度动态的环境，它们通过额外的服务器进行横向扩展，并且根据需求进行扩展和收缩。同时，服务器和网络故障也很常见。&lt;/p&gt;
&lt;p&gt;因此，&lt;font color=&#39;red&#39;&gt;系统必须在正常操作期间处理服务器的上下线。它们必须对变故做出反应并在几秒钟内自动适应&lt;/font&gt;；对客户来说的话，明显的中断通常是不可接受的。&lt;/p&gt;
&lt;p&gt;幸运的是，&lt;font color=&#39;red&#39;&gt;分布式共识&lt;/font&gt;可以帮助应对这些挑战。&lt;/p&gt;
&lt;h3 id=&#34;拜占庭将军问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拜占庭将军问题&#34;&gt;#&lt;/a&gt; 拜占庭将军问题&lt;/h3&gt;
&lt;p&gt;在介绍共识算法之前，先介绍一个简化版拜占庭将军的例子来帮助理解共识算法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设多位拜占庭将军中没有叛军，信使的信息可靠但有可能被暗杀的情况下，将军们如何达成是否要进攻的一致性决定？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决方案大致可以理解成：&lt;font color=&#39;red&#39;&gt;先在所有的将军中选出一个大将军，用来做出所有的决定&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;举例如下：假如现在一共有 3 个将军 A，B 和 C，每个将军都有一个随机时间的倒计时器。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假设 A 将军的倒计时先结束，这个将军就把自己当成大将军候选人，然后派信使传递选举投票的信息给将军 B 和 C；&lt;/li&gt;
&lt;li&gt;如果将军 B 和 C 还没有把自己当作候选人（自己的倒计时还没有结束），并且没有把选举票投给其他人，它们就会把票投给将军 A；&lt;/li&gt;
&lt;li&gt;信使回到将军 A 时，它知道自己收到了足够的票数，成为了大将军，此后是否需要进攻就由大将军 A 决定；&lt;/li&gt;
&lt;li&gt;然后 A 将军再去派信使通知另外两个将军，自己已经成为了大将军。如果一段时间还没收到将军 B 和 C 的回复（信使可能会被暗杀），那就再重派一个信使，直到收到回复。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;共识算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共识算法&#34;&gt;#&lt;/a&gt; 共识算法&lt;/h3&gt;
&lt;p&gt;共识是可容错系统中的一个基本问题：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;即使面对故障，服务器也可以在共享状态上达成一致&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;共识算法允许&lt;font color=&#39;red&#39;&gt;一组节点像一个整体一样一起工作，即使其中的一些节点出现故障也能够继续工作下去&lt;/font&gt;，其正确性主要是源于复制状态机的性质：一组  &lt;code&gt;Server&lt;/code&gt;  的状态机计算相同状态的副本，即使有一部分的  &lt;code&gt;Server&lt;/code&gt;  宕机了，它们仍然能够继续运行。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/paxos-rsm-architecture.png&#34; alt=&#34;rsm-architecture.png&#34; /&gt;&lt;/p&gt;
&lt;center&gt;复制状态机架构&lt;/center&gt;
&lt;p&gt;一般通过使用&lt;font color=&#39;red&#39;&gt;复制日志&lt;/font&gt;来实现复制状态机。每个  &lt;code&gt;Server&lt;/code&gt;  存储着一份包括命令序列的日志文件，状态机会按顺序执行这些命令。因为每个日志包含相同的命令，并且顺序也相同，所以每个状态机处理相同的命令序列。由于状态机是确定性的，所以处理相同的状态，得到相同的输出。&lt;/p&gt;
&lt;p&gt;因此，&lt;font color=&#39;red&#39;&gt;共识算法的工作就是保持复制日志的一致性&lt;/font&gt;。服务器上的共识模块从客户端接收命令并将它们添加到日志中。它与其他服务器上的共识模块通信，以确保即使某些服务器发生故障。每个日志最终包含相同顺序的请求。一旦命令被正确地复制，它们就被称为已提交。每个服务器的状态机按照日志顺序处理已提交的命令，并将输出返回给客户端。因此，这些服务器形成了一个单一的、高度可靠的状态机。&lt;/p&gt;
&lt;p&gt;适用于实际系统的共识算法通常具有以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全。确保在非拜占庭条件（也就是上文中提到的简易版拜占庭）下的安全性，包括网络延迟、分区、包丢失、复制和重新排序。&lt;/li&gt;
&lt;li&gt;高可用。只要大多数服务器都是可操作的，并且可以相互通信，也可以与客户端进行通信，那么这些服务器就可以看作完全功能可用的。因此，一个典型的由五台服务器组成的集群可以容忍任何两台服务器端故障。假设服务器因停止而发生故障；它们稍后可能会从稳定存储上的状态中恢复并重新加入集群。&lt;/li&gt;
&lt;li&gt;一致性不依赖时序。错误的时钟和极端的消息延迟，在最坏的情况下也只会造成可用性问题，而不会产生一致性问题。&lt;/li&gt;
&lt;li&gt;在集群中大多数服务器响应，命令就可以完成，不会被少数运行缓慢的服务器来影响整体系统性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;raft-算法基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raft-算法基础&#34;&gt;#&lt;/a&gt; Raft 算法基础&lt;/h2&gt;
&lt;p&gt;Raft 算法是一种 **&lt;font color=&#39;#B32015&#39;&gt;通过对日志复制管理来达到集群节点一致性&lt;/font&gt;** 的算法。这个日志复制管理发生在集群节点中的 Leader 与 Followers 之间。&lt;font color=&#39;red&#39;&gt;Raft 通过选举出的 Leader 节点负责管理日志复制过程，以实现各个节点间数据的一致性&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;节点类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#节点类型&#34;&gt;#&lt;/a&gt; 节点类型&lt;/h3&gt;
&lt;p&gt;一个 Raft 集群包括若干服务器，在任意的时间，每个服务器一定会处于以下&lt;font color=&#39;red&#39;&gt;三个状态&lt;/font&gt;中的一个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Leader&lt;/code&gt; ：负责发起心跳；响应客户端的读写请求；创建、同步（复制）日志；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Candidate&lt;/code&gt; ：Leader 选举的候选人，由 Follower 转化而来；发起投票参与竞选；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Follower&lt;/code&gt; ：可以处理客户端的读请求；接受 Leader 的心跳；同步来自于 Leader 的日志；当接收到其它 Candidate 的投票请求后，可以进行投票；当 Leader 挂了后，会转变为 Candidate 发起 Leader 选举；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在正常的情况下，只有一个服务器是 Leader，剩下的服务器是 Follower。Follower 是被动的，它们不会发送任何请求，只是响应来自 Leader 和 Candidate 的请求。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/paxos-server-state.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;任期term&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任期term&#34;&gt;#&lt;/a&gt; 任期（term）&lt;/h3&gt;
&lt;p&gt;如下图所示，&lt;font color=&#39;red&#39;&gt;raft 算法将时间划分为任意长度的任期（term），任期用连续的数字表示，看作当前 term 号&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一个任期的开始都是一次选举，在选举开始时，一个或多个 Candidate 会尝试成为 Leader。&lt;/li&gt;
&lt;li&gt;如果一个 Candidate 赢得了选举，它就会在该任期内担任 Leader。&lt;/li&gt;
&lt;li&gt;如果没有选出 Leader，将会开启另一个任期，并立刻开始下一次选举。【t3】&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;raft 算法保证在给定的一个任期最少要有一个 Leader&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任期规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个节点都会存储当前的 term 号，当服务器之间进行通信时会交换当前的 term 号；&lt;/li&gt;
&lt;li&gt;如果有服务器发现自己的 term 号比其他人小，那么他会更新到较大的 term 值；&lt;/li&gt;
&lt;li&gt;如果一个 Candidate 或者 Leader 发现自己的 term 过期了，他会立即退回成 Follower；&lt;/li&gt;
&lt;li&gt;如果一台服务器收到的请求的 term 号是过期的，那么它会拒绝此次请求；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/paxos-term.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志&#34;&gt;#&lt;/a&gt; 日志&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;entry&lt;/code&gt;  ：每一个事件成为 entry，只有 Leader 可以创建 entry。entry 的内容为  &lt;code&gt;&amp;lt;term,index,cmd&amp;gt;&lt;/code&gt;  其中 cmd 是可以应用到状态机的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;log&lt;/code&gt;  ：&lt;font color=&#39;red&#39;&gt;由 entry 构成的数组&lt;/font&gt;，每一个 entry 都有一个表明自己在 log 中的 index。只有 Leader 才可以改变其他节点的 log。entry 总是先被 Leader 添加到自己的 log 数组中，然后再发起共识请求，获得同意后才会被 Leader 提交给状态机。Follower 只能从 Leader 获取新日志和当前的 commitIndex，然后把对应的 entry 应用到自己的状态机中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;leader-选举&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#leader-选举&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟Leader 选举&lt;/mark&gt;&lt;/h2&gt;
&lt;p&gt;Raft 算法使用&lt;font color=&#39;red&#39;&gt;心跳机制&lt;/font&gt;来触发集群中 Leader 的选举。&lt;/p&gt;
&lt;p&gt;如果一台服务器能够收到来自 Leader 或者 Candidate 的有效信息，那么它会一直保持为 Follower 状态，并且刷新自己的 electionElapsed（选举已用时间），重新计时。&lt;/p&gt;
&lt;p&gt;Leader 会向所有的 Follower 周期性发送心跳来保证自己的 Leader 地位。&lt;font color=&#39;red&#39;&gt;如果一个 Follower 在一个心跳超时周期内没有收到 Leader 的心跳信息，则认为 Leader 挂了，这叫做&lt;strong&gt;选举超时&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;为了开始新的选举，Follower 会自增自己的 term 号，并且转换状态为 Candidate。然后他会向所有节点发起 RequestVoteRPC 请求， Candidate 的状态会持续到以下情况发生：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;该节点赢得选举&lt;/font&gt;。条件是该 Candidate &lt;font color=&#39;red&#39;&gt;在一个任期内，收到了来自集群内的多数选票 &lt;code&gt;（N/2+1）&lt;/code&gt; &lt;/font&gt;，它就可以成为 Leader。然后会将消息广播给所有其它节点，通知大家我是新的 Leader 了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;其他节点赢得选举&lt;/font&gt;。在该 Candidate 等待选票的时候，它可能&lt;font color=&#39;red&#39;&gt;收到其他节点声明自己是 Leader 的心跳&lt;/font&gt;，此时有两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;对方的 term 号 ≥ 自己的 term 号，说明对方已经成为 Leader，则自己回退为 Follower&lt;/font&gt; 。&lt;/li&gt;
&lt;li&gt;对方的 term 号 ＜ 自己的 term 号，那么会拒绝该请求，并让对方节点更新 term 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;一轮选举结束无人胜出，重新选举&lt;/font&gt;。由于可能&lt;font color=&#39;red&#39;&gt;同一时刻出现多个 Candidate，导致没有 Candidate 获得大多数选票（即：没有收到过半选票，也没有收到新 Leader 通知）&lt;/font&gt;。如果没有其他手段来重新分配选票的话，那么可能会无限重复下去。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;raft 使用了 **&lt;font color=&#39;red&#39;&gt;随机的选举超时时间&lt;/font&gt;**（ &lt;code&gt;randomized election timeouts   &lt;/code&gt; ）来避免上述情况。&lt;font color=&#39;red&#39;&gt;其会为这些 Follower 随机分配一个选举发起时间 election timeout，只有到达了 election timeout 时间的 Follower 才能转变为 candidate，否则等待&lt;/font&gt;。那么 election timeout 较小的 Follower 则会转变为 candidate 然后先发起选举，一般情况下其会优先获取到过半选票成为新的 leader。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;日志复制数据同步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志复制数据同步&#34;&gt;#&lt;/a&gt; 日志复制（数据同步）&lt;/h2&gt;
&lt;p&gt;一旦选出了 Leader，它就开始接受客户端的请求。&lt;font color=&#39;red&#39;&gt;每一个客户端的请求都包含一条需要被复制状态机（ &lt;code&gt;Replicated State Machine&lt;/code&gt; ）执行的命令&lt;/font&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Leader 收到客户端请求后，会生成一个 entry，包含 &lt;code&gt;&amp;lt;index,term,cmd&amp;gt;&lt;/code&gt; 。将这个 entry 添加到自己的日志末尾后，&lt;font color=&#39;red&#39;&gt;向所有的节点广播该 entry，要求其他服务器复制这条 entry&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;如果 Follower 接受该 entry，则会将 entry 添加到自己的日志后面&lt;/font&gt;，同时返回给 Leader 同意。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Leader 收到了多数的成功响应，&lt;font color=&#39;red&#39;&gt;Leader 会将这个 entry 应用到自己的状态机中&lt;/font&gt;，之后可以认为这个 entry 是 committed 的，并且向客户端返回执行结果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;raft 保证以下两个性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在两个日志里，有两个 entry 拥有相同的 index 和 term，那么它们一定有相同的 cmd&lt;/li&gt;
&lt;li&gt;在两个日志里，有两个 entry 拥有相同的 index 和 term，那么它们前面的 entry 也一定相同&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通过 “仅有 Leader 可以生成 entry” 来保证第一个性质，第二个性质需要 **&lt;font color=&#39;red&#39;&gt;一致性检查&lt;/font&gt;** 来进行保证。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般情况下，Leader 和 Follower 的日志保持一致，然后，Leader 的崩溃会导致日志不一样，这样一致性检查会产生失败。&lt;font color=&#39;red&#39;&gt;Leader 通过强制 Follower 复制自己的日志来处理日志的不一致&lt;/font&gt;。这就意味着，在 Follower 上的冲突日志会被 Leader 的日志覆盖。为了使得 Follower 的日志和 Leader 的日志一致，Leader 需要找到 Follower 与它日志一致的地方，然后删除 Follower 在该位置之后的日志，接着把 Leader 自己在这之后的日志发送给 Follower。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Leader 给每一个 Follower 维护了一个  &lt;code&gt;nextIndex&lt;/code&gt; ，它表示 Leader 将要发送给该 Follower 的下一条日志条目的索引&lt;/font&gt;。当一个 Leader 开始掌权时，它会将  &lt;code&gt;nextIndex&lt;/code&gt;  初始化为它的最新的日志条目索引数 + 1。如果一个 Follower 的日志和 Leader 的不一致， &lt;code&gt;AppendEntries&lt;/code&gt;  一致性检查会在下一次  &lt;code&gt;AppendEntries RPC&lt;/code&gt;  时返回失败。在失败之后，Leader 会将  &lt;code&gt;nextIndex&lt;/code&gt;  递减然后重试  &lt;code&gt;AppendEntries RPC&lt;/code&gt; 。&lt;font color=&#39;red&#39;&gt;最终  &lt;code&gt;nextIndex&lt;/code&gt;  会达到一个 Leader 和 Follower 日志一致的地方&lt;/font&gt;。这时， &lt;code&gt;AppendEntries&lt;/code&gt;  会返回成功，Follower 中冲突的日志条目都被移除了，并且添加所缺少的上了 Leader 的日志条目。&lt;font color=&#39;red&#39;&gt;一旦  &lt;code&gt;AppendEntries&lt;/code&gt;  返回成功，Follower 和 Leader 的日志就一致了，这样的状态会保持到该任期结束&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&#34;leader-宕机处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#leader-宕机处理&#34;&gt;#&lt;/a&gt; Leader 宕机处理&lt;/h2&gt;
&lt;h3 id=&#34;请求到达前-leader-挂了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请求到达前-leader-挂了&#34;&gt;#&lt;/a&gt; 请求到达前 Leader 挂了&lt;/h3&gt;
&lt;p&gt;Leader 在 client 发送写操作请求到达之前就挂了，因为请求还没有到达集群，所以这个请求对于集群来说就没有存在过，&lt;font color=&#39;red&#39;&gt;对集群数据的一致性没有任何影响&lt;/font&gt;。Leader 挂了之后，&lt;font color=&#39;red&#39;&gt;会选举产生新的 Leader&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;由于 Stale Leader （旧领导）并未向 client 发送成功处理响应，所以&lt;font color=&#39;red&#39;&gt; client 会重新发送该写操作请求&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;未开始同步数据前-leader-挂了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#未开始同步数据前-leader-挂了&#34;&gt;#&lt;/a&gt; 未开始同步数据前 Leader 挂了&lt;/h3&gt;
&lt;p&gt;client 发送写操作请求给 Leader，请求到达 Leader 后，Leader 还没有开始向 Followers 发出数据就挂了。这时集群会&lt;font color=&#39;red&#39;&gt;选举产生新的 Leader&lt;/font&gt;。&lt;font color=&#39;red&#39;&gt;Stale Leader 重启后会作为 Follower 重新加入集群，并同步新 Leader 中的数据以保证数据一致性&lt;/font&gt;。之前接收到 client 的数据被丢弃。&lt;/p&gt;
&lt;p&gt;由于 Stale Leader 并未向 client 发送成功处理响应，所以&lt;font color=&#39;red&#39;&gt; client 会重新发送该写操作请求&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;同步完部分后-leader-挂了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步完部分后-leader-挂了&#34;&gt;#&lt;/a&gt; 同步完部分后 Leader 挂了&lt;/h3&gt;
&lt;p&gt;client 发送写操作请求给 Leader，Leader 接收完数据后向所有 Follower 发送数据。在部分 Follower 接收到数据后 Leader 挂了。由于 Leader 挂了，就&lt;font color=&#39;red&#39;&gt;会发起新的 Leader 选举&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;若 Leader 产生于已完成数据接收的 Follower&lt;/font&gt;，其会继续将前面接收到的写操作请求转换为日志，并写入到本地状态机，并向所有 Flollower 发出询问。在获取过半同意响应后会向所有 Followers 发送 commit 指令，同时向 client 进行响应。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;若 Leader 产生于尚未完成数据接收的 Follower&lt;/font&gt;，那么原来已完成接收的 Follower 则会放弃曾接收到的数据。由于 client 没有接收到响应，所以 client 会重新发送该写操作请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;commit-通知发出后-leader-挂了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#commit-通知发出后-leader-挂了&#34;&gt;#&lt;/a&gt; commit 通知发出后 Leader 挂了&lt;/h3&gt;
&lt;p&gt;client 发送写操作请求给 Leader， Leader 也成功向所有 Followers 发出的 commit 指令，并向 client 发出响应后，Leader 挂了。&lt;/p&gt;
&lt;p&gt;由于 Stale Leader 已经向 client 发送成功接收响应，且 commit 通知已经发出，说明&lt;font color=&#39;red&#39;&gt;这个写操作请求已经被 server 成功处理&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&#34;安全性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全性&#34;&gt;#&lt;/a&gt; 安全性&lt;/h2&gt;
&lt;h3 id=&#34;选举限制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选举限制&#34;&gt;#&lt;/a&gt; 选举限制&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Leader 需要保证自己存储全部已经提交的日志条目&lt;/font&gt;。这样才可以使日志条目只有一个流向：从 Leader 流向 Follower，Leader 永远不会覆盖已经存在的日志条目。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;每个 Candidate 发送 RequestVoteRPC 时，都会带上最后一个 entry 的信息。所有节点收到投票信息时，会对该 entry 进行比较，&lt;strong&gt;如果发现自己的日志更新，则拒绝投票给该 Candidate&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;判断日志新旧的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个日志的 term 不同，term 大的更新&lt;/li&gt;
&lt;li&gt;如果 term 相同，更长的 index 更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;节点崩溃&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#节点崩溃&#34;&gt;#&lt;/a&gt; 节点崩溃&lt;/h3&gt;
&lt;p&gt;如果 Leader 崩溃，集群中的节点在 electionTimeout 时间内没有收到 Leader 的心跳信息就会触发新一轮的 Leader 选举，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;在 Leader 选举期间，整个集群对外是不可用的&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果 Follower 和 Candidate 崩溃，处理方式会简单很多。之后发送给它的 RequestVoteRPC 和 AppendEntriesRPC 会失败。由于 raft 的所有请求都是幂等的，所以失败的话会无限的重试。如果崩溃恢复后，就可以收到新的请求，然后选择追加或者拒绝 entry。&lt;/p&gt;
&lt;h3 id=&#34;时间与可用性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#时间与可用性&#34;&gt;#&lt;/a&gt; 时间与可用性&lt;/h3&gt;
&lt;p&gt;raft 的要求之一就是&lt;font color=&#39;red&#39;&gt;安全性不依赖于时间：系统不能仅仅因为一些事件发生的比预想的快一些或者慢一些就产生错误&lt;/font&gt;。为了保证上述要求，最好能满足以下的时间条件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;broadcastTime &amp;lt;&amp;lt; electionTimeout &amp;lt;&amp;lt; MTBF
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;broadcastTime&lt;/code&gt; ：向其他节点并发发送消息的平均响应时间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;electionTimeout&lt;/code&gt; ：选举超时时间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MTBF(mean time between failures)&lt;/code&gt; ：单台机器的平均健康时间；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;broadcastTime&lt;/code&gt;  应该比 &lt;code&gt;electionTimeout&lt;/code&gt;  小一个数量级，为的是使 &lt;code&gt;Leader&lt;/code&gt;  能够持续发送心跳信息（heartbeat）来阻止 &lt;code&gt;Follower&lt;/code&gt;  开始选举；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;electionTimeout&lt;/code&gt;  也要比 &lt;code&gt;MTBF&lt;/code&gt;  小几个数量级，为的是使得系统稳定运行。当 &lt;code&gt;Leader&lt;/code&gt;  崩溃时，大约会在整个 &lt;code&gt;electionTimeout&lt;/code&gt;  的时间内不可用；我们希望这种情况仅占全部时间的很小一部分。&lt;/p&gt;
&lt;p&gt;由于 &lt;code&gt;broadcastTime&lt;/code&gt;  和 &lt;code&gt;MTBF&lt;/code&gt;  是由系统决定的属性，因此需要决定 &lt;code&gt;electionTimeout&lt;/code&gt;  的时间。&lt;/p&gt;
&lt;p&gt;一般来说，broadcastTime 一般为  &lt;code&gt;0.5～20ms&lt;/code&gt; ，electionTimeout 可以设置为  &lt;code&gt;10～500ms&lt;/code&gt; ，MTBF 一般为一两个月。&lt;/p&gt;
&lt;h2 id=&#34;动画演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动画演示&#34;&gt;#&lt;/a&gt; 动画演示&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RoZXNlY3JldGxpdmVzb2ZkYXRhLmNvbS9yYWZ0Lw==&#34;&gt;http://thesecretlivesofdata.com/raft/&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;raft-概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raft-概述&#34;&gt;#&lt;/a&gt; raft 概述&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145626883.png&#34; alt=&#34;image-20231218145626883&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145641429.png&#34; alt=&#34;image-20231218145641429&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;leader-选举-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#leader-选举-2&#34;&gt;#&lt;/a&gt; Leader 选举&lt;/h3&gt;
&lt;p&gt;在 Raft 中，有两个控制选举的超时设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt; &lt;code&gt;election timeout&lt;/code&gt; （选举超时）&lt;/font&gt;：表示 Follower 等待转变为 Candidate 的倒计时间，随机设置在 150ms ~ 300ms 之间。某个 Follower 率先选举超时后，它成为 Candidate，开始新的选举任期（term 加 1），并为自己投一票，同时向其他节点发送请求投票的消息。如果接收节点在本任期内尚未投票，那么它将投票给 Candidate。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt; &lt;code&gt;heartbeat timeout&lt;/code&gt; （心跳超时）&lt;/font&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218110127195.png&#34; alt=&#34;image-20231218110127195&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【&lt;font color=&#39;cornflowerblue&#39;&gt;election timeout（选举超时）&lt;/font&gt;&lt;/font&gt;表示 Follower 等待转变为 Candidate 的倒计时间，随机设置在 150ms ~ 300ms 之间。】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218142116228.png&#34; alt=&#34;image-20231218142116228&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【某个 Follower 率先选举超时后，它成为 Candidate，开始新的选举任期（term 加1），并为自己投一票】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218142238093.png&#34; alt=&#34;image-20231218142238093&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【同时 Candidate 向其他节点发送请求投票的消息】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218142326741.png&#34; alt=&#34;image-20231218142326741&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【如果接收节点在本任期内尚未投票，那么它将投票给 Candidate】&lt;/center&gt;
&lt;center&gt;【节点重置其选举超时】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218143246476.png&#34; alt=&#34;image-20231218143246476&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【一旦 Candidate 获得多数票，他就会成为 Leader】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218143321866.png&#34; alt=&#34;image-20231218143321866&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【Leader 开始向其 Follower 周期性地发送 Append Entries 消息。这些消息按照&lt;font color=&#39;cornflowerblue&#39;&gt; heartbeat timeout（心跳超时）&lt;/font&gt;&lt;/font&gt;指定的时间间隔发送。】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218143548477.png&#34; alt=&#34;image-20231218143548477&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【然后 Followers 回复每条 Append Entries 消息。】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144001221.png&#34; alt=&#34;image-20231218144001221&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【这个选举 term 将持续到某个 Follower 停止接收心跳，并成为 Candidate 为止。让我们阻止 Leader 并观看重新选举的发生。】&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144043076.png&#34; alt=&#34;image-20231218144043076&#34; /&gt;&lt;/p&gt;
&lt;center&gt;【节点 B 现在是第 2 个 term 的 Leader。需要多数票才能保证每个任期只能选举一名领导人。如果两个节点同时成为候选人，则可能会发生&lt;font color=&#39;red&#39;&gt;分裂投票&lt;/font&gt;&lt;/font&gt;。】&lt;/center&gt;
&lt;hr /&gt;
&lt;p&gt;分裂投票的例子：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144355618.png&#34; alt=&#34;image-20231218144355618&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144415586.png&#34; alt=&#34;image-20231218144415586&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144428586.png&#34; alt=&#34;image-20231218144428586&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144443566.png&#34; alt=&#34;image-20231218144443566&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144459719.png&#34; alt=&#34;image-20231218144459719&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;日志复制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志复制&#34;&gt;#&lt;/a&gt; 日志复制&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144528293.png&#34; alt=&#34;image-20231218144528293&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144543849.png&#34; alt=&#34;image-20231218144543849&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144606513.png&#34; alt=&#34;image-20231218144606513&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144617130.png&#34; alt=&#34;image-20231218144617130&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144634196.png&#34; alt=&#34;image-20231218144634196&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144648281.png&#34; alt=&#34;image-20231218144648281&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144657566.png&#34; alt=&#34;image-20231218144657566&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144711183.png&#34; alt=&#34;image-20231218144711183&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144727919.png&#34; alt=&#34;image-20231218144727919&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144744496.png&#34; alt=&#34;image-20231218144744496&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144802996.png&#34; alt=&#34;image-20231218144802996&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144841610.png&#34; alt=&#34;image-20231218144841610&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144911945.png&#34; alt=&#34;image-20231218144911945&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144924949.png&#34; alt=&#34;image-20231218144924949&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144938649.png&#34; alt=&#34;image-20231218144938649&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218144957469.png&#34; alt=&#34;image-20231218144957469&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145013862.png&#34; alt=&#34;image-20231218145013862&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145026793.png&#34; alt=&#34;image-20231218145026793&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145349524.png&#34; alt=&#34;image-20231218145349524&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145426830.png&#34; alt=&#34;image-20231218145426830&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145447316.png&#34; alt=&#34;image-20231218145447316&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145505919.png&#34; alt=&#34;image-20231218145505919&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231218145519321.png&#34; alt=&#34;image-20231218145519321&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;gossip-协议详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gossip-协议详解&#34;&gt;#&lt;/a&gt; Gossip 协议详解&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;gossip：闲话、流言蜚语&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;背景-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景-3&#34;&gt;#&lt;/a&gt; 背景&lt;/h2&gt;
&lt;p&gt;在分布式系统中，不同的节点进行数据 / 信息共享是一个基本的需求。&lt;/p&gt;
&lt;p&gt;一种比较简单粗暴的方法就是&lt;strong&gt;集中式发散消息&lt;/strong&gt;，简单来说就是&lt;font color=&#39;red&#39;&gt;一个主节点同时共享最新信息给其他所有节点&lt;/font&gt;，比较适合中心化系统。这种方法的缺陷也很明显，节点多的时候不光&lt;font color=&#39;red&#39;&gt;同步消息的效率低，还太依赖与中心节点，存在单点风险问题&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;于是，&lt;strong&gt;分散式发散消息&lt;/strong&gt;的 &lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Gossip 协议&lt;/font&gt;&lt;/strong&gt; 就诞生了。&lt;/p&gt;
&lt;h2 id=&#34;介绍-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-2&#34;&gt;#&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;Gossip 协议 也叫 Epidemic 协议（流行病协议）或者 Epidemic propagation 算法（疫情传播算法），别名很多。不过这些名字的特点都具有 **&lt;font color=&#39;red&#39;&gt;随机传播特性&lt;/font&gt;**（联想一下病毒传播、癌细胞扩散等生活中常见的情景），这也正是 Gossip 协议最主要的特点。&lt;/p&gt;
&lt;p&gt;Gossip 协议最早是在 ACM 上的一篇 1987 年发表的论文 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC4xMTQ1LzQxODQwLjQxODQx&#34;&gt;《Epidemic Algorithms for Replicated Database Maintenance》&lt;/span&gt;中被提出的。根据论文标题，我们大概就能知道 Gossip 协议当时提出的主要应用是在&lt;font color=&#39;red&#39;&gt;分布式数据库系统中各个副本节点同步数据&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;正如 Gossip 协议其名一样，这是&lt;font color=&#39;red&#39;&gt;一种随机且带有传染性的方式，将信息传播到整个网络中，并在一定时间内，使得系统内的所有节点数据一致&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;在 Gossip 协议下，&lt;font color=&#39;red&#39;&gt;没有所谓的中心节点，每个节点周期性地随机找一个节点互相同步彼此的信息&lt;/font&gt;，理论上来说，各个节点的状态最终会保持一致。&lt;/p&gt;
&lt;p&gt;下面我们来对 Gossip 协议的定义做一个总结：&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;Gossip 协议是一种允许在分布式系统中共享状态的去中心化通信协议，通过这种通信协议，我们可以将信息传播给网络或集群中的所有成员。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用&#34;&gt;#&lt;/a&gt; 应用&lt;/h2&gt;
&lt;p&gt;NoSQL 数据库 Redis 和 Apache Cassandra、服务网格解决方案 Consul 等知名项目都用到了 Gossip 协议，学习 Gossip 协议有助于我们搞清很多技术的底层原理。&lt;/p&gt;
&lt;p&gt;我们这里以 &lt;font color=&#39;gree&#39;&gt;Redis Cluster&lt;/font&gt; 为例说明 Gossip 协议的实际应用。&lt;/p&gt;
&lt;p&gt;我们经常使用的分布式缓存 Redis 的官方集群解决方案（3.0 版本引入） Redis Cluster 就是&lt;font color=&#39;red&#39;&gt;基于 Gossip 协议来实现集群中各个节点数据的最终一致性&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/up-fcacc1eefca6e51354a5f1fc9f2919f51ec.png&#34; alt=&#34;Redis 的官方集群解决方案&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Redis 的官方集群解决方案&lt;/center&gt;
&lt;p&gt;Redis Cluster 是一个典型的分布式系统，分布式系统中的各个节点需要互相通信。既然要相互通信就要遵循一致的通信协议，&lt;font color=&#39;red&#39;&gt;Redis Cluster 中的各个节点基于 &lt;strong&gt;Gossip 协议&lt;/strong&gt; 来进行通信共享信息，每个 Redis 节点都维护了一份集群的状态信息&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;Redis Cluster 的节点之间会相互发送多种 Gossip 消息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;MEET&lt;/font&gt;&lt;/strong&gt;：在 Redis Cluster 中的某个 Redis 节点上执行  &lt;code&gt;CLUSTER MEET ip port&lt;/code&gt;  命令，&lt;font color=&#39;red&#39;&gt;可以向指定的 Redis 节点发送一条 MEET 信息，用于将其添加进 Redis Cluster 成为新的 Redis 节点&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;PING/PONG&lt;/font&gt;&lt;/strong&gt;：Redis Cluster 中的节点都会&lt;font color=&#39;red&#39;&gt;定时地向其他节点发送 PING 消息，来交换各个节点状态信息，检查各个节点状态&lt;/font&gt;，包括在线状态、疑似下线状态 PFAIL 和已下线状态 FAIL。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;FAIL&lt;/font&gt;&lt;/strong&gt;：Redis Cluster 中的节点 A 发现 B 节点 PFAIL，并且在下线报告的有效期限内集群中半数以上的节点将 B 节点标记为 PFAIL，节点 A 就会向集群广播一条 FAIL 消息，通知其他节点将故障节点 B 标记为 FAIL 。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图就是主从架构的 Redis Cluster 的示意图，图中的虚线代表的就是各个节点之间使用 Gossip 进行通信 ，实线表示主从复制。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-cluster-gossip-fO4qDqt2.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;有了 Redis Cluster 之后，不需要专门部署 Sentinel 集群服务了。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Redis Cluster 相当于是内置了 Sentinel 机制，内部的各个节点通过 Gossip 协议互相探测健康状态，在故障时可以自动切换&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;消息传播模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息传播模式&#34;&gt;#&lt;/a&gt; 消息传播模式&lt;/h2&gt;
&lt;p&gt;Gossip 设计了两种可能的消息传播模式：&lt;strong&gt;反熵（Anti-Entropy）&lt;/strong&gt; 和 &lt;strong&gt;传谣（Rumor-Mongering）&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;反熵anti-entropy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反熵anti-entropy&#34;&gt;#&lt;/a&gt; 反熵（Anti-Entropy）&lt;/h3&gt;
&lt;p&gt;根据维基百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;熵的概念最早起源于&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JTg5JUE5JUU3JTkwJTg2JUU1JUFEJUE2&#34;&gt;物理学&lt;/span&gt;，用于度量一个热力学系统的混乱程度。熵最好理解为&lt;font color=&#39;red&#39;&gt;不确定性的量度&lt;/font&gt;，而不是确定性的量度，因为越随机的信源的熵越大。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这里，你可以把反熵中的熵理解为节点之间数据的混乱程度 / 差异性，&lt;font color=&#39;red&#39;&gt;反熵就是指消除不同节点中数据的差异，提升节点间数据的相似度，从而降低熵值&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;具体是如何反熵的呢？&lt;font color=&#39;red&#39;&gt;集群中的节点，每隔段时间就随机选择某个其他节点，然后通过互相交换自己的所有数据，来消除两者之间的差异，实现数据的最终一致性&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;在实现反熵的时候，主要有推、拉和推拉三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推：就是将自己的所有副本数据，推给对方，修复对方副本中的熵。&lt;/li&gt;
&lt;li&gt;拉：就是拉取对方的所有副本数据，修复自己副本中的熵。&lt;/li&gt;
&lt;li&gt;推拉：就是同时修复自己副本和对方副本中的熵。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;伪代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/up-df16e98bf71e872a7e1f01ca31cee93d77b.png&#34; alt=&#34;反熵伪代码&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在我们实际应用场景中，&lt;font color=&#39;red&#39;&gt;一般不会采用随机的节点进行反熵&lt;/font&gt;，而是需要可以的设计一个闭环。这样的话，我们能够在一个确定的时间范围内实现各个节点数据的最终一致性，而不是基于随机的概率。像  &lt;code&gt;InfluxDB&lt;/code&gt;  就是这样来实现反熵的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/%E5%8F%8D%E7%86%B5-%E9%97%AD%E7%8E%AF-TwBsP6eP.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;节点 A 推送数据给节点 B，节点 B 获取到节点 A 中的最新数据。&lt;/li&gt;
&lt;li&gt;节点 B 推送数据给 C，节点 C 获取到节点 A，B 中的最新数据。&lt;/li&gt;
&lt;li&gt;节点 C 推送数据给 A，节点 A 获取到节点 B，C 中的最新数据。&lt;/li&gt;
&lt;li&gt;节点 A 再推送数据给 B 形成闭环，这样节点 B 就获取到节点 C 中的最新数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虽然反熵很简单实用，&lt;font color=&#39;red&#39;&gt;但是节点过多或者节点动态变化的话，反熵就不太适用了&lt;/font&gt;。这个时候，我们想要实现最终一致性就要靠 传谣 (Rumor mongering) 。&lt;/p&gt;
&lt;h3 id=&#34;传谣rumor-mongering&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传谣rumor-mongering&#34;&gt;#&lt;/a&gt; 传谣（Rumor-Mongering）&lt;/h3&gt;
&lt;p&gt;谣言传播指的是分布式系统中的一个节点一旦有了新数据之后，就会变为活跃节点，活跃节点会周期性地联系其他节点向其发送新数据，直到所有的节点都存储了该新数据。&lt;/p&gt;
&lt;p&gt;如下图所示（下图来自于&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tYW5hZ2VtZW50ZnJvbXNjcmF0Y2gud29yZHByZXNzLmNvbS8yMDE2LzA0LzAxL2ludHJvZHVjdGlvbi10by1nb3NzaXAv&#34;&gt; INTRODUCTION TO GOSSIP&lt;/span&gt; 这篇文章）：&lt;/p&gt;
&lt;p&gt;伪代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/20210605170707933.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;谣言传播比较适合节点数量比较多的情况，不过，这种模式下&lt;font color=&#39;red&#39;&gt;要尽量避免传播的信息包不能太大，避免网络消耗太大&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;小结-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小结-3&#34;&gt;#&lt;/a&gt; 小结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;反熵（Anti-Entropy）会传播节点的所有数据，而谣言传播（Rumor-Mongering）只会传播节点新增的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般会给反熵设计一个闭环。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;谣言传播（Rumor-Mongering）比较适合节点数量比较多或者节点动态变化的场景。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优缺点&#34;&gt;#&lt;/a&gt; 优缺点&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、相比于其他分布式协议 / 算法来说，&lt;font color=&#39;red&#39;&gt;Gossip 协议理解起来非常简单&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;2、能够容忍网络上节点的随意地增加或者减少，宕机或者重启，因为 Gossip 协议下这些&lt;font color=&#39;red&#39;&gt;节点都是平等的，去中心化的&lt;/font&gt;。新增加或者重启的节点在理想情况下最终是一定会和其他节点的状态达到一致。&lt;/p&gt;
&lt;p&gt;3、&lt;font color=&#39;red&#39;&gt;速度相对较快&lt;/font&gt;。节点数量比较多的情况下，扩散速度比一个主节点向其他节点传播信息要更快（多播）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺陷&lt;/strong&gt; :&lt;/p&gt;
&lt;p&gt;1、消息需要通过多个传播的轮次才能传播到整个网络中，因此，&lt;font color=&#39;red&#39;&gt;必然会出现各节点状态不一致的情况&lt;/font&gt;。毕竟，Gossip 协议强调的是最终一致，至于达到各个节点的状态一致需要多长时间，谁也无从得知。&lt;/p&gt;
&lt;p&gt;2、由于拜占庭将军问题，&lt;font color=&#39;red&#39;&gt;不允许存在恶意节点&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;3、可能会出现&lt;font color=&#39;red&#39;&gt;消息冗余&lt;/font&gt;的问题。由于消息传播的随机性，同一个节点可能会重复收到相同的消息。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Gossip 协议是一种&lt;font color=&#39;red&#39;&gt;允许在分布式系统中共享状态&lt;/font&gt;的通信协议，通过这种通信协议，我们可以将信息传播给网络或集群中的所有成员。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gossip 协议被 Redis、Apache Cassandra、Consul 等项目应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;谣言传播（Rumor-Mongering）比较适合节点数量比较多或者节点动态变化的场景&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/photography/%E6%95%85%E5%AE%AB%E9%9B%AA%E6%99%AF/</guid>
            <title>故宫雪景</title>
            <link>http://example.com/photography/%E6%95%85%E5%AE%AB%E9%9B%AA%E6%99%AF/</link>
            <category term="摄影" scheme="http://example.com/categories/photography/" />
            <pubDate>Thu, 14 Dec 2023 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b2e7bc458853aef44253b.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b2f71c458853aef4833c3.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b2f9cc458853aef48dd81.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3842c458853aef69a74d.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b2fe1c458853aef4a0229.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b301ec458853aef4b1989.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b30a0c458853aef4d2cdd.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3433c458853aef5b2a28.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b30efc458853aef4e8321.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3380c458853aef58a96f.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b33c1c458853aef59833b.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b33e6c458853aef5a136f.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3486c458853aef5c3243.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b34c2c458853aef5d1fa7.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3536c458853aef5ec5bc.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3570c458853aef5fb89f.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3571c458853aef5fbdad.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3571c458853aef5fbbf1.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3570c458853aef5fbaa4.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3570c458853aef5fb9a7.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3649c458853aef62aa57.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3648c458853aef62a962.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3648c458853aef62a8b6.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3648c458853aef62a821.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3648c458853aef62a77b.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b36aec458853aef6420a6.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b36efc458853aef650fe3.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b36edc458853aef650c52.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b36edc458853aef650b88.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b36ecc458853aef650a34.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b36eec458853aef650e56.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3803c458853aef68dfd7.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3843c458853aef69a8d7.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3842c458853aef69a646.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3842c458853aef69a581.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3935c458853aef6ce27d.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3842c458853aef69a4b4.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3935c458853aef6ce387.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3935c458853aef6ce43a.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/657b3935c458853aef6ce316.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/photography/%E4%B8%AD%E6%B3%95%E5%A4%A7%E5%AD%A6%E6%97%A7%E5%9D%80&amp;%E5%8C%97%E6%B5%B7%E5%85%AC%E5%9B%AD/</guid>
            <title>京秋的胶片味</title>
            <link>http://example.com/photography/%E4%B8%AD%E6%B3%95%E5%A4%A7%E5%AD%A6%E6%97%A7%E5%9D%80&amp;%E5%8C%97%E6%B5%B7%E5%85%AC%E5%9B%AD/</link>
            <category term="摄影" scheme="http://example.com/categories/photography/" />
            <pubDate>Sun, 03 Dec 2023 10:40:32 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/656f27bac458853aef5f729f.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://pic.imgdb.cn/item/656f2724c458853aef5c162b.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/656f27b9c458853aef5f7159.jpg&#34; alt=&#34;&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/656f2723c458853aef5c1132.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/656f2722c458853aef5c0e99.jpg&#34; alt=&#34;&#34; title=&#34;树影斑驳&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/656f2723c458853aef5c1279.jpg&#34; alt=&#34;&#34; title=&#34;在光里&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/656f2723c458853aef5c1476.jpg&#34; alt=&#34;&#34; title=&#34;日落北海&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/database/redis/%E5%B0%9A%E7%A1%85%E8%B0%B7-%E5%91%A8%E9%98%B3-Redis7/</guid>
            <title>Redis7-尚硅谷-周阳</title>
            <link>http://example.com/database/redis/%E5%B0%9A%E7%A1%85%E8%B0%B7-%E5%91%A8%E9%98%B3-Redis7/</link>
            <category term="数据库" scheme="http://example.com/categories/database/" />
            <category term="Redis" scheme="http://example.com/categories/database/redis/" />
            <pubDate>Fri, 01 Dec 2023 16:11:24 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;入门篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#入门篇&#34;&gt;#&lt;/a&gt; 入门篇&lt;/h1&gt;
&lt;h2 id=&#34;1-redis入门概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-redis入门概述&#34;&gt;#&lt;/a&gt; 1、Redis 入门概述&lt;/h2&gt;
&lt;h3 id=&#34;redis是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis是什么&#34;&gt;#&lt;/a&gt; Redis 是什么&lt;/h3&gt;
&lt;p&gt;Redis： &lt;code&gt;RE&lt;/code&gt; mote  &lt;code&gt;Di&lt;/code&gt; ctionary  &lt;code&gt;S&lt;/code&gt; erver（远程字典服务器），一种基于&lt;strong&gt; Key-Value&lt;/strong&gt; 的&lt;strong&gt;内存&lt;/strong&gt;数据库。&lt;/p&gt;
&lt;p&gt;Remote Dictionary Server (远程字典服务) 是完全开源的，使用&lt;font color=&#39;red&#39;&gt;ANSIC 语言&lt;/font&gt;编写遵守 BSD 协议，是一个高性能的&lt;font color=&#39;red&#39;&gt;Key-Value&lt;/font&gt;数据库提供了丰富的数据结构，例如 String、Hash、List、Set、SortedSet 等等。数据是存在&lt;font color=&#39;red&#39;&gt;内存中的&lt;/font&gt;，同时 Redis&lt;font color=&#39;red&#39;&gt;支持事务、持久化、LUA 脚本、发布 / 订阅、缓存淘汰、流技术等&lt;/font&gt;多种功能特性提供了&lt;font color=&#39;red&#39;&gt;主从模式&lt;/font&gt;、&lt;font color=&#39;red&#39;&gt;Redis Sentinel&lt;/font&gt;和&lt;font color=&#39;red&#39;&gt;Redis Cluster 集群架构&lt;/font&gt;方案。&lt;/p&gt;
&lt;h3 id=&#34;redis的功能与优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis的功能与优势&#34;&gt;#&lt;/a&gt; Redis 的功能与优势&lt;/h3&gt;
&lt;p&gt;Redis 的主流功能与应用如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;orange&#39;&gt;分布式缓存&lt;/font&gt;&lt;/strong&gt;，帮 MySQL 减负&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802153755454.png&#34; alt=&#34;image-20230802153755454&#34; /&gt;&lt;/p&gt;
&lt;p&gt;MySQL 与 Redis 的对比：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 是关系型数据库，Redis 是&lt;font color=&#39;red&#39;&gt;key-value&lt;/font&gt;数据库（NoSQL 的一种）&lt;/li&gt;
&lt;li&gt;MySQL 主要存储在磁盘，Redis 数据操作主要在&lt;font color=&#39;red&#39;&gt;内存&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;Redis 在一些场景中明显优于 MySQL，例如计数器、排行榜等&lt;/li&gt;
&lt;li&gt;Redis 通常用于一些特定场景，需要与 Mysql 一起配合使用，两者并不是相互替换和竞争关系，而是共用和&lt;strong&gt;配合使用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内存存储&lt;/strong&gt;和&lt;strong&gt;持久化&lt;/strong&gt;（RDB+AOF）：Redis 支持异步将内存中的数据写到硬盘上，同时不影响继续服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高可用架构搭配&lt;/strong&gt;：避免某台 Redis 挂了后，影响系统运行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单机&lt;/li&gt;
&lt;li&gt;主从&lt;/li&gt;
&lt;li&gt;哨兵&lt;/li&gt;
&lt;li&gt;集群&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓存穿透、击穿、雪崩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分布式锁&lt;/strong&gt;：跨服务器加锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;消息队列平台&lt;/strong&gt;：Reids&lt;font color=&#39;red&#39;&gt;提供 list 和 set 操作&lt;/font&gt;，这使得 Redis 能作为一个很好的消息队列平台来使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过 Reids 的队列功能做&lt;strong&gt;购买限制&lt;/strong&gt;。比如到节假日或者推广期间，进行一些活动，对用户购买行为进行限制，限制今天只能购买几次商品或者一段时间内只能购买一次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;排行榜&lt;/strong&gt; +&lt;strong&gt; 点赞&lt;/strong&gt;：Redis 提供的&lt;font color=&#39;red&#39;&gt;zset 数据类型&lt;/font&gt;能够快速实现这些复杂的排行榜。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis 的总体功能概览图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802154814479.png&#34; alt=&#34;image-20230802154814479&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Redis 的优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;读写性能极高&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据类型丰富&lt;/strong&gt;：不仅支持&lt;font color=&#39;red&#39;&gt;key-value&lt;/font&gt;类型的数据，同时还提供&lt;font color=&#39;red&#39;&gt;list，set，zset，hash&lt;/font&gt;等数据结构的存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持数据持久化&lt;/strong&gt;：可将内存中的数据存入磁盘中，重启时再加载到内存使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持数据备份&lt;/strong&gt;，即 master-slave 模式的数据备份&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小结：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802155434366.png&#34; alt=&#34;image-20230802155434366&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;redis下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis下载&#34;&gt;#&lt;/a&gt; Redis 下载&lt;/h3&gt;
&lt;p&gt;英文官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby8=&#34;&gt;https://redis.io/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;中文网站：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5yZWRpcy5jbi8=&#34;&gt;http://www.redis.cn/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下载网站：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb3dubG9hZC5yZWRpcy5pby9yZWxlYXNlcy8=&#34;&gt;https://download.redis.io/releases/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;中文文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucmVkaXMuY29tLmNuL2RvY3VtZW50YXRpb24uaHRtbA==&#34;&gt;https://www.redis.com.cn/documentation.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Redis 源码网站：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzL3JlZGlz&#34;&gt;https://github.com/redis/redis&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Redis 在线测试：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90cnkucmVkaXMuaW8v&#34;&gt;https://try.redis.io/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Redis 命令参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RvYy5yZWRpc2ZhbnMuY29tLw==&#34;&gt;http://doc.redisfans.com/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;redis怎么玩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis怎么玩&#34;&gt;#&lt;/a&gt; Redis 怎么玩&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多种数据类型基本操作和配置&lt;/li&gt;
&lt;li&gt;持久化和复制，RDB/AOF&lt;/li&gt;
&lt;li&gt;事务的控制&lt;/li&gt;
&lt;li&gt;复制，集群等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;redis的迭代历史&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis的迭代历史&#34;&gt;#&lt;/a&gt; Redis 的迭代历史&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802161140294.png&#34; alt=&#34;image-20230802161140294&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Redis重要版本&lt;/center&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;5.0 版本&lt;/font&gt;是直接升级到&lt;font color=&#39;red&#39;&gt;6.0 版本&lt;/font&gt;，对于这个激进的升级，Redis 之父 antirez 表现得很有信心和兴奋，所以第一时间发文来阐述 6.0 的一些重大功能 &amp;quot;Redis 6.0.0 GA is out!&amp;quot;&lt;/p&gt;
&lt;p&gt;随后 Redis 再接再厉，直接王炸&lt;font color=&#39;red&#39;&gt;Redis7.0&lt;/font&gt;---2023 年爆款。2022 年 4 月 27 日 Redis 正式发布了 7.0 更新（其实早在 2022 年 1 月 31 日，Redis 已经预发布了 7.0rc-1，经过社区的考验后，确认没重大 Bug 才会正式发布）&lt;/p&gt;
&lt;p&gt;Redis&lt;strong&gt; 版本的命名规则&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本号第二位如果是奇数，则为非稳定版本。如 2.7、2.9、3.1&lt;/li&gt;
&lt;li&gt;版本号第二位如果是偶数，则为稳定版本。如 2.6、2.8、3.0、3.2&lt;/li&gt;
&lt;li&gt;当前奇数版本就是下一个稳定版本的开发版本。如 2.9 版本是 3.0 版本的开发版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;redis7的新特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis7的新特性&#34;&gt;#&lt;/a&gt; Redis7 的新特性&lt;/h3&gt;
&lt;p&gt;可以从 redis 的 GitHub 的 releases 中查看当前版本的新特性，Redis7 的部分新特性总览：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802162007264.png&#34; alt=&#34;image-20230802162007264&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Redis Functions：Redis 函数，一种新的通过服务端脚本扩展 Redis 的方式，函数与数据本身一起存储。简言之，redis 自己要去&lt;font color=&#39;red&#39;&gt;抢夺 Lua 脚本的饭碗&lt;/font&gt;，但是 Lua 已经稳定且普及，所以 Redis Functions&lt;font color=&#39;red&#39;&gt;没必要学&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802162230304.png&#34; alt=&#34;image-20230802162230304&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Client-eviction&lt;/strong&gt;：客户端相关优化，能让更多 client 连接上&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;限制客户端内存使用&lt;/font&gt;，一旦 Redis 连接较多，再加上每个连接的内存占用都比较大的时候，Redis 总连接内存占用可能会达到 maxmemory 的上限，可以增加允许限制所有客户端的总内存使用量配置项，redis.config 中对应的配置项，有两种配置形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;指定内存大小&lt;/font&gt;。例如 maxmemory-clients 1g&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;基于 maxmemory 的百分比&lt;/font&gt;。例如 maxmemory-clients 10%&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802162439869.png&#34; alt=&#34;image-20230802162439869&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multi-part AOF&lt;/strong&gt;：多 AOF 文件支持，AOF 文件由一个变成了多个，主要分为两种类型：&lt;font color=&#39;red&#39;&gt;基本文件 (base files)&lt;/font&gt;、&lt;font color=&#39;red&#39;&gt;增量文件 (incr files)&lt;/font&gt;，请注意这些文件名称是复数形式说明每一类文件不仅仅只有一个。在此之外还引入了一个&lt;font color=&#39;red&#39;&gt;清单文件 (manifest) &lt;/font&gt;用于跟踪文件以及文件的创建和应用顺序（恢复）。性能急剧上升，再也不用担心 AOFRW 异步读写时的运维痛点&lt;/p&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802163004405.png&#34; alt=&#34;image-20230802163004405&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;config 命令增强&lt;/strong&gt;：对于&lt;font color=&#39;red&#39;&gt;Config Set 和 Get 命令&lt;/font&gt;，支持在一次调用过程中&lt;font color=&#39;red&#39;&gt;传递多个配置参数&lt;/font&gt;。例如，现在我们可以在执行一次 Config Set 命令中更改多个参数： config set maxmemory 10000001 maxmemory-clients 50% port 6399&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;访问安全性增强 ACL V2&lt;/strong&gt;：访问控制，在 redis.conf 配置文件中，&lt;font color=&#39;red&#39;&gt;protected-mode 默认为 yes&lt;/font&gt;，只有当你希望你的客户端在没有授权的情况下可以连接到 Redis server 的时候可以将 protected-mode 设置为 no&lt;/p&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802163118585.png&#34; alt=&#34;image-20230802163118585&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;listpack 紧凑列表调整&lt;/strong&gt;：listpack 是用来&lt;font color=&#39;red&#39;&gt;替代 ziplist 的新数据结构&lt;/font&gt;，在 7.0 版本已经没有 ziplist 的配置了（6.0 版本仅部分数据类型作为过渡阶段在使用），listpack 已经替换了 ziplist 类似 hash-max-ziplist-entries 的配置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RDB 保存时间调整：将持久化文件 RDB 的保存规则发生了改变，尤其是时间记录频度变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令新增和变动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zset (有序集合) 增加 ZMPOP、BZMPOP、ZINTERCARD 等命令&lt;/li&gt;
&lt;li&gt;Set (集合) 增加 SINTERCARD 命令&lt;/li&gt;
&lt;li&gt;LIST (列表) 增加 LMPOP、BLMPOP ，从提供的键名列表中的第一个非空列表键中弹出一个或多个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能资源利用率、安全、等改进&lt;/strong&gt;：自身&lt;font color=&#39;red&#39;&gt;底层部分优化&lt;/font&gt;改动，Redis 核心在许多方面进行了重构和改进&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;主动碎片整理 V2&lt;/font&gt;：增强版主动碎片整理，配合 Jemalloc 版本更新，更快更智能，延时更低&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;HyperLogLog 改进&lt;/font&gt;：在 Redis5.0 中，HyperLogLog 算法得到改进，优化了计数统计时的内存使用效率，7 更加优秀&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;更好的内存统计报告&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;如果不为了 API 向后兼容，我们将&lt;font color=&#39;red&#39;&gt;不再使用 slave 一词&lt;/font&gt;......(政治正确)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-redis安装与配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-redis安装与配置&#34;&gt;#&lt;/a&gt; 2、Redis 安装与配置&lt;/h2&gt;
&lt;p&gt;Redis 一般在&lt;strong&gt; Linux 环境&lt;/strong&gt;上使用，那么就有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;购买云服务器&lt;/li&gt;
&lt;li&gt;VMWare 本地虚拟机&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要确保 Linux 是 64 位的，命令 &lt;code&gt;getconf LONG_BIT&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;linux环境需要gcc编译环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux环境需要gcc编译环境&#34;&gt;#&lt;/a&gt; Linux 环境需要 gcc 编译环境&lt;/h3&gt;
&lt;p&gt;安装 gcc： &lt;code&gt;yum -y install gcc-c++&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看 gcc 版本： &lt;code&gt;gcc -v&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;redis7安装步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis7安装步骤&#34;&gt;#&lt;/a&gt; Redis7 安装步骤&lt;/h3&gt;
&lt;p&gt;至少 6.0.8 以上，本次使用 Redis7.0&lt;/p&gt;
&lt;p&gt;具体安装流程看脑图。&lt;/p&gt;
&lt;h2 id=&#34;3-redis的10种数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-redis的10种数据类型&#34;&gt;#&lt;/a&gt; &lt;mark&gt;3、Redis 的 10 种数据类型&lt;/mark&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;前文已声明过 Redis 是基于 Key-Value 的，而&lt;strong&gt; key 类型一般是 String&lt;/strong&gt;，这里所介绍的&lt;strong&gt; 10 种数据类型指的是 value 的数据类型&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;10种数据类型value&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10种数据类型value&#34;&gt;#&lt;/a&gt; 10 种数据类型 (value)&lt;/h3&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230803183405953.png&#34; alt=&#34;image-20230803183405953&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字符串（String）&lt;/strong&gt;：60% 的场景，常用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String 是 redis&lt;font color=&#39;red&#39;&gt;最基本的类型&lt;/font&gt;，一个 key 对应一个 value。&lt;/li&gt;
&lt;li&gt;String 类型是&lt;font color=&#39;orange&#39;&gt;二进制安全&lt;/font&gt;的，意思是 redis 的 String&lt;font color=&#39;red&#39;&gt;可以包含任何数据&lt;/font&gt;，比如&lt;font color=&#39;red&#39;&gt;jpg 图片&lt;/font&gt;或者&lt;font color=&#39;red&#39;&gt;序列化的对象&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;String 类型是 Redis 最基本的数据类型，一个 redis 中&lt;font color=&#39;red&#39;&gt;字符串 value 最多可以是 512M&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;列表（List）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis 列表是简单的&lt;font color=&#39;red&#39;&gt;字符串列表&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;按照插入顺序排序&lt;/font&gt;。你可以添加一个元素到列表的&lt;font color=&#39;red&#39;&gt;头部（左边）&lt;/font&gt;或者&lt;font color=&#39;red&#39;&gt;尾部（右边）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;它的底层实际是个&lt;font color=&#39;orange&#39;&gt;双端链表&lt;/font&gt;，最多可以包含&lt;font color=&#39;red&#39;&gt; 2&lt;sup&gt;32&lt;/sup&gt; - 1 &lt;/font&gt;个元素 (4294967295, 每个列表超过 40 亿个元素)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;哈希集（Hash）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis hash 是一个 String 类型的&lt;font color=&#39;orange&#39;&gt; field（字段） 和 value（值） 的映射表&lt;/font&gt;，hash 特别适合用于&lt;font color=&#39;red&#39;&gt;存储对象&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;Redis 中每个 hash 可以存储&lt;font color=&#39;red&#39;&gt; 2&lt;sup&gt;32&lt;/sup&gt; - 1 键值对&lt;/font&gt;（40 多亿）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;集合（Set）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis 的 Set 是 String 类型的&lt;font color=&#39;orange&#39;&gt;无序集合&lt;/font&gt;。集合成员是唯一的，这就意味着集合中的元素&lt;font color=&#39;red&#39;&gt;不能重复&lt;/font&gt;，集合对象的&lt;font color=&#39;red&#39;&gt;编码可以是 intset 或者 hashtable&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;Redis 中 Set 集合是&lt;font color=&#39;red&#39;&gt;通过哈希集实现&lt;/font&gt;的，所以添加，删除，查找的复杂度都是 O (1)。&lt;/li&gt;
&lt;li&gt;集合中&lt;font color=&#39;red&#39;&gt;最大的成员数为 2&lt;sup&gt;32&lt;/sup&gt; - 1&lt;/font&gt; (4294967295, 每个集合可存储 40 多亿个成员)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;有序集合（ZSet）&lt;/strong&gt;：即上图中的 Sorted Set&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis zset 和 set 一样也是 string 类型元素的集合，且&lt;font color=&#39;red&#39;&gt;不允许重复&lt;/font&gt;的成员&lt;/li&gt;
&lt;li&gt;不同的是&lt;font color=&#39;orange&#39;&gt;每个元素都会关联一个 double 类型的分数&lt;/font&gt;，redis 正是通过分数来为集合中的成员进行从小到大的排序。&lt;/li&gt;
&lt;li&gt;zset 的&lt;font color=&#39;red&#39;&gt;成员是唯一的，但分数 (score) 却可以重复&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;zset 集合是&lt;font color=&#39;red&#39;&gt;通过哈希集实现&lt;/font&gt;的，所以添加，删除，查找的复杂度都是 O (1)。 集合中&lt;font color=&#39;red&#39;&gt;最大的成员数为 2&lt;sup&gt;32&lt;/sup&gt; - 1&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;地理空间（GEO）&lt;/strong&gt;：即&lt;font color=&#39;red&#39;&gt;经纬度&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis GEO 主要用于&lt;font color=&#39;orange&#39;&gt;存储地理位置信息&lt;/font&gt;，并对存储的信息进行操作，包括
&lt;ul&gt;
&lt;li&gt;添加地理位置的坐标。&lt;/li&gt;
&lt;li&gt;获取地理位置的坐标。&lt;/li&gt;
&lt;li&gt;计算两个位置之间的距离。&lt;/li&gt;
&lt;li&gt;根据用户给定的经纬度坐标来获取指定范围内的地理位置集合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基数统计（HyperLogLog）&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;基数指的是不重复的数字&lt;/font&gt;，例如统计网站的访问量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HyperLoglog 是&lt;font color=&#39;orange&#39;&gt;一种估计集合基数的数据结构&lt;/font&gt;，作为&lt;font color=&#39;red&#39;&gt;一种概率数据结构&lt;/font&gt;，HyperLoglog 为有效的空间利用率提供了完美的精度。&lt;/li&gt;
&lt;li&gt;HyperLogLog 实现&lt;font color=&#39;red&#39;&gt;最多使用 12 KB&lt;/font&gt;，并&lt;font color=&#39;red&#39;&gt;提供 0.81% 的标准错误&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;HyperLogLog 是用来&lt;font color=&#39;orange&#39;&gt;做基数统计的算法&lt;/font&gt;，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，&lt;font color=&#39;red&#39;&gt;计算基数所需的空间总是固定，且很小&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;在 Redis 里面，每个 HyperLogLog 键&lt;font color=&#39;red&#39;&gt;只需要花费 12 KB 内存，就可以计算接近 2&lt;sup&gt;64&lt;/sup&gt; 个不同元素的基数&lt;/font&gt;。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。&lt;/li&gt;
&lt;li&gt;但是，因为 HyperLogLog &lt;font color=&#39;red&#39;&gt;只会根据输入元素来计算基数，而不会储存输入元素本身&lt;/font&gt;，所以 HyperLogLog &lt;font color=&#39;red&#39;&gt;不能像集合那样，返回输入的各个元素&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;位图（bitmap）&lt;/strong&gt;：例如每日签到，是否点赞&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230803185955581.png&#34; alt=&#34;image-20230803185955581&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由&lt;font color=&#39;orange&#39;&gt;0 和 1&lt;/font&gt;状态表现二进制位的&lt;font color=&#39;orange&#39;&gt;bit 数组&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;位域（bitfield）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 bitfield 命令可以一次性操作多个比特位域 (指的是&lt;font color=&#39;orange&#39;&gt;连续的多个比特位&lt;/font&gt;)，它会执行一系列操作并返回一个响应数组，这个数组中的元素对应参数列表中的相应操作的执行结果。&lt;/li&gt;
&lt;li&gt;说白了就是&lt;font color=&#39;red&#39;&gt;通过 bitfield 命令我们可以一次性对多个比特位域进行操作&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;流（Stream）&lt;/strong&gt;：Redis 自己的&lt;font color=&#39;red&#39;&gt;消息（队列）中间件&lt;/font&gt;，但还是不如别人的好&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis Stream 是 Redis &lt;font color=&#39;red&#39;&gt;5.0 版本新增加&lt;/font&gt;的数据结构。&lt;/li&gt;
&lt;li&gt;Redis Stream 主要&lt;font color=&#39;orange&#39;&gt;用于消息队列（MQ，Message Queue）&lt;/font&gt;，Redis 本身是有一个 Redis 发布订阅 (pub/sub) 来实现消息队列的功能，但它有个缺点就是消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃。&lt;/li&gt;
&lt;li&gt;简单来说&lt;font color=&#39;red&#39;&gt;发布订阅 (pub/sub) 可以分发消息，但无法记录历史消息&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;而 Redis Stream 提供了&lt;font color=&#39;red&#39;&gt;消息的持久化&lt;/font&gt;和&lt;font color=&#39;red&#39;&gt;主备复制&lt;/font&gt;功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能&lt;font color=&#39;red&#39;&gt;保证消息不丢失&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常见数据类型的操作命令手册&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见数据类型的操作命令手册&#34;&gt;#&lt;/a&gt; 常见数据类型的操作命令手册&lt;/h3&gt;
&lt;p&gt;英文官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy8=&#34;&gt;https://redis.io/commands/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;中文官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3JlZGlzLmNuL2NvbW1hbmRzLmh0bWw=&#34;&gt;http://redis.cn/commands.html&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;key相关的操作命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#key相关的操作命令&#34;&gt;#&lt;/a&gt; key 相关的操作命令&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230803191631855.png&#34; alt=&#34;image-20230803191631855&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;KEYS *&lt;/code&gt; &lt;/strong&gt;：查看当前库所有的 key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;EXISTS key&lt;/code&gt; &lt;/strong&gt;：判断某个 key 是否存在&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;TYPE key&lt;/code&gt; &lt;/strong&gt;：查看某个 key 的&lt;strong&gt; value 的数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;DEL key&lt;/code&gt; &lt;/strong&gt;：删除某个 key 数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;UNLINK key&lt;/code&gt; &lt;/strong&gt;：非阻塞删除某个 key，仅仅将 key 从 keyspace 元数据中删除，真正的删除会在后续异步中操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;TTL key&lt;/code&gt; &lt;/strong&gt;：查看某个 key 还有多少秒过期，-1 表示永不过期，-2 表示已过期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;EXPIRE key 秒钟&lt;/code&gt; &lt;/strong&gt;：设置某个 key 的过期时间，默认 - 1 表示永不过期。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 的过期时间设置有四种形式：&lt;/p&gt;
&lt;p&gt;・EXPIRE 秒 —— 设置指定的过期时间 (秒)，表示的是时间间隔。&lt;/p&gt;
&lt;p&gt;・PEXPIRE 毫秒 —— 设置指定的过期时间，以毫秒为单位，表示的是时间间隔。&lt;/p&gt;
&lt;p&gt;・EXPIREAT 时间戳 - 秒 —— 设置指定的 Key 过期的 Unix 时间，单位为秒，表示的是时间 / 时刻。&lt;/p&gt;
&lt;p&gt;・PEXPIREAT 时间戳 - 毫秒 —— 设置指定的 Key 到期的 Unix 时间，以毫秒为单位，表示的是时间 / 时刻。&lt;/p&gt;
&lt;p&gt;expire key seconds [NX|XX|GT|LT]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MOVE key dbindex[0-15]&lt;/code&gt; ：将当前数据库中的某个 key 剪切到指定的数据库 db 中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SELECT dbindex&lt;/code&gt; ：切换到指定的数据库 [0-15]，默认为 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DBSIZE&lt;/code&gt; ：查看当前数据库的 key 数量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FLUSHDB&lt;/code&gt; ：清空当前库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FLUSHALL&lt;/code&gt; ：通杀全部库&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;value数据类型相关的操作命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#value数据类型相关的操作命令&#34;&gt;#&lt;/a&gt; value 数据类型相关的操作命令&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;orange&#39;&gt;命令是不区分大小写的，但是 key 是区分大小写的&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;帮助命令： &lt;code&gt;HELP @数据类型&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;字符串string&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串string&#34;&gt;#&lt;/a&gt; 字符串（String）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;单 key 单 value，最常用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;命令概览&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令概览&#34;&gt;#&lt;/a&gt; 命令概览&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230803204957896.png&#34; alt=&#34;image-20230803204957896&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;设置获取单个键值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置获取单个键值&#34;&gt;#&lt;/a&gt; 设置 / 获取单个键值&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;SET key value&lt;/code&gt; &lt;/strong&gt;：将键 &lt;code&gt;key&lt;/code&gt;  设定为指定的 “字符串” &lt;code&gt;value&lt;/code&gt;  值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果  &lt;code&gt;key&lt;/code&gt;  已经保存了一个值，那么这个操作会直接覆盖原来的值，并且忽略原始类型。&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;set&lt;/code&gt;  命令执行成功之后，之前设置的过期时间都将失效，除非设置了 &lt;code&gt;KEEPTTL&lt;/code&gt;  参数。&lt;/li&gt;
&lt;li&gt;返回值： &lt;code&gt;simple-string-reply&lt;/code&gt; ：如果 &lt;code&gt;SET&lt;/code&gt;  命令正常执行那么回返回 &lt;code&gt;OK&lt;/code&gt; ，否则如果加了  &lt;code&gt;NX&lt;/code&gt;  或者  &lt;code&gt;XX&lt;/code&gt;  选项，但是没有设置条件。那么会返回 &lt;code&gt;nil&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;时间复杂度： &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;完整的命令是： &lt;code&gt;set key value [NX|XX] [GET] [EX seconds|PX milliseconds|EXAT unix-time-seconds|PXAT unix-time-milliseconds|KEEPTTL]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804102328872.png&#34; alt=&#34;image-20230804102328872&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如何获得设置指定的 Key 过期的 Unix 时间，单位为秒：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Long&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;GET key&lt;/code&gt; &lt;/strong&gt;：返回 &lt;code&gt;key&lt;/code&gt;  的 &lt;code&gt;value&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;key&lt;/code&gt;  不存在，返回特殊值 &lt;code&gt;nil&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;key&lt;/code&gt;  的 &lt;code&gt;value&lt;/code&gt;  不是 string，就返回错误，因为 &lt;code&gt;GET&lt;/code&gt;  只处理 string 类型的 &lt;code&gt;values&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;时间复杂度： &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;设置获取多个键值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置获取多个键值&#34;&gt;#&lt;/a&gt; 设置 / 获取多个键值&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;MSET key value [key value ...]&lt;/code&gt; &lt;/strong&gt;：对应给定的 keys 到他们相应的 values 上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MSET&lt;/code&gt;  会&lt;font color=&#39;red&#39;&gt;用新的 value 覆盖旧的&lt;/font&gt;，就像普通的 &lt;code&gt;SET&lt;/code&gt;  命令一样。如果你不想覆盖已经存在的 values，请参看命令 &lt;code&gt;MSETNX&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MSET&lt;/code&gt;  是&lt;font color=&#39;red&#39;&gt;原子的&lt;/font&gt;，所以所有给定的 keys 是一次性 set 的。客户端不可能看到这种一部分 keys 被更新而另外的没有改变的情况。&lt;/li&gt;
&lt;li&gt;返回值： &lt;code&gt;simple-string-reply&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;总是 OK&lt;/font&gt;，因为 MSET 不会失败。&lt;/li&gt;
&lt;li&gt;时间复杂度： &lt;code&gt;O(N)&lt;/code&gt; ，其中 N 是要设置的 key 的数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;MGET key [key ...]&lt;/code&gt; &lt;/strong&gt;：返回所有指定的 &lt;code&gt;key&lt;/code&gt;  的 &lt;code&gt;value&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于每个不对应 string 或者不存在的 key，都返回特殊值 &lt;code&gt;nil&lt;/code&gt; 。正因为此，&lt;font color=&#39;red&#39;&gt;这个操作从来不会失败&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;返回值： &lt;code&gt;array-reply&lt;/code&gt; : 指定的 key 对应的 values 的 list&lt;/li&gt;
&lt;li&gt;时间复杂度： &lt;code&gt;O(N)&lt;/code&gt; ，其中 N 是要查询的 key 的数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;MSETNX key value [key value ...]&lt;/code&gt; &lt;/strong&gt;：对应给定的 keys 到他们相应的 values 上，但是只要有一个 key 已经存在， &lt;code&gt;MSETNX&lt;/code&gt;  一个操作都不会执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于这种特性， &lt;code&gt;MSETNX&lt;/code&gt;  可以实现&lt;font color=&#39;red&#39;&gt;要么所有的操作都成功，要么一个都不执行&lt;/font&gt;，这样可以用来设置不同的 key，来表示一个唯一的对象的不同字段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MSETNX&lt;/code&gt;  是&lt;font color=&#39;red&#39;&gt;原子的&lt;/font&gt;，所以所有给定的 keys 是一次性 set 的。客户端不可能看到这种一部分 keys 被更新而另外的没有改变的情况。&lt;/li&gt;
&lt;li&gt;返回值： &lt;code&gt;integer-reply&lt;/code&gt; ，只有以下两种值：
&lt;ul&gt;
&lt;li&gt;1 如果所有的 key 被 set&lt;/li&gt;
&lt;li&gt;0 如果没有 key 被 set (至少其中有一个 key 是存在的)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;时间复杂度： &lt;code&gt;O(N)&lt;/code&gt; ，其中 N 是要设置的 key 的数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;获取指定区间范围内的值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取指定区间范围内的值&#34;&gt;#&lt;/a&gt; 获取指定区间范围内的值&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;SETRANGE key offset value&lt;/code&gt; &lt;/strong&gt;：覆盖 &lt;code&gt;key&lt;/code&gt;  对应的 string 的一部分，从指定的 &lt;code&gt;offset&lt;/code&gt;  处开始，覆盖 &lt;code&gt;value&lt;/code&gt;  的长度。
&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;offset&lt;/code&gt;  比当前 &lt;code&gt;key&lt;/code&gt;  对应 string 还要长，那这个 string 后面就&lt;font color=&#39;red&#39;&gt;补 0&lt;/font&gt;以达到 offset。&lt;/li&gt;
&lt;li&gt;不存在的 &lt;code&gt;key&lt;/code&gt;  被认为是&lt;font color=&#39;red&#39;&gt;空字符串&lt;/font&gt;，所以这个命令可以确保 key 有一个足够大的字符串，能在 &lt;code&gt;offset&lt;/code&gt;  处设置 value。&lt;/li&gt;
&lt;li&gt;模式：正因为有了 &lt;code&gt;SETRANGE&lt;/code&gt;  和类似功能的 &lt;code&gt;GETRANGE&lt;/code&gt;  命令，你可以把 Redis 的&lt;font color=&#39;red&#39;&gt;字符串当成线性数组&lt;/font&gt;，随机访问只要 O (1) 复杂度。这在很多真实场景应用里非常快和高效。&lt;/li&gt;
&lt;li&gt;返回值： &lt;code&gt;integer-reply&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;修改后的字符串长度&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;时间复杂度： &lt;code&gt;O（1）&lt;/code&gt; ，不计算就地复制新字符串所花费的时间。
&lt;ul&gt;
&lt;li&gt;通常，此字符串非常小，因此摊销复杂度为 O（1）。&lt;/li&gt;
&lt;li&gt;否则复杂度为 O（M），M 是 value 参数的长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;GETRANGE key start end&lt;/code&gt; &lt;/strong&gt;：返回 &lt;code&gt;key&lt;/code&gt;  对应的字符串 &lt;code&gt;value&lt;/code&gt;  的子串，这个子串是由 &lt;code&gt;start&lt;/code&gt;  和 &lt;code&gt;end&lt;/code&gt;  位移决定的（两者都在 string 内）。
&lt;ul&gt;
&lt;li&gt;可以用&lt;font color=&#39;red&#39;&gt;负的位移&lt;/font&gt;来表示从 string 尾部开始数的下标。所以 - 1 就是最后一个字符，-2 就是倒数第二个，以此类推。&lt;/li&gt;
&lt;li&gt;这个函数处理超出范围的请求时，都把结果限制在 string 内。&lt;/li&gt;
&lt;li&gt;返回值： &lt;code&gt;bulk-reply&lt;/code&gt; ，子串&lt;/li&gt;
&lt;li&gt;时间复杂度： &lt;code&gt;O(N)&lt;/code&gt; ，其中 N 是字符串长度，复杂度由最终返回长度决定。但由于通过一个字符串创建子字符串是很容易的，它&lt;font color=&#39;red&#39;&gt;可以被认为是 &lt;code&gt;O(1)&lt;/code&gt; &lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;数值增减&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数值增减&#34;&gt;#&lt;/a&gt; 数值增减&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;前提：一定要是数字，才能增减！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;INCR key&lt;/code&gt; &lt;/strong&gt;：对存储在指定 &lt;code&gt;key&lt;/code&gt;  的数值执行原子的&lt;font color=&#39;red&#39;&gt;加 1 操作&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果指定的 key 不存在，那么在执行 incr 操作之前，会先将它的值设定为 &lt;code&gt;0&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;如果指定的 key 中存储的值不是字符串类型（fix：）或者存储的字符串类型不能表示为一个整数，那么执行这个命令时服务器会返回一个错误 (eq:(error) ERR value is not an integer or out of range)。&lt;/li&gt;
&lt;li&gt;返回值： &lt;code&gt;integer-reply&lt;/code&gt; ，递增操作后 key 对应的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;INCRBY key increment&lt;/code&gt; &lt;/strong&gt;：将 &lt;code&gt;key&lt;/code&gt;  对应的数字&lt;font color=&#39;red&#39;&gt;加 &lt;code&gt;decrement&lt;/code&gt; &lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 key 不存在，操作之前，key 就会被置为 0。&lt;/li&gt;
&lt;li&gt;如果 key 的 value 类型错误或者是个不能表示成数字的字符串，就返回错误。&lt;/li&gt;
&lt;li&gt;返回值： &lt;code&gt;integer-reply&lt;/code&gt; ，增加操作后 key 对应的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;DECR key&lt;/code&gt; &lt;/strong&gt;：对 &lt;code&gt;key&lt;/code&gt;  对应的数字做&lt;font color=&#39;red&#39;&gt;减 1 操作&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 key 不存在，那么在操作之前，这个 key 对应的值会被置为 0。&lt;/li&gt;
&lt;li&gt;如果 key 有一个错误类型的 value 或者是一个不能表示成数字的字符串，就返回错误。&lt;/li&gt;
&lt;li&gt;返回值：数字，减小后 key 对应的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;DECRBY key decrement&lt;/code&gt; &lt;/strong&gt;：将 &lt;code&gt;key&lt;/code&gt;  对应的数字&lt;font color=&#39;red&#39;&gt;减 &lt;code&gt;decrement&lt;/code&gt; &lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 key 不存在，操作之前，key 就会被置为 0。&lt;/li&gt;
&lt;li&gt;如果 key 的 value 类型错误或者是个不能表示成数字的字符串，就返回错误。&lt;/li&gt;
&lt;li&gt;返回值：返回一个数字：减少之后的 value 值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;获取字符串长度以及内容追加&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取字符串长度以及内容追加&#34;&gt;#&lt;/a&gt; 获取字符串长度以及内容追加&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;STRLEN key&lt;/code&gt; &lt;/strong&gt;：返回 &lt;code&gt;key&lt;/code&gt;  的 string 类型 &lt;code&gt;value&lt;/code&gt;  的长度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;APPEND key value&lt;/code&gt; &lt;/strong&gt;：将 &lt;code&gt;value&lt;/code&gt; &lt;font color=&#39;red&#39;&gt;追加&lt;/font&gt;到 &lt;code&gt;key&lt;/code&gt;  对应的字符串值之后，并&lt;font color=&#39;red&#39;&gt;返回追加后的长度&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;分布式锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式锁&#34;&gt;#&lt;/a&gt; 分布式锁&lt;/h5&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804110715178.png&#34; alt=&#34;image-20230804110715178&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;SETEX key seconds value&lt;/code&gt; &lt;/strong&gt;：设置 &lt;code&gt;key&lt;/code&gt;  对应字符串 &lt;code&gt;value&lt;/code&gt; ，并且设置 key 在给定的 &lt;code&gt;seconds&lt;/code&gt;  时间之后超时过期。这个命令是&lt;font color=&#39;red&#39;&gt;原子的&lt;/font&gt;，等效于执行下面的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;figcaption data-lang=&#34;txt&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;SET mykey value&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;EXPIRE mykey seconds&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;SETNX key value&lt;/code&gt; &lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;如果 &lt;code&gt;key&lt;/code&gt;  不存在&lt;/font&gt;，将值设为 &lt;code&gt;value&lt;/code&gt; ，这种情况下等同 &lt;code&gt;SET&lt;/code&gt;  命令。&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;key&lt;/code&gt;  存在时，什么也不做。 &lt;code&gt;SETNX&lt;/code&gt;  是 “&lt;strong&gt;SET&lt;/strong&gt; if &lt;strong&gt;N&lt;/strong&gt;ot e&lt;strong&gt;X&lt;/strong&gt;ists” 的简写。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以与 &lt;code&gt;DEL&lt;/code&gt;  命令配合使用，对资源加锁&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;先获取再设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#先获取再设置&#34;&gt;#&lt;/a&gt; 先获取，再设置&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;GETSET key value&lt;/code&gt; &lt;/strong&gt;：等同于 &lt;code&gt;set key value get&lt;/code&gt;  命令，&lt;font color=&#39;red&#39;&gt;返回 key 的旧 value，将 key 的值设置为新 value&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用场景&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804111834362.png&#34; alt=&#34;image-20230804111834362&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;抖音中许多人点赞某个视频，点一下加一次&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公众号上某篇文章的阅读数，只要点击了 rest 地址，直接可以使用 incr key 命令增加一个数字 1，完成记录数字。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804111954515.png&#34; alt=&#34;image-20230804111954515&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;列表list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#列表list&#34;&gt;#&lt;/a&gt; 列表（List）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;单 key 多 value，有序有重复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;命令概览-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令概览-2&#34;&gt;#&lt;/a&gt; 命令概览&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804112132538.png&#34; alt=&#34;image-20230804112132538&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;list的数据结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#list的数据结构&#34;&gt;#&lt;/a&gt; List 的数据结构&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804112413028.png&#34; alt=&#34;image-20230804112413028&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一个&lt;strong&gt;双端链表&lt;/strong&gt;的结构，容量是 2&lt;sup&gt;32&lt;/sup&gt;-1 个元素，大概 40 多亿，主要功能有 &lt;code&gt;push&lt;/code&gt; / &lt;code&gt;pop&lt;/code&gt;  等，一般用在栈、队列、消息队列等场景。&lt;/p&gt;
&lt;p&gt;left、right 都可以插入：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果键不存在，创建新的链表；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果键已存在，新增内容；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果值全移除，对应的键也就消失了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它的底层实际是个&lt;strong&gt;双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;插入与遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插入与遍历&#34;&gt;#&lt;/a&gt; 插入与遍历&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;LPUSH key value [value ...]&lt;/code&gt; &lt;/strong&gt;：将所有的 value 从 key 列表的&lt;strong&gt;左端依次插入&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;如果 key 不存在，那么在进行 push 操作前会创建一个空列表。&lt;/li&gt;
&lt;li&gt;如果 key 对应的值不是一个 list 的话，那么会返回一个错误。&lt;/li&gt;
&lt;li&gt;返回值：操作后的 list 长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;RPUSH key value [value ...]&lt;/code&gt; &lt;/strong&gt;：所有的 value 从 key 列表的&lt;strong&gt;右端依次插入&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;LRANGE key start stop&lt;/code&gt; &lt;/strong&gt;：遍历 key 列表在&lt;strong&gt;下标 [start,stop] 中的元素，注意右区间是闭合的&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;start 和 end 偏移量都是基于 0 的下标，即 list 的第一个元素下标是 0（list 的表头），第二个元素下标是 1，以此类推。&lt;/li&gt;
&lt;li&gt;偏移量也可以是负数，表示偏移量是从 list 尾部开始计数。例如， -1 表示列表的最后一个元素，-2 是倒数第二个，以此类推。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;当下标超过 list 范围的时候不会产生 error&lt;/font&gt;。
&lt;ul&gt;
&lt;li&gt;如果 start 比 list 的尾部下标大的时候，会返回一个空列表。&lt;/li&gt;
&lt;li&gt;如果 stop 比 list 的实际尾部大的时候，Redis 会当它是最后一个元素的下标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;弹出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#弹出&#34;&gt;#&lt;/a&gt; 弹出&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;LPOP key&lt;/code&gt; &lt;/strong&gt;：从 key 列表的&lt;strong&gt;左端弹出一个元素&lt;/strong&gt;，并返回该元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;RPOP key&lt;/code&gt; &lt;/strong&gt;：从 key 列表的&lt;strong&gt;右端弹出一个元素&lt;/strong&gt;，并返回该元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;根据下标获取元素从左到右&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#根据下标获取元素从左到右&#34;&gt;#&lt;/a&gt; 根据下标获取元素（从左到右）&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;LINDEX key index&lt;/code&gt; &lt;/strong&gt;：返回 &lt;code&gt;key&lt;/code&gt;  列表对应索引 &lt;code&gt;index&lt;/code&gt;  处的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;获取列表中的元素个数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取列表中的元素个数&#34;&gt;#&lt;/a&gt; 获取列表中的元素个数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;LLEN key&lt;/code&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;删除指定数量个指定value的元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除指定数量个指定value的元素&#34;&gt;#&lt;/a&gt; 删除指定数量个指定 value 的元素&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;LREM key count value&lt;/code&gt; &lt;/strong&gt;：从存于  &lt;code&gt;key&lt;/code&gt;  的列表里&lt;font color=&#39;red&#39;&gt;移除前  &lt;code&gt;count&lt;/code&gt;  次出现的值为  &lt;code&gt;value&lt;/code&gt;  的元素&lt;/font&gt;。 这个 count 参数通过下面几种方式影响这个操作：
&lt;ul&gt;
&lt;li&gt;count &amp;gt; 0: &lt;font color=&#39;red&#39;&gt;从头往尾移除&lt;/font&gt;值为 value 的元素。&lt;/li&gt;
&lt;li&gt;count &amp;lt; 0: &lt;font color=&#39;red&#39;&gt;从尾往头移除&lt;/font&gt;值为 value 的元素。&lt;/li&gt;
&lt;li&gt;count = 0: &lt;font color=&#39;red&#39;&gt;移除所有&lt;/font&gt;值为 value 的元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;截取并保存指定下标区间的元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#截取并保存指定下标区间的元素&#34;&gt;#&lt;/a&gt; 截取并保存指定下标区间的元素&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;LTRIM key start stop&lt;/code&gt; &lt;/strong&gt;：修剪 (trim) 一个已存在的 list，这样 list 就会&lt;strong&gt;只保留指定范围 [start,stop] 的指定元素&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;将元素移至另一个列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将元素移至另一个列表&#34;&gt;#&lt;/a&gt; 将元素移至另一个列表&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;RPOPLPUSH source destination&lt;/code&gt; &lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;原子性&lt;/font&gt;地移除存储在  &lt;code&gt;source&lt;/code&gt;  的列表的最后一个元素（列表尾部元素）， 并把该元素放入存储在  &lt;code&gt;destination&lt;/code&gt;  的列表的第一个元素位置（列表头部）。
&lt;ul&gt;
&lt;li&gt;如果 source 和 destination 是同样的，那么这个操作等同于移除列表最后一个元素并且把该元素放在列表头部， 所以这个命令也可以当作是一个旋转列表的命令。&lt;/li&gt;
&lt;li&gt;返回值：被移除和放入的元素&lt;/li&gt;
&lt;li&gt;模式 1—— 安全的队列：RPOPLPUSH 可以实现，消费者端取到消息的同时把该消息放入一个正在处理中的列表。避免了消息丢失的安全问题。&lt;/li&gt;
&lt;li&gt;模式 2—— 循环列表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;设置某下标对应的元素值从左到右&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置某下标对应的元素值从左到右&#34;&gt;#&lt;/a&gt; 设置某下标对应的元素值（从左到右）&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;LSET key index value&lt;/code&gt; &lt;/strong&gt;：设置  &lt;code&gt;index&lt;/code&gt;  位置的 list 元素的值为  &lt;code&gt;value&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;在指定元素的前后插入元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在指定元素的前后插入元素&#34;&gt;#&lt;/a&gt; 在指定元素的前 / 后插入元素&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;LINSERT key BEFORE|AFTER pivot value&lt;/code&gt; &lt;/strong&gt;：把  &lt;code&gt;value&lt;/code&gt;  插入存于  &lt;code&gt;key&lt;/code&gt;  的列表中在基准值  &lt;code&gt;pivot&lt;/code&gt;  的前面或后面。返回插入后的列表长度，或者当 pivot 不存在时返回 - 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;应用场景-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用场景-2&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;微信公众号订阅的消息&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;哈希集hash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈希集hash&#34;&gt;#&lt;/a&gt; 哈希集（Hash）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;单 key，但 value 是一个键值对，即&lt;strong&gt;单 key 单键值对&lt;/strong&gt;：Map&amp;lt;String,Map&amp;lt;Object,Object&amp;gt;&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;命令概览-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令概览-3&#34;&gt;#&lt;/a&gt; 命令概览&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804131019423.png&#34; alt=&#34;image-20230804131019423&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;设置-获取-删除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置-获取-删除&#34;&gt;#&lt;/a&gt; 设置、获取、删除&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804132747399.png&#34; alt=&#34;image-20230804132747399&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;HSET key field value&lt;/code&gt; &lt;/strong&gt;：将 &lt;code&gt;key&lt;/code&gt;  指定的哈希集中&lt;font color=&#39;red&#39;&gt;指定字段 &lt;code&gt;field&lt;/code&gt;  的值设置为 &lt;code&gt;value&lt;/code&gt; &lt;/font&gt;。返回值为：
&lt;ul&gt;
&lt;li&gt;1，如果 field 是一个新字段&lt;/li&gt;
&lt;li&gt;0，如果 field 已存在&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;HGET key field&lt;/code&gt; &lt;/strong&gt;：获取 &lt;code&gt;key&lt;/code&gt;  指定的哈希集中字段 &lt;code&gt;field&lt;/code&gt;  所关联的值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;HMSET key field value [field value ...]&lt;/code&gt; &lt;/strong&gt;：将 &lt;code&gt;key&lt;/code&gt;  指定的哈希集中&lt;font color=&#39;red&#39;&gt;所有指定字段 &lt;code&gt;field&lt;/code&gt;  的值设置为对应 &lt;code&gt;value&lt;/code&gt; &lt;/font&gt;。将重写所有在哈希集中存在的字段。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;HMGET key field [field ...]&lt;/code&gt; &lt;/strong&gt;：返回  &lt;code&gt;key&lt;/code&gt;  指定的哈希集中&lt;font color=&#39;red&#39;&gt;所有指定字段 &lt;code&gt;field&lt;/code&gt;  的值&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;HGETALL key&lt;/code&gt; &lt;/strong&gt;：返回  &lt;code&gt;key&lt;/code&gt;  指定的哈希集中&lt;font color=&#39;red&#39;&gt;所有的字段和值&lt;/font&gt;。&lt;strong&gt;返回值中，每个字段名的下一个是它的值&lt;/strong&gt;，所以返回值的&lt;font color=&#39;red&#39;&gt;长度是哈希集大小的两倍&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;HDEL key field [field ...]&lt;/code&gt; &lt;/strong&gt;：从 key 指定的哈希集中&lt;font color=&#39;red&#39;&gt;移除各个指定的域&lt;/font&gt;，&lt;strong&gt;返回成功移除的域的数量&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;获取哈希集的字段数量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取哈希集的字段数量&#34;&gt;#&lt;/a&gt; 获取哈希集的字段数量&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;HLEN key&lt;/code&gt; &lt;/strong&gt;：返回  &lt;code&gt;key&lt;/code&gt;  指定的哈希集包含的&lt;strong&gt;字段的数量&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;判断哈希集中是否存在某个字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判断哈希集中是否存在某个字段&#34;&gt;#&lt;/a&gt; 判断哈希集中是否存在某个字段&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;HEXISTS key field&lt;/code&gt; &lt;/strong&gt;：返回 &lt;code&gt;key&lt;/code&gt;  指定的哈希集中&lt;font color=&#39;red&#39;&gt;是否存在字段 &lt;code&gt;field&lt;/code&gt; &lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;获取哈希集中的所有keyvalue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取哈希集中的所有keyvalue&#34;&gt;#&lt;/a&gt; 获取哈希集中的所有 key/value&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;HKEYS key&lt;/code&gt; &lt;/strong&gt;：返回  &lt;code&gt;key&lt;/code&gt;  指定的哈希集中&lt;font color=&#39;red&#39;&gt;所有字段的名字&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;HVALS key&lt;/code&gt; &lt;/strong&gt;：返回  &lt;code&gt;key&lt;/code&gt;  指定的哈希集中&lt;font color=&#39;red&#39;&gt;所有字段的值&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;增加指定字段的数值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增加指定字段的数值&#34;&gt;#&lt;/a&gt; 增加指定字段的数值&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;HINCRBY key field increment&lt;/code&gt; &lt;/strong&gt;：将  &lt;code&gt;key&lt;/code&gt;  指定的哈希集中&lt;font color=&#39;red&#39;&gt;指定字段  &lt;code&gt;field&lt;/code&gt;  的数值增加  &lt;code&gt;increment&lt;/code&gt; &lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;HINCRBYFLOAT key field increment&lt;/code&gt; &lt;/strong&gt;：将  &lt;code&gt;key&lt;/code&gt;  指定的哈希集中&lt;font color=&#39;red&#39;&gt;指定字段  &lt;code&gt;field&lt;/code&gt;  的数值增加 float 类型的  &lt;code&gt;increment&lt;/code&gt; &lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;只设置哈希集中不存在的字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#只设置哈希集中不存在的字段&#34;&gt;#&lt;/a&gt; 只设置哈希集中不存在的字段&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;HSETNX key field value&lt;/code&gt; &lt;/strong&gt;：只在  &lt;code&gt;key&lt;/code&gt;  指定的哈希集中不存在指定的字段  &lt;code&gt;field&lt;/code&gt;  时，设置其值为  &lt;code&gt;value&lt;/code&gt; 。
&lt;ul&gt;
&lt;li&gt;如果  &lt;code&gt;key&lt;/code&gt;  指定的哈希集不存在，会创建一个新的哈希集并与  &lt;code&gt;key&lt;/code&gt;  关联。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果字段已存在，该操作无效果&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;应用场景-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用场景-3&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h5&gt;
&lt;p&gt;京东购物车的早期设计，目前不再采用，当前中小厂可用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新增商品 → hset shopcar:uid1024 334488 1&lt;/li&gt;
&lt;li&gt;新增商品 → hset shopcar:uid1024 334477 1&lt;/li&gt;
&lt;li&gt;增加商品数量 → hincrby shopcar:uid1024 334477 1&lt;/li&gt;
&lt;li&gt;商品总数 → hlen shopcar:uid1024&lt;/li&gt;
&lt;li&gt;全部选择 → hgetall shopcar:uid1024&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804143259448.png&#34; alt=&#34;image-20230804143259448&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;集合set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集合set&#34;&gt;#&lt;/a&gt; 集合（Set）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;单 key 多 value，且无序无重复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;命令概览-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令概览-4&#34;&gt;#&lt;/a&gt; 命令概览&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804143501168.png&#34; alt=&#34;image-20230804143501168&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;添加元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加元素&#34;&gt;#&lt;/a&gt; 添加元素&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;SADD key member [member ...]&lt;/code&gt; &lt;/strong&gt;：向  &lt;code&gt;key&lt;/code&gt;  指定的集合中添加一个或多个指定的  &lt;code&gt;member&lt;/code&gt;  元素。
&lt;ul&gt;
&lt;li&gt;指定的一个或者多个元素 member 如果已经在集合 key 中&lt;font color=&#39;red&#39;&gt;存在则忽略&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;如果集合 key 不存在，则新建集合 key , 并添加 member 元素到集合 key 中&lt;/li&gt;
&lt;li&gt;返回值：&lt;strong&gt;成功添加到集合中的元素数量（不包括已经存在于集合中的元素）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;遍历元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#遍历元素&#34;&gt;#&lt;/a&gt; 遍历元素&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;SMEMBERS key&lt;/code&gt; &lt;/strong&gt;：返回  &lt;code&gt;key&lt;/code&gt;  指定的集合中所有元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;判断集合中是否有某元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判断集合中是否有某元素&#34;&gt;#&lt;/a&gt; 判断集合中是否有某元素&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;SISMEMBER key member&lt;/code&gt; &lt;/strong&gt;：判断成员  &lt;code&gt;member&lt;/code&gt;  是否是集合  &lt;code&gt;key&lt;/code&gt;  中的成员，是则返回 1，不是或者集合 key 不存在则返回 0&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;删除元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除元素&#34;&gt;#&lt;/a&gt; 删除元素&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;SREM key member [member ...]&lt;/code&gt; &lt;/strong&gt;：在  &lt;code&gt;key&lt;/code&gt;  集合中&lt;font color=&#39;red&#39;&gt;移除指定的元素&lt;/font&gt;，&lt;strong&gt;返回成功移除的元素个数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;获取集合中的元素数量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取集合中的元素数量&#34;&gt;#&lt;/a&gt; 获取集合中的元素数量&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;SCARD key&lt;/code&gt; &lt;/strong&gt;：返回  &lt;code&gt;key&lt;/code&gt;  集合的元素数量（即集合的基数）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;从集合中随机u展现u指定个数个元素但元素不删除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从集合中随机u展现u指定个数个元素但元素不删除&#34;&gt;#&lt;/a&gt; 从集合中随机&lt;u&gt;展现&lt;/u&gt;指定个数个元素，但元素不删除&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;SRANDMEMBER key [count]&lt;/code&gt; &lt;/strong&gt;：&lt;strong&gt;随机&lt;u&gt;返回&lt;/u&gt;  &lt;code&gt;key&lt;/code&gt;  集合中的  &lt;code&gt;count&lt;/code&gt;  个元素&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;如果 count 是整数且小于元素的个数，返回含有 count 个不同的元素的数组&lt;/li&gt;
&lt;li&gt;如果 count 是个整数且大于集合中元素的个数时，仅返回整个集合的所有元素&lt;/li&gt;
&lt;li&gt;当 count 是负数，则会返回一个包含 count 的绝对值的个数元素的数组&lt;/li&gt;
&lt;li&gt;如果 count 的绝对值大于元素的个数，则返回的结果集里会出现一个元素出现多次的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;从集合中随机u弹出u指定个数个元素且元素删除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从集合中随机u弹出u指定个数个元素且元素删除&#34;&gt;#&lt;/a&gt; 从集合中随机&lt;u&gt;弹出&lt;/u&gt;指定个数个元素，且元素删除&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;SPOP key [count]&lt;/code&gt; &lt;/strong&gt;：&lt;strong&gt;随机&lt;u&gt;弹出&lt;/u&gt;  &lt;code&gt;key&lt;/code&gt;  集合中的  &lt;code&gt;count&lt;/code&gt;  个元素&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;将集合中已存在的某个值移动到另一个集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将集合中已存在的某个值移动到另一个集合&#34;&gt;#&lt;/a&gt; 将集合中已存在的某个值移动到另一个集合&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;SMOVE source destination member&lt;/code&gt; &lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;将 &lt;code&gt;member&lt;/code&gt;  从 &lt;code&gt;source&lt;/code&gt;  集合移动到 &lt;code&gt;destination&lt;/code&gt;  集合中&lt;/font&gt;。对于其他的客户端，在特定的时间元素将会作为 source 或者 destination 集合的成员出现。
&lt;ul&gt;
&lt;li&gt;如果 source 集合不存在或者不包含指定的元素，这 smove 命令不执行任何操作并且返回 0。&lt;/li&gt;
&lt;li&gt;否则对象将会从 source 集合中移除，并添加到 destination 集合中去，
&lt;ul&gt;
&lt;li&gt;如果 destination 集合已经存在该元素，则 smove 命令仅将该元素从 source 集合中移除.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果 source 和 destination 不是集合类型，则返回错误.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;集合运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集合运算&#34;&gt;#&lt;/a&gt; &lt;mark&gt;集合运算&lt;/mark&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;社交软件中一定会大量使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设集合 A 的元素为 abc12，集合 B 的元素为 123ax。&lt;/p&gt;
&lt;h6 id=&#34;差集运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#差集运算&#34;&gt;#&lt;/a&gt; 差集运算&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;即 A-B，表示属于 A 但不属于 B 的元素构成的集合&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;SDIFF key [key ...]&lt;/code&gt; &lt;/strong&gt;：返回一个集合与给定集合的差集的元素.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;并集运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并集运算&#34;&gt;#&lt;/a&gt; 并集运算&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;即 A∪B，表示属于 A 或 B 的元素合并后的集合&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;SUNION key [key ...]&lt;/code&gt; &lt;/strong&gt;：返回给定的多个集合的并集中的所有成员.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;交集运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交集运算&#34;&gt;#&lt;/a&gt; 交集运算&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;即 A∩B，表示属于 A 且属于 B 的共同拥有的元素构成的集合&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;SINTER key [key ...]&lt;/code&gt; &lt;/strong&gt;：返回指定所有的集合的成员的交集.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;SINTERCARD numkeys key [key ...] [LIMIT limit]&lt;/code&gt; &lt;/strong&gt;：类似于 &lt;code&gt;SINTER&lt;/code&gt;  命令，但是不返回结果集，&lt;strong&gt;只返回指定 &lt;code&gt;numkeys&lt;/code&gt;  个集合的交集结果的基数&lt;/strong&gt;，是 Redis7 的新指令。LIMIT 用来限制返回值大小，
&lt;ul&gt;
&lt;li&gt;若返回值小于 limit，则返回该返回值&lt;/li&gt;
&lt;li&gt;若返回值大于 limit，则返回 limit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;应用场景-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用场景-4&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h5&gt;
&lt;h6 id=&#34;微信抽奖小程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#微信抽奖小程序&#34;&gt;#&lt;/a&gt; 微信抽奖小程序&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804164737598.png&#34; alt=&#34;image-20230804164737598&#34; /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;步骤&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Redis 命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 用户 ID，立即参与按钮&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;sadd key 用户 ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2 显示已经有多少人参与了，上图 23208 人参加&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SCARD key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3 抽奖 (从 set 中任意选取 N 个中奖人)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SRANDMEMBER key 2 // 随机抽奖 2 个人，元素不删除&lt;br /&gt;SPOP key 3  // 随机抽奖 3 个人，元素会删除&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6 id=&#34;微信朋友圈点赞查看同赞朋友&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#微信朋友圈点赞查看同赞朋友&#34;&gt;#&lt;/a&gt; 微信朋友圈点赞查看同赞朋友&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804165326659.png&#34; alt=&#34;image-20230804165326659&#34; /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;步骤&lt;/th&gt;
&lt;th&gt;Redis 命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1 新增点赞&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sadd&lt;/code&gt;  pub:msgID 点赞用户 ID1 点赞用户 ID2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 取消点赞&lt;/td&gt;
&lt;td&gt;&lt;code&gt;srem&lt;/code&gt;  pub:msgID 点赞用户 ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3 展现所有点赞过的用户&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SMEMBERS&lt;/code&gt;  pub:msgID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4 点赞用户数统计，就是常见的点赞红色数字&lt;/td&gt;
&lt;td&gt;&lt;code&gt;scard&lt;/code&gt;  pub:msgID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5 判断某个朋友是否对楼主点赞过&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SISMEMBER&lt;/code&gt;  pub:msgID 用户 ID&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6 id=&#34;qq内推可能认识的人&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#qq内推可能认识的人&#34;&gt;#&lt;/a&gt; QQ 内推可能认识的人&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804165609346.png&#34; alt=&#34;image-20230804165609346&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;有序集合zsetsorted-set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有序集合zsetsorted-set&#34;&gt;#&lt;/a&gt; 有序集合 Zset（sorted set）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;单 key 多 value，且&lt;font color=&#39;red&#39;&gt;有序&lt;/font&gt;无重复，在每个 value 前加一个&lt;font color=&#39;red&#39;&gt;score&lt;/font&gt;分数值。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set 是 k1-&amp;gt;v1,v2&lt;/li&gt;
&lt;li&gt;Zset 是 k1-&amp;gt;score1 v1, score2 v2&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;命令概览-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令概览-5&#34;&gt;#&lt;/a&gt; 命令概览&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804170237545.png&#34; alt=&#34;image-20230804170237545&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;添加元素-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加元素-2&#34;&gt;#&lt;/a&gt; 添加元素&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;ZADD key [NX|XX] [CH] [INCR] score member [score member ...]&lt;/code&gt; &lt;/strong&gt;：将多个分数 / 成员（ &lt;code&gt;score&lt;/code&gt; / &lt;code&gt;member&lt;/code&gt; ）对添加到键为 &lt;code&gt;key&lt;/code&gt;  有序集合（sorted set）里面，以&lt;font color=&#39;red&#39;&gt;递增&lt;/font&gt;的方式排序，&lt;font color=&#39;red&#39;&gt;返回新添加成员的数量&lt;/font&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;XX&lt;/strong&gt;: 仅仅更新存在的成员，不添加新成员。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NX&lt;/strong&gt;: 不更新存在的成员，只添加新成员。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CH&lt;/strong&gt;: &lt;font color=&#39;red&#39;&gt;修改返回值为发生变化的成员总数&lt;/font&gt;，原始是返回新添加成员的总数 (CH 是 &lt;em&gt;changed&lt;/em&gt; 的意思)。更改的元素是&lt;strong&gt;新添加的成员&lt;/strong&gt;，已经存在的成员&lt;strong&gt;更新分数&lt;/strong&gt;。所以在命令中指定的成员有相同的分数将不被计算在内。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;INCR&lt;/strong&gt;: 当 &lt;code&gt;ZADD&lt;/code&gt;  指定这个选项时，成员的操作就等同 &lt;code&gt;ZINCRBY&lt;/code&gt;  命令，对成员的分数进行&lt;font color=&#39;red&#39;&gt;递增&lt;/font&gt;操作。&lt;/li&gt;
&lt;li&gt;如果指定添加的成员已经是有序集合里面的成员，则会&lt;font color=&#39;red&#39;&gt;更新&lt;/font&gt;成员的分数（scrore），并更新到正确的排序位置。&lt;/li&gt;
&lt;li&gt;时间复杂度：&lt;font color=&#39;red&#39;&gt;对于每个添加的成员为 &lt;code&gt;O(log(N))&lt;/code&gt; &lt;/font&gt;，其中 N 指的是有序集合中的元素数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;遍历元素-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#遍历元素-2&#34;&gt;#&lt;/a&gt; 遍历元素&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;ZRANGE key start stop [WITHSCORES]&lt;/code&gt; &lt;/strong&gt;：遍历  &lt;code&gt;key&lt;/code&gt;  指定的有序集合中&lt;strong&gt;下标在 [ &lt;code&gt;start&lt;/code&gt; , &lt;code&gt;stop&lt;/code&gt; ] 间的元素&lt;/strong&gt;，&lt;font color=&#39;red&#39;&gt;返回的元素按分数递增排序&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果添加了  &lt;code&gt;WITHSCORES&lt;/code&gt;  选项，会将元素的分数与元素一并返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;ZREVRANGE key start stop [WITHSCORES]&lt;/code&gt; &lt;/strong&gt;：与 &lt;code&gt;ZRANGE&lt;/code&gt;  类似，只不过元素是&lt;font color=&#39;red&#39;&gt;按分数递减排序&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]&lt;/code&gt; &lt;/strong&gt;：遍历  &lt;code&gt;key&lt;/code&gt;  指定的有序集合中&lt;strong&gt; score 值在 [ &lt;code&gt;min&lt;/code&gt; , &lt;code&gt;max&lt;/code&gt; ] 间的元素&lt;/strong&gt;，&lt;font color=&#39;red&#39;&gt;返回的元素按分数递增排序&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;具有相同分数的元素按字典序排列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LIMIT&lt;/code&gt;  参数指定返回结果的起始&lt;font color=&#39;red&#39;&gt;下标 &lt;code&gt;offset&lt;/code&gt;  以及数量 &lt;code&gt;count&lt;/code&gt; &lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，如果 &lt;code&gt;offset&lt;/code&gt;  太大，定位 &lt;code&gt;offset&lt;/code&gt;  就可能遍历整个有序集合，这会增加 O (N) 的复杂度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;min&lt;/code&gt;  和 &lt;code&gt;max&lt;/code&gt;  可以是 - inf 和 + inf，这样一来，你就可以在不知道有序集的最低和最高 score 值的情况下，使用 &lt;code&gt;ZRANGEBYSCORE&lt;/code&gt;  命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;默认使用闭区间&lt;/font&gt;，也可以通过给参数前增加 &lt;code&gt;(&lt;/code&gt; 符号来使用可选的开区间 (小于或大于)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;获取元素的分数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取元素的分数&#34;&gt;#&lt;/a&gt; 获取元素的分数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;ZSCORE key member&lt;/code&gt; &lt;/strong&gt;：返回 &lt;code&gt;key&lt;/code&gt;  指定的有序集合中，成员 &lt;code&gt;member&lt;/code&gt;  的 score 值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;获取有序集合的元素数量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取有序集合的元素数量&#34;&gt;#&lt;/a&gt; 获取有序集合的元素数量&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;ZCARD key&lt;/code&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;删除元素-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除元素-2&#34;&gt;#&lt;/a&gt; 删除元素&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;ZREM key member [member ...]&lt;/code&gt; &lt;/strong&gt;：从 &lt;code&gt;key&lt;/code&gt;  指定的有序集合中&lt;strong&gt;删除指定的多个成员 &lt;code&gt;member&lt;/code&gt; &lt;/strong&gt;，返回的是删除的成员个数，&lt;font color=&#39;red&#39;&gt;不包括不存在的成员&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;增加某个元素的分数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增加某个元素的分数&#34;&gt;#&lt;/a&gt; 增加某个元素的分数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;ZINCRBY key increment member&lt;/code&gt; &lt;/strong&gt;：为 &lt;code&gt;key&lt;/code&gt;  指定的有序集合中的成员 &lt;code&gt;member&lt;/code&gt;  的 score 值加上增量 &lt;code&gt;increment&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;获得指定分数范围内的元素数量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获得指定分数范围内的元素数量&#34;&gt;#&lt;/a&gt; 获得指定分数范围内的元素数量&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;ZCOUNT key min max&lt;/code&gt; &lt;/strong&gt;：返回 &lt;code&gt;key&lt;/code&gt;  指定的有序集合中 score 值在 [ &lt;code&gt;min&lt;/code&gt; , &lt;code&gt;max&lt;/code&gt; ] 之间的成员数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;弹出一个或多个元素redis7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#弹出一个或多个元素redis7&#34;&gt;#&lt;/a&gt; 弹出一个或多个元素（Redis7）&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;ZMPOP numkeys key [key ...] &amp;lt;MIN | MAX&amp;gt; [COUNT count]&lt;/code&gt; &lt;/strong&gt;：从 &lt;code&gt;numkeys&lt;/code&gt;  个有序集合 &lt;code&gt;key&lt;/code&gt;  列表中的第一个非空有序集合中，弹出 &lt;code&gt;count&lt;/code&gt;  个元素。
&lt;ul&gt;
&lt;li&gt;参数 &lt;code&gt;MIN&lt;/code&gt;  表示按照 score 值&lt;font color=&#39;red&#39;&gt;递增&lt;/font&gt;的顺序依次弹出&lt;/li&gt;
&lt;li&gt;参数 &lt;code&gt;MAX&lt;/code&gt;  表示按照 score 值&lt;font color=&#39;red&#39;&gt;递减&lt;/font&gt;的顺序依次弹出&lt;/li&gt;
&lt;li&gt;参数 &lt;code&gt;COUNT&lt;/code&gt;  表示指定&lt;font color=&#39;red&#39;&gt;要弹出的元素数量&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;默认设置为 1&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804193510087.png&#34; alt=&#34;image-20230804193510087&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;获取元素的下标值即排名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取元素的下标值即排名&#34;&gt;#&lt;/a&gt; 获取元素的下标值（即排名）&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;ZRANK key member&lt;/code&gt; &lt;/strong&gt;：&lt;strong&gt;返回有序集 &lt;code&gt;key&lt;/code&gt;  中成员 &lt;code&gt;member&lt;/code&gt;  的排名&lt;/strong&gt;。其中有序集成员&lt;font color=&#39;red&#39;&gt;按 score 值递增&lt;/font&gt;(从小到大) 顺序排列。排名以 0 为底，也就是说，score 值最小的成员排名为 0。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;ZREVRANK key member&lt;/code&gt; &lt;/strong&gt;：与 &lt;code&gt;ZRANK&lt;/code&gt;  命令类似，只不过是&lt;font color=&#39;red&#39;&gt;按照 score 值递减&lt;/font&gt;排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;应用场景-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用场景-5&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h5&gt;
&lt;p&gt;根据商品的销量对商品进行排序显示。&lt;/p&gt;
&lt;p&gt;思路：定义商品销售排行榜 (sorted set 集合)，key 为 goods:sellsort，分数为商品销售数量。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;步骤&lt;/th&gt;
&lt;th&gt;Redis 命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;商品编号 1001 的销量是 9，商品编号 1002 的销量是 15&lt;/td&gt;
&lt;td&gt;&lt;code&gt;zadd&lt;/code&gt;  goods:sellsort 9 1001 15 1002&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;有一个客户又买了 2 件商品 1001，商品编号 1001 销量加 2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;zincrby&lt;/code&gt;  goods:sellsort 2 1001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;求商品销量前 10 名&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ZREVRANGE&lt;/code&gt;  goods:sellsort 0 9 withscores&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804193828825.png&#34; alt=&#34;image-20230804193828825&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;位图bitmap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#位图bitmap&#34;&gt;#&lt;/a&gt; 位图（bitmap）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;单 key 多 value，其中 value 是由&lt;font color=&#39;orange&#39;&gt;0 和 1&lt;/font&gt;状态表现二进制位的&lt;font color=&#39;orange&#39;&gt;bit 数组&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;需求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#需求&#34;&gt;#&lt;/a&gt; 需求&lt;/h5&gt;
&lt;p&gt;用于&lt;strong&gt;状态统计&lt;/strong&gt;，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户是否登陆过&lt;/li&gt;
&lt;li&gt;电影、广告是否被点击播放过&lt;/li&gt;
&lt;li&gt;钉钉打卡上下班，签到统计&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;数据结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据结构&#34;&gt;#&lt;/a&gt; 数据结构&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804195914474.png&#34; alt=&#34;image-20230804195914474&#34; /&gt;&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;用&lt;strong&gt; String 类型作为底层数据结构&lt;/strong&gt;实现的一种统计&lt;strong&gt;二值状态&lt;/strong&gt;的数据类型&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;位图&lt;font color=&#39;red&#39;&gt;本质是数组&lt;/font&gt;，它是&lt;font color=&#39;red&#39;&gt;基于 String&lt;/font&gt;数据类型的&lt;font color=&#39;red&#39;&gt;按位的操作&lt;/font&gt;。该数组由多个二进制位组成，每个二进制位都对应一个偏移量 (我们称之为一个索引)。&lt;/li&gt;
&lt;li&gt;Bitmap 支持的&lt;font color=&#39;red&#39;&gt;最大位数是 2&lt;sup&gt;32&lt;/sup&gt; 位&lt;/font&gt;，它可以&lt;font color=&#39;red&#39;&gt;极大的节约存储空间&lt;/font&gt;，使用 512M 内存就可以存储多达 42.9 亿的字节信息 (2&lt;sup&gt;32&lt;/sup&gt; = 4294967296)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用命令&#34;&gt;#&lt;/a&gt; 常用命令&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804200305770.png&#34; alt=&#34;image-20230804200305770&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;SETBIT key offset value&lt;/code&gt; &lt;/strong&gt;：设置 &lt;code&gt;key&lt;/code&gt;  指定的 bitmap（字符串）在 &lt;code&gt;offset&lt;/code&gt;  处的 bit 值为 &lt;code&gt;value&lt;/code&gt; 。&lt;strong&gt;返回 offset 处原来的 bit 值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804201300199.png&#34; alt=&#34;image-20230804201300199&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;GETBIT key offset&lt;/code&gt; &lt;/strong&gt;：返回 &lt;code&gt;key&lt;/code&gt;  指定的 bitmap（字符串）在 &lt;code&gt;offset&lt;/code&gt;  处的 bit 值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 offset 超出了字符串长度的时候，这个字符串就被假定为由 0 比特填充的连续空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804201502414.png&#34; alt=&#34;image-20230804201502414&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;STRLEN key&lt;/code&gt; &lt;/strong&gt;：返回 &lt;code&gt;key&lt;/code&gt;  指定的 bitmap (字符串) 的&lt;strong&gt;字节数&lt;/strong&gt; (1 字节 = 8bit)，超过 8bit 后再扩容 1 字节。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804201827460.png&#34; alt=&#34;image-20230804201827460&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;BITCOUNT key [start end]&lt;/code&gt; &lt;/strong&gt;：统计 &lt;code&gt;key&lt;/code&gt;  指定的 bitmap (字符串) 中&lt;strong&gt; bit 值为 1 的数量&lt;/strong&gt;。可以指定额外的参数 &lt;code&gt;start&lt;/code&gt;  和 &lt;code&gt;end&lt;/code&gt;  来限制统计范围的下标。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804202346532.png&#34; alt=&#34;image-20230804202346532&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;BITOP operation destkey key [key ...]&lt;/code&gt; &lt;/strong&gt;：对一个或多个 &lt;code&gt;key&lt;/code&gt;  指定的&lt;strong&gt; bitmap (字符串) 之间进行位元操作&lt;/strong&gt;，并将结果保存到  &lt;code&gt;destkey&lt;/code&gt;  上，其中操作方式 &lt;code&gt;operation&lt;/code&gt;  有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AND：BITOP AND destkey srckey1 srckey2 srckey3 ... srckeyN ，对一个或多个 key 求&lt;font color=&#39;red&#39;&gt;逻辑并&lt;/font&gt;，并将结果保存到 destkey 。&lt;/li&gt;
&lt;li&gt;OR：BITOP OR destkey srckey1 srckey2 srckey3 ... srckeyN，对一个或多个 key 求&lt;font color=&#39;red&#39;&gt;逻辑或&lt;/font&gt;，并将结果保存到 destkey 。&lt;/li&gt;
&lt;li&gt;XOR：BITOP XOR destkey srckey1 srckey2 srckey3 ... srckeyN，对一个或多个 key 求&lt;font color=&#39;red&#39;&gt;逻辑异或&lt;/font&gt;，并将结果保存到 destkey 。&lt;/li&gt;
&lt;li&gt;NOT：BITOP NOT destkey srckey，对给定 key 求&lt;font color=&#39;red&#39;&gt;逻辑非&lt;/font&gt;，并将结果保存到 destkey 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;应用场景-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用场景-6&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;统计全年天天登陆占用多少字节&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230804203608847.png&#34; alt=&#34;image-20230804203608847&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按照年&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;按年去存储一个用户的签到情况，365 天只需要 365 / 8 ≈ 46 Byte，1000W 用户量一年也只需要 44 MB 就足够了。&lt;/p&gt;
&lt;p&gt;假如是亿级的系统，&lt;/p&gt;
&lt;p&gt;每天使用 1 个 1 亿位的 Bitmap 约占 12MB 的内存（10^8/8/1024/1024），10 天的 Bitmap 的内存开销约为 120MB，&lt;font color=&#39;red&#39;&gt;内存压力不算太高&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;此外，在实际使用时，&lt;font color=&#39;red&#39;&gt;最好对 Bitmap 设置过期时间&lt;/font&gt;，让 Redis 自动删除不再需要的签到记录以节省内存开销。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基数统计hyperloglog&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基数统计hyperloglog&#34;&gt;#&lt;/a&gt; 基数统计（HyperLogLog）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;单 key&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;需求-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#需求-2&#34;&gt;#&lt;/a&gt; 需求&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;UV&lt;/strong&gt;：Unique Visitor，独立访客，一般理解为客户端 IP，通常用于统计网站 / 文章的访问量，&lt;font color=&#39;red&#39;&gt;需要考虑去重&lt;/font&gt;，同时&lt;font color=&#39;red&#39;&gt;不希望占用太大内存&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;统计用户搜索网站关键词的数量&lt;/li&gt;
&lt;li&gt;统计用户每天搜索不同词条个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;hyperloglog是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hyperloglog是什么&#34;&gt;#&lt;/a&gt; HyperLogLog 是什么&lt;/h5&gt;
&lt;p&gt;一言蔽之：&lt;strong&gt;HyperLogLog 是一种根据条件去重的基数估计算法&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基数&lt;/strong&gt;：是一种数据集，是去重后的真实数量。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805111729020.png&#34; alt=&#34;image-20230805111729020&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基数统计&lt;/strong&gt;：统计一个集合中不重复的元素个数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大白话&lt;/strong&gt;：去重脱水后的真实数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与 set 的区别&lt;/strong&gt;：二者同样能达到去重的目的，区别是：&lt;font color=&#39;red&#39;&gt;set 需要保存元素数据本身&lt;/font&gt;，而&lt;font color=&#39;red&#39;&gt;HyperLogLog 只含有基数相关信息，不保存元素数据本身&lt;/font&gt;，例如只保存网站的访问量，而不保存各个访问者的信息，因此&lt;font color=&#39;red&#39;&gt;HyperLogLog 占用的内存更小&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优点：在输入元素的数量或者体积非常非常大时，计算基数&lt;font color=&#39;red&#39;&gt;所需的空间总是固定的、并且是很小的&lt;/font&gt;。但是，因为 HyperLogLog&lt;font color=&#39;orange&#39;&gt;只会根据输入元素来计算基数，而不会储存输入元素本身&lt;/font&gt;，所以 HyperLogLog&lt;font color=&#39;red&#39;&gt;不能像集合那样，返回输入的各个元素&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Redis 里面，&lt;font color=&#39;red&#39;&gt;每个 HyperLogLog 键只需要花费 12KB 内存，就可以计算接近 2&lt;sup&gt;64&lt;/sup&gt; 个不同元素的基数&lt;/font&gt;。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;缺点：&lt;font color=&#39;red&#39;&gt;有 0.81% 的标准误差&lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;命令概览-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令概览-6&#34;&gt;#&lt;/a&gt; 命令概览&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805111923099.png&#34; alt=&#34;image-20230805111923099&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805112011715.png&#34; alt=&#34;image-20230805112011715&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805111944589.png&#34; alt=&#34;image-20230805111944589&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;PFADD key element [element ...]&lt;/code&gt; &lt;/strong&gt;：向 &lt;code&gt;key&lt;/code&gt;  指定的 HyperLogLog 中 **&amp;quot;添加&amp;quot; 若干指定元素 &lt;code&gt;element&lt;/code&gt; **。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里添加的 element 仅用于计算基数，不会被存储，也无法返回！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;PFCOUNT key [key ...]&lt;/code&gt; &lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当参数为一个 key 时：返回存储在 HyperLogLog 结构体的该变量的&lt;strong&gt;近似基数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;当参数为多个 key 时：返回这些 HyperLogLog&lt;strong&gt; 并集的近似基数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;返回的可见集合基数并不是精确值，而是一个&lt;font color=&#39;red&#39;&gt;带有 0.81% 标准错误（standard error）的近似值&lt;/font&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这个命令的一个副作用是&lt;font color=&#39;red&#39;&gt;可能会导致 HyperLogLog 内部被更改&lt;/font&gt;。出于缓存的目的，它会用 8 字节来记录最近一次计算得到基数，所以 &lt;code&gt;PFCOUNT&lt;/code&gt;  命令在技术上是个写命令。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;PFMERGE destkey sourcekey [sourcekey ...]&lt;/code&gt; &lt;/strong&gt;：将由 &lt;code&gt;sourcekey&lt;/code&gt;  指定的多个 HyperLogLog &lt;strong&gt;合并&lt;/strong&gt;为一个由 &lt;code&gt;destkey&lt;/code&gt;  指定的 HyperLogLog ，合并后的 HyperLogLog 的基数接近于所有输入 HyperLogLog 的可见集合的并集。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;应用场景-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用场景-7&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h5&gt;
&lt;p&gt;统计天猫网站首页亿级 UV 的 Redis 统计方案。高级篇见！&lt;/p&gt;
&lt;h4 id=&#34;地理空间geo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#地理空间geo&#34;&gt;#&lt;/a&gt; 地理空间（GEO）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本质是有序集合 Zset&lt;/strong&gt;，不同的是&lt;font color=&#39;orange&#39;&gt;将&lt;u&gt;score 值&lt;/u&gt;替换为&lt;u&gt;经纬度&lt;/u&gt;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;地球上的地理位置是使用二维的&lt;strong&gt;经纬度&lt;/strong&gt;表示，经度范围 (-180, 180]，纬度范围 (-90, 90]。核心思想主要分为三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将三维的地球变为二维的坐标&lt;/li&gt;
&lt;li&gt;将二维的坐标转换为一维的点块&lt;/li&gt;
&lt;li&gt;将一维的点块转换为二进制，再通过 base32 编码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805135151199.png&#34; alt=&#34;image-20230805135151199&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;命令概览与实操&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令概览与实操&#34;&gt;#&lt;/a&gt; 命令概览与实操&lt;/h5&gt;
&lt;p&gt;如何获取某个地址的经纬度：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2FwaS5tYXAuYmFpZHUuY29tL2xic2FwaS9nZXRwb2ludC8=&#34;&gt;http://api.map.baidu.com/lbsapi/getpoint/&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;GEOADD key longitude latitude member [longitude latitude member ...]&lt;/code&gt; &lt;/strong&gt;：向 &lt;code&gt;key&lt;/code&gt;  指定的 GEO 中&lt;font color=&#39;red&#39;&gt;添加若干个指定的地理空间位置&lt;/font&gt;（经度 &lt;code&gt;longitude&lt;/code&gt; 、纬度 &lt;code&gt;latitude&lt;/code&gt; 、位置名称 &lt;code&gt;member&lt;/code&gt; ）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该命令以采用标准格式的参数 x,y，所以&lt;font color=&#39;red&#39;&gt;经度必须在纬度之前&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;时间复杂度：&lt;strong&gt;每一个元素添加是 &lt;code&gt;O(log(N))&lt;/code&gt; ，因为底层是有序集合 Zset&lt;/strong&gt;，N 是有序集合 Zset 的元素数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805141104831.png&#34; alt=&#34;image-20230805141104831&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;GEOPOS key member [member ...]&lt;/code&gt; &lt;/strong&gt;：从 &lt;code&gt;key&lt;/code&gt;  指定的 GEO 中&lt;font color=&#39;red&#39;&gt;获取若干个指定了地理位置名称 &lt;code&gt;member&lt;/code&gt;  的地理位置的&lt;strong&gt;经纬度&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回值：一个数组，每项由两个元素组成：经度、纬度。&lt;/li&gt;
&lt;li&gt;时间复杂度：每一个元素添加是 &lt;code&gt;O(log(N))&lt;/code&gt; ，N 是有序集合 Zset 的元素数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805141619345.png&#34; alt=&#34;image-20230805141619345&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;GEOHASH key member [member ...]&lt;/code&gt; &lt;/strong&gt;：从 &lt;code&gt;key&lt;/code&gt;  指定的 GEO 中&lt;font color=&#39;red&#39;&gt;获取若干个指定了地理位置名称 &lt;code&gt;member&lt;/code&gt;  的地理位置的&lt;strong&gt; Geohash 表示&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geohash 算法生成的&lt;font color=&#39;red&#39;&gt;base32 编码值&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;返回值：一个数组，每项是一个 geohash&lt;/li&gt;
&lt;li&gt;时间复杂度：每一个元素添加是 &lt;code&gt;O(log(N))&lt;/code&gt; ，N 是有序集合 Zset 的元素数量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805141940907.png&#34; alt=&#34;image-20230805141940907&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;GEODIST key member1 member2 [unit]&lt;/code&gt; &lt;/strong&gt;：返回 &lt;code&gt;key&lt;/code&gt;  指定的 GEO 中两个给定位置（ &lt;code&gt;member1&lt;/code&gt;  和 &lt;code&gt;member2&lt;/code&gt; ）之间的&lt;strong&gt;距离&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中参数 &lt;code&gt;unit&lt;/code&gt;  可取以下四个值：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;m&lt;/strong&gt; 表示单位为米，&lt;font color=&#39;red&#39;&gt;默认单位&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;km&lt;/strong&gt; 表示单位为千米&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mi&lt;/strong&gt; 表示单位为英里&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ft&lt;/strong&gt; 表示单位为英尺&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在计算距离时会假设地球为完美的球形，在极限情况下， 这一假设&lt;font color=&#39;red&#39;&gt;最大会造成 0.5% 的误差&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805142341845.png&#34; alt=&#34;image-20230805142341845&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count]&lt;/code&gt; &lt;/strong&gt;：&lt;strong&gt;以给定的经纬度 ( &lt;code&gt;longitude&lt;/code&gt;  和 &lt;code&gt;latitude&lt;/code&gt; ) 为中心，返回 &lt;code&gt;key&lt;/code&gt;  指定的 GEO 中，与中心的距离不超过给定最大距离 &lt;code&gt;radius&lt;/code&gt;  的所有位置元素&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WITHCOORD&lt;/code&gt; : 将位置元素的&lt;font color=&#39;red&#39;&gt;经度和纬度&lt;/font&gt;也一并返回&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WITHDIST&lt;/code&gt; : 在返回位置元素的同时，将位置元素&lt;font color=&#39;red&#39;&gt;与中心之间的距离&lt;/font&gt;也一并返回。距离的单位和用户给定的范围单位保持一致&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WITHHASH&lt;/code&gt; : &lt;font color=&#39;red&#39;&gt;以 52 位有符号整数的形式&lt;/font&gt;，返回位置元素&lt;font color=&#39;red&#39;&gt;经过原始 geohash 编码的有序集合分值&lt;/font&gt;。这个选项&lt;font color=&#39;red&#39;&gt;主要用于底层应用或者调试&lt;/font&gt;，实际中的作用并不大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;COUNT&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;限定返回的记录数&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令&lt;font color=&#39;red&#39;&gt;默认返回未排序&lt;/font&gt;的位置元素。通过以下两个参数， 用户可以指定被返回位置元素的排序方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ASC&lt;/code&gt; : 根据中心的位置， 按照从近到远的方式返回位置元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DESC&lt;/code&gt; : 根据中心的位置， 按照从远到近的方式返回位置元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时间复杂度：&lt;strong&gt;O（N+log（M））&lt;/strong&gt;，其中 N 是由中心和半径限定的圆形区域的边界框内的元素数量，M 是索引内的项目数量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在没有给定任何  &lt;code&gt;WITH&lt;/code&gt;  选项的情况下，命令只会返回一个像 [“New York”,”Milan”,”Paris”] 这样的&lt;font color=&#39;red&#39;&gt;线性（linear）名称列表&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在指定了  &lt;code&gt;WITHCOORD&lt;/code&gt;  、  &lt;code&gt;WITHDIST&lt;/code&gt;  、  &lt;code&gt;WITHHASH&lt;/code&gt;  等选项的情况下，命令返回一&lt;font color=&#39;red&#39;&gt;个二层嵌套数组&lt;/font&gt;，内层的每个子数组就表示一个元素。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在返回嵌套数组时，子数组的&lt;font color=&#39;red&#39;&gt;第一个元素总是位置元素的名字&lt;/font&gt;。至于额外的信息，则会作为子数组的后续元素，按照以下顺序被返回：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以浮点数格式返回的中心&lt;font color=&#39;red&#39;&gt;与位置元素之间的距离&lt;/font&gt;，单位与用户指定范围时的单位一致&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;geohash 整数&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;由两个元素组成的坐标，分别为&lt;font color=&#39;red&#39;&gt;经度和纬度&lt;/font&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805143142149.png&#34; alt=&#34;image-20230805143142149&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count]&lt;/code&gt; &lt;/strong&gt;：与 &lt;code&gt;GEORADIUS&lt;/code&gt;  命令类似，只不过这里&lt;strong&gt;指定的是中心的位置名称 &lt;code&gt;member&lt;/code&gt; &lt;/strong&gt;，而不是它的经纬度。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805143329626.png&#34; alt=&#34;image-20230805143329626&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从 Redis 版本 6.2.0 开始，&lt;strong&gt; &lt;code&gt;GEORADIUS&lt;/code&gt;  命令被视为已弃用&lt;/strong&gt;。在迁移或编写新代码时，它可以&lt;font color=&#39;red&#39;&gt;由 &lt;code&gt;GEOSEARCH&lt;/code&gt;  命令和带有 BYRADIUS 参数的 &lt;code&gt;GEOSEARCHSTORE&lt;/code&gt;  命令替换&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从 Redis 版本 6.2.0 开始，&lt;strong&gt; &lt;code&gt;GEORADIUSBYMEMBER&lt;/code&gt;  命令被视为已弃用&lt;/strong&gt;。在迁移或编写新代码时，它可以&lt;font color=&#39;red&#39;&gt;由带有 BYRADIUS 和 FROMMEMBER 参数的 &lt;code&gt;GEOSEARCH&lt;/code&gt;  命令和 &lt;code&gt;GEOSEARCHSTORE&lt;/code&gt;  命令替换&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;应用场景-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用场景-8&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;美团地图位置附近的酒店推送&lt;/li&gt;
&lt;li&gt;高德地图附近的核酸检查点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体见高级篇！&lt;/p&gt;
&lt;h4 id=&#34;流stream&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流stream&#34;&gt;#&lt;/a&gt; 流（Stream）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;与 Java 中的 Stream 是两码事，几乎没有任何关系！&lt;/p&gt;
&lt;p&gt;自成一脉，&lt;strong&gt;类型就是 Stream！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么&#34;&gt;#&lt;/a&gt; 是什么&lt;/h5&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Redis5.0 之前的痛点&lt;/font&gt;：&lt;u&gt;Redis&lt;/u&gt;消息队列的 2 种方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;List 实现消息队列&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805154343768.png&#34; alt=&#34;image-20230805154343768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805154402852.png&#34; alt=&#34;image-20230805154402852&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点对点的模式&lt;/li&gt;
&lt;li&gt;缺点：&lt;strong&gt;对于一对多的情况力不从心&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;常用来做&lt;font color=&#39;red&#39;&gt;异步队列&lt;/font&gt;使用，将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Pub/Sub（发布 / 订阅）&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805181258770.png&#34; alt=&#34;image-20230805181258770&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点 1：&lt;strong&gt;消息无法持久化&lt;/strong&gt;，如果出现网络断开、Redis 宕机等，消息就会被丢弃。&lt;/li&gt;
&lt;li&gt;缺点 2：&lt;strong&gt;没有 Ack 机制来保证数据的可靠性&lt;/strong&gt;，假设一个消费者都没有，那消息就直接被丢弃了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，Redis5.0 版本新增了一个更强大的数据结构 Stream。&lt;/p&gt;
&lt;p&gt;一言蔽之：&lt;strong&gt;Redis Steam 就是 Redis 版本的 MQ 消息中间件 + 阻塞队列&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&#34;能干嘛&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#能干嘛&#34;&gt;#&lt;/a&gt; 能干嘛&lt;/h5&gt;
&lt;p&gt;Redis Stream 的功能概览如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现消息队列&lt;/li&gt;
&lt;li&gt;支持消息的持久化&lt;/li&gt;
&lt;li&gt;支持自动生成全局唯一 ID&lt;/li&gt;
&lt;li&gt;支持 ack 确认消息的模式&lt;/li&gt;
&lt;li&gt;支持消费组模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让消息队列更加的稳定和可靠。&lt;/p&gt;
&lt;h5 id=&#34;底层结构和原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#底层结构和原理&#34;&gt;#&lt;/a&gt; 底层结构和原理&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805155540984.png&#34; alt=&#34;image-20230805155540984&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一个消息链表，将所有加入的消息都串起来，每个消息都有一个唯一的 ID 和对应的内容。具体角色如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;序号&lt;/th&gt;
&lt;th&gt;角色名&lt;/th&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Message Content&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;消息内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Consumer group&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;消费组，通过 &lt;code&gt;XGROUP CREATE&lt;/code&gt;  命令创建，同一个消费组可以有多个消费者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Last_delivered_id&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;游标，&lt;font color=&#39;red&#39;&gt;每个消费组会有个游标&lt;/font&gt; last_delivered_id，&lt;font color=&#39;red&#39;&gt;任意一个消费者&lt;/font&gt;读取了消息都会使游标 last_delivered_id 往前移动。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Consumer&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;消费者，消费组中的消费者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Pending_ids&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;消费者会有一个状态变量，用于&lt;font color=&#39;red&#39;&gt;记录被当前消费已读取但未 ack 的消息 Id&lt;/font&gt;，如果客户端没有 ack，这个变量里面的消息 ID 会越来越多，一旦某个消息被 ack 它就开始减少。&lt;br/&gt;这个 pending_ids 变量在 Redis 官方被称之为 &lt;strong&gt;待处理条目列表 PEL (Pending Entries List)&lt;/strong&gt;，记录了当前已经被客户端读取的消息，但是还没有 ack (Acknowledge character：确认字符），它用来确保客户端至少消费了消息一次，而不会在网络传输的中途丢失了没处理&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;命令的理论与实操&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令的理论与实操&#34;&gt;#&lt;/a&gt; 命令的理论与实操&lt;/h5&gt;
&lt;h6 id=&#34;队列相关命令即生产者角度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#队列相关命令即生产者角度&#34;&gt;#&lt;/a&gt; 队列相关命令（即生产者角度）&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令名称&lt;/th&gt;
&lt;th&gt;指令作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;XADD&lt;/td&gt;
&lt;td&gt;添加消息到队列末尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XRANGE&lt;/td&gt;
&lt;td&gt;获取消息列表 (可以指定范围)，忽略删除的消息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XREVRANGE&lt;/td&gt;
&lt;td&gt;反向获取消息列表，ID 从大到小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XTRIM&lt;/td&gt;
&lt;td&gt;限制 Stream 的长度，如果已经超长会进行截取&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XDEL&lt;/td&gt;
&lt;td&gt;删除消息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XLEN&lt;/td&gt;
&lt;td&gt;获取 Stream 中的消息长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XREAD&lt;/td&gt;
&lt;td&gt;获取消息 (阻塞 / 非阻塞)，返回大于指定 ID 的消息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;XADD key [NOMKSTREAM] [&amp;lt;MAXLEN | MINID&amp;gt; [= | ~] threshold [LIMIT count]] &amp;lt;* | id&amp;gt; field value [field value ...]&lt;/code&gt; &lt;/strong&gt;：向 &lt;code&gt;key&lt;/code&gt;  指定的 Stream 队列中添加若干条消息内容（ &lt;code&gt;field&lt;/code&gt;  和 &lt;code&gt;value&lt;/code&gt; ）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis 对 MessageID 有强制要求，必须是&lt;font color=&#39;red&#39;&gt;时间戳 - 自增 ID&lt;/font&gt;这样的方式，且同一时间戳下的后续 ID 不能小于前一个&lt;/li&gt;
&lt;li&gt;Redis 在增加 Message 条目时会检查当前 MessageID 与上一条目的 MessageID，自动纠正错误的情况，&lt;strong&gt;一定要保证后面的 MessageID 比前面大&lt;/strong&gt;，一个流中信息条目的 ID 必须是单调增的，这是流的基础&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;  号表示服务器&lt;font color=&#39;red&#39;&gt;自动生成 MessageID&lt;/font&gt;(类似 mysql 里面主键 auto_increment)&lt;/li&gt;
&lt;li&gt;返回值：&lt;strong&gt;添加的 Message 条目的 MessageID&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805162458455.png&#34; alt=&#34;image-20230805162458455&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;XRANGE key start end [COUNT count]&lt;/code&gt; &lt;/strong&gt;：返回 &lt;code&gt;key&lt;/code&gt;  指定的 Stream 队列中与 ** 给定 ID 范围 [ &lt;code&gt;start&lt;/code&gt; , &lt;code&gt;end&lt;/code&gt; ]** 匹配的消息条目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt;  表示最小 ID，- 代表最小值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end&lt;/code&gt;  表示最大 ID，+ 代表最大值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count&lt;/code&gt;  表示能获取的最大消息数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805164434264.png&#34; alt=&#34;image-20230805164434264&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;XREVRANGE key end start [COUNT count]&lt;/code&gt; &lt;/strong&gt;：与 &lt;code&gt;XRANGE&lt;/code&gt;  命令相反，以相反的顺序返回消息条目。需要&lt;strong&gt;先指定最大 ID &lt;code&gt;end&lt;/code&gt; ，再指定最小 ID &lt;code&gt;start&lt;/code&gt; &lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805165347529.png&#34; alt=&#34;image-20230805165347529&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;XDEL key ID [ID ...]&lt;/code&gt; &lt;/strong&gt;：从 &lt;code&gt;key&lt;/code&gt;  指定的 Stream 队列中&lt;strong&gt;逻辑删除&lt;/strong&gt;指定 &lt;code&gt;ID&lt;/code&gt;  的消息条目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当你从 Stream 中删除一个条目的时候，条目并没有&lt;em&gt;真正&lt;/em&gt;被驱逐，&lt;strong&gt;只是被标记为删除&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805165654765.png&#34; alt=&#34;image-20230805165654765&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;XLEN key&lt;/code&gt; &lt;/strong&gt;：返回 &lt;code&gt;key&lt;/code&gt;  指定的 Stream 队列中的消息条目数。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805165759795.png&#34; alt=&#34;image-20230805165759795&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;XTRIM key &amp;lt;MAXLEN | MINID&amp;gt; [= | ~] threshold [LIMIT count]&lt;/code&gt; &lt;/strong&gt;：&lt;strong&gt;通过删除较旧的消息条目（ID 较低的）来修剪 &lt;code&gt;key&lt;/code&gt;  指定的 Stream 队列&lt;/strong&gt;。可以使用以下策略之一来修剪流：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MAXLEN&lt;/code&gt; ：只要 Stream 队列的长度超过指定的阈值 &lt;code&gt;threshold&lt;/code&gt; （值为正整数），就会&lt;font color=&#39;red&#39;&gt;逐出 ID 较低的旧消息条目&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805170543749.png&#34; alt=&#34;image-20230805170543749&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MINID&lt;/code&gt; ：驱逐 ID 低于阈值 &lt;code&gt;threshold&lt;/code&gt; （值为 MessageID）的消息条目。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805170619213.png&#34; alt=&#34;image-20230805170619213&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]&lt;/code&gt; &lt;/strong&gt;：从一个或者多个 &lt;code&gt;key&lt;/code&gt;  指定的 Stream 队列中读取消息条目，仅返回 ID 大于调用者报告的最后接收 ID 的消息条目。参数 &lt;code&gt;count&lt;/code&gt;  表示最多读取的消息数目。参数 &lt;code&gt;[BLOCK milliseconds]&lt;/code&gt;  表示是否以阻塞的方式读取消息，&lt;font color=&#39;red&#39;&gt;默认不阻塞&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;非阻塞使用&lt;/font&gt;：即不提供 &lt;code&gt;BLOCK&lt;/code&gt;  参数，此时命令是同步的，会返回 Stream 队列中的一系列消息条目&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805171740158.png&#34; alt=&#34;image-20230805171740158&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;**$** 代表特殊 ID，&lt;font color=&#39;red&#39;&gt;表示当前 Stream 已经存储的最大的 ID&lt;/font&gt;作为最后一个 ID，当前 Stream 中不存在大于当前最大 ID 的消息，因此此时返回 nil&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;0-0&lt;/strong&gt; 代表&lt;font color=&#39;red&#39;&gt;从最小的 ID 开始&lt;/font&gt;获取 Stream 中的消息，当不指定 count，将会返回 Stream 中的所有消息，注意也可以使用 0（00/000 也都是可以的……）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;阻塞使用&lt;/font&gt;：提供 &lt;code&gt;BLOCK&lt;/code&gt;  参数，如果 milliseconds 设置为 0，表示永远阻塞&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805172251635.png&#34; alt=&#34;image-20230805172251635&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小结：Stream 的基础方法，使用 &lt;code&gt;xadd&lt;/code&gt;  存入消息和 &lt;code&gt;xread&lt;/code&gt;  循环阻塞读取消息的方式可以实现&lt;strong&gt;简易版的消息队列&lt;/strong&gt;，交互流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805172400243.png&#34; alt=&#34;image-20230805172400243&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对比 List 结构实现 Redis 消息队列：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805172428816.png&#34; alt=&#34;image-20230805172428816&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;消费组相关命令即消费者角度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消费组相关命令即消费者角度&#34;&gt;#&lt;/a&gt; 消费组相关命令（即消费者角度）&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令名称&lt;/th&gt;
&lt;th&gt;指令作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;XGROUP CREATE&lt;/td&gt;
&lt;td&gt;创建消费组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XGROUP SETID&lt;/td&gt;
&lt;td&gt;设置消费组最后递送消息的 ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XGROUP DESTROY&lt;/td&gt;
&lt;td&gt;完全销毁消费组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XGROUP DELCONSUMER&lt;/td&gt;
&lt;td&gt;移除给定的消费者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XREADGROUP GROUP&lt;/td&gt;
&lt;td&gt;读取消费者组中的消息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XACK&lt;/td&gt;
&lt;td&gt;将消息标记为 ack，即 “已处理”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XPENDING&lt;/td&gt;
&lt;td&gt;打印待处理消息的详细信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XCLAIM&lt;/td&gt;
&lt;td&gt;转移消息的归属权（长期未被处理 / 无法处理的消息，转交给其他消费者组进行处理)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XINFO&lt;/td&gt;
&lt;td&gt;打印 Stream\Consumer\Group 的详细信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XINFO GROUPS&lt;/td&gt;
&lt;td&gt;打印消费者组的详细信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XINFO STREAM&lt;/td&gt;
&lt;td&gt;打印 Stream 的详细信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;XGROUP [CREATE key groupname id-or-$] [SETID key id-or-$] [DESTROY key groupname] [DELCONSUMER key groupname consumername]&lt;/code&gt; &lt;/strong&gt;：用于&lt;strong&gt;管理 &lt;code&gt;key&lt;/code&gt;  指定的 Stream 队列上所关联的消费组&lt;/strong&gt;，可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CREATE&lt;/code&gt; ：在 &lt;code&gt;key&lt;/code&gt;  指定的 Stream 队列上&lt;strong&gt;创建一个新消费组&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置消费组名为 &lt;code&gt;groupname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指定从消息 &lt;code&gt;id&lt;/code&gt;  开始从头到尾读取（消费）&lt;/li&gt;
&lt;li&gt;或者 &lt;code&gt;$&lt;/code&gt;  表示从尾部开始反向读取（消费）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805174041986.png&#34; alt=&#34;image-20230805174041986&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SETID&lt;/code&gt; ：针对 &lt;code&gt;key&lt;/code&gt;  指定的 Stream 队列，&lt;strong&gt;设置消费组最后递送的消息 &lt;code&gt;id&lt;/code&gt; &lt;/strong&gt;，同理也能取 &lt;code&gt;$&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DESTROY&lt;/code&gt; ：从 &lt;code&gt;key&lt;/code&gt;  指定的 Stream 队列上&lt;strong&gt;销毁一个名为 &lt;code&gt;groupname&lt;/code&gt;  的消费组&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DELCONSUMER&lt;/code&gt; ：针对 &lt;code&gt;key&lt;/code&gt;  指定的 Stream 队列，&lt;strong&gt;从组名为 &lt;code&gt;groupname&lt;/code&gt;  的消费组中移除名为 &lt;code&gt;consumername&lt;/code&gt;  的消费者&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;XREADGROUP GROUP groupname consumername [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]&lt;/code&gt; &lt;/strong&gt;：是 &lt;code&gt;XREAD&lt;/code&gt;  命令的特殊版本，支持消费者组。针对 &lt;code&gt;key&lt;/code&gt;  指定的 Stream 队列，可以&lt;strong&gt;让消费组 &lt;code&gt;groupname&lt;/code&gt;  的不同消费者 &lt;code&gt;consumername&lt;/code&gt;  来读取 Stream 的不同部分&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;同一个消费组中的消费者&lt;font color=&#39;red&#39;&gt;共享同一个游标&lt;/font&gt;，因此：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;同一个消费组中的消费者不能消费同一条消息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805175640453.png&#34; alt=&#34;image-20230805175640453&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不同消费组中的消费者可以消费同一条消息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805180522655.png&#34; alt=&#34;image-20230805180522655&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数 &lt;code&gt;COUNT&lt;/code&gt;  限制当前消费者能够读取的消息数量，默认为 +∞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数 &lt;code&gt;BLOCK&lt;/code&gt;  表示是否阻塞读取消息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ID&lt;/code&gt;  表示从哪条消息 id 开始读取，其中&lt;font color=&#39;red&#39;&gt; &lt;code&gt;&amp;gt;&lt;/code&gt;  表示从第一条尚未被消费的消息开始读取&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;消费组的目的：&lt;/p&gt;
&lt;p&gt;​    让组内的多个消费者共同分担读取消息。所以，我们通常会让每个消费者读取部分消息，从而实现消息读取负载在多个消费者间是均衡分布的。（&lt;strong&gt;负载均衡&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805180648195.png&#34; alt=&#34;image-20230805180648195&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;重点问题：ACK 机制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805180956093.png&#34; alt=&#34;image-20230805180956093&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;p&gt;​    基于 Stream 实现的消息队列，如何保证消费者在发生故障或宕机再次重启后，仍然可以读取未处理完的消息？&lt;/p&gt;
&lt;p&gt;方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Streams 会自动使用内部队列（也称为&lt;strong&gt;待处理条目列表 PEL (Pending Entries List)&lt;/strong&gt;）留存每个消费组里每个消费者读取的消息保底措施，直到消费者使用  &lt;code&gt;XACK&lt;/code&gt;  命令通知 Streams “消息已经处理完成”。&lt;/li&gt;
&lt;li&gt;消费确认机制增加了消息的可靠性，一般在业务处理完成之后，需要执行 XACK 命令确认消息已经被消费完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;XPENDING key groupname [start end count] [consumername]&lt;/code&gt; &lt;/strong&gt;：查询 &lt;code&gt;key&lt;/code&gt;  指定的 Stream 队列上，组名为 &lt;code&gt;groupname&lt;/code&gt;  的&lt;u&gt;消费组&lt;/u&gt;内&lt;strong&gt;已读取但未确认的情况&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Chuawei%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230805182227981.png&#34; alt=&#34;image-20230805182227981&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;返回值是&lt;strong&gt;概要信息&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;该消费者组的待处理消息的数量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;待处理消息的最小 ID&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;待处理消息的最大 ID&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于消费者组中每一个至少有一条待处理消息的消费者，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;他的名称&lt;/li&gt;
&lt;li&gt;他的待处理消息数量&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若指定消费者名 &lt;code&gt;consumername&lt;/code&gt; ，也可以查看&lt;u&gt;某个消费者&lt;/u&gt;的已读取但未确认的情况&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805182430081.png&#34; alt=&#34;image-20230805182430081&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;返回值是&lt;strong&gt;详细信息&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;消息的 ID&lt;/li&gt;
&lt;li&gt;获取并仍然要确认消息的消费者名称，我们称之为消息的当前&lt;em&gt;所有者&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;自上次将此消息传递给该消费者以来，经过的毫秒数&lt;/li&gt;
&lt;li&gt;该消息被传递的次数&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;XACK key groupname ID [ID ...]&lt;/code&gt; &lt;/strong&gt;：从 &lt;code&gt;key&lt;/code&gt;  指定的 Stream 队列中的消费者组 &lt;code&gt;groupname&lt;/code&gt;  的待处理条目列表（简称 PEL）中删除若干条指定了 &lt;code&gt;ID&lt;/code&gt;  的消息，即确认消息。返回成功确认的消息数。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805184337097.png&#34; alt=&#34;image-20230805184337097&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;XINFO [CONSUMERS key groupname] key key [HELP]&lt;/code&gt; &lt;/strong&gt;：打印关于 Stream 和关联的消费组的不同的信息。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805184502786.png&#34; alt=&#34;image-20230805184502786&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;四个特殊符号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四个特殊符号&#34;&gt;#&lt;/a&gt; 四个特殊符号&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;- +&lt;/td&gt;
&lt;td&gt;最小和最大可能出现的 Id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;表示只消费新的消息，当前流中最大的 id，可用于将要到来的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;用于 &lt;code&gt;XREADGROUP&lt;/code&gt;  命令，表示迄今还没有发送给组中使用者的信息，会更新消费者组的最后 ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;用于 &lt;code&gt;XADD&lt;/code&gt;  命令中，让系统自动生成 Id&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;使用建议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用建议&#34;&gt;#&lt;/a&gt; 使用建议&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Redis Stream 不能 100% 替代 Kafka、RabbitMQ 来使用，生产案例少，慎用！&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;位域bitfield&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#位域bitfield&#34;&gt;#&lt;/a&gt; 位域（Bitfield）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;了解即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;定义：将一个 Redis 字符串看作是&lt;font color=&#39;red&#39;&gt;一个由二进制位组成的数组&lt;/font&gt;，并能对变长位宽和任意没有字节对齐的指定整型位域进行寻址和修改。&lt;/p&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位域修改&lt;/li&gt;
&lt;li&gt;溢出控制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230805185443067.png&#34; alt=&#34;image-20230805185443067&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-redis持久化persistence&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-redis持久化persistence&#34;&gt;#&lt;/a&gt; 4、Redis 持久化（persistence）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 持久化：Redis 是如何将数据从内存&lt;strong&gt;写入磁盘&lt;/strong&gt;的？&lt;/p&gt;
&lt;p&gt;Redis 为什么需要持久化？因为 Redis 运行过程中数据是缓存在内存中的，一旦发生意外导致宕机，数据将会消失，Redis 就会形同虚设。&lt;/p&gt;
&lt;p&gt;Redis 持久化的三种实现方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDB（Redis DataBase）&lt;/li&gt;
&lt;li&gt;AOF（Append Only File）&lt;/li&gt;
&lt;li&gt;RDB + AOF&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;持化双雄&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#持化双雄&#34;&gt;#&lt;/a&gt; 持化双雄&lt;/h3&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806003810720.png&#34; alt=&#34;image-20230806003810720&#34;  /&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806003858469.png&#34; alt=&#34;image-20230806003858469&#34;  /&gt;
&lt;h4 id=&#34;rdbredis-database&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdbredis-database&#34;&gt;#&lt;/a&gt; RDB（ &lt;code&gt;R&lt;/code&gt; edis  &lt;code&gt;D&lt;/code&gt; ata &lt;code&gt;B&lt;/code&gt; ase）&lt;/h4&gt;
&lt;h5 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h5&gt;
&lt;p&gt;RDB 持久化：&lt;strong&gt;以&lt;u&gt;指定的时间间隔&lt;/u&gt;执行数据集的时间点快照&lt;/strong&gt;，将内存中的数据集以&lt;font color=&#39;red&#39;&gt;全量快照&lt;/font&gt;的形式写入磁盘保存的文件是&lt;font color=&#39;red&#39;&gt;dump.rdb&lt;/font&gt;，恢复时将磁盘中的快照文件读回内存中。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806005245328.png&#34; alt=&#34;image-20230806005245328&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;触发rdb快照的时间间隔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#触发rdb快照的时间间隔&#34;&gt;#&lt;/a&gt; 触发 RDB 快照的时间间隔&lt;/h5&gt;
&lt;p&gt;对于自动触发快照的时间间隔，在配置文件 &lt;code&gt;redis.conf&lt;/code&gt;  中的 SNAPSHOTTING 下配置 &lt;code&gt;save&lt;/code&gt;  参数，来触发 RDB 持久化条件。比如 “save m n”: 表示每隔 m 秒检测一次数据集，如果检测出超过 n 次变化时，自动触发 RDB 持久化条件，执行快照。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，这里说的是&lt;strong&gt;每隔 m 秒检测一次，&lt;font color=&#39;red&#39;&gt;对变化的计数是累加的&lt;/font&gt;，只要在某次检测中发现变化数累加值达到 n 次，就会触发 RDB 持久化。&lt;font color=&#39;red&#39;&gt;而不是要求 n 次变化都集中发生在某个 m 秒内！&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Redis6.0.16 及之前&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;save 900 1：每隔 900s (15min) 检测一次，如果有超过 1 个 key 发生了变化，就写一份新的 RDB 文件&lt;/li&gt;
&lt;li&gt;save 300 10：每隔 300s (5min) 检测一次，如果有超过 10 个 key 发生了变化，就写一份新的 RDB 文件&lt;/li&gt;
&lt;li&gt;save 60 10000：每隔 60s (1min) 检测一次，如果有超过 10000 个 key 发生了变化，就写一份新的 RDB 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806010837837.png&#34; alt=&#34;image-20230806010837837&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Redis6.0.16 以后至 Redis7 至今&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每隔 3600s（1hour）检测一次，如果有超过 1 处变化，就写一份新的 RDB 文件&lt;/li&gt;
&lt;li&gt;每隔 300s（5min）检测一次，如果有超过 100 处变化，就写一份新的 RDB 文件&lt;/li&gt;
&lt;li&gt;每隔 60s（1min）检测一次，如果有超过 10000 处变化，就写一份新的 RDB 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806010819707.png&#34; alt=&#34;image-20230806010819707&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;rdb快照的触发方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb快照的触发方式&#34;&gt;#&lt;/a&gt; RDB 快照的触发方式&lt;/h5&gt;
&lt;h6 id=&#34;自动触发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自动触发&#34;&gt;#&lt;/a&gt; 自动触发&lt;/h6&gt;
&lt;center&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;修改配置信息&lt;/font&gt;&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改时间间隔与变化数：通过修改配置文件 &lt;code&gt;redis.conf&lt;/code&gt;  中的 SNAPSHOTTING 下的 &lt;code&gt;save&lt;/code&gt;  参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 dump.rdb 文件的保存路径 **（Redis 每次启动都会读取磁盘中该目录下的 dump.rdb 文件（文件名需要与配置文件中保持一致）来初始化内存中的 Redis 数据库）**：通过修改配置文件 &lt;code&gt;redis.conf&lt;/code&gt;  中的 SNAPSHOTTING 下的 &lt;code&gt;dir&lt;/code&gt;  参数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过 Redis 命令 &lt;code&gt;CONFIG GET dir&lt;/code&gt;  可以查看 dir 参数的取值：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806113359010.png&#34; alt=&#34;image-20230806113359010&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 dump.rdb 文件的名称：通过修改配置文件 &lt;code&gt;redis.conf&lt;/code&gt;  中的 SNAPSHOTTING 下的 &lt;code&gt;dbfilename&lt;/code&gt;  参数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;触发备份的2个案例&lt;/font&gt;&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每隔 5 秒检测一次，检测到 2 处变化，执行备份：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806113923793.png&#34; alt=&#34;image-20230806113923793&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每隔 5 秒检测一次，先设置 k3，只检测到 1 处变化，无备份动作。再过一段时间（可以超过 5 秒！）设置 k4，检测出第 2 处变化，执行备份：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806114111595.png&#34; alt=&#34;image-20230806114111595&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;如何恢复数据&lt;/font&gt;&lt;/center&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据配置文件 &lt;code&gt;redis.conf&lt;/code&gt; ，将备份文件（dump.rdb）移至保存路径下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里&lt;font color=&#39;red&#39;&gt;备份文件的名称、保存路径&lt;/font&gt;一定要与配置文件 &lt;code&gt;redis.conf&lt;/code&gt;  中的设置保持一致！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让 Redis 读取指定的配置文件 &lt;code&gt;redis.conf&lt;/code&gt; ，并启动 Redis 服务&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806114837995.png&#34; alt=&#34;image-20230806114837995&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;执行 &lt;code&gt;flushdb&lt;/code&gt; / &lt;code&gt;flushall&lt;/code&gt;  命令会&lt;strong&gt;产生一个空的 dump.rdb 文件&lt;/strong&gt;，执行 &lt;code&gt;shutdown&lt;/code&gt;  会&lt;strong&gt;产生一个退出时的 dump.rdb 文件&lt;/strong&gt;，且会&lt;strong&gt;覆盖同路径下的同名备份文件&lt;/strong&gt;！&lt;font color=&#39;red&#39;&gt;等到下次 Redis 服务启动时，读取的就是这个空的 / 上次 shutdown 时的 dump.rdb 文件&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Chuawei%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230806115618721.png&#34; alt=&#34;image-20230806115618721&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因此，&lt;strong&gt;不可以把备份文件 dump.rdb 和生产 redis 服务器放在同一台机器，必须分开存储，&lt;font color=&#39;red&#39;&gt;分机隔离&lt;/font&gt;，以防生产机物理损坏后备份文件也挂了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806115554369.png&#34; alt=&#34;image-20230806115554369&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;手动触发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手动触发&#34;&gt;#&lt;/a&gt; 手动触发&lt;/h6&gt;
&lt;p&gt;在默认情况下（即自动触发），Redis 将数据库快照保存在名字为 dump.rdb 的二进制文件中。你可以对 Redis 的配置文件 &lt;code&gt;redis.conf&lt;/code&gt;  进行设置，让它在 “每 N 秒检测一次，当数据集有 M 个改动时” 这一条件被满足时，自动保存一次快照。&lt;/p&gt;
&lt;p&gt;也可以&lt;strong&gt;通过调用 &lt;code&gt;SAVE&lt;/code&gt;  或者 &lt;code&gt;BGSAVE&lt;/code&gt;  命令，手动让 Redis 保存数据库的快照&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;快照保存的工作方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Redis 调用&lt;font color=&#39;red&#39;&gt;forks&lt;/font&gt;. 同时拥有父进程和子进程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Linux 程序中，fork () 会产生一个和父进程完全相同的子进程，但子进程在此后多会 exec 系统调用，出于效率考虑，尽量避免膨胀。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子进程将数据集写入到一个临时 RDB 文件中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种工作方式使得 Redis 可以从&lt;font color=&#39;red&#39;&gt;写时复制（copy-on-write）&lt;/font&gt;机制中获益。&lt;/p&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806122757973.png&#34; alt=&#34;image-20230806122757973&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;center&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;SAVE命令&lt;/font&gt;&lt;/center&gt;
&lt;blockquote&gt;
&lt;p&gt;** 线上严禁使用！** 因为在主程序中执行 SAVE 命令时，&lt;strong&gt;会阻塞&lt;/strong&gt;当前 redis 服务器，Redis 不能处理其他命令，缓存功能就缺失了，直到持久化工作完成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806123508579.png&#34; alt=&#34;image-20230806123508579&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806123541045.png&#34; alt=&#34;image-20230806123541045&#34; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;BGSAVE命令（默认）&lt;/font&gt;&lt;/center&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 会在后台异步进行快照操作，&lt;strong&gt;不阻塞&lt;/strong&gt;当前 Redis 服务器，还可以同时响应客户端请求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806145215893.png&#34; alt=&#34;image-20230806145215893&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806145228038.png&#34; alt=&#34;image-20230806145228038&#34; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;LASTSAVE命令：获取最近一次快照的时间&lt;/font&gt;&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806145339310.png&#34; alt=&#34;image-20230806145339310&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806145349994.png&#34; alt=&#34;image-20230806145349994&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;rdb的优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb的优缺点&#34;&gt;#&lt;/a&gt; RDB 的优缺点&lt;/h5&gt;
&lt;p&gt;RDB 持久化的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适合&lt;font color=&#39;red&#39;&gt;大规模&lt;/font&gt;的数据恢复&lt;/li&gt;
&lt;li&gt;按照业务，&lt;font color=&#39;red&#39;&gt;定时备份&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;对数据完整性和一致性要求不高&lt;/li&gt;
&lt;li&gt;dump.rdb 文件在内存中的&lt;font color=&#39;red&#39;&gt;加载速度&lt;/font&gt;要比 AOF 快得多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RDB 持久化的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一定间隔时间做一次备份，所以如果 Redis 意外 down 掉的话，就会丢失从当前至最近一次快照期间的数据，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;快照之间的数据会丢失&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;内存数据的全量同步，如果数据量太大会导致&lt;font color=&#39;red&#39;&gt;I/O 严重影响服务器性能&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;RDB 依赖于主进程的 fork，在更大的数据集中，这可能会导致&lt;font color=&#39;red&#39;&gt;服务请求的瞬间延迟&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;fork 的时候内存中的数据被克降了一份，&lt;font color=&#39;red&#39;&gt;大致 2 倍的数据膨胀性&lt;/font&gt;，需要考虑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;快照之间的数据丢失案例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;正常录入数据&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806151059638.png&#34; alt=&#34;image-20230806151059638&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kill -9 故意模拟意外宕机&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806151113184.png&#34; alt=&#34;image-20230806151113184&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis 重启，查看数据发现丢失&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806151151946.png&#34; alt=&#34;image-20230806151151946&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;如何检查-恢复dumprdb文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何检查-恢复dumprdb文件&#34;&gt;#&lt;/a&gt; 如何检查、恢复 dump.rdb 文件&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;当 dump.rdb 文件破损时，需要恢复它，可以使用 &lt;code&gt;redis-check-rdb&lt;/code&gt;  命令进行修复。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806151515656.png&#34; alt=&#34;image-20230806151515656&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;触发rdb快照的情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#触发rdb快照的情况&#34;&gt;#&lt;/a&gt; 触发 RDB 快照的情况&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;配置文件 &lt;code&gt;redis.conf&lt;/code&gt;  中默认的快照配置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手动 &lt;code&gt;save&lt;/code&gt; / &lt;code&gt;bgsave&lt;/code&gt;  命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行 &lt;code&gt;flushall&lt;/code&gt; / &lt;code&gt;flushdb&lt;/code&gt;  命令会产生&lt;strong&gt;空的&lt;/strong&gt; &lt;code&gt;dump.rdb&lt;/code&gt;  文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行 &lt;code&gt;shutdown&lt;/code&gt;  命令，且没有设置开启 AOF 持久化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主从复制时，主节点自动触发&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;如何禁用rdb快照&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何禁用rdb快照&#34;&gt;#&lt;/a&gt; 如何禁用 RDB 快照&lt;/h5&gt;
&lt;p&gt;两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;命令： &lt;code&gt;res-cli config set save &amp;quot;&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改配置文件：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806152126685.png&#34; alt=&#34;image-20230806152126685&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;rdb快照的配置优化项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb快照的配置优化项&#34;&gt;#&lt;/a&gt; RDB 快照的配置优化项&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;即配置文件 &lt;code&gt;redis.conf&lt;/code&gt;  中的 SNAPSHOTTING 模块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;save &amp;lt;seconds&amp;gt; &amp;lt;changes&amp;gt;：触发快照的&lt;font color=&#39;red&#39;&gt;时间间隔、变化数&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dbfilename：rdb 文件的&lt;font color=&#39;red&#39;&gt;名称&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dir：rdb 文件的&lt;font color=&#39;red&#39;&gt;保存路径&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;stop-writes-on-bgsave-error：当子进程执行快照保存出现错误时，&lt;font color=&#39;red&#39;&gt;是否让主进程停止接收新的写请求&lt;/font&gt;，默认为 yes。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果不在乎数据不一致或者有其他手段发现和控制这种不一致，也可以设置为 no。此时在快照写入失败时，也能确保 Redis 继续接受新的写请求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rdbcompression：对于存储到磁盘中的快照，可以设置&lt;font color=&#39;red&#39;&gt;是否采用 LZF 算法进行压缩存储&lt;/font&gt;，默认为 yes。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rdbchecksum：&lt;font color=&#39;red&#39;&gt;是否采用 CRC64 算法对快照文件进行数据校验&lt;/font&gt;，默认为 yes。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rdb-del-sync-files：看不懂，默认情况下 no，禁用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;rdb小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb小结&#34;&gt;#&lt;/a&gt; RDB 小结&lt;/h5&gt;
&lt;img data-src=&#34;C:\Users\huawei\AppData\Roaming\Typora\typora-user-images\image-20230806153628002.png&#34; alt=&#34;image-20230806153628002&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;h4 id=&#34;aofappend-only-file&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aofappend-only-file&#34;&gt;#&lt;/a&gt; AOF（ &lt;code&gt;A&lt;/code&gt; ppend  &lt;code&gt;O&lt;/code&gt; nly  &lt;code&gt;F&lt;/code&gt; ile）&lt;/h4&gt;
&lt;h5 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h5&gt;
&lt;p&gt;AOF 持久化：&lt;strong&gt;以日志文件的形式来记录 Redis 执行过的每个写操作指令&lt;/strong&gt;，只许追加记录，不可改写记录。Redis 启动之初会读取该日志文件重新构建数据，换言之，Redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。&lt;/p&gt;
&lt;p&gt;默认情况下，Redis 是没有开启 AOF 的，开启 AOF 功能需要在配置文件 &lt;code&gt;redis.conf&lt;/code&gt;  中设置配置:  &lt;code&gt;appendonly yes&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;动机：对于 RDB 持久化的快照，如果 Redis 因为某些原因而造成故障停机，那么服务器&lt;font color=&#39;red&#39;&gt;将丢失最近写入、且仍未保存到快照中的那些数据&lt;/font&gt;。 因此，Redis 增加了一种完全耐久的持久化方式：AOF 持久化。&lt;/p&gt;
&lt;p&gt;AOF 持久化所保存的文件： &lt;code&gt;appendonly.aof&lt;/code&gt;  文件。&lt;/p&gt;
&lt;h5 id=&#34;aof持久化的工作流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof持久化的工作流程&#34;&gt;#&lt;/a&gt; AOF 持久化的工作流程&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806195559645.png&#34; alt=&#34;image-20230806195559645&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Client 作为命令的来源，会有多个源头以及源源不断的&lt;font color=&#39;red&#39;&gt;请求写命令&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在这些命令到达 Redis Server 以后并不是直接写入 AOF 文件，会将其这些命令&lt;font color=&#39;red&#39;&gt;先放入 AOF 缓存&lt;/font&gt;中进行保存。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的 AOF 缓冲区实际上是内存中的一片区域，存在的目的是当这些&lt;font color=&#39;red&#39;&gt;命令达到一定量以后再写入磁盘&lt;/font&gt;，避免频繁的磁盘 IO 操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AOF 缓冲会根据&lt;strong&gt; AOF 缓冲区同步文件的三种写回策略&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;将命令写入磁盘上的 AOF 文件&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随着写入 AOF 内容的增加为避免文件膨胀，会根据规则&lt;font color=&#39;red&#39;&gt;进行命令的合并 (又称&lt;strong&gt; AOF 重写&lt;/strong&gt;)&lt;/font&gt;，从而起到 AOF 文件压缩的目的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 Redis Server 服务器重启的时候&lt;font color=&#39;red&#39;&gt;Redis 会从 AOF 文件载入数据&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;aof缓冲区的三种写回策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof缓冲区的三种写回策略&#34;&gt;#&lt;/a&gt; AOF 缓冲区的三种写回策略&lt;/h5&gt;
&lt;p&gt;AOF 缓冲区需要将它保存的写命令写入磁盘上的 AOF 文件，可以修改配置文件上的 &lt;code&gt;参数appendfsync&lt;/code&gt; ，有三种策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;always&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;同步写回&lt;/font&gt;，每个写命令执行完立刻同步地将日志写入磁盘上的 AOF 文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;everysec&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;每秒写回&lt;/font&gt;，每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，每隔 1 秒把缓冲区中的内容写入磁盘&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;操作系统控制的写回&lt;/font&gt;，每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806200107294.png&#34; alt=&#34;image-20230806200107294&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;案例演示和说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例演示和说明&#34;&gt;#&lt;/a&gt; 案例演示和说明&lt;/h5&gt;
&lt;h6 id=&#34;配置文件说明6-vs-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置文件说明6-vs-7&#34;&gt;#&lt;/a&gt; &lt;mark&gt;配置文件说明（6 vs 7）&lt;/mark&gt;&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806200804696.png&#34; alt=&#34;image-20230806200804696&#34; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;如何开启AOF&lt;/font&gt;&lt;/center&gt;
&lt;p&gt;将配置文件 &lt;code&gt;redis.conf&lt;/code&gt;  中 APPEND ONLY MODE 模块下的 &lt;code&gt;参数appendonly&lt;/code&gt;  设置为 yes，即打开 AOF 持久化支持。&lt;/p&gt;
&lt;center&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;使用默认的写回策略：everysec&lt;/font&gt;&lt;/center&gt;
&lt;p&gt;将配置文件 &lt;code&gt;redis.conf&lt;/code&gt;  中 APPEND ONLY MODE 模块下的 &lt;code&gt;参数appendfsync&lt;/code&gt;  设置为 everysec&lt;/p&gt;
&lt;center&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;AOF文件的保存路径&lt;/font&gt;&lt;/center&gt;
&lt;p&gt;Redis6：AOF 保存文件的位置&lt;font color=&#39;red&#39;&gt;和 RDB 保存文件的位置一样&lt;/font&gt;，都是通过配置文件 redis.conf 的 &lt;code&gt;参数dir&lt;/code&gt;  配置&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dir/dump.rdb&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis7：在 &lt;code&gt;参数dir&lt;/code&gt;  的基础上，再通过配置文件 redis.conf 中 APPEND ONLY MODE 模块下的 &lt;code&gt;参数appenddirname&lt;/code&gt; ，二者拼接成为 AOF 文件的保存路径&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dir/appenddirname/appendonly.aof&lt;/p&gt;
&lt;/blockquote&gt;
&lt;center&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;AOF文件的名称&lt;/font&gt;&lt;/center&gt;
&lt;p&gt;Redis6：有且仅有 &lt;code&gt;appendonly.aof&lt;/code&gt;  一个 AOF 文件&lt;/p&gt;
&lt;p&gt;Redis7：采用了 &lt;strong&gt;multi part AOF 机制&lt;/strong&gt;，将原来的&lt;font color=&#39;red&#39;&gt;单个 AOF 文件拆分成多个 AOF 文件&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;文件名前缀都是 &lt;code&gt;appendonly.aof&lt;/code&gt; &lt;/font&gt;，分为&lt;font color=&#39;red&#39;&gt;三种类型&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;BASE AOF&lt;/font&gt;：基础 AOF，它一般由子进程 **&lt;font color=&#39;red&#39;&gt;通过重写产生&lt;/font&gt;**，该文件最多只有一个。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;INCR AOF&lt;/font&gt;：增量 AOF，它一般会在 **&lt;font color=&#39;red&#39;&gt;AOFRW 开始执行时被创建&lt;/font&gt;**，该文件可能存在多个。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;记录写命令&lt;/font&gt;的主力军！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HISTORY AOF：历史 AOF，它由 BASE AOF 和 INCR AOF 变化而来。每次&lt;font color=&#39;red&#39;&gt;AOFRW 成功完成时&lt;/font&gt;，本次 AOFRW 之前对应的 BASE AOF 和 INCR AOF 都将变为 HISTORY AOF，之后&lt;font color=&#39;red&#39;&gt;会被 Redis 自动删除&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;为了管理这些 AOF 文件，&lt;font color=&#39;red&#39;&gt;引入了一个&lt;font color=&#39;gree&#39;&gt;manifest (清单）文件&lt;/font&gt;来跟踪、管理这些 AOF&lt;/font&gt;。同时，为了便于 AOF 备份和拷贝，我们&lt;font color=&#39;red&#39;&gt;将所有的 AOF 文件和 manifest 文件放入一个单独的文件目录中&lt;/font&gt;，目录名由参数 appenddirname 配置 (Redis 7.0 新增配置项) 决定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806210712843.png&#34; alt=&#34;image-20230806210712843&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;正常恢复aof文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正常恢复aof文件&#34;&gt;#&lt;/a&gt; 正常恢复 AOF 文件&lt;/h6&gt;
&lt;p&gt;首先开启 AOF，然后执行写操作，生成 AOF 文件到指定的目录中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Chuawei%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230806220336112.png&#34; alt=&#34;image-20230806220336112&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Redis 重启并重新加载，结果符合预期，具体过程见脑图。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;flushdb&lt;/code&gt;  命令也会被增量 AOF 记录，因此 Redis 重启后也会加载并执行清空库操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;异常恢复aof文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常恢复aof文件&#34;&gt;#&lt;/a&gt; 异常恢复 AOF 文件&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;何为异常：在高并发情况下，可能上一秒刚写入一半，突然 Redis 挂了，导致 AOF 文件有缺陷、错误，那么如何恢复 AOF 文件呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先故意乱写正常的增量 AOF 文件，模拟网络闪断文件写 error&lt;/p&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806222044975.png&#34; alt=&#34;image-20230806222044975&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;p&gt;然后尝试重启 Redis 加载 AOF 文件，发现怎样都启动不了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806222108149.png&#34; alt=&#34;image-20230806222108149&#34; /&gt;&lt;/p&gt;
&lt;p&gt;执行异常修复命令 &lt;code&gt;redis-check-aof --fix&lt;/code&gt;  来修复增量 AOF 文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;只能修复增量 AOF 文件！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806222145406.png&#34; alt=&#34;image-20230806222145406&#34; /&gt;&lt;/p&gt;
&lt;p&gt;重启 Redis，成功加载 AOF 文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806222228890.png&#34; alt=&#34;image-20230806222228890&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;aof的优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof的优缺点&#34;&gt;#&lt;/a&gt; AOF 的优缺点&lt;/h5&gt;
&lt;p&gt;AOF 有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;更好地保护数据不丢失&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 AOF Redis 更加持久∶您可以有&lt;font color=&#39;red&#39;&gt;不同的 fsync 策略&lt;/font&gt;: 根本不 fsync、每秒 fsync、每次查询时 fsync。使用每秒 fsync 的默认策略，写入性能仍然很棒。fsync 是使用后台线程执行的，当没有 fsync 正在进行时，主线程将努力执行写入，因此您&lt;font color=&#39;red&#39;&gt;只能丢失一秒钟的写入&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;易修复&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AOF 日志是一个仅附加日志，因此不会出现寻道问题，也不会在断电时出现损坏问题。即使由于某种原因（磁盘已满或其他原因）日志以写一半的命令结尾， &lt;code&gt;redis-check-aof&lt;/code&gt;  工具也能够轻松修复它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;得益于 AOF 的重写机制，能够自我压缩&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当 AOF 变得太大时，Redis 能够在后台自动重写 AOF。重写是完全安全的，因为当 Redis 继续附加到旧文件时，会使用创建当前数据集所需的最少操作集生成一个全新的文件，一旦第二个文件准备就绪，Redis 就会切换两者并开始附加到新的那一个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件内容易理解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AOF 以易于理解和解析的格式依次包含所有操作的日志。您甚至可以轻松导出 AOF 文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可做紧急恢复&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;即使您不小心使用该 &lt;code&gt;FLUSHALL&lt;/code&gt;  命令刷新了所有内容，只要在此期间没有执行日志重写，您仍然可以通过停止服务器、&lt;font color=&#39;red&#39;&gt;删除最新命令&lt;/font&gt;并重新启动 Redis 来保存您的数据集。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AOF 有以下缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于相同的数据集而言，aof 文件要&lt;font color=&#39;red&#39;&gt;远大于 rdb 文件&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;恢复速度慢于 rdb&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;aof&lt;font color=&#39;red&#39;&gt;运行效率要慢于 rdb&lt;/font&gt;，每秒同步策略效率较好，不同步效率和 rdb 相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;aof重写机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof重写机制&#34;&gt;#&lt;/a&gt; &lt;mark&gt;AOF 重写机制&lt;/mark&gt;&lt;/h5&gt;
&lt;h6 id=&#34;简介-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-3&#34;&gt;#&lt;/a&gt; 简介&lt;/h6&gt;
&lt;p&gt;&lt;font color=&#39;orange&#39;&gt;AOF 重写机制&lt;/font&gt;：启动 AOF 文件的内容压缩，合并其中的命令，只保留可以恢复数据的最小指令集。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;重写完成后&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重写结果被保存到一个新的 BASE AOF 文件中，文件名上的标号加 1。&lt;/li&gt;
&lt;li&gt;同时，新建一个空的 INCR AOF 文件，文件名上的标号加 1，旧的被删除&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;AOF 重写机制有&lt;font color=&#39;red&#39;&gt;两种触发方式&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;自动触发&lt;/font&gt;：当 INCR AOF 文件&lt;font color=&#39;red&#39;&gt;同时满足&lt;/font&gt;以下两个条件时，Redis 就会&lt;font color=&#39;red&#39;&gt;自动&lt;/font&gt;启动重写机制，只保留可以恢复数据的最小指令集&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;INCR AOF 文件负责记录从 AOF 缓冲区写回的写命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;当 INCR AOF 文件的大小超过上一次重写结果（即 BASE AOF 文件）大小 1 倍（可以通过配置 &lt;code&gt;auto-aof-rewrite-percentage&lt;/code&gt;  修改）&lt;/li&gt;
&lt;li&gt;当 INCR AOF 文件的大小超过 64MB（可以通过配置 &lt;code&gt;auto-aof-rewrite-min-size&lt;/code&gt;  修改）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;手动触发&lt;/font&gt;：可以手动使用命令  &lt;code&gt;bgrewriteaof&lt;/code&gt;  来重写。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;案例演示和说明-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例演示和说明-2&#34;&gt;#&lt;/a&gt; 案例演示和说明&lt;/h6&gt;
&lt;p&gt;具体过程见脑图，这里只演示 AOF 重写后的效果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807004504357.png&#34; alt=&#34;image-20230807004504357&#34; /&gt;&lt;/p&gt;
&lt;center&gt;自动重写&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807004613263.png&#34; alt=&#34;image-20230807004613263&#34; /&gt;&lt;/p&gt;
&lt;center&gt;手动重写&lt;/center&gt;
&lt;p&gt;结论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AOF 文件重写并不是对原文件进行重新整理，而是&lt;font color=&#39;red&#39;&gt;直接读取服务器现有的键值对，然后用一条命令去代替之前记录这个键值对的多条命令&lt;/font&gt;，生成一个新的文件后去替换原来的 AOF 文件。&lt;/li&gt;
&lt;li&gt;AOF 文件重写触发机制：通过 redis.conf 配置文件中的 &lt;code&gt;auto-aof-rewrite-percentage&lt;/code&gt; : 默认值为 100，以及 &lt;code&gt;auto-aof-rewrite·min-size&lt;/code&gt; : 64mb 配置，也就是说默认 Redis 会记录上次重写时的 AOF 大小，默认配置是当 AOF 文件大小是上次 rewrite 后大小的一倍&lt;strong&gt;且&lt;/strong&gt;文件大于 64M 时触发。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;重写原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重写原理&#34;&gt;#&lt;/a&gt; 重写原理&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在重写开始前，redis 会创建一个 “重写子进程”，这个子进程会读取现有的 AOF 文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与此同时，主进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的 AOF 文件中，这样做是保证原有的 AOF 文件的可用性，避免在重写过程中出现意外。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 “重写子进程” 完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新 AOF 文件中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当追加结束后，redis 就会用新 AOF 文件来代替旧 AOF 文件，之后再有新的写指令，就都会追加到新的 AOF 文件中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重写 aof 文件的操作，并没有读取旧的 aof 文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的 aof 文件，这点和快照有点类似&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;aof的配置优化项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof的配置优化项&#34;&gt;#&lt;/a&gt; AOF 的配置优化项&lt;/h5&gt;
&lt;p&gt;模块 APPEND ONLY MODE：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807005317244.png&#34; alt=&#34;image-20230807005317244&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;aof小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof小结&#34;&gt;#&lt;/a&gt; AOF 小结&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807005534144.png&#34; alt=&#34;image-20230807005534144&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;rdb-aof混合持久化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb-aof混合持久化&#34;&gt;#&lt;/a&gt; RDB-AOF 混合持久化&lt;/h3&gt;
&lt;h4 id=&#34;简介-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-4&#34;&gt;#&lt;/a&gt; 简介&lt;/h4&gt;
&lt;p&gt;Redis&lt;strong&gt; 默认仅使用 RDB 持久化，禁用 AOF 持久化&lt;/strong&gt;。但是，当我们&lt;strong&gt;手动启用 AOF 持久化后，AOF 的优先级高于 RDB&lt;/strong&gt;！对应的数据恢复顺序和加载流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807010014261.png&#34; alt=&#34;image-20230807010014261&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;到底采用哪种持久化方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#到底采用哪种持久化方式&#34;&gt;#&lt;/a&gt; 到底采用哪种持久化方式？&lt;/h4&gt;
&lt;p&gt;二者各自的特点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDB 持久化：（定时一锅端）能够在指定的时间间隔能对你的数据进行快照存储&lt;/li&gt;
&lt;li&gt;AOF 持久化：（实时记录写命令）记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，命令以 redis 协议追加保存每次写的操作到文件末尾。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时开启时的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 redis 重启的时候会&lt;font color=&#39;red&#39;&gt;优先载入 AOF 文件&lt;/font&gt;来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集&lt;font color=&#39;red&#39;&gt;更完整&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件。&lt;font color=&#39;red&#39;&gt;但是作者建议不要只使用 AOF&lt;/font&gt;，因为 RDB 更适合用于备份数据库 (AOF 在不断变化不好备份)，&lt;font color=&#39;red&#39;&gt;留着 rdb 以防万一&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，&lt;strong&gt;&lt;font color=&#39;orange&#39;&gt;推荐方式：RDB+AOF 混合方式&lt;/font&gt;&lt;/strong&gt;，既能快速加载又能避免丢失过多的数据。配置方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;默认开启混合方式，对应配置文件中的 &lt;code&gt;aof-use-rdb-preamble&lt;/code&gt; ，默认为 yes&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;开启 AOF 持久化&lt;/font&gt;，对应配置文件中的 &lt;code&gt;appendonly&lt;/code&gt;  设置为 yes，默认为 no&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;此时，RDB 镜像做&lt;font color=&#39;red&#39;&gt;全量&lt;/font&gt;持久化，AOF 做&lt;font color=&#39;red&#39;&gt;增量&lt;/font&gt;持久化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先使用 RDB 进行快照存储&lt;/li&gt;
&lt;li&gt;然后使用 AOF 持久化记录所有的写操作&lt;/li&gt;
&lt;li&gt;当重写策略满足或手动触发重写的时候，将最新的数据存储为新的 RDB 记录。&lt;/li&gt;
&lt;li&gt;这样的话，重启服务的时候会从 RDB 和 AOF 两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。简单来说：混合持久化方式产生的文件一部分是 RDB 格式，一部分是 AOF 格式。&lt;strong&gt;----》&lt;font color=&#39;red&#39;&gt;AOF 包括了 RDB 头部 + AOF 混写&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807011820642.png&#34; alt=&#34;image-20230807011820642&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;纯缓存模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#纯缓存模式&#34;&gt;#&lt;/a&gt; 纯缓存模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 作为基于 key-value 的内存数据库，&lt;strong&gt;Redis 最主要的功能是用作缓存&lt;/strong&gt;，而 Redis 持久化会消耗 Redis 的性能，因此可以&lt;strong&gt;同时关闭 RDB+AOF&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;禁用 RDB&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此时仍然可以手动使用命令 &lt;code&gt;SAVE&lt;/code&gt;  和 &lt;code&gt;BGSAVE&lt;/code&gt;  生成 rdb 文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;命令： &lt;code&gt;res-cli config set save &amp;quot;&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改配置文件：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807012414863.png&#34; alt=&#34;image-20230807012414863&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;禁用 AOF&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此时仍然可以手动使用命令 &lt;code&gt;BGREWRITEAOF&lt;/code&gt;  生成 aof 文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;命令： &lt;code&gt;res-cli config set appendonly no&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改配置文件：将 &lt;code&gt;redis.conf&lt;/code&gt;  中 APPEND ONLY MODE 模块下的 &lt;code&gt;参数appendonly&lt;/code&gt;  设置为 no&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-redis事务transactions&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-redis事务transactions&#34;&gt;#&lt;/a&gt; 5、Redis 事务（Transactions）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;数据库事务&lt;/strong&gt;：由一系列数据库操作组成的一个完整的逻辑过程，不可拆分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如银行转帐，从原账户扣除金额，以及向目标账户添加金额，这两个数据库操作的总和，构成一个完整的逻辑过程，不可拆分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具有&lt;strong&gt; ACID&lt;/strong&gt; 特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子性（ &lt;code&gt;a&lt;/code&gt; tomicity）
&lt;ul&gt;
&lt;li&gt;一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。&lt;/li&gt;
&lt;li&gt;事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一致性（ &lt;code&gt;c&lt;/code&gt; onsistency）
&lt;ul&gt;
&lt;li&gt;在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;隔离性（ &lt;code&gt;i&lt;/code&gt; solation）
&lt;ul&gt;
&lt;li&gt;数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以&lt;font color=&#39;red&#39;&gt;防止多个事务并发执行时由于交叉执行而导致数据的不一致&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;事务隔离分为不同级别，包括：
&lt;ul&gt;
&lt;li&gt;读未提交（Read uncommitted）&lt;/li&gt;
&lt;li&gt;读已提交（read committed）&lt;/li&gt;
&lt;li&gt;可重复读（repeatable read）&lt;/li&gt;
&lt;li&gt;序列化（Serializable）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;持久性（ &lt;code&gt;d&lt;/code&gt; urability）
&lt;ul&gt;
&lt;li&gt;事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;redis事务是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis事务是什么&#34;&gt;#&lt;/a&gt; Redis 事务是什么？&lt;/h3&gt;
&lt;p&gt;Redis 事务允许&lt;strong&gt;在一个队列中，一次性、按顺序、排他地，执行多个命令&lt;/strong&gt;，本质是一组命令的集合。一个事务中的所有命令都会序列化，&lt;font color=&#39;red&#39;&gt;按顺序地串行化执行，而不会被其它命令插入，不许加塞&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;Redis 事务以命令 &lt;code&gt;MULTI&lt;/code&gt; 、 &lt;code&gt;EXEC&lt;/code&gt; 、 &lt;code&gt;DISCARD&lt;/code&gt;  和 &lt;code&gt;WATCH&lt;/code&gt;  为中心，提供两个重要保证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务中的所有命令都是&lt;font color=&#39;red&#39;&gt;按顺序序列化、执行&lt;/font&gt;的。由另一个客户端发送的请求将永远不会在 Redis 事务的执行过程中提供服务。这保证了命令作为单个独立操作执行。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt; &lt;code&gt;EXEC&lt;/code&gt;  命令触发事务中所有命令的执行&lt;/font&gt;，因此，如果客户端在调用 &lt;code&gt;EXEC&lt;/code&gt;  命令之前在事务上下文中失去了与服务器的连接，则不会执行任何操作，相反，如果调用了 &lt;code&gt;EXEC&lt;/code&gt;  命令，则会执行所有操作。当使用 AOF 时，Redis 确保使用单个 write（2）系统调用将事务写入磁盘。但是，如果 Redis 服务器崩溃或被系统管理员以某种艰难的方式终止，则可能只注册了部分操作。Redis 将在重新启动时检测到这种情况，并将退出并返回错误。使用 &lt;code&gt;redis check aof&lt;/code&gt;  工具，可以修复将删除部分事务的 AOF 文件，以便服务器可以重新启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从版本 2.2 开始，Redis 允许以&lt;font color=&#39;red&#39;&gt;乐观锁&lt;/font&gt;的形式为上述两种操作提供额外的保证，其方式与 &lt;code&gt;check-and-set&lt;/code&gt; （CAS）操作非常相似。稍后将对此进行记录。&lt;/p&gt;
&lt;h3 id=&#34;redis事务-vs-数据库事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis事务-vs-数据库事务&#34;&gt;#&lt;/a&gt; Redis 事务 vs 数据库事务&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单独的隔离操作&lt;/strong&gt;：Redis 的事务仅仅是保证事务里的操作会被连续独占的执行，redis 命令执行是单线程架构，&lt;font color=&#39;red&#39;&gt;在执行完事务内所有指令前是不可能再去同时执行其他客户端的请求&lt;/font&gt;的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;没有隔离级别的概念&lt;/strong&gt;：因为&lt;font color=&#39;red&#39;&gt;事务提交前任何指令都不会被实际执行&lt;/font&gt;，也就不存在 “事务内的查询要看到事务里的更新，在事务外查询不能看到” 这种问题了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因此不存在 “三大读问题”：不可重复读、脏读、幻读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不保证原子性&lt;/strong&gt;：Redis 的事务 **&lt;font color=&#39;red&#39;&gt;不保证原子性&lt;/font&gt;**，也就是不保证所有指令同时成功或同时失败，只有决定是否开始执行全部指令的能力，&lt;font color=&#39;red&#39;&gt;没有回滚能力&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;排它性&lt;/strong&gt;：Redis 会保证一个事务内的命令依次执行，而&lt;font color=&#39;red&#39;&gt;不会被其它命令插入&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;案例说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例说明&#34;&gt;#&lt;/a&gt; 案例说明&lt;/h3&gt;
&lt;h4 id=&#34;常用命令-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用命令-2&#34;&gt;#&lt;/a&gt; 常用命令&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MULTI&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;标记一个事务块的开始&lt;/font&gt;。随后的一系列指令将在执行 &lt;code&gt;EXEC&lt;/code&gt;  时作为一个原子执行。&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EXEC&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;执行事务块中所有在排队等待的指令&lt;/font&gt;，并将链接状态恢复到正常。&lt;br/&gt;当使用 &lt;code&gt;WATCH&lt;/code&gt;  时，只有当被监视的键没有被修改，且允许检查设定机制时， &lt;code&gt;EXEC&lt;/code&gt;  会被执行。&lt;/td&gt;
&lt;td&gt;每个元素与原子事务中的指令一一对应。&lt;br/&gt;使用 &lt;code&gt;WATCH&lt;/code&gt;  时，如果被终止， &lt;code&gt;EXEC&lt;/code&gt;  则返回一个空的应答集合。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WATCH key [key ...]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;监视若干个 key&lt;/font&gt;，如果在事务执行前这些 key 发生改动，那么事务将被打断。在事务中有条件的执行（&lt;font color=&#39;red&#39;&gt;乐观锁&lt;/font&gt;）。&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNWATCH &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;释放所有被 &lt;code&gt;WATCH&lt;/code&gt;  命令监视的 key&lt;/font&gt;&lt;br/&gt;如果执行 &lt;code&gt;EXEC&lt;/code&gt;  或者 &lt;code&gt;DISCARD&lt;/code&gt; ， 则不需要手动执行该命令。&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DISCARD&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;取消事务，放弃执行事务块中的所有指令&lt;/font&gt;。&lt;br/&gt;同时，&lt;font color=&#39;red&#39;&gt;释放所有被 &lt;code&gt;WATCH&lt;/code&gt;  命令监视的 key&lt;/font&gt;。&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;redis事务中的错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis事务中的错误&#34;&gt;#&lt;/a&gt; Redis 事务中的错误&lt;/h4&gt;
&lt;p&gt;在 Redis 事务处理过程中，可能会遇到&lt;font color=&#39;red&#39;&gt;两种命令错误&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;命令可能无法排队&lt;/strong&gt;，因此在调用 &lt;code&gt;EXEC&lt;/code&gt;  之前可能会出现错误。例如，该命令可能在&lt;font color=&#39;red&#39;&gt;语法上错误&lt;/font&gt;（参数数量错误、命令名称错误…），或者可能存在一些关键条件，如&lt;font color=&#39;red&#39;&gt;内存不足&lt;/font&gt;（如果使用 maxmemory 指令将服务器配置为具有内存限制）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用 &lt;code&gt;EXEC&lt;/code&gt;  后，命令可能会失败&lt;/strong&gt;。例如，因为我们&lt;font color=&#39;red&#39;&gt;对具有错误值的键执行了操作&lt;/font&gt;（如对字符串值调用列表操作）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从 Redis 2.6.5 开始，服务器将在命令累积过程中&lt;font color=&#39;red&#39;&gt;检测到错误&lt;/font&gt;。然后，它将&lt;font color=&#39;red&#39;&gt;拒绝执行在 &lt;code&gt;EXEC&lt;/code&gt;  期间返回错误的事务，从而丢弃该事务&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;对于 Redis 事务中遇到的错误，有&lt;font color=&#39;red&#39;&gt;两种处理方式&lt;/font&gt;，具体见 case3 和 case4。&lt;/p&gt;
&lt;h4 id=&#34;case1正常执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#case1正常执行&#34;&gt;#&lt;/a&gt; case1：正常执行&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;MULTI&lt;/code&gt;  + 一系列 Redis 命令 +  &lt;code&gt;EXEC&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807133026046.png&#34; alt=&#34;image-20230807133026046&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;case2放弃事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#case2放弃事务&#34;&gt;#&lt;/a&gt; case2：放弃事务&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;MULTI&lt;/code&gt;  + 一系列 Redis 命令 +  &lt;code&gt;DISCARD&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807115127428.png&#34; alt=&#34;image-20230807115127428&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;case3全体连坐&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#case3全体连坐&#34;&gt;#&lt;/a&gt; case3：全体连坐&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;情况（&lt;strong&gt;编译时异常&lt;/strong&gt;）：&lt;font color=&#39;red&#39;&gt;在 &lt;code&gt;EXEC&lt;/code&gt;  命令执行前&lt;/font&gt;，由于&lt;u&gt;语法错误&lt;/u&gt;或者&lt;u&gt;内存不足&lt;/u&gt;等原因，导致事务块中&lt;font color=&#39;red&#39;&gt;某条命令无法加入队列&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;解决方式：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;EXECABORT&lt;/font&gt;&lt;/strong&gt;，取消执行事务块中队列里的所有命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807120332653.png&#34; alt=&#34;image-20230807120332653&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;case4冤头债主&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#case4冤头债主&#34;&gt;#&lt;/a&gt; case4：冤头债主&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;情况（&lt;strong&gt;运行时异常&lt;/strong&gt;）：&lt;font color=&#39;red&#39;&gt;在 &lt;code&gt;EXEC&lt;/code&gt;  命令执行后&lt;/font&gt;，事务块中&lt;font color=&#39;red&#39;&gt;某条命令执行失败&lt;/font&gt;。例如，因为我们&lt;u&gt;对具有错误值的键执行了操作&lt;/u&gt;（如对字符串值调用列表操作）。&lt;/p&gt;
&lt;p&gt;解决方式：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;即使事务内一个命令失败，队列中的所有其他命令都会被执行&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;补充：&lt;font color=&#39;red&#39;&gt;Redis 不提供事务回滚的功能&lt;/font&gt;，在事务执行出错后，&lt;font color=&#39;red&#39;&gt;开发者必须自行恢复数据库状态&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807132520648.png&#34; alt=&#34;image-20230807132520648&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;case5watch监控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#case5watch监控&#34;&gt;#&lt;/a&gt; case5：watch 监控&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;悲观锁（Pessimistic Lock）&lt;/font&gt;：顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以&lt;strong&gt;每次访问数据的时候都会上锁&lt;/strong&gt;，这样别人想拿这个数据就会 block 直到它拿到锁。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;乐观锁（Optimistic Lock）&lt;/font&gt;： 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以&lt;strong&gt;不会上锁，但是在更新数据时会判断一下在此期间别人有没有去更新这个数据&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;乐观锁策略：只有当 **&lt;u&gt;提交版本&lt;/u&gt; 大于 &lt;u&gt;记录当前版本&lt;/u&gt;**，才能执行数据更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;CAS（Check-And-Set）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;watch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#watch&#34;&gt;#&lt;/a&gt; watch&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;watch&lt;/code&gt;  命令是一种&lt;strong&gt;乐观锁&lt;/strong&gt;的实现，Redis 在&lt;font color=&#39;red&#39;&gt;修改时会检测数据是否被更改，如果更改了，则执行失败&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807131835629.png&#34; alt=&#34;image-20230807131835629&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一个窗口蓝色框第 5 步执行结果返回为 nil，也就是相当于是失败。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;WATCH&lt;/code&gt;  命令用于为 Redis 事务提供一种&lt;strong&gt; CAS（check-and-set）行为&lt;/strong&gt;。&lt;br /&gt;
被 &lt;code&gt;WATCH&lt;/code&gt;  的 key 用来检测 key 的变化。如果在执行 &lt;code&gt;EXEC&lt;/code&gt;  命令之前至少修改了一个被监视的 key，则整个事务将中止， &lt;code&gt;EXEC&lt;/code&gt;  将返回一个 Null 回复以通知事务失败。&lt;/p&gt;
&lt;h5 id=&#34;unwatch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unwatch&#34;&gt;#&lt;/a&gt; unwatch&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807132443762.png&#34; alt=&#34;image-20230807132443762&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小结&#34;&gt;#&lt;/a&gt; 小结&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt; &lt;code&gt;EXEC&lt;/code&gt;  命令执行后&lt;/font&gt;，会释放所有被 &lt;code&gt;WATCH&lt;/code&gt;  命令监视的 key&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;当客户端连接丢失的时候 (比如退出链接)&lt;/font&gt;，会释放所有被 &lt;code&gt;WATCH&lt;/code&gt;  命令监视的 key&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;p&gt;Redis 事务分为三部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;开启&lt;/strong&gt;：以 &lt;code&gt;MULTI&lt;/code&gt;  开始一个事务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;入队&lt;/strong&gt;：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行&lt;/strong&gt;：由 &lt;code&gt;EXEC&lt;/code&gt;  命令触发执行事务&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-redis管道pipeline&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-redis管道pipeline&#34;&gt;#&lt;/a&gt; 6、Redis 管道（pipeline）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 管道与 Redis 事务之间的关系，类似于雷锋与雷峰塔的关系，Java 与 JavaScript 的关系，看上去相似，但实际没有任何关系！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试题&#34;&gt;#&lt;/a&gt; 面试题&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;如何优化命令频繁往返造成的性能瓶颈？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问题由来：&lt;/p&gt;
&lt;p&gt;Redis 是一种基于&lt;font color=&#39;red&#39;&gt;客户端 - 服务端模型&lt;/font&gt;以及请求 / 响应协议的 TCP 服务。一个请求会遵循以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;客户端向服务端发送命令&lt;/font&gt;(分四步：发送命令→命令排队→命令执行→返回结果)，并监听 Socket 返回，通常&lt;font color=&#39;red&#39;&gt;以阻塞模式等待服务端响应&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;服务端处理命令，并将结果返回给客户端&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述两步的总耗时称为：&lt;strong&gt;Round Trip Time（即 RTT, 数据包往返于两端的时间)&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果同时需要执行大量的命令，那么就&lt;font color=&#39;red&#39;&gt;要等待上一条命令应答后再执行&lt;/font&gt;，这中间不仅仅多了 RTT（Round Time Trip），而且还频繁调用系统 IO，发送网络请求，同时需要 redis 调用多次 read () 和 write () 系统方法，系统方法会将数据从用户态转移到内核态，这样就会对进程上下文有比较大的影响了，&lt;font color=&#39;red&#39;&gt;性能不太好&lt;/font&gt;o(╥﹏╥)o&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807140057973.png&#34; alt=&#34;image-20230807140057973&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;简介-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-5&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通过&lt;font color=&#39;red&#39;&gt;批处理 Redis 命令&lt;/font&gt;来&lt;font color=&#39;red&#39;&gt;优化往返时间 RTT&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Redis 管道 (pipeline)&lt;/strong&gt;：为了优化 RTT 往返时间，可以&lt;font color=&#39;orange&#39;&gt;一次性打包发送多条命令&lt;/font&gt;给服务端，而&lt;font color=&#39;red&#39;&gt;无需等待对每个命令的响应&lt;/font&gt;。服务端依次处理完完毕后，&lt;font color=&#39;red&#39;&gt;通过一条响应一次性将结果返回&lt;/font&gt;，通过减少客户端与 redis 的通信次数来实现降低往返延时时间。pipeline 的&lt;font color=&#39;orange&#39;&gt;实现原理是队列&lt;/font&gt;，先进先出特性就保证数据的顺序性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是&lt;strong&gt;一种批处理命令的变种优化措施&lt;/strong&gt;，类似 Redis 原生的批命令（例如 mget 和 mset）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例&#34;&gt;#&lt;/a&gt; 案例&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;将欲执行的命令全部写到一个 txt 文件中&lt;/li&gt;
&lt;li&gt;将 txt 文件的内容传递给 Redis 的 pipe 参数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807140935362.png&#34; alt=&#34;image-20230807140935362&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;总结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-2&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;h4 id=&#34;管道-vs-原生批量命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管道-vs-原生批量命令&#34;&gt;#&lt;/a&gt; 管道 vs 原生批量命令&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;原生批量命令&lt;/th&gt;
&lt;th&gt;管道&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;原子性&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;非原子性&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一次只能执行一种命令&lt;/td&gt;
&lt;td&gt;支持批量执行不同命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;服务端实现&lt;/td&gt;
&lt;td&gt;服务端与客户端共同完成&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;管道-vs-事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管道-vs-事务&#34;&gt;#&lt;/a&gt; 管道 vs 事务&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;事务&lt;/th&gt;
&lt;th&gt;管道&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;不保证原子性&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;非原子性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逐条发送命令&lt;/td&gt;
&lt;td&gt;一次性发送多条命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;会阻塞其他命令的执行&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;非阻塞&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;使用管道的注意事项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用管道的注意事项&#34;&gt;#&lt;/a&gt; 使用管道的注意事项&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pipeline 缓冲的指令只是会依次执行，&lt;font color=&#39;red&#39;&gt;不保证原子性，如果执行中指令发生异常，将会继续执行后续的指令&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与 Redis 事务发生命令的运行时异常类似，冤头债主，不会连坐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 pipeline 组装的&lt;font color=&#39;red&#39;&gt;命令个数不能太多&lt;/font&gt;（例如 10k），不然数据量过大客户端阻塞的时间可能过久，同时&lt;font color=&#39;red&#39;&gt;服务端此时也被迫回复一个队列答复，占用很多内存&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-redis发布订阅pubsub&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-redis发布订阅pubsub&#34;&gt;#&lt;/a&gt; 7、Redis 发布订阅（pub/sub）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这是 Redis 的第一代消息中间件，第二代是 Stream，然而&lt;strong&gt;一般使用的都是更加成熟的第三方消息中间件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;了解即可&lt;/strong&gt;，实际工作中用的很少，一般都是将 Redis 用作&lt;strong&gt;分布式缓存&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;简介-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-6&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Redis 发布订阅（pub/sub）是一种消息通信模式：&lt;font color=&#39;red&#39;&gt;发送者 (PUBLISH) 发送消息，订阅者 (SUBSCRIBE) 接收消息&lt;/font&gt;，可以实现进程间的消息传递。&lt;/p&gt;
&lt;p&gt;一言蔽之：Redis 可以通过发布订阅实现消息的引导和分流，实现消息中间件 MQ 的功能。但是&lt;font color=&#39;red&#39;&gt;不推荐使用&lt;/font&gt;该功能，专业的事情交给专业的中间件处理，redis 就做好分布式缓存功能。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807173639960.png&#34; alt=&#34;image-20230807173639960&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Redis客户端可以订阅任意数量的频道，类似微信关注多个公众号&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807173711847.png&#34; alt=&#34;image-20230807173711847&#34; /&gt;&lt;/p&gt;
&lt;center&gt;当有新消息通过PUBLISH命令发送给频道时
&lt;/center&gt;
&lt;p&gt;小结：发布 / 订阅其实是&lt;strong&gt;一个轻量的队列&lt;/strong&gt;，只不过&lt;strong&gt;数据不会被持久化&lt;/strong&gt;，一般&lt;strong&gt;用来处理实时性较高的异步消息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807173943443.png&#34; alt=&#34;image-20230807173943443&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;常用命令-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用命令-3&#34;&gt;#&lt;/a&gt; 常用命令&lt;/h3&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807174014734.png&#34; alt=&#34;image-20230807174014734&#34;  /&gt;
&lt;h3 id=&#34;缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;发布的消息在 Redis 系统中&lt;strong&gt;不能持久化&lt;/strong&gt;，因此，必须先执行订阅，再等待消息发布。如果先发布了消息，那么该消息由于没有订阅者，消息将被直接丢弃&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息只管发送对于发布者而言消息是即发即失的，不管接收，也&lt;strong&gt;没有 ACK 机制&lt;/strong&gt;，无法保证消息的消费成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以上的缺点导致&lt;strong&gt; Redis 的 Pub/Sub 模式就像个小玩具&lt;/strong&gt;，在生产环境中几乎无用武之地。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为此 Redis5.0 版本新增了 Stream 数据结构，不但支持多播，还支持数据持久化，相比 Pub/Sub 更加的强大，但是也不推荐使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-redis主从复制replica&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-redis主从复制replica&#34;&gt;#&lt;/a&gt; 8、Redis 主从复制（replica）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;承上启下的一章，前文都是在单机场景下，从此开始介绍 Redis 多台机器的场景，即&lt;strong&gt;通过主从复制支持多可用性和故障切换&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;简介-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-7&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Redis 数据库的主从复制，其中&lt;strong&gt; master 数据库以写为主，slave 数据库以读为主&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当 master 数据库上的数据变化时，会自动将新的数据以&lt;font color=&#39;red&#39;&gt;异步&lt;/font&gt;的方式同步到其他 slave 数据库上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis 主从复制（replica）的功能如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;读写分离&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容灾恢复&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据备份&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;水平扩容支撑高并发&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置方法：&lt;strong&gt;配从不配主&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;master 如果配置了 &lt;code&gt;requirepass&lt;/code&gt;  参数，需要密码登陆&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;那么 slave 就要配置 &lt;code&gt;masterauth&lt;/code&gt;  来设置校验密码，否则 master 会拒绝 slave 的访问请求&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807183910365.png&#34; alt=&#34;image-20230807183910365&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本命令&#34;&gt;#&lt;/a&gt; 基本命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;INFO replication&lt;/code&gt; &lt;/strong&gt;：以一种易于理解和阅读的格式，返回关于当前 Redis 服务器的&lt;strong&gt;直接主 / 从&lt;/strong&gt;复制信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;REPLICAOF masterIp masterPort&lt;/code&gt; &lt;/strong&gt;：在线修改当前 Redis 服务器的主 / 从复制设置（自动配置）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般写入进 redis.conf 配置文件内&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;SLAVEOF masterIp masterPort&lt;/code&gt; &lt;/strong&gt;：将当前 Redis 服务器转变为指定服务器的从属服务器（手动配置）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次与 master 断开之后，都需要&lt;font color=&#39;red&#39;&gt;重新连接&lt;/font&gt;，除非你配置进 redis.conf 文件&lt;/li&gt;
&lt;li&gt;在运行期间修改 slave 节点的信息，如果该数据库已经是某个主数据库的从数据库，那么会停止和原主数据库的同步关系转而和新的主数据库同步，&lt;font color=&#39;red&#39;&gt;改换门庭&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;SLAVEOF NO ONE&lt;/code&gt; &lt;/strong&gt;：将使得这个从属服务器关闭复制功能，并从从属服务器&lt;font color=&#39;red&#39;&gt;转回主服务器，自立为王&lt;/font&gt;，同时原来同步所得的数据集不会被丢弃。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;案例演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例演示&#34;&gt;#&lt;/a&gt; 案例演示&lt;/h3&gt;
&lt;h4 id=&#34;架构说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#架构说明&#34;&gt;#&lt;/a&gt; 架构说明&lt;/h4&gt;
&lt;p&gt;一主二从，一个 master，两个 slave，示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807185141276.png&#34; alt=&#34;image-20230807185141276&#34; /&gt;&lt;/p&gt;
&lt;p&gt;拷贝多份配置文件，分别命名为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis6379.conf&lt;/li&gt;
&lt;li&gt;redis6380.conf&lt;/li&gt;
&lt;li&gt;redis6381.conf&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;口诀&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#口诀&#34;&gt;#&lt;/a&gt; &lt;mark&gt;口诀&lt;/mark&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;面试重点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前提：三边网络互相 ping 通，同时注意防火墙配置。&lt;/p&gt;
&lt;p&gt;三大命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主从复制： &lt;code&gt;REPLICAOF masterIp masterPort&lt;/code&gt; ，配从不配主&lt;/li&gt;
&lt;li&gt;改换门庭： &lt;code&gt;SLAVEOF masterIp masterPort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自立为王： &lt;code&gt;SLAVEOF NO ONE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;修改配置文件的操作细节&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改配置文件的操作细节&#34;&gt;#&lt;/a&gt; 修改配置文件的操作细节&lt;/h4&gt;
&lt;p&gt;以 redis6379.conf 为例，步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;要求 Redis 后台运行，不要弹出命令行窗口： &lt;code&gt;daemonize yes&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取消 IP 的绑定，否则影响远程 IP 连接，注释掉 &lt;code&gt;bind 127.0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关闭保护模式，否则影响远程访问 / 连接： &lt;code&gt;protected-mode no&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定端口： &lt;code&gt;port 6379&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定当前工作目录， &lt;code&gt;dir /myredis&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置 pid（进程 id）文件的路径和名字： &lt;code&gt;pidfile /var/run/redis_6379.pid&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置 log 文件的路径和名字： &lt;code&gt;logfile &amp;quot;/myredis/6379.log&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;设置 Redis 服务器的密码&lt;/font&gt;： &lt;code&gt;requirepass 111111&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;master、slave 均配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置 rdb 文件的名称： &lt;code&gt;dbfilename dump6379.rdb&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若开启 AOF，还需设置 aof 文件的名字：appendfilename 。这里不开启了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;slaveslave 设置所访问的 mastermaster 的 IP 和端口： &lt;code&gt;replicaof masterIp 6379&lt;/code&gt; ，并设置通行密码 &lt;code&gt;masterauth &amp;quot;111111&amp;quot;&lt;/code&gt; &lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;slave 需要配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;常用的3招&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用的3招&#34;&gt;#&lt;/a&gt; 常用的 3 招&lt;/h4&gt;
&lt;h5 id=&#34;一主二从&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一主二从&#34;&gt;#&lt;/a&gt; 一主二从&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;1 个 master，2 个 slave&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807201752116.png&#34; alt=&#34;image-20230807201752116&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;方案1配置文件固定写死&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方案1配置文件固定写死&#34;&gt;#&lt;/a&gt; 方案 1：配置文件固定写死&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;配从（6380 和 6381）不配主&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807193239828.png&#34; alt=&#34;image-20230807193239828&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;依次启动 master 和两台 slave&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807193418057.png&#34; alt=&#34;image-20230807193418057&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看主从关系&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过日志文件：通过 &lt;code&gt;vim 6379.log&lt;/code&gt;  查看 master 日志，通过 &lt;code&gt; vim 6380/6381.log&lt;/code&gt;  查看 slave 日志&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807193701621.png&#34; alt=&#34;image-20230807193701621&#34; /&gt;&lt;/p&gt;
&lt;center&gt;master日志&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807193733743.png&#34; alt=&#34;image-20230807193733743&#34; /&gt;&lt;/p&gt;
&lt;center&gt;slave日志&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过命令： &lt;code&gt;info relication&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807193843707.png&#34; alt=&#34;image-20230807193843707&#34; /&gt;&lt;/p&gt;
&lt;center&gt;master的主从复制信息&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807193915854.png&#34; alt=&#34;image-20230807193915854&#34; /&gt;&lt;/p&gt;
&lt;center&gt;slave的主从复制信息&lt;/center&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;主从复制问题演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主从复制问题演示&#34;&gt;#&lt;/a&gt; 主从复制问题演示&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题 1：&lt;strong&gt;slave 不能执行写命令！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807194936720.png&#34; alt=&#34;image-20230807194936720&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题 2：slave 切入点问题。当某台 slave shutdown 并重启后，&lt;strong&gt;slave 对 master 首次进行全量复制，然后进行增量复制&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807194924560.png&#34; alt=&#34;image-20230807194924560&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题 3：master shutdown 后，slave 原地待命，数据仍可以正常使用，&lt;strong&gt;slave 等待 master 重启归来&lt;/strong&gt;！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题 4：shutdown 后的&lt;strong&gt; master 重启归来，主从关系还在！slave 还能顺利复制！&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;方案2命令操作手动指定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方案2命令操作手动指定&#34;&gt;#&lt;/a&gt; 方案 2：命令操作手动指定&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;slave 停机并去掉配置项，清空主从关系。此时 3 机都是 master，互不从属。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在预设的 2 个 slave 上执行命令 &lt;code&gt;SLAVEOF masterIp masterHost&lt;/code&gt;  指定 master&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种情况下，&lt;strong&gt;若 slave shutdown 并重启，主从关系就不存在了（因为没有设置配置文件）！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807200155294.png&#34; alt=&#34;image-20230807200155294&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;配置-vs-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置-vs-命令&#34;&gt;#&lt;/a&gt; 配置 vs 命令&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;配置（即方案 1）持久稳定，命令（即方案 2）临时生效&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&#34;薪火相传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#薪火相传&#34;&gt;#&lt;/a&gt; 薪火相传&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807202217260.png&#34; alt=&#34;image-20230807202217260&#34; /&gt;&lt;/p&gt;
&lt;p&gt;要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slave（6380）也可以作为 master（6379），接收其他 slave（6381）的连接和同步请求，可以&lt;strong&gt;有效减轻主 master 的写压力&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;改变 master 的命令： &lt;code&gt;SLAVEOF newMasterIp newMasterPort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slave（6380）仍然无法执行写命令！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;slave（6381）中途变更转向，master 从 6379 变为 6380，&lt;strong&gt;会清除之前 master（6379）的数据，重新建立拷贝新的 master（6380）的数据&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;自立为王&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自立为王&#34;&gt;#&lt;/a&gt; 自立为王&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;slave 转成 master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;命令 &lt;code&gt;SLAVEOF NO ONE&lt;/code&gt; ：&lt;strong&gt;停止与其他数据库的同步，清空数据，转成主数据库&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;主从复制的原理-工作流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主从复制的原理-工作流程&#34;&gt;#&lt;/a&gt; &lt;mark&gt;主从复制的原理、工作流程&lt;/mark&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;面试重点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;black&#39;&gt;slave 首次连接，请求完全同步&lt;/font&gt;&lt;/strong&gt;：slave&lt;font color=&#39;red&#39;&gt;首次连接&lt;/font&gt;master 后会发送一个 &lt;code&gt;sync&lt;/code&gt;  命令，&lt;font color=&#39;red&#39;&gt;请求完全同步（全量复制）&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;执行一次完全同步（&lt;font color=&#39;red&#39;&gt;全量复制&lt;/font&gt;），slave 自身原有数据会被&lt;font color=&#39;red&#39;&gt;覆盖清除&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;black&#39;&gt;master 保存快照、缓存写命令，响应给 slave 进行初始化&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master 节点收到 &lt;code&gt;sync&lt;/code&gt;  命令后会开始在后台&lt;font color=&#39;red&#39;&gt;保存快照&lt;/font&gt;(即 RDB 持久化，主从复制时会触发 RDB)，同时&lt;font color=&#39;red&#39;&gt;缓存所有接收到的写命令&lt;/font&gt;，master 节点执行 RDB 持久化完后，&lt;font color=&#39;red&#39;&gt;master 将 rdb 快照文件和所有缓存的写命令发送到所有 slave&lt;/font&gt;，以完成一次完全同步&lt;/li&gt;
&lt;li&gt;而 slave 服务在接收到数据库文件数据后，将其&lt;font color=&#39;red&#39;&gt;存盘并加载到内存中&lt;/font&gt;，从而&lt;font color=&#39;red&#39;&gt;完成复制初始化&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;black&#39;&gt;心跳持续，保持通信&lt;/font&gt;&lt;/strong&gt;：master 向 slave 发出 PING 包的周期，默认是 10 秒。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807205137957.png&#34; alt=&#34;image-20230807205137957&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;black&#39;&gt;进入平稳，增量复制&lt;/font&gt;&lt;/strong&gt;：master 继续将新的所有收集到的写命令自动依次传给 slave，完成同步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;b&#39;&gt;slave 下线，重连续传&lt;/font&gt;&lt;/strong&gt;：假设某台 slave 宕机并重启了，master 会检查 backlog 里面的 &lt;code&gt;offset&lt;/code&gt; ，master 和 slave 都会保存一个复制的 &lt;code&gt;offset&lt;/code&gt;  和一个 masterId， &lt;code&gt;offset&lt;/code&gt;  是保存在 backlog 中的。&lt;font color=&#39;red&#39;&gt;master 只会把已经复制的 &lt;code&gt;offset&lt;/code&gt;  后面的数据复制给 slave&lt;/font&gt;，类似&lt;strong&gt;断点续传&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;主从复制的缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主从复制的缺点&#34;&gt;#&lt;/a&gt; &lt;mark&gt;主从复制的缺点&lt;/mark&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;面试重点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;复制延时，信号衰减&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于所有的写操作都是先在 Master 上操作，然后同步更新到 Slave 上，所以从 Master 同步到 Slave 机器有一定的延迟，当&lt;font color=&#39;red&#39;&gt;系统很繁忙&lt;/font&gt;的时候，延迟问题会更加严重，&lt;font color=&#39;red&#39;&gt;Slave 机器数量的增加&lt;/font&gt;也会使这个问题更加严重。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807210259342.png&#34; alt=&#34;image-20230807210259342&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;**master 挂了咋办？** 默认情况下，不会从 slave 中重选一个 master，岂不是群龙无首？系统会陷入半瘫痪状态（只能读取，不能写入）&lt;/font&gt;那客户端的写命令如何执行啊？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;期待有一种高可用的备份、恢复机制，能够从剩下的 slave 中选出一个 master！（&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;无人值守安装：哨兵！&lt;/font&gt;&lt;/strong&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;9-redis哨兵sentinel&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9-redis哨兵sentinel&#34;&gt;#&lt;/a&gt; 9、Redis 哨兵（sentinel）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 为了支持高可用，有 2 套机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主从复制（replica）+ 哨兵（sentinel）&lt;/li&gt;
&lt;li&gt;集群（cluster）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;简介-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-8&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;哨兵（sentinel）巡查监控后台 master 是否故障，如果故障了根据 **&lt;font color=&#39;orange&#39;&gt;投票数&lt;/font&gt;** 自动将某一个 slave 转换为新 master，继续对外服务。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808215652689.png&#34; alt=&#34;image-20230808215652689&#34; /&gt;&lt;/p&gt;
&lt;p&gt;哨兵的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主从监控&lt;/strong&gt;：哨兵能监控主从 Redis 库是否正常运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;故障转移&lt;/strong&gt;：如果 master 异常，哨兵会将根据投票数将某个 slave 转为新的 master，即主从切换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;消息通知&lt;/strong&gt;：哨兵可将故障转移的结果发送给客户端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置中心&lt;/strong&gt;：客户端通过连接哨兵来获得当前 Redis 服务的 master 地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;案例演示-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例演示-2&#34;&gt;#&lt;/a&gt; 案例演示&lt;/h3&gt;
&lt;h4 id=&#34;架构说明-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#架构说明-2&#34;&gt;#&lt;/a&gt; 架构说明&lt;/h4&gt;
&lt;p&gt;3 个哨兵：自动监控和维护集群，不存放数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;哨兵必须要配置集群，且数量最好是奇数，方便投票。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3 个 Redis 库（1 主 2 从）：用于数据读取和存放&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808002037403.png&#34; alt=&#34;image-20230808002037403&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;哨兵配置文件sentinelconf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哨兵配置文件sentinelconf&#34;&gt;#&lt;/a&gt; 哨兵配置文件 ( &lt;code&gt;sentinel.conf&lt;/code&gt; )&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;默认在 /opt/redis-7.0.0 目录下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重点参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; ：服务监听地址，用于客户端连接，默认为本机地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;daemonize&lt;/code&gt; ：是否以后台 daemon（后台进程）方式运行，设为 yes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;protected-mode&lt;/code&gt; ：是否开启安全保护模式，设为 no，否则影响远程访问 / 连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;port&lt;/code&gt; ：端口，默认是 26379&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;logfile&lt;/code&gt; ：日志文件路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pidfile&lt;/code&gt; ：pid 文件路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dir&lt;/code&gt; ：工作目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;sentinel monitor &amp;lt;master-name&amp;gt; &amp;lt;master-ip&amp;gt; &amp;lt;master-port&amp;gt; &amp;lt;quorum&amp;gt;&lt;/code&gt; &lt;/strong&gt;：设置哨兵要监控的 master&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;quorum&lt;/code&gt; ：&lt;strong&gt;确认&lt;font color=&#39;cornflowerblue&#39;&gt;客观下线&lt;/font&gt;的最少哨兵数量&lt;/strong&gt;，同意故障迁移的法定&lt;strong&gt;投票数&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sentinel 通过&lt;strong&gt;定时向 master 发出 PING 包&lt;/strong&gt;来确认 master 是否挂掉。&lt;/p&gt;
&lt;p&gt;但网络是不可靠的，有时某个 sentinel 可能因为&lt;strong&gt;网络拥堵&lt;/strong&gt;没收到 master 的响应，从而&lt;strong&gt;误以为 master 已挂掉&lt;/strong&gt;。因此需要多个 sentinel 都一致任务 master 已挂，才可进行主从切换、故障转移，保证了公平性和高可用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sentinel auth-pass &amp;lt;master-name&amp;gt; &amp;lt;password&amp;gt;&lt;/code&gt; ：设置连接 master 服务器的密码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;sentinel down-after-milliseconds &amp;lt;master-name&amp;gt; &amp;lt;milliseconds&amp;gt;&lt;/code&gt; &lt;/strong&gt;：指定如果 master 在多少毫秒之后没有应答 sentinel，sentinel 则主观上认为 master 下线（&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;主观下线&lt;/font&gt;&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sentinel parallel-syncs &amp;lt;master-name&amp;gt; &amp;lt;nums&amp;gt;&lt;/code&gt; ：表示允许并行同步的 slave 个数，当 master 挂了后，哨兵会选出新的 master，此时，剩余的 slave 会向新的 master 发起同步数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sentinel failover-timeout &amp;lt;master-name&amp;gt; &amp;lt;milliseconds&amp;gt;&lt;/code&gt; ：故障转移的超时时间，进行故障转移时，如果超过设置的毫秒，表示故障转移失败&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sentinel notification-script &amp;lt;master-name&amp;gt; &amp;lt;script-path&amp;gt; &lt;/code&gt; ：配置当某一事件发生时所需要执行的脚本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sentinel client-reconfig-script &amp;lt;master-name&amp;gt; &amp;lt;script-path&amp;gt;&lt;/code&gt; ：客户端重新配置 master 参数脚本&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;本次案例中sentinelconf的通用配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本次案例中sentinelconf的通用配置&#34;&gt;#&lt;/a&gt; 本次案例中 sentinel.conf 的通用配置&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808105627695.png&#34; alt=&#34;image-20230808105627695&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由于机器硬件关系，我们的 3 个哨兵都同时配置进 192.168.111.169 同一台机器，即&lt;font color=&#39;red&#39;&gt;3 个哨兵和 master 在一台机器上&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;配置这 3 个哨兵的配置文件：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808104641977.png&#34; alt=&#34;image-20230808104641977&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808104655030.png&#34; alt=&#34;image-20230808104655030&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808104707250.png&#34; alt=&#34;image-20230808104707250&#34; /&gt;&lt;/p&gt;
&lt;p&gt;master 配置文件说明：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808104812771.png&#34; alt=&#34;image-20230808104812771&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;先测试正常的主从复制一主二从&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#先测试正常的主从复制一主二从&#34;&gt;#&lt;/a&gt; 先测试正常的主从复制（一主二从）&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807201752116.png&#34; alt=&#34;image-20230807201752116&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;169 机器上新建 redis6379.conf 配置文件，由于 6379 后续可能会变成从机，需要设置访问新主机的密码， 请设置 masterauth 项访问密码为 111111，不然后续可能报错 master_link_status:down&lt;/li&gt;
&lt;li&gt;172 机器上新建 redis6380.conf 配置文件，设置好 &lt;code&gt;replicaof \&amp;lt;masterip&amp;gt; \&amp;lt;masterport&amp;gt;&lt;/code&gt; ，以及 masterauth 项访问密码为 111111&lt;/li&gt;
&lt;li&gt;173 机器上新建 redis6381.conf 配置文件，设置好 &lt;code&gt;replicaof \&amp;lt;masterip&amp;gt; \&amp;lt;masterport&amp;gt;&lt;/code&gt; ，以及 masterauth 项访问密码为 111111&lt;/li&gt;
&lt;li&gt;启动 3 台机器实例：
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;redis-cli -a 111111 -p 6379&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis-cli -a 111111 -p 6380&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis-cli -a 111111 -p 6381&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;哨兵来了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哨兵来了&#34;&gt;#&lt;/a&gt; 哨兵来了！&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;sentinel 之间通过 master 来获取：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slave 信息&lt;/li&gt;
&lt;li&gt;其他 sentinel 信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从而实现通信。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 master（6379）这台机器上&lt;font color=&#39;red&#39;&gt;启动 3 个 sentinel&lt;/font&gt;（26379/26380/26381），完成监控&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;redis-sentinel sentinel26379.conf --sentinel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis-sentinel sentinel26380.conf --sentinel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis-sentinel sentinel26381.conf --sentinel&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808110202022.png&#34; alt=&#34;image-20230808110202022&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808110255818.png&#34; alt=&#34;image-20230808110255818&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看哨兵的日志文件 &lt;code&gt;sentinel26379.log&lt;/code&gt; ，可以看到&lt;font color=&#39;red&#39;&gt;当前 sentinel 的信息&lt;/font&gt;、&lt;font color=&#39;red&#39;&gt;所监控 master 以及 slave 的信息&lt;/font&gt;、&lt;font color=&#39;red&#39;&gt;其他 sentinel 的信息&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808111127304.png&#34; alt=&#34;image-20230808111127304&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再测试一次主从复制，木有问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;master挂了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#master挂了&#34;&gt;#&lt;/a&gt; master 挂了！&lt;/h4&gt;
&lt;p&gt;通过命令 &lt;code&gt;SHUTDOWN&lt;/code&gt;  手动关闭 6379 服务器，模拟 master 挂掉。&lt;/p&gt;
&lt;p&gt;思考以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题 1：&lt;font color=&#39;red&#39;&gt;两台 slave 上的数据还 OK！&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题 2：** 会从这两台 slave 上选出新的 master！** 具体信息可查看 sentinel 的 log 文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在此过程中，哨兵配置文件 &lt;code&gt;sentinel.conf&lt;/code&gt;  中会自动生成内容信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题 3：&lt;strong&gt;down 机的旧 master 重启归来，也只能拜认新 master，作它的 slave！&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 master6379 宕机后，会出现两种错误：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Error：Server closed the connection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Error：Broken pipe&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;broken pipe&lt;/strong&gt;：pipe 是管道的意思，管道里面是数据流，通常是从文件或网络套接字读取的数据。&lt;font color=&#39;red&#39;&gt;当该管道从另一端突然关闭时，会发生数据突然中断&lt;/font&gt;，即是 broken，对于 socket 来说，可能是网络被拔出或另一端的进程崩溃。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何解决&lt;/strong&gt;：当该异常产生的时候，&lt;font color=&#39;red&#39;&gt;对于服务端来说，并没有多少影响&lt;/font&gt;。因为可能是某个客户端突然中止了进程导致了该错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：这个异常是&lt;font color=&#39;red&#39;&gt;客户端读取超时&lt;/font&gt;关闭了连接，这时候服务器端再向客户端已经断开的连接写数据时就发生了 broken pipe 异常！&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808113740061.png&#34; alt=&#34;image-20230808113740061&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对本次案例，分析谁是 master：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;6381 被选为新 master，上位成功&lt;/li&gt;
&lt;li&gt;以前的 6379 从 master 降级变成了 slave&lt;/li&gt;
&lt;li&gt;6380 还是 slave，只不过换了个新老大 6381 (6379 变 6381)，6380 还是 slave&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;对比新老master的配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对比新老master的配置文件&#34;&gt;#&lt;/a&gt; 对比新老 master 的配置文件&lt;/h4&gt;
&lt;p&gt;旧 master  &lt;code&gt;redis6379.conf&lt;/code&gt;  中会自动生成以下内容，让 6379 去做 6381 的 slave：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808115231877.png&#34; alt=&#34;image-20230808115231877&#34; /&gt;&lt;/p&gt;
&lt;p&gt;新 master  &lt;code&gt;redis6381.conf&lt;/code&gt;  中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动删掉 &lt;code&gt;replicaof&lt;/code&gt;  参数的配置&lt;/li&gt;
&lt;li&gt;自动生成以下内容：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;conf 文件的内容会被 sentinel 动态更改&lt;/li&gt;
&lt;li&gt;Master-Slave 切换后，master_redis.conf、slave_redis.conf 和 sentinel.conf 的内容都会发生改变，即&lt;font color=&#39;red&#39;&gt;master_redis.conf 中会多一行 slaveof 的配置&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;sentinel.conf 的监控目标会随之调换&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;其他备注&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他备注&#34;&gt;#&lt;/a&gt; 其他备注&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;生产都是不同机房不同服务器，&lt;strong&gt;很少出现哨兵全挂掉的情况&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以同时监控多个 master&lt;/strong&gt;，一行一个&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;哨兵运行流程-选举原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哨兵运行流程-选举原理&#34;&gt;#&lt;/a&gt; &lt;mark&gt;哨兵运行流程、选举原理&lt;/mark&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;面试重点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当一个主从配置中的 master 失效之后，sentinel 可以从 slave 中选举出一个新的 master，用于接替原 master 的工作。&lt;/p&gt;
&lt;p&gt;主从配置中的&lt;font color=&#39;red&#39;&gt;其他 redis 服务器自动指向新的 master 同步数据&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;一般&lt;font color=&#39;red&#39;&gt;建议 sentinel 采取奇数台&lt;/font&gt;，一是防止某一台 sentinel 无法连接到 master 导致误切换，二是利于投票选举。&lt;/p&gt;
&lt;p&gt;故障切换的流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;3 个 sentinel 监控一 master 二 slave，正常运行中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808161905591.png&#34; alt=&#34;image-20230808161905591&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;SDown 主观下线（Subjectively Down）&lt;/font&gt;&lt;/strong&gt;：指的是&lt;font color=&#39;red&#39;&gt;单个 Sentinel 实例&lt;/font&gt;对 master 服务器做出的下线判断（有可能是接收不到订阅，之间的网络不通等等原因）。如果 master 服务器在 [ &lt;code&gt;sentinel down-after-milliseconds&lt;/code&gt; ] 给定的毫秒数之内没有回应 PING 命令或者返回一个错误消息，那么这个 Sentinel 会主观的 (&lt;font color=&#39;red&#39;&gt;单方面的&lt;/font&gt;) 认为这个 master 不可以用了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sentinel 配置文件中的 &lt;code&gt;sentinel down-after-milliseconds &amp;lt;masterName&amp;gt; &amp;lt;timeout&amp;gt;&lt;/code&gt;  设置了判断主观下线的时间长度，表示 master 被当前 sentinel 实例认定为失效的间隔时间。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808162539926.png&#34; alt=&#34;image-20230808162539926&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;ODown 客观下线（Objectively Down）&lt;/font&gt;&lt;/strong&gt;：需要一定数量的 sentinel，&lt;font color=&#39;red&#39;&gt;多个哨兵达成一致意见&lt;/font&gt;才能认为一个 master 客观上已经宕掉。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808162827271.png&#34; alt=&#34;image-20230808162827271&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;master-name&lt;/code&gt;  是对某个 master+slave 组合的一个区分标识 (一套 sentinel 可以监听多组 master+slave 这样的组合)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;quorum&lt;/code&gt;  这个参数是进行客观下线的一个依据&lt;/strong&gt;，即法定人数 / 法定票数。意思是至少有 quorum 个 sentinel 认为这个 master 有故障才会对这个 master 进行下线以及故障转移。因为有的时候，某个 sentinel 节点可能因为自身网络原因导致无法连接 master，而此时 master 并没有出现故障，所以这就需要多个 sentinel 都一致认为该 master 有问题，才可以进行下一步操作，这就保证了公平性和高可用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从哨兵中选出&lt;strong&gt;兵王&lt;/strong&gt;：当 master 被判断 ODown 以后，各个 sentinel 节点会进行协商，先通过&lt;font color=&#39;orange&#39;&gt;Raft 算法&lt;/font&gt;选举出一个兵王，&lt;font color=&#39;red&#39;&gt;由它进行 failover (故障迁移)&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;监视该主节点的所有哨兵都有可能被选为领导者，选举使用的算法是 Raft 算法，其基本思路是 **&lt;font color=&#39;red&#39;&gt;先到先得&lt;/font&gt;**：即在一轮选举中，哨兵 A 向 B 发送成为领导者的申请，如果 B 没有同意过其他哨兵，则会同意 A 成为领导者。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808164314705.png&#34; alt=&#34;image-20230808164314705&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从三个 sentinel 实例的 log 文件中可以看见兵王的诞生过程以及兵王执行故障迁移的过程：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808163922904.png&#34; alt=&#34;image-20230808163922904&#34; /&gt;&lt;/p&gt;
&lt;center&gt;sentinel26379.log&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808163958440.png&#34; alt=&#34;image-20230808163958440&#34; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;font color=&#39;red&#39;&gt;sentinel26380.log&lt;/font&gt;&lt;/font&gt;&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808164037410.png&#34; alt=&#34;image-20230808164037410&#34; /&gt;&lt;/p&gt;
&lt;center&gt;sentinel26381.log&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;orange&#39;&gt;兵王开始故障切换，选举新的 master&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;新主登基&lt;/strong&gt;：**&lt;font color=&#39;orange&#39;&gt;新 master 选举算法&lt;/font&gt;** 如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;优先级高&lt;/font&gt;：所有 slave 中，根据 redis.conf 配置文件中的优先级 &lt;code&gt;slave-priority&lt;/code&gt;  或者 &lt;code&gt;replica-priority&lt;/code&gt; ，选择优先级最高的 slave 作为新 master。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数字越小优先级越高&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808170206385.png&#34; alt=&#34;image-20230808170206385&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;复制偏移大&lt;/font&gt;：所有 slave 中，根据复制偏移位置 &lt;code&gt;offset&lt;/code&gt; ，该值最大的 slave 作为新 master。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;Run ID 小&lt;/font&gt;：所有 slave 中，选择 Run ID 最小的 slave 作为新 master，是按照字典顺序，ASCII 码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808165640759.png&#34; alt=&#34;image-20230808165640759&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;群臣俯首&lt;/strong&gt;：一朝天子一朝臣，换个码头重新拜&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sentinel leader 会对选举出的 slave 执行 &lt;code&gt;SLAVEOF NO ONE&lt;/code&gt;  命令，将其提拔为新 master&lt;/li&gt;
&lt;li&gt;Sentinel leader 向其余 slave 发送 &lt;code&gt;SLAVEOF&lt;/code&gt;  命令，使它们成为新 master 的 slave&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;旧主拜服&lt;/strong&gt;：老 master 回来也认怂&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;老 master 成为新 master 的 slave&lt;/li&gt;
&lt;li&gt;Sentinel leader 会让老 master 降级为 slave，并恢复正常工作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总结：上述 failover（故障迁移）均由 sentinel 独自完成，无需人工干预，因此称之为&lt;strong&gt;无人值守安装&lt;/strong&gt;！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;哨兵使用建议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哨兵使用建议&#34;&gt;#&lt;/a&gt; 哨兵使用建议&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;哨兵的数量应为多个且奇数&lt;/strong&gt;。哨兵本身应该集群，保证高可用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;各个哨兵的配置应一致&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果哨兵部署在 Docker 等容器里面，尤其要&lt;font color=&#39;red&#39;&gt;注意端口的正确映射&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;主从复制 + 哨兵&lt;/code&gt; 机制&lt;strong&gt;并不能确保数据零丢失&lt;/strong&gt;。因为从 master 挂掉到选举出新 master 的这段时间内，无法执行写命令！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引出&lt;strong&gt;集群&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;10-redis集群cluster&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10-redis集群cluster&#34;&gt;#&lt;/a&gt; &lt;mark&gt;10、Redis 集群（cluster）&lt;/mark&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;我尼玛又白雪，&lt;strong&gt;集群才是 yyds！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;简介-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-9&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;由于数据量过大&lt;/font&gt;&lt;/strong&gt;，&lt;font color=&#39;red&#39;&gt;单个 Master 复制集&lt;/font&gt;难以承担，因此需要对多个复制集进行集群，形成&lt;font color=&#39;red&#39;&gt;水平扩展&lt;/font&gt;每个复制集&lt;font color=&#39;red&#39;&gt;只负责存储整个数据集的一部分&lt;/font&gt;，这就是 Redis 的集群。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808220609079.png&#34; alt=&#34;image-20230808220609079&#34; /&gt;&lt;/p&gt;
&lt;p&gt;总之，Redis 集群是&lt;font color=&#39;red&#39;&gt;一个提供在多个 Redis 节点间共享数据的程序集&lt;/font&gt;。其功能总结如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;支持多个 Master&lt;/strong&gt;，每个 Master 又可以挂载多个 Slave。
&lt;ul&gt;
&lt;li&gt;读写分离&lt;/li&gt;
&lt;li&gt;支持数据的高可用&lt;/li&gt;
&lt;li&gt;支持海量数据的读写存储操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自带 failover（故障转移）机制&lt;/strong&gt;，内置了高可用的支持，&lt;font color=&#39;red&#39;&gt;无需再去使用哨兵功能&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端只需连接集群中的任意一个可用 Master 节点即可&lt;/strong&gt;，不需要连接集群中的所有 Master 节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;槽位 slot&lt;/strong&gt; 负责分配到各个物理服务节点，由对应的集群来负责&lt;strong&gt;维护 Redis 节点、插槽、数据之间的关系&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集群算法-分片-槽位slot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群算法-分片-槽位slot&#34;&gt;#&lt;/a&gt; 集群算法、分片、槽位 slot&lt;/h3&gt;
&lt;h4 id=&#34;官网介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#官网介绍&#34;&gt;#&lt;/a&gt; 官网介绍&lt;/h4&gt;
&lt;p&gt;Redis 集群的 key 空间被划分为&lt;strong&gt; 16384 个插槽 slot&lt;/strong&gt;，有效地设置了 16384 个 master 节点的集群大小上限（然而，&lt;strong&gt;master 节点的最大数量建议为 1000&lt;/strong&gt;）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;插槽，也称哈希槽&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;集群中的&lt;font color=&#39;red&#39;&gt;每个 master 节点处理 16384 个哈希槽的子集&lt;/font&gt;。当没有正在进行的集群重新配置时（即哈希槽从一个节点移动到另一个节点），集群是稳定的。当集群稳定时，单个哈希槽将由单个节点提供服务（但是，服务节点可以有一个或多个副本，在网络分裂或故障的情况下，这些副本将替换它，并且可以用于扩展读取过时数据的读取操作）。&lt;/p&gt;
&lt;p&gt;用于将 key 映射到哈希槽的基本算法如下（请阅读下一段以了解此规则的哈希标记异常）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HASH_SLOT = CRC16(key) mod 16384
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;插槽&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插槽&#34;&gt;#&lt;/a&gt; 插槽&lt;/h4&gt;
&lt;p&gt;Redis 集群没有使用一致性哈希算法，而是引入了 &lt;code&gt;hash槽&lt;/code&gt; 的概念。&lt;br /&gt;
Redis 集群有 16384 个哈希槽，&lt;strong&gt;每个 key 通过 &lt;code&gt;CRC16&lt;/code&gt;  校验后，再对 16384 取模来决定放置哪个槽&lt;/strong&gt;。集群的&lt;strong&gt;每个 Redis 节点负责一部分 hash 槽&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;举个例子，比如当前集群有 3 个节点，那么：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809002715513.png&#34; alt=&#34;image-20230809002715513&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;数据分片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据分片&#34;&gt;#&lt;/a&gt; 数据分片&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;数据分片&lt;/code&gt; ：Redis 集群中会&lt;font color=&#39;red&#39;&gt;将存储的数据分散到多台 redis 机器上&lt;/font&gt;。每个 Redis 实例都被认为是整个数据的一个分片。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;如何找到给定 key 的分片？&lt;/font&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对 key 进行&lt;font color=&#39;red&#39;&gt;CRC16(key)&lt;/font&gt;算法处理，并通过对总分片数量&lt;font color=&#39;red&#39;&gt;取模&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;然后，使用&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;确定性哈希函数&lt;/strong&gt;&lt;/font&gt;，这意味着 **&lt;font color=&#39;red&#39;&gt;给定的 key 将始终映射到同一个分片&lt;/font&gt;**，我们可以推断将来读取特定 key 的位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;分片插槽的优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分片插槽的优点&#34;&gt;#&lt;/a&gt; 分片 + 插槽的优点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;方便 Redis 节点的扩容和缩容&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;添加 Redis 节点：比如我想新添加个节点 D，我需要从节点 A，B，C 中移动部分槽到 D 上。&lt;/li&gt;
&lt;li&gt;删除 Redis 节点：如果我想移除节点 A，需要将 A 中的槽移到 B 和 C 节点上，然后将没有任何槽的 A 节点从集群中移除即可。&lt;/li&gt;
&lt;li&gt;由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以&lt;strong&gt;无论添加删除节点，或者改变某个节点的哈希槽的数量都&lt;font color=&#39;red&#39;&gt;不会造成集群不可用的状态&lt;/font&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;方便数据的分派和查找&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;槽位映射的3种方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#槽位映射的3种方案&#34;&gt;#&lt;/a&gt; 槽位映射的 3 种方案&lt;/h4&gt;
&lt;h5 id=&#34;哈希取余分区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈希取余分区&#34;&gt;#&lt;/a&gt; 哈希取余分区&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;小厂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809004525207.png&#34; alt=&#34;image-20230809004525207&#34; /&gt;&lt;/p&gt;
&lt;p&gt;假设有 N 台机器构成一个集群，用户每次对 key 的读写操作都是根据公式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hash(key) % N
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;计算出哈希值，用来决定数据映射到哪一个节点上。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;优点&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单有效。只需要预估好数据规模，规划好节点，就能保证一段时间的数据支撑。&lt;/li&gt;
&lt;li&gt;负载均衡。使用 Hash 算法让固定的一部分请求落到同一台服务器上，这样&lt;font color=&#39;red&#39;&gt;每台服务器固定处理一部分请求&lt;/font&gt;（并维护这些请求的信息）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;缺点&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Redis 节点的扩容 / 缩容麻烦&lt;/strong&gt;。如果需要弹性扩容或故障停机，导致节点有变动，映射关系需要重新进行计算。原来的取模公式就会发生变化： &lt;code&gt;Hash(key)/3&lt;/code&gt;  会变成 &lt;code&gt;Hash(key) /?&lt;/code&gt; 。此时地址经过取余运算的结果将发生很大变化，&lt;font color=&#39;red&#39;&gt;根据公式获取的服务器也会变得不可控&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;某个 Redis 机器宕机了，由于台数数量变化，会导致 hash 取余全部数据重新洗牌。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;一致性哈希算法分区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一致性哈希算法分区&#34;&gt;#&lt;/a&gt; 一致性哈希算法分区&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;一致性：意味着取余的分母是固定的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;设计目标&lt;/font&gt;：为了解决&lt;font color=&#39;red&#39;&gt;分布式缓存数据变动和映射问题&lt;/font&gt;，某个机器宕机了，分母数量改变了，自然取余数不 OK 了。目的是&lt;font color=&#39;red&#39;&gt;当 Redis 服务器个数发生变动时，尽量减少客户端到服务器的映射关系的影响&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;gree&#39;&gt;3 大步骤&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构建一致性哈希环&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;一致性哈希算法必然有个 hash 函数用于产生 hash 值，这个算法的所有可能哈希值会构成一个&lt;font color=&#39;red&#39;&gt;全量集&lt;/font&gt;，这个集合可以成为一个 **&lt;font color=&#39;red&#39;&gt;hash 空间 [0,2&lt;sup&gt;32&lt;/sup&gt;-1]&lt;/font&gt;&lt;strong&gt;，这个是一个线性空间，但是在算法中，我们通过适当的逻辑控制将它&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;首尾相连 (0 = 2&lt;sup&gt;32&lt;/sup&gt;)&lt;/font&gt;**, 这样让它形成了一个&lt;font color=&#39;red&#39;&gt;逻辑上的环形空间&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;它也是按照使用取模的方法，&lt;font color=&#39;red&#39;&gt;前面介绍的是对 Redis 节点的数量进行取模&lt;/font&gt;。而 **&lt;font color=&#39;orange&#39;&gt;一致性 Hash 算法是对 2&lt;sup&gt;32&lt;/sup&gt; 取模&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;简单来说，一致性 Hash 算法将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数的值空间为 [0,2&lt;sup&gt;32&lt;/sup&gt;-1]（即哈希值是一个 32 位无符号整形），整个哈希环如下图：整个空间按顺时针方向组织，圆环的正上方的点代表 0，0 点右侧的第一个点代表 1，以此类推，2、3、4、…… 直到 2&lt;sup&gt;32&lt;/sup&gt;-1，也就是说&lt;font color=&#39;red&#39;&gt;0 点左侧的第一个点代表 2&lt;sup&gt;32&lt;/sup&gt;-1&lt;/font&gt;， 0 和 2&lt;sup&gt;32&lt;/sup&gt;-1 在零点中方向重合，我们把这个 **&lt;font color=&#39;red&#39;&gt;由 2&lt;sup&gt;32&lt;/sup&gt; 个点组成&lt;/font&gt;** 的圆环称为 &lt;code&gt;Hash环&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809010605612.png&#34; alt=&#34;image-20230809010605612&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Redis 服务器节点 IP 映射&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;将集群中各个 Redis 节点的 IP 映射到环上的某一个位置。&lt;/p&gt;
&lt;p&gt;将各个 Redis 服务器的 IP 或主机名作为关键字使用 Hash 进行哈希，这样每台机器就能确定其在哈希环上的位置。假如 4 个 Redis 节点 NodeA、NodeB、NodeC、NodeD，经过&lt;font color=&#39;red&#39;&gt;IP 地址的哈希函数计算 hash (ip)&lt;/font&gt;，使用 IP 地址哈希后在环空间的位置如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809114247849.png&#34; alt=&#34;image-20230809114247849&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;落 key 规则&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;当我们需要存储一个键值对时，&lt;font color=&#39;red&#39;&gt;首先计算 key 的 hash 值，hash (key)&lt;/font&gt;，确定此数据在环上的位置，从此位置沿环 **&lt;font color=&#39;red&#39;&gt;顺时针&lt;/font&gt;**“行走”，&lt;font color=&#39;red&#39;&gt;第一台遇到的 Redis 服务器&lt;/font&gt;就是其应该定位到的服务器，并将该键值对存储在该节点上。&lt;/p&gt;
&lt;p&gt;如我们有 Object A、Object B、Object C、Object D 四个数据对象，经过哈希计算后，在环空间上的位置如下：根据一致性 Hash 算法，Object A 会被定为到 Node A 上，Object B 被定为到 Node B 上，Object C 被定为到 Node C 上，Object D 被定为到 Node D 上。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809114625589.png&#34; alt=&#34;image-20230809114625589&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;优点&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;容错性&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设 Node C 宕机，可以看到此时对象 A、B、D 不会受到影响。一般的，在一致性 Hash 算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响。&lt;font color=&#39;red&#39;&gt;简单说，就是 C 挂了，受到影响的只是 B、C 之间的数据，且这些数据会转移到 D 进行存储&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809115305990.png&#34; alt=&#34;image-20230809115305990&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;扩展性&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;随着数据量的增加，需要增加一台节点 NodeX，位置在 A 和 B 之间，&lt;font color=&#39;red&#39;&gt;那受到影响的也就是 A 到 X 之间的数据，重新把 A 到 X 的数据录入到 X 上即可，不会导致 hash 取余全部数据重新洗牌&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809120153493.png&#34; alt=&#34;image-20230809120153493&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;缺点&lt;/font&gt;：&lt;strong&gt;数据倾斜&lt;/strong&gt;问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在&lt;strong&gt; Redis 服务节点太少时&lt;/strong&gt;，容易因为&lt;font color=&#39;red&#39;&gt;节点分布不均匀&lt;/font&gt;而造成&lt;strong&gt;数据倾斜&lt;/strong&gt;（被缓存的数据对象大部分集中缓存在某一台服务器上）问题。&lt;/p&gt;
&lt;p&gt;例如系统中只有两台服务器：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809120432504.png&#34; alt=&#34;image-20230809120432504&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;小结&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计目标：在 Redis 节点的数目发生改变时，尽可能地减少数据的迁移&lt;/li&gt;
&lt;li&gt;设计思路：将所有的 Redis 节点排列在首尾相接的 Hash 环上，每个 key 在计算 Hash 后会&lt;font color=&#39;red&#39;&gt;顺时针&lt;/font&gt;找到临近的 Redis 节点存放。而当有 Redis 节点加入或退出时仅影响该节点在 Hash 环上&lt;font color=&#39;red&#39;&gt;顺时针相邻的后续节点&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;优点：加入和删除节点只影响哈希环中顺时针方向的相邻的节点，对其他节点无影响。&lt;/li&gt;
&lt;li&gt;缺点：数据的分布和节点的位置有关，因为这些节点不是均匀的分布在哈希环上的，所以数据在进行存储时达不到均匀分布的效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;哈希槽分区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈希槽分区&#34;&gt;#&lt;/a&gt; 哈希槽分区 (√)&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;大厂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;为什么出现&lt;/font&gt;：因为一致性哈希算法具有数据倾斜的问题。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;哈希槽是什么&lt;/font&gt;：哈希槽实质是&lt;font color=&#39;red&#39;&gt;一个数组&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;哈希槽空间为 [0,2&lt;sup&gt;14&lt;/sup&gt;-1]&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2&lt;sup&gt;14&lt;/sup&gt;=16384&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;能干嘛&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决数据分配不均匀的问题&lt;/strong&gt;，在数据和节点之间又加入了一层，把这层称为 &lt;code&gt;哈希槽（slot）&lt;/code&gt; ，用于&lt;font color=&#39;red&#39;&gt;管理数据和节点之间的关系&lt;/font&gt;，现在就相当于节点上放的是槽，槽里放的是数据。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809130342790.png&#34; alt=&#34;image-20230809130342790&#34; /&gt;&lt;/p&gt;
&lt;p&gt;槽解决的是粒度问题，相当于&lt;font color=&#39;red&#39;&gt;把粒度变大了，这样便于数据移动&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;哈希解决的是映射问题，&lt;font color=&#39;red&#39;&gt;使用 key 的哈希值来计算所在的槽，便于数据分配&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;哈希槽的个数&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个集群只能有 16384 个哈希槽&lt;/strong&gt;，编号 0-16383（0-2&lt;sup&gt;14&lt;/sup&gt;-1）。&lt;font color=&#39;red&#39;&gt;这些槽会分配给集群中的所有 master 节点&lt;/font&gt;，分配策略没有要求。&lt;/p&gt;
&lt;p&gt;集群会&lt;font color=&#39;red&#39;&gt;记录 Redis 节点和槽的对应关系&lt;/font&gt;，解决了节点和槽的关系后，接下来就需要&lt;font color=&#39;red&#39;&gt;对 key 求哈希值，然后对 16384 取模&lt;/font&gt;，余数是几 key 就落入对应的槽里。 &lt;code&gt;HASH_SLOT = CRC16(key) mod 16384&lt;/code&gt; 。&lt;font color=&#39;red&#39;&gt;以槽为单位移动数据&lt;/font&gt;，因为槽的数目是固定的，处理起来比较容易，这样数据移动问题就解决了。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;哈希槽计算&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;Redis 集群中内置了 16384 个哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点。当需要在 Redis 集群中放置一个 key-value 时，redis 先对 key 使用 crc16 算法算出一个结果然后用结果对 16384 求余数 [  &lt;code&gt;CRC16(key) % 16384&lt;/code&gt; ]，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，也就是映射到某个节点上。&lt;/p&gt;
&lt;p&gt;如下代码，key 之 A 、B 在 Node2， key 之 C 落在 Node3 上：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Chuawei%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230809131108267.png&#34; alt=&#34;image-20230809131108267&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;经典面试题为什么redis集群的最大哈希槽数目是16384个&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#经典面试题为什么redis集群的最大哈希槽数目是16384个&#34;&gt;#&lt;/a&gt; &lt;mark&gt;经典面试题：为什么 Redis 集群的最大哈希槽数目是 16384 个？&lt;/mark&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;CRC16 算法产生的哈希值有 16bit&lt;/strong&gt;，即 2&lt;sup&gt;16&lt;/sup&gt;=65536 个值，为什么 Redis 集群的算法只采用 2&lt;sup&gt;14&lt;/sup&gt;=16384 个哈希槽？&lt;/font&gt;在进行 mode 运算时，为什么是 &lt;code&gt;HASH_SLOT = CRC16(key) mod 16384&lt;/code&gt;  而不是 &lt;code&gt;HASH_SLOT = CRC16(key) mod 65536&lt;/code&gt; ？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;作者的回复&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809132510614.png&#34; alt=&#34;image-20230809132510614&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;消息头 clusterMsg 的结构&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809132604570.png&#34; alt=&#34;image-20230809132604570&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;gree&#39;&gt;标准回答&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;如果槽位为 65536，发送心跳信息的消息头达 8k，&lt;strong&gt;发送的心跳包过于庞大&lt;/strong&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在消息头中最占空间的是 &lt;code&gt;myslots[CLUSTER_SLOTS/8]&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当槽位为 65536 时，这块的大小是: 65536÷8÷1024=&lt;font color=&#39;red&#39;&gt;8kb&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;当槽位为 16384 时，这块的大小是: 16384÷8÷1024=&lt;font color=&#39;red&#39;&gt;2kb&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为每秒钟 redis 节点需要发送一定数量的 ping 消息作为心跳包，如果槽位为 65536，这个&lt;font color=&#39;red&#39;&gt;ping 消息的消息头太大了，浪费带宽&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;对于基本不可能超过 1000 个 master 节点数量的 redis 集群而言，&lt;strong&gt;16384 个槽位就已经够用了&lt;/strong&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;集群的节点越多，心跳包的消息体内携带的数据越多。如果节点过 1000 个，也会导致网络拥堵。因此 redis 作者不建议 redis cluster 节点数量超过 1000 个。那么，&lt;font color=&#39;red&#39;&gt;对于节点数在 1000 以内的 redis cluster 集群，16384 个槽位够用了&lt;/font&gt;。没有必要拓展到 65536 个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;槽位越小，节点少的情况下，&lt;strong&gt;压缩比高，容易传输&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 的 master 节点的配置信息中它所负责的哈希槽是通过一张 bitmap 的形式来保存的，在传输过程中会对 bitmap 进行压缩，但是&lt;font color=&#39;red&#39;&gt;如果 bitmap 的填充率 slots / N 很高的话 (N 表示节点数)，bitmap 的压缩率就很低&lt;/font&gt;。如果节点数很少，而哈希槽数量很多的话，bitmap 的压缩率就很低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;redis集群不保证强一致性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis集群不保证强一致性&#34;&gt;#&lt;/a&gt; Redis 集群不保证强一致性&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Redis 集群不保证强一致性&lt;/strong&gt;，这意味着在特定的条件下，Redis 集群&lt;font color=&#39;red&#39;&gt;可能会丢掉一些被系统收到的写入请求命令&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;Redis 集群使用&lt;font color=&#39;red&#39;&gt;节点之间的异步复制&lt;/font&gt;，最后一次故障切换隐式合并功能。这意味着&lt;font color=&#39;red&#39;&gt;最后一次选择的主数据会完全替换所有其他副本&lt;/font&gt;。在分区期间，&lt;font color=&#39;red&#39;&gt;总是有一个可能丢失写入的时间窗口&lt;/font&gt;。然而，在连接到大多数主数据的客户端的情况下，这些窗口非常不同，以及与少数 master 有联系的客户。&lt;/p&gt;
&lt;h3 id=&#34;案例演示-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例演示-3&#34;&gt;#&lt;/a&gt; 案例演示&lt;/h3&gt;
&lt;h4 id=&#34;3主3从redis集群配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3主3从redis集群配置&#34;&gt;#&lt;/a&gt; 3 主 3 从 redis 集群配置&lt;/h4&gt;
&lt;p&gt;在 3 台虚拟机上新建 6 个独立的 Redis 实例服务，每台机器上一主一从，&lt;font color=&#39;gree&#39;&gt;设计图&lt;/font&gt;如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/IMG_8445(20230809-135635).JPEG&#34; alt=&#34;IMG_8445(20230809-135635)&#34; /&gt;&lt;/p&gt;
&lt;p&gt;配置这 6 个 Redis 实例的&lt;font color=&#39;gree&#39;&gt;conf 文件&lt;/font&gt;，下面以 6381 为例：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809135942477.png&#34; alt=&#34;image-20230809135942477&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;启动&lt;/font&gt;6 台 Redis 实例，以 6381 为例： &lt;code&gt;redis-server /myredis/cluster/redisCluster6381.conf&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;构建 6 个 Redis 实例的&lt;font color=&#39;gree&#39;&gt;集群关系&lt;/font&gt;，命令如下：&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;redis-cli -a 111111 &lt;br/&gt;&lt;strong&gt;--cluster create&lt;/strong&gt; -&lt;strong&gt;-cluster-replicas 1&lt;/strong&gt; &lt;br/&gt; 192.168.111.175:6381 192.168.111.175:6382 &lt;br/&gt; 192.168.111.172:6383 192.168.111.172:6384 &lt;br/&gt; 192.168.111.174:6385 192.168.111.174:6386&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;--cluster-replicas 1&lt;/code&gt;  表示为每个 master 创建一个 slave 节点，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;主从的实际分配是随机的！&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809141622996.png&#34; alt=&#34;image-20230809141622996&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809141121945.png&#34; alt=&#34;image-20230809141121945&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809141157047.png&#34; alt=&#34;image-20230809141157047&#34; /&gt;&lt;/p&gt;
&lt;p&gt;启动 6381，查看 6381 的&lt;font color=&#39;gree&#39;&gt;主从复制信息&lt;/font&gt; &lt;code&gt;info replication&lt;/code&gt; ：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809141652111.png&#34; alt=&#34;image-20230809141652111&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看 6381 的&lt;font color=&#39;gree&#39;&gt;集群信息&lt;/font&gt; &lt;code&gt;cluster info&lt;/code&gt; ：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809141857437.png&#34; alt=&#34;image-20230809141857437&#34; /&gt;&lt;/p&gt;
&lt;p&gt;再查看集群的&lt;font color=&#39;gree&#39;&gt;节点信息&lt;/font&gt; &lt;code&gt;cluster nodes&lt;/code&gt; ：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809141717499.png&#34; alt=&#34;image-20230809141717499&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;slave 后跟着 master 信息，而 master 后没有 slave 信息。&lt;/p&gt;
&lt;p&gt;目前的主从关系：&lt;/p&gt;
&lt;p&gt;6381 的 slave 是 6384，6383 的 slave 是 6386，6385 的 slave 是 6382。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3主3从redis集群读写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3主3从redis集群读写&#34;&gt;#&lt;/a&gt; 3 主 3 从 redis 集群读写&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;redis-cli -a 111111 -p 6381&lt;/code&gt;  启动 master 6381，并新增 2 个 key：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809143452632.png&#34; alt=&#34;image-20230809143452632&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在设置 k1 时遇到报错，提示 k1 对应的哈希槽是 12706，应该存到 master 6385 上。因此，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;要注意槽位的范围区间，需要将 key 路由到正确的槽位上&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;解决方法&lt;/font&gt;：** 启动 Redis 实例时添加 &lt;code&gt;-c&lt;/code&gt;  参数，表示以集群模式运行，防止路由失效。** 即 &lt;code&gt;redis-cli -a 111111 -p 6381 -c&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809144237468.png&#34; alt=&#34;image-20230809144237468&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此时 key 会&lt;font color=&#39;red&#39;&gt;自动重定向&lt;/font&gt;到对应 Redis 实例的哈希槽上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;查看某个 key 对应的槽位置&lt;/font&gt;： &lt;code&gt;CLUSTER KEYSLOT key&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;主从容错切换迁移failover&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主从容错切换迁移failover&#34;&gt;#&lt;/a&gt; 主从容错切换迁移 (failover)&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809144752893.png&#34; alt=&#34;image-20230809144752893&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;假如 master 6381 宕机，其对应的 slave 6384 会上位成为新的 master&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809145659230.png&#34; alt=&#34;image-20230809145659230&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 6381 重启恢复，自动成为 master 6384 的 slave&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809145905827.png&#34; alt=&#34;image-20230809145905827&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;手动切换主从调整节点从属关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手动切换主从调整节点从属关系&#34;&gt;#&lt;/a&gt; 手动切换主从 / 调整节点从属关系&lt;/h4&gt;
&lt;p&gt;上面一换后 6381、6384 主从对调了，和原始设计图不一样了，该如何恢复原来的主从关系？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重启 6381，执行命令 &lt;code&gt;CLUSTER FAILOVER&lt;/code&gt; ，自动调整 6381 的主从关系&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809150634974.png&#34; alt=&#34;image-20230809150634974&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;主从扩容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主从扩容&#34;&gt;#&lt;/a&gt; 主从扩容&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;三主三从 -&amp;gt; 四主四从&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新 master 加入集群&lt;/li&gt;
&lt;li&gt;重新分配槽号（reshard）&lt;/li&gt;
&lt;li&gt;为新 master 分配 slave&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809151024511.png&#34; alt=&#34;image-20230809151024511&#34; /&gt;&lt;/p&gt;
&lt;p&gt;思考问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何将新机加入原有集群中？&lt;/li&gt;
&lt;li&gt;新机的槽位如何分配？&lt;strong&gt;重新洗牌！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;配置 2 台新机的 redis.conf 文件，以 6387 为例：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809151526914.png&#34; alt=&#34;image-20230809151526914&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动 2 台新机，此时它们都是 master：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809151554375.png&#34; alt=&#34;image-20230809151554375&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将新增的 6387（空槽号）作为&lt;font color=&#39;gree&#39;&gt;master 节点加入原有集群&lt;/font&gt;，执行命令：&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;orange&#39;&gt;redis-cli -a 111111 &lt;br/&gt;--cluster &lt;strong&gt;add-node&lt;/strong&gt; &lt;br/&gt;192.168.111.174:6387 &lt;br/&gt;192.168.111.175:6381&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;6387 就是将要作为&lt;font color=&#39;red&#39;&gt;master 新增节点&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6381 就是原来集群节点里面的&lt;font color=&#39;red&#39;&gt;领路人&lt;/font&gt;，相当于 6387 拜拜 6381 的码头从而找到组织加入集群&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809152412183.png&#34; alt=&#34;image-20230809152412183&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查集群情况，执行命令：&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;orange&#39;&gt;redis-cli -a 111111 &lt;br/&gt;--cluster &lt;strong&gt;check&lt;/strong&gt; &lt;br/&gt;192.168.111.175:6381&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809152820379.png&#34; alt=&#34;image-20230809152820379&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此时新加入的 6387 节点还没分配哈希槽&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;重新分配槽号&lt;/font&gt;，执行命令：&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;orange&#39;&gt;redis-cli -a 密码 &lt;br/&gt;--cluster &lt;strong&gt;reshard&lt;/strong&gt; &lt;br/&gt;192.168.111.175:6381&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809153203484.png&#34; alt=&#34;image-20230809153203484&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809153429470.png&#34; alt=&#34;image-20230809153429470&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再次检查集群情况，执行命令：&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;orange&#39;&gt;redis-cli -a 111111 &lt;br/&gt;--cluster &lt;strong&gt;check&lt;/strong&gt; &lt;br/&gt;192.168.111.175:6381&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809153519681.png&#34; alt=&#34;image-20230809153519681&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此时槽号重新分派完成！但是为什么 6387 是 3 个新的区间，以前的还是连续？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重新分配的成本太高，所以之前的 Redis 节点各自匀出来一部分给新节点&lt;/strong&gt;。从 6381/6383/6385 三个旧节点分别匀出 1364 个坑位给新节点 6387。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为 master 6387&lt;font color=&#39;gree&#39;&gt;分配 slave&lt;/font&gt; 6388，执行命令：&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;orange&#39;&gt;redis-cli -a 密码 &lt;br/&gt;--cluster &lt;strong&gt;add-node&lt;/strong&gt; &lt;br/&gt;ip: 新 slave 端口 ip: 新 master 端口 &lt;br/&gt;&lt;strong&gt;--cluster-slave&lt;/strong&gt; &lt;strong&gt;--cluster-master-id&lt;/strong&gt; &lt;strong&gt;新 master 节点 ID&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;redis-cli -a 111111 &lt;br/&gt;--cluster add-node &lt;br/&gt;192.168.111.174:6388 192.168.111.174:6387 &lt;br/&gt;--cluster-slave --cluster-master-id 4feb6a7ee0ed2b39ff86474cf4189ab2a554a40f&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809154138459.png&#34; alt=&#34;image-20230809154138459&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三次检查集群情况：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809154202088.png&#34; alt=&#34;image-20230809154202088&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此，完成 Redis 集群中的主从扩容：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809154357068.png&#34; alt=&#34;image-20230809154357068&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;主从缩容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主从缩容&#34;&gt;#&lt;/a&gt; 主从缩容&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;四主四从 -&amp;gt; 三主三从&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目的：让 6387、6388 下线&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809160221198.png&#34; alt=&#34;image-20230809160221198&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809155155205.png&#34; alt=&#34;image-20230809155155205&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;检查集群情况，获取 slave 6388 的节点 ID：&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;orange&#39;&gt;redis-cli -a 密码 &lt;br/&gt;--cluster &lt;strong&gt;check&lt;/strong&gt; &lt;br/&gt;192.168.111.174:6388&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809155313502.png&#34; alt=&#34;image-20230809155313502&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从集群中&lt;font color=&#39;gree&#39;&gt;将 slave 6388 删除&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;orange&#39;&gt;redis-cli -a 111111 &lt;br/&gt;--cluster &lt;strong&gt;del-node&lt;/strong&gt; &lt;br/&gt;192.168.111.174:6388 &lt;br/&gt; 218e7b8b4f81be54ff173e4776b4f4faaf7c13da&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809155525228.png&#34; alt=&#34;image-20230809155525228&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查集群情况，发现 slave 6388 被成功删除：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809155602447.png&#34; alt=&#34;image-20230809155602447&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;将 master 6387 的槽号清空&lt;/font&gt;，本例中将其&lt;font color=&#39;gree&#39;&gt;重新分派&lt;/font&gt;给 master 6381：&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;orange&#39;&gt;redis-cli -a 111111 &lt;br/&gt;--cluster &lt;strong&gt;reshard&lt;/strong&gt; &lt;br/&gt;192.168.111.175:6381&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809155839782.png&#34; alt=&#34;image-20230809155839782&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809155856778.png&#34; alt=&#34;image-20230809155856778&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查集群情况：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809155927823.png&#34; alt=&#34;image-20230809155927823&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master 6387 的 4096 个槽位都指给了 master 6381（变成了 8192 个槽位）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;master 6387 变成了 master 6381 的 slave&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除 6387：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809160629562.png&#34; alt=&#34;image-20230809160629562&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查集群情况：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809160704133.png&#34; alt=&#34;image-20230809160704133&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此时 6387/6388 已从集群中移除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时，若再想在 6387 上写数据，会报错：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809160827236.png&#34; alt=&#34;image-20230809160827236&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;通识占位符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通识占位符&#34;&gt;#&lt;/a&gt; 通识占位符&lt;/h3&gt;
&lt;p&gt;痛点：不在同一个 slot 槽位下的&lt;font color=&#39;red&#39;&gt;批操作命令（多键操作）&lt;/font&gt;支持不好。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809161249034.png&#34; alt=&#34;image-20230809161249034&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以通过 &lt;code&gt;通识占位符&amp;#123;&amp;#125;&lt;/code&gt;  来定义同一个 slot 槽位的概念&lt;/strong&gt;，使 key 中&lt;font color=&#39;red&#39;&gt;{} 内相同内容&lt;/font&gt;的键值对&lt;font color=&#39;red&#39;&gt;放到一个 slot 槽位&lt;/font&gt;去，对照下图类似 k1、k2、k3 都映射为 x，自然槽位一样：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809161554065.png&#34; alt=&#34;image-20230809161554065&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;crc16算法分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#crc16算法分析&#34;&gt;#&lt;/a&gt; CRC16 算法分析&lt;/h3&gt;
&lt;p&gt;Redis 集群有 16384 个哈希槽，每个 key 通过 CRC16 校验后对 16384 取模来决定放置哪个槽。集群的每个节点负责一部分 hash 槽。&lt;/p&gt;
&lt;p&gt;下面浅析 CRC16 算法的源码，源码文件是 &lt;code&gt;cluster.c&lt;/code&gt; ：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809161758328.png&#34; alt=&#34;image-20230809161758328&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;集群中的常用配置与命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群中的常用配置与命令&#34;&gt;#&lt;/a&gt; 集群中的常用配置与命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;配置参数 &lt;code&gt;cluster-require-full-coverage&lt;/code&gt; ：&lt;strong&gt;集群是否完整时才能对外提供服务&lt;/strong&gt;，默认为 yes。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809162230541.png&#34; alt=&#34;image-20230809162230541&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在集群架构是 3 主 3 从，由 3 个 master 平分 16384 个 slot，每个 master 的小集群负责 1/3 的 slot，对应一部分数据。&lt;/p&gt;
&lt;p&gt;通常情况，如果这 3 个小集群中，任何一个（1 主 1 从）挂了，你这个集群对外可提供的数据只有 2/3 了，整个集群是不完整的，redis 默认在这种情况下，是不会对外提供服务的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令 &lt;code&gt;CLUSTER COUNTKEYSINSLOT slotindex&lt;/code&gt; ：&lt;strong&gt;查看第 &lt;code&gt;slotindex&lt;/code&gt;  号槽位上的 key 数量&lt;/strong&gt;，空则返回 0。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809162506376.png&#34; alt=&#34;image-20230809162506376&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令 &lt;code&gt;CLUSTER KEYSLOT key&lt;/code&gt; ：&lt;strong&gt;查看 &lt;code&gt;key&lt;/code&gt;  应该存放的槽位号&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809162815558.png&#34; alt=&#34;image-20230809162815558&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;11-springboot集成redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-springboot集成redis&#34;&gt;#&lt;/a&gt; 11、SpringBoot 集成 Redis&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;前面都是通过&lt;font color=&#39;red&#39;&gt;命令&lt;/font&gt;与 Redis 交互，实际生产中更多是通过&lt;font color=&#39;red&#39;&gt;Java 程序&lt;/font&gt;来操作 Redis。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;整体概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整体概述&#34;&gt;#&lt;/a&gt; 整体概述&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;对比 Jedis、lettuce、RedisTemplate&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java 连接 MySQL 的驱动中间件是 JDBC，那么 Java 连接 Redis 所需要的驱动中间件有哪些呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jedis：一代目，老牌，线程池不安全&lt;/li&gt;
&lt;li&gt;lettuce：二代目，对 Jedis 的优化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RedisTemplate&lt;/strong&gt;：三代目，对 lettuce 进行封装&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;本地java连接redis的常见问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地java连接redis的常见问题&#34;&gt;#&lt;/a&gt; 本地 Java 连接 Redis 的常见问题&lt;/h3&gt;
&lt;p&gt;以下问题可能会导致 Java 程序无法远程连接 Redis：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis.conf 中的 bind 配置请注释掉&lt;/li&gt;
&lt;li&gt;redis.conf 中的保护模式设置为 no&lt;/li&gt;
&lt;li&gt;Linux 系统的防火墙设置&lt;/li&gt;
&lt;li&gt;redis 服务器的 IP 地址和密码是否正确&lt;/li&gt;
&lt;li&gt;忘记写访问 redis 的服务端口号和 auth 密码&lt;/li&gt;
&lt;li&gt;无脑粘贴脑图笔记......o (...T) o&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集成jedis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集成jedis&#34;&gt;#&lt;/a&gt; 集成 Jedis&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Jedis Client&lt;/code&gt;  是 Redis 官网推荐的一个面向 java 客户端，库文件实现了对各类 API 进行封装调用。&lt;/p&gt;
&lt;p&gt;集成 Jedis 的步骤如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;约定＞配置＞编码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建 Module&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 POM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写 YML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主启动&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;atguigu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;boot&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SpringApplication&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;boot&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;autoconfigure&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @auther zzyy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @create 2022-11-17 16:36&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Redis7Study7777&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Redis7Study7777&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;业务类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过指定 ip 和 port 获得 connection 对象&lt;/li&gt;
&lt;li&gt;指定访问服务器的密码&lt;/li&gt;
&lt;li&gt;得到 Jedis 客户端后，即可访问 redis&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Slf4j&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;JedisDemo&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Jedis&lt;/span&gt; jedis &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Jedis&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;192.168.111.185&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        jedis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;auth&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;111111&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;redis conn status:&amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;连接成功&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;redis ping retvalue:&amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;jedis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ping&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        jedis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;k1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;jedis&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;k1 value:&amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;jedis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;k1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;集成lettuce&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集成lettuce&#34;&gt;#&lt;/a&gt; 集成 lettuce&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;我来人间一趟，本想光芒万丈，奈何 springboot 太强，刚出生就被团灭！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lettuce 是一个 Redis 的 Java 驱动包，翻译为生菜。&lt;/p&gt;
&lt;p&gt;lettuce 与 Jedis 的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jedis 连接 Redis 时，&lt;font color=&#39;red&#39;&gt;每个线程都要创建 Jedis 实例，开销大&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Jedis 是线程不安全的&lt;/font&gt;，一个线程通过 Jedis 实例更改 Redis 服务器中的数据之后，会影响另一个线程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lettuce 底层使用的是 Netty&lt;/strong&gt;，当有多个线程都需要连接 Redis 服务器的时候，可以保证&lt;font color=&#39;red&#39;&gt;只创建一个 Lettuce 连接&lt;/font&gt;，使&lt;font color=&#39;red&#39;&gt;所有的线程共享&lt;/font&gt;这一个 Lettuce 连接，这样可以减少创建关闭一个 Lettuce 连接时候的开销。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这种方式也是&lt;font color=&#39;red&#39;&gt;线程安全&lt;/font&gt;的，不会出现一个线程通过 Lettuce 更改 Redis 服务器中的数据之后而影响另一个线程的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因此，&lt;font color=&#39;red&#39;&gt;在 SpringBoot2.0 之后默认都是使用的 Lettuce&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;修改 POM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写业务类&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;atguigu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis7&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;test&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;core&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RedisClient&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;core&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RedisFuture&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;core&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RedisURI&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;core&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SortArgs&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;core&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;api&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;StatefulRedisConnection&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;core&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;api&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;async&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RedisAsyncCommands&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;core&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;api&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sync&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RedisCommands&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;lombok&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;extern&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;slf4j&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Slf4j&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HashMap&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concurrent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ExecutionException&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @auther zzyy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @create 2022-11-17 17:05&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Slf4j&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;LettuceDemo&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 使用构建器（链式编程） RedisURI.builder&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;RedisURI&lt;/span&gt; uri &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RedisURI&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;redis&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;192.168.111.181&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;withPort&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;withAuthentication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;default&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;111111&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 创建连接客户端&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;RedisClient&lt;/span&gt; client &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RedisClient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;uri&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;StatefulRedisConnection&lt;/span&gt; conn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 操作命令 api&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;RedisCommands&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; commands &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; conn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//keys&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; list &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; commands&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;*&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; list&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;key:&amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//String&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    commands&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;k1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1111&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; s1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; commands&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;k1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;String s ===&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;s1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//list&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    commands&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;lpush&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;myList2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;v1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;v2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;v3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; list2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; commands&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;lrange&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;myList2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; list2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;list ssss===&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//set&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    commands&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sadd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;mySet2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;v1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;v2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;v3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; set &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; commands&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;smembers&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;mySet2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; set&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;set ssss===&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//hash&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; map &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;k1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;138xxxxxxxx&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;k2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;atguigu&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;k3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;zzyybs@126.com&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 课后有问题请给我发邮件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    commands&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hmset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;myHash2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; map&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; retMap &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; commands&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hgetall&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;myHash2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; k &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; retMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keySet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hash  k=&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;k&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34; , v==&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;retMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//zset&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    commands&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;zadd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;myZset2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;s1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;110.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;s2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;90.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;s3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; list3 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; commands&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;zrange&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;myZset2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; list3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;zset ssss===&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//sort&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;SortArgs&lt;/span&gt; sortArgs &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SortArgs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sortArgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;alpha&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sortArgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; list4 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; commands&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;myList2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;sortArgs&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; list4&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;sort ssss===&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 关闭&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        conn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;集成redistemplate推荐&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集成redistemplate推荐&#34;&gt;#&lt;/a&gt; &lt;mark&gt;集成 RedisTemplate（推荐）&lt;/mark&gt;&lt;/h3&gt;
&lt;h4 id=&#34;连接单机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接单机&#34;&gt;#&lt;/a&gt; 连接单机&lt;/h4&gt;
&lt;h5 id=&#34;boot整合redis基础演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#boot整合redis基础演示&#34;&gt;#&lt;/a&gt; boot 整合 Redis 基础演示&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建 Module&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 POM： &lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt;  包（依赖于 lettuce 包）和 &lt;code&gt;commons-pool2&lt;/code&gt;  包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写 YML&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;==============redis单机==================&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring.redis.database=0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 修改为自己真实 IP&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring.redis.host=192.168.111.185&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring.redis.port=6379&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring.redis.password=111111&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# lettuce 连接池&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring.redis.lettuce.pool.max&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;active=8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring.redis.lettuce.pool.max&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;wait=&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;1ms&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring.redis.lettuce.pool.max&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;idle=8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring.redis.lettuce.pool.min&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;idle=0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主启动&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Redis7Study7777&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Redis7Study7777&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;业务类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;配置类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RedisConfig&lt;/li&gt;
&lt;li&gt;SwaggerConfig&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;service&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Service&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Slf4j&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;OrderService&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;ORDER_KEY&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;order:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Resource&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RedisTemplate&lt;/span&gt; redisTemplate&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;addOrder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; keyId &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadLocalRandom&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; orderNo &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;randomUUID&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        redisTemplate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;opsForValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;ORDER_KEY&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;keyId&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;京东订单&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; orderNo&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;=====&gt;编号&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;keyId&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;的订单流水生成:&amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;orderNo&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getOrderById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;redisTemplate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;opsForValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;ORDER_KEY&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;controller&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Api&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tags &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;订单接口&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@RestController&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Slf4j&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;OrderController&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Resource&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;OrderService&lt;/span&gt; orderService&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@ApiOperation&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;新增订单&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/order/add&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;method &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RequestMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;POST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;addOrder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        orderService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addOrder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@ApiOperation&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;按orderId查订单信息&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/order/&amp;#123;id&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; method &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RequestMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;findUserById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@PathVariable&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; orderService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOrderById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;swagger&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;序列化问题&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809211944574.png&#34; alt=&#34;image-20230809211944574&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809212145565.png&#34; alt=&#34;image-20230809212145565&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Chuawei%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230809212339643.png&#34; alt=&#34;image-20230809212339643&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案 1&lt;/strong&gt;：将 &lt;code&gt;RedisTemplate&lt;/code&gt;  对象替换为 &lt;code&gt;StringRedisTemplate&lt;/code&gt;  对象。此时除了 Redis 命令行中仍然显示中文乱码外，在 swagger、服务器中的返回值都没有乱码的问题了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;解决方案 2-1&lt;/font&gt;&lt;/strong&gt;：&lt;strong&gt;启动 Redis 时添加参数 &lt;code&gt;--raw&lt;/code&gt;  解决 Redis 服务器端显示乱码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;解决方案 2-2&lt;/font&gt;&lt;/strong&gt;：看下源码  &lt;code&gt;RedisTemplate&lt;/code&gt; # &lt;code&gt;afterPropertiesSet()&lt;/code&gt;  发现在默认情况下，RedisTemplate 使用的数据列化方式是 &lt;code&gt;JdkSerializationRedisSerializer&lt;/code&gt; ，也就是导致乱码的罪魁祸首！解决方法就是 **&lt;font color=&#39;orange&#39;&gt;编写 RedisConfig 配置类，指定序列化器&lt;/font&gt;**！&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Configuration&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RedisConfig&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * redis 序列化的工具配置类，下面这个请一定开启配置&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 127.0.0.1:6379&gt; keys *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 1) &#34;ord:102&#34;  序列化过&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 2) &#34;\xac\xed\x00\x05t\x00\aord:102&#34;   野生，没有序列化过&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * this.redisTemplate.opsForValue (); // 提供了操作 string 类型的所有方法&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * this.redisTemplate.opsForList (); // 提供了操作 list 类型的所有方法&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * this.redisTemplate.opsForSet (); // 提供了操作 set 的所有方法&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * this.redisTemplate.opsForHash (); // 提供了操作 hash 表的所有方法&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * this.redisTemplate.opsForZSet (); // 提供了操作 zset 的所有方法&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @param lettuceConnectionFactory&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @return&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Bean&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RedisTemplate&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;redisTemplate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;LettuceConnectionFactory&lt;/span&gt; lettuceConnectionFactory&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;RedisTemplate&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; redisTemplate &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RedisTemplate&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        redisTemplate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setConnectionFactory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;lettuceConnectionFactory&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 设置 key 序列化方式 string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        redisTemplate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setKeySerializer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;StringRedisSerializer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 设置 value 的序列化方式 json，使用 GenericJackson2JsonRedisSerializer 替换默认序列化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        redisTemplate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setValueSerializer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GenericJackson2JsonRedisSerializer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        redisTemplate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setHashKeySerializer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;StringRedisSerializer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        redisTemplate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setHashValueSerializer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GenericJackson2JsonRedisSerializer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        redisTemplate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; redisTemplate&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;调用其他命令api家庭作业&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调用其他命令api家庭作业&#34;&gt;#&lt;/a&gt; 调用其他命令 api（家庭作业）&lt;/h5&gt;
&lt;h4 id=&#34;连接集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接集群&#34;&gt;#&lt;/a&gt; 连接集群&lt;/h4&gt;
&lt;h5 id=&#34;步骤演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤演示&#34;&gt;#&lt;/a&gt; 步骤演示&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;启动 Redis 集群的 6 台实例（三主三从）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;改写 YML&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;redis集群&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;password&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;111111&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# 获取失败 最大重定向次数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cluster&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;redirects&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;active&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;wait&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;ms&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;idle&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;min&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;idle&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cluster&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nodes&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.111&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.175&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6381&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.111&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.175&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6382&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.111&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.172&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6383&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.111&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.172&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6384&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.111&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.174&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6385&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.111&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.174&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6386&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过微服务访问 redis 集群：一切 ok&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;故障转移时的经典问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#故障转移时的经典问题&#34;&gt;#&lt;/a&gt; 故障转移时的经典问题&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;人为模拟 master 6381 机器意外宕机，手动 shutdown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对 redis 集群命令方式，手动验证各种读写命令，slave 6384 成功上位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;&lt;u&gt;Redis 侧的集群&lt;/u&gt;能自动感知并完成主从切换&lt;/font&gt;，对应的 slave 6384 会被选举为新的 master&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;微服务客户端&lt;/u&gt;再次读写访问，发现连接不上 master 6381！&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;SpringBoot 客户端没有动态感知到 Redis 集群的最新集群信息&lt;/font&gt;。当 master 宕机主从切换成功，redis 手动 OK，但是有 **&lt;font color=&#39;red&#39;&gt;2 个经典故障&lt;/font&gt;**：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809214444224.png&#34; alt=&#34;image-20230809214444224&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;报错：命令超时 1 分钟！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Chuawei%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230809214514675.png&#34; alt=&#34;image-20230809214514675&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;报错：无法连接 6381！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;根本原因&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;SpringBoot 2.X 版本，Redis 默认的连接池采用 Lettuce。当 Redis 集群节点发生变化后，Letture 默认是不会刷新节点拓扑&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;gree&#39;&gt;解决方案&lt;/font&gt;：&lt;font color=&#39;orange&#39;&gt;刷新节点集群拓扑动态感应&lt;/font&gt;。&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;修改 YML 中的两个配置项即可&lt;/font&gt;！&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809214957793.png&#34; alt=&#34;image-20230809214957793&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;修改 YML&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;redis集群&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;password&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;111111&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# 获取失败 最大重定向次数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cluster&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;redirects&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;active&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;wait&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;ms&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;idle&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;min&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;idle&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# 支持集群拓扑动态感应刷新&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;自适应拓扑刷新是否使用所有可用的更新，默认&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;关闭&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cluster&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;refresh&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;adaptive&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# 定时刷新&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lettuce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cluster&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;refresh&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;period&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;redis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cluster&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nodes&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.111&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.175&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6381&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.111&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.175&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6382&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.111&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.172&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6383&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.111&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.172&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6384&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.111&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.174&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6385&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.111&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.174&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6386&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;高级篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高级篇&#34;&gt;#&lt;/a&gt; 高级篇&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;前置技术要求：微服务（boot、cloud）+ docker + Nginx + JUC + Jmeter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-redis的单线程与多线程入门篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-redis的单线程与多线程入门篇&#34;&gt;#&lt;/a&gt; 1、Redis 的单线程与多线程 (入门篇)&lt;/h2&gt;
&lt;h2 id=&#34;2-bigkey&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-bigkey&#34;&gt;#&lt;/a&gt; 2、BigKey&lt;/h2&gt;
&lt;h2 id=&#34;3-缓存双写一致性之更新策略探讨&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-缓存双写一致性之更新策略探讨&#34;&gt;#&lt;/a&gt; 3、缓存双写一致性之更新策略探讨&lt;/h2&gt;
&lt;h2 id=&#34;4-redis与mysql数据双写一致性工程落地案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-redis与mysql数据双写一致性工程落地案例&#34;&gt;#&lt;/a&gt; 4、Redis 与 MySQL 数据双写一致性工程落地案例&lt;/h2&gt;
&lt;h2 id=&#34;5-案例落地实战bitmaphyperlogloggeo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-案例落地实战bitmaphyperlogloggeo&#34;&gt;#&lt;/a&gt; 5、案例落地实战 bitmap/HyperLogLog/GEO&lt;/h2&gt;
&lt;h2 id=&#34;6-布隆过滤器bloomfilter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-布隆过滤器bloomfilter&#34;&gt;#&lt;/a&gt; 6、布隆过滤器 BloomFilter&lt;/h2&gt;
&lt;h2 id=&#34;7-缓存预热缓存雪崩缓存击穿缓存穿透&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-缓存预热缓存雪崩缓存击穿缓存穿透&#34;&gt;#&lt;/a&gt; 7、缓存预热 + 缓存雪崩 + 缓存击穿 + 缓存穿透&lt;/h2&gt;
&lt;h2 id=&#34;8-手写redis分布式锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-手写redis分布式锁&#34;&gt;#&lt;/a&gt; 8、手写 Redis 分布式锁&lt;/h2&gt;
&lt;h2 id=&#34;9-redlock算法和底层源码分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9-redlock算法和底层源码分析&#34;&gt;#&lt;/a&gt; 9、Redlock 算法和底层源码分析&lt;/h2&gt;
&lt;h2 id=&#34;10-redis经典五大类型源码及底层实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10-redis经典五大类型源码及底层实现&#34;&gt;#&lt;/a&gt; 10、Redis 经典五大类型源码及底层实现&lt;/h2&gt;
&lt;h2 id=&#34;11-redis为什么快高性能设计之epoll和io多路复用深度解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-redis为什么快高性能设计之epoll和io多路复用深度解析&#34;&gt;#&lt;/a&gt; 11、Redis 为什么快？高性能设计之 epoll 和 IO 多路复用深度解析&lt;/h2&gt;
&lt;h2 id=&#34;12-终章の总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-终章の总结&#34;&gt;#&lt;/a&gt; 12、终章の总结&lt;/h2&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/database/mongodb/MongoDB-JavaGuide/</guid>
            <title>MongoDB-JavaGuide</title>
            <link>http://example.com/database/mongodb/MongoDB-JavaGuide/</link>
            <category term="数据库" scheme="http://example.com/categories/database/" />
            <category term="MongoDB" scheme="http://example.com/categories/database/mongodb/" />
            <pubDate>Fri, 17 Nov 2023 20:07:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;mongodb常见面试题上&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mongodb常见面试题上&#34;&gt;#&lt;/a&gt; MongoDB 常见面试题（上）&lt;/h1&gt;
&lt;h1 id=&#34;mongodb常见面试题下&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mongodb常见面试题下&#34;&gt;#&lt;/a&gt; MongoDB 常见面试题（下）&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/database/elasticsearch/Elasticsearch-JavaGuide/</guid>
            <title>Elasticsearch-JavaGuide</title>
            <link>http://example.com/database/elasticsearch/Elasticsearch-JavaGuide/</link>
            <category term="数据库" scheme="http://example.com/categories/database/" />
            <category term="Elasticsearch" scheme="http://example.com/categories/database/elasticsearch/" />
            <pubDate>Fri, 17 Nov 2023 20:05:10 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/database/redis/Redis-JavaGuide/</guid>
            <title>Redis-JavaGuide</title>
            <link>http://example.com/database/redis/Redis-JavaGuide/</link>
            <category term="数据库" scheme="http://example.com/categories/database/" />
            <category term="Redis" scheme="http://example.com/categories/database/redis/" />
            <pubDate>Fri, 17 Nov 2023 20:03:29 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;缓存基础常见面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存基础常见面试题&#34;&gt;#&lt;/a&gt; 缓存基础常见面试题&lt;/h1&gt;
&lt;h2 id=&#34;为什么要用分布式缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么要用分布式缓存&#34;&gt;#&lt;/a&gt; 为什么要用分布式缓存？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;相关面试题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么要用缓存？&lt;/li&gt;
&lt;li&gt;本地缓存应该怎么做？&lt;/li&gt;
&lt;li&gt;为什么要有分布式缓存？/ 为什么不直接用本地缓存？&lt;/li&gt;
&lt;li&gt;多级缓存了解么？&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;缓存的基本思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存的基本思想&#34;&gt;#&lt;/a&gt; 缓存的基本思想&lt;/h3&gt;
&lt;p&gt;很多同学只知道&lt;font color=&#39;red&#39;&gt;缓存可以提高系统性能，减少请求相应时间&lt;/font&gt;。但是，不太清楚缓存的本质思想是什么。&lt;/p&gt;
&lt;p&gt;缓存的基本思想其实很简单，就是我们非常熟悉的 **&lt;font color=&#39;red&#39;&gt;空间换时间&lt;/font&gt;**。不要把缓存想的太高大上，虽然，它的确对系统的性能提升的性价比非常高。&lt;/p&gt;
&lt;p&gt;其实，我们在学习使用缓存的时候，你会发现缓存的思想实际在操作系统或者其他地方都被大量用到。比如&lt;font color=&#39;red&#39;&gt; CPU Cache 缓存的是内存数据，用于解决 CPU 处理速度和内存不匹配的问题&lt;/font&gt;；&lt;font color=&#39;red&#39;&gt;内存缓存的是硬盘数据，用于解决硬盘访问速度过慢的问题&lt;/font&gt;；&lt;font color=&#39;red&#39;&gt;操作系统在页表方案基础之上引入了快表，来加速虚拟地址到物理地址的转换&lt;/font&gt;。我们可以把快表理解为一种特殊的高速缓冲存储器（Cache）。&lt;/p&gt;
&lt;p&gt;我们知道，缓存中的数据通常存储于内存中，因此访问速度非常快。为了避免内存中的数据在重启或者宕机之后丢失，很多缓存中间件会利用磁盘做持久化。&lt;/p&gt;
&lt;p&gt;也就是说，缓存相比于我们常用的关系型数据库（比如 MySQL）来说访问速度要快非常多。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;为了避免用户请求数据库中的数据速度过慢，可以在数据库之上增加一层缓存&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;除了能够提高访问速度之外，&lt;font color=&#39;red&#39;&gt;缓存支持的并发量也要更大&lt;/font&gt;，有了缓存之后，数据库的压力也会随之变小。&lt;/p&gt;
&lt;h3 id=&#34;缓存的分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存的分类&#34;&gt;#&lt;/a&gt; 缓存的分类&lt;/h3&gt;
&lt;h4 id=&#34;本地缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地缓存&#34;&gt;#&lt;/a&gt; 本地缓存&lt;/h4&gt;
&lt;h5 id=&#34;是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么&#34;&gt;#&lt;/a&gt; 是什么&lt;/h5&gt;
&lt;p&gt;这个实际在很多项目中用的蛮多，特别是&lt;font color=&#39;red&#39;&gt;单体架构&lt;/font&gt;的时候。&lt;font color=&#39;red&#39;&gt;数据量不大，并且没有分布式要求&lt;/font&gt;的话，使用本地缓存还是可以的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;本地缓存位于应用内部，其最大的优点是应用存在于同一个进程内部，请求本地缓存的速度非常快，不存在额外的网络开销&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;常见的单体架构图如下，我们使用 &lt;strong&gt;Nginx&lt;/strong&gt; 来做&lt;strong&gt;负载均衡&lt;/strong&gt;，部署两个相同的应用到服务器，两个服务使用同一个数据库，并且使用的是本地缓存。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/local-cache.png&#34; alt=&#34;local-cache.png&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;实现方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方案&#34;&gt;#&lt;/a&gt; 实现方案&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;1、JDK 自带的 HashMap 和 ConcurrentHashMap&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般不用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ConcurrentHashMap 可以看作是线程安全版本的 HashMap ，两者都是存放 key/value 形式的键值对。但是，大部分场景来说不会使用这两者当做缓存，因为&lt;font color=&#39;red&#39;&gt;只提供了缓存的功能，并没有提供其他诸如过期时间之类的功能&lt;/font&gt;。一个稍微完善一点的缓存框架 **&lt;font color=&#39;red&#39;&gt;至少要提供：过期时间、淘汰机制、命中率统计&lt;/font&gt;** 这三点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、 Ehcache 、 Guava Cache 、 Spring Cache 本地缓存框架&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用的比较多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ehcache&lt;/code&gt; ：相比于其他两者&lt;font color=&#39;red&#39;&gt;更加重量&lt;/font&gt;，不过  &lt;code&gt;Ehcache&lt;/code&gt;  支持可以嵌入到 hibernate 和 mybatis 作为&lt;font color=&#39;red&#39;&gt;多级缓存&lt;/font&gt;，并且可以将缓存的数据&lt;font color=&#39;red&#39;&gt;持久化&lt;/font&gt;到本地磁盘中、同时也提供了&lt;font color=&#39;red&#39;&gt;集群方案&lt;/font&gt;（比较鸡肋，可忽略）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Guava Cache&lt;/code&gt;  和  &lt;code&gt;Spring Cache&lt;/code&gt;  比较像。 &lt;code&gt;Guava &lt;/code&gt; 相比于 &lt;code&gt;Spring Cache &lt;/code&gt; 的话使用的更多一点，它提供了 API 非常方便我们使用，同时也提供了&lt;font color=&#39;red&#39;&gt;设置缓存有效时间&lt;/font&gt;等功能。它的内部实现也比较干净，很多地方都和  &lt;code&gt;ConcurrentHashMap&lt;/code&gt;  的思想有异曲同工之妙。&lt;/li&gt;
&lt;li&gt;使用  &lt;code&gt;Spring Cache&lt;/code&gt;  的注解实现缓存的话，&lt;font color=&#39;red&#39;&gt;代码会看着很干净和优雅&lt;/font&gt;，但是很容易出现问题比如&lt;font color=&#39;red&#39;&gt;缓存穿透、内存溢出&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;3、后起之秀 Caffeine&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用最多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相比于  &lt;code&gt; Guava&lt;/code&gt;  来说  &lt;code&gt; Caffeine&lt;/code&gt;  在各个方面比如性能要更加优秀，一般建议使用其来替代  &lt;code&gt;Guava&lt;/code&gt; 。并且 &lt;code&gt;Guava&lt;/code&gt;  和  &lt;code&gt;Caffeine&lt;/code&gt;  的使用方式很像！&lt;/p&gt;
&lt;h5 id=&#34;缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点&lt;/h5&gt;
&lt;p&gt;本地的缓存的优势非常明显：低依赖、轻量、简单、成本低。&lt;/p&gt;
&lt;p&gt;但是，本地缓存存在下面这些缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;本地缓存应用耦合，对分布式架构支持不友好&lt;/font&gt;&lt;/strong&gt;：比如同一个相同的服务部署在多台机器上的时候，各个服务之间的缓存是无法共享的，因为本地缓存只在当前机器上有。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;本地缓存的容量受服务部署所在机器的限制明显&lt;/font&gt;&lt;/strong&gt;：如果当前系统服务所耗费的内存多，那么本地缓存可用的容量就很少。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分布式缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式缓存&#34;&gt;#&lt;/a&gt; 分布式缓存&lt;/h4&gt;
&lt;h5 id=&#34;是什么-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么-2&#34;&gt;#&lt;/a&gt; 是什么&lt;/h5&gt;
&lt;p&gt;我们可以把分布式缓存（Distributed Cache）看作是一种内存数据库的服务，它的最终作用就是提供缓存数据的服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;分布式缓存脱离于应用独立存在，多个应用可直接的共同使用同一个分布式缓存服务&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如下图所示，就是一个简单的使用分布式缓存的架构图。我们使用 Nginx 来做负载均衡，部署两个相同的应用到服务器，两个服务使用同一个数据库和缓存。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/distributed-cache.png&#34; alt=&#34;distributed-cache.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使用分布式缓存之后，&lt;font color=&#39;red&#39;&gt;缓存服务可以部署在一台单独的服务器上&lt;/font&gt;，即使同一个相同的服务部署在多台机器上，也是使用的同一份缓存。 并且，单独的分布式缓存服务的&lt;font color=&#39;red&#39;&gt;性能、容量和提供的功能都要更加强大&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;** 但是，软件系统设计中没有银弹，往往任何技术的引入都像是把双刃剑。** 你使用的方式得当，就能为系统带来很大的收益。否则，只是费了精力不讨好。&lt;/p&gt;
&lt;p&gt;简单来说，为系统引入分布式缓存之后往往会带来下面这些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;系统复杂性增加&lt;/font&gt;&lt;/strong&gt;：引入缓存之后，&lt;font color=&#39;red&#39;&gt;要维护缓存和数据库的数据一致性、维护热点缓存、保证缓存服务的高可用&lt;/font&gt;等等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;系统开发成本增加&lt;/font&gt;&lt;/strong&gt;：引入缓存意味着系统需要一个单独的缓存服务，这是需要花费相应的成本的，并且这个成本还是很贵的，毕竟耗费的是宝贵的内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;实现方案redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现方案redis&#34;&gt;#&lt;/a&gt; 实现方案：Redis&lt;/h5&gt;
&lt;p&gt;唯一真神：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Redis&lt;/font&gt;&lt;/strong&gt;！&lt;/p&gt;
&lt;h4 id=&#34;多级缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多级缓存&#34;&gt;#&lt;/a&gt; 多级缓存&lt;/h4&gt;
&lt;p&gt;这里只来简单聊聊 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;本地缓存 + 分布式缓存&lt;/font&gt;&lt;/strong&gt; 的多级缓存方案。&lt;/p&gt;
&lt;p&gt;这个时候估计有很多小伙伴就会问了：既然用了分布式缓存，为什么还要用本地缓存呢？&lt;/p&gt;
&lt;p&gt;的确，&lt;font color=&#39;red&#39;&gt;一般情况下是不建议使用多级缓存的，这会增加维护负担&lt;/font&gt;（比如你需要保证一级缓存和二级缓存的数据一致性），并且，实际带来的提升效果对于绝大部分项目来说其实并不是很大。&lt;/p&gt;
&lt;p&gt;多级缓存方案中，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;第一级缓存（L1）使用本地内存（比如 Caffeine），第二级缓存（L2）使用分布式缓存（比如 Redis）&lt;/font&gt;&lt;/strong&gt;。读取缓存数据的时候，我们&lt;font color=&#39;red&#39;&gt;先从 L1 中读取，读取不到的时候再去 L2 读取&lt;/font&gt;。这样可以降低 L2 的压力，减少 L2 的读次数。并且，&lt;font color=&#39;red&#39;&gt;本地内存的访问速度是最快的，不存在什么网络开销&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/multilevel-cache.png&#34; alt=&#34;multilevel-cache.png&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;常见的缓存更新策略有哪几种&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的缓存更新策略有哪几种&#34;&gt;#&lt;/a&gt; 常见的缓存更新策略有哪几种？&lt;/h2&gt;
&lt;p&gt;下面介绍到的三种模式各有优劣，不存在最佳模式，根据具体的业务场景选择适合自己的缓存读写模式即可！&lt;/p&gt;
&lt;h3 id=&#34;cache-aside-pattern旁路缓存模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache-aside-pattern旁路缓存模式&#34;&gt;#&lt;/a&gt; Cache Aside Pattern（旁路缓存模式）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;平时使用比较多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;是什么-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么-3&#34;&gt;#&lt;/a&gt; 是什么&lt;/h4&gt;
&lt;p&gt;Cache Aside Pattern 是我们&lt;font color=&#39;red&#39;&gt;平时使用比较多&lt;/font&gt;的一个缓存读写模式，&lt;font color=&#39;red&#39;&gt;适合读请求比较多的场景&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;Cache Aside Pattern 中 **&lt;font color=&#39;red&#39;&gt;服务端需要同时维系数据库（后文简称 db）和缓存（后文简称 cache）&lt;/font&gt;**，并且是&lt;font color=&#39;red&#39;&gt;以 db 的结果为准&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;缓存读写步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存读写步骤&#34;&gt;#&lt;/a&gt; 缓存读写步骤&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;写&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先更新 db&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;直接删除 cache&lt;/font&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/fd814571-c1ae-4f7e-aad8-5dac5b741de8.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先从 cache 中读取数据，读取到就直接返回&lt;/li&gt;
&lt;li&gt;cache 中读取不到的话，再从 db 中读取数据返回&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;再把从 db 中读取到的数据写入 cache 中&lt;/font&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/cfa0a217-53d2-45d8-b9e9-13970de9982c.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h4&gt;
&lt;p&gt;问题：&lt;strong&gt;写数据时为什么删除 cache，而不是更新 cache？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仅仅了解了上面这些内容的话是远远不够的，我们还要搞懂其中的原理。&lt;/p&gt;
&lt;p&gt;主要原因有两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;对服务端资源造成浪费&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;删除 cache 更加直接&lt;/font&gt;，这是因为 cache 中存放的一些数据需要服务端经过大量的计算才能得出，会消耗服务端的资源，是一笔不小的开销。&lt;font color=&#39;red&#39;&gt;如果频繁修改 db，就能会导致需要频繁更新 cache，而 cache 中的数据可能都没有被访问到&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;产生数据不一致问题&lt;/font&gt;&lt;/strong&gt;：并发场景下，更新 cache 产生数据不一致性问题的概率会更大（后文会解释原因）。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;追问：&lt;strong&gt;写数据时，为什么不先删除 cache ，再更新 db ？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答案：那肯定是不行的！因为这样可能 **&lt;font color=&#39;red&#39;&gt;会造成数据库（db）和缓存（Cache）数据不一致&lt;/font&gt;** 的问题。&lt;/p&gt;
&lt;p&gt;举例：请求 1 先写数据 A，请求 2 随后读数据 A 的话，就很有可能产生数据不一致性的问题。这个过程可以简单描述为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;请求 1 先把 cache 中的 A 数据删除；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求 2 从 db 中读取数据；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求 1 再把 db 中的 A 数据更新。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这就会导致请求 2 读取到的是旧值。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;追问：&lt;strong&gt;写数据时，先更新 db，后删除 cache 就没有问题了么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答案：理论上来说&lt;font color=&#39;red&#39;&gt;出现数据不一致性的概率非常小，因为缓存的写入速度是比数据库的写入速度快很多&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;举例：请求 1 先读数据 A，请求 2 随后写数据 A，并且数据 A 在请求 1 请求之前不在缓存中的话，也有可能产生数据不一致性的问题。这个过程可以简单描述为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;请求 1 从 db 读数据 A；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求 2 更新 db 中的数据 A（此时缓存中无数据 A ，故不用执行删除缓存操作 ）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求 1 将数据 A 写入 cache。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这就会导致 cache 中存放的其实是旧值。&lt;/p&gt;
&lt;h4 id=&#34;缺点-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点-2&#34;&gt;#&lt;/a&gt; 缺点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;缺陷 1：&lt;strong&gt;首次请求数据一定不在 cache 中&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解决办法：&lt;font color=&#39;red&#39;&gt;将热点数据提前放入 cache 中&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺陷 2：&lt;strong&gt;写操作比较频繁的话，会导致 cache 中的数据频繁被删除，影响缓存命中率&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据库和缓存数据强一致场景：更新 db 的时候同样更新 cache，不过我们需要加一个锁 / 分布式锁来保证更新 cache 的时候不存在线程安全问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以短暂地允许数据库和缓存数据不一致的场景：更新 db 的时候同样更新 cache，但是给缓存加一个比较短的过期时间，这样的话就可以保证即使数据不一致的话影响也比较小。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;readwrite-through-pattern读写穿透模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#readwrite-through-pattern读写穿透模式&#34;&gt;#&lt;/a&gt; Read/Write Through Pattern（读 / 写穿透模式）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在平时开发过程中非常少见&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;是什么-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么-4&#34;&gt;#&lt;/a&gt; 是什么&lt;/h4&gt;
&lt;p&gt;Read/Write Through Pattern 中服务端 **&lt;font color=&#39;red&#39;&gt;把 cache 视为主要数据存储，从中读 / 写数据；而 cache 服务负责将此数据读取和写入 db，从而减轻了应用程序的职责&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;这种缓存读写策略小伙伴们应该也发现了&lt;font color=&#39;red&#39;&gt;在平时开发过程中非常少见&lt;/font&gt;。抛去性能方面的影响，大概率是因为我们经常使用的分布式缓存&lt;font color=&#39;red&#39;&gt; Redis 并没有提供将 cache 数据写入 db 的功能&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;缓存读写步骤-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存读写步骤-2&#34;&gt;#&lt;/a&gt; 缓存读写步骤&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;写（Write Through）&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与旁路缓存模式的写步骤不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;先检查 cache 中是否存在要写入的数据&lt;/font&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;若 cache 中不存在&lt;/font&gt;，则直接更新 db&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;若 cache 中存在&lt;/font&gt;，则先更新 cache；然后 cache 服务再更新 db&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/0126e23d-f0d1-4c30-a568-b60405b3dda8.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读（Read Through）&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与旁路缓存模式的读步骤一样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先从 cache 中读取数据，读取到就直接返回&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从 cache 中读取不到的话，再从 db 加载，最后写入 cache ，返回响应&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/e685e967-1655-4424-a75d-490101b52087.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;原理-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理-2&#34;&gt;#&lt;/a&gt; 原理&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Read-Through Pattern 实际只是在 Cache-Aside Pattern 之上进行了封装&lt;/strong&gt;。在 Cache-Aside Pattern 下，发生读请求的时候，如果 cache 中不存在对应的数据，是由客户端自己负责把数据写入 cache，而 Read Through Pattern 则是 cache 服务自己来写入缓存的，这对客户端是透明的。&lt;/p&gt;
&lt;h4 id=&#34;缺点-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点-3&#34;&gt;#&lt;/a&gt; 缺点&lt;/h4&gt;
&lt;p&gt;和 Cache Aside Pattern 一样， Read-Through Pattern &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;也存在首次请求数据一定不在 cache 的问题，可以将热点数据提前放入 cache 中&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;write-behind-pattern异步缓存写入模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#write-behind-pattern异步缓存写入模式&#34;&gt;#&lt;/a&gt; Write Behind Pattern（异步缓存写入模式）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在平时开发过程中也非常非常少见&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Write Behind Pattern 和 Read/Write Through Pattern 很相似，两者都是由 cache 服务来负责 cache 和 db 的读写。&lt;/p&gt;
&lt;p&gt;但是，两个又有很大的不同：&lt;strong&gt;Read/Write Through 是同步更新 cache 和 db，&lt;font color=&#39;red&#39;&gt;而 Write Behind 则是只更新 cache，不直接更新 db，而是改为异步批量的方式来更新 db&lt;/font&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很明显，这种方式对数据一致性带来了更大的挑战，比如 cache 数据可能还没异步更新 db 的话，cache 服务可能就就挂掉了。&lt;/p&gt;
&lt;p&gt;这种策略&lt;font color=&#39;red&#39;&gt;在平时开发过程中也非常非常少见&lt;/font&gt;，但是不代表它的应用场景少，比如消息队列中消息的异步写入磁盘、MySQL 的 Innodb Buffer Pool 机制都用到了这种策略。&lt;/p&gt;
&lt;p&gt;Write Behind Pattern 下 db 的写性能非常高，非常适合一些数据经常变化又对数据一致性要求没那么高的场景，比如浏览量、点赞量。&lt;/p&gt;
&lt;h1 id=&#34;redis-基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-基础&#34;&gt;#&lt;/a&gt; Redis 基础&lt;/h1&gt;
&lt;h2 id=&#34;redis-是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-是什么&#34;&gt;#&lt;/a&gt; Redis 是什么&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby8=&#34;&gt;Redis&lt;/span&gt;（&lt;strong&gt;RE&lt;/strong&gt;mote &lt;strong&gt;DI&lt;/strong&gt;ctionary &lt;strong&gt;S&lt;/strong&gt;erver，远程词典服务器）是一个基于&lt;font color=&#39;red&#39;&gt; C 语言&lt;/font&gt;开发的开源 &lt;font color=&#39;red&#39;&gt;NoSQL&lt;/font&gt; 数据库（BSD 许可）。与传统数据库不同的是，Redis 的数据是保存在内存中的（&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;内存数据库，支持持久化&lt;/font&gt;&lt;/strong&gt;），因此&lt;font color=&#39;red&#39;&gt;读写速度非常快&lt;/font&gt;，被广泛应用于&lt;font color=&#39;red&#39;&gt;分布式缓存&lt;/font&gt;方向。并且，Redis 存储的是&lt;font color=&#39;red&#39;&gt; Key-Value 键值对数据&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;为了满足不同的业务场景，Redis &lt;font color=&#39;red&#39;&gt;内置多种数据类型实现&lt;/font&gt;（比如 String、Hash、Sorted Set、Bitmap、HyperLogLog、GEO）。并且，Redis 还&lt;font color=&#39;red&#39;&gt;支持事务、持久化、Lua 脚本、发布 / 订阅、缓存淘汰、流技术&lt;/font&gt;等功能特性，提供了&lt;font color=&#39;red&#39;&gt;多种集群方案（主从模式、 &lt;code&gt;Redis Sentinel&lt;/code&gt; 、 &lt;code&gt;Redis Cluster&lt;/code&gt; ）&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&#34;redis-怎么用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-怎么用&#34;&gt;#&lt;/a&gt; Redis 怎么用&lt;/h2&gt;
&lt;p&gt;生产环境下，官方推荐使用 Linux 部署 Redis。&lt;/p&gt;
&lt;p&gt;个人学习的话，可以自己本机安装 Redis 或者通过 Redis 官网提供的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90cnkucmVkaXMuaW8v&#34;&gt;在线 Redis 环境&lt;/span&gt;（少部分命令无法使用）来实际体验 Redis。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/try.redis.io.png&#34; alt=&#34;try-redis&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90ZWNoc3RhY2tzLmlvLw==&#34;&gt;techstacks.io&lt;/span&gt; 专门维护了一个&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90ZWNoc3RhY2tzLmlvL3RlY2gvcmVkaXM=&#34;&gt;使用 Redis 的热门站点列表&lt;/span&gt; ，感兴趣的话可以看看。&lt;/p&gt;
&lt;h2 id=&#34;redis-功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-功能&#34;&gt;#&lt;/a&gt; &lt;mark&gt;Redis 功能&lt;/mark&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/Redis-v2-01-1.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Redis 总体功能概览图&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;orange&#39;&gt;分布式缓存&lt;/font&gt;&lt;/strong&gt;，帮 MySQL 减负&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231202180734903.png&#34; alt=&#34;image-20231202180734903&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MySQL 与 Redis 的对比：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 是关系型数据库，Redis 是&lt;font color=&#39;red&#39;&gt;key-value&lt;/font&gt;数据库（NoSQL 的一种）&lt;/li&gt;
&lt;li&gt;MySQL 主要存储在磁盘，Redis 数据操作主要在&lt;font color=&#39;red&#39;&gt;内存&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;Redis 在一些场景中明显优于 MySQL，例如&lt;font color=&#39;red&#39;&gt;计数器、排行榜&lt;/font&gt;等&lt;/li&gt;
&lt;li&gt;Redis 通常用于一些特定场景，需要与 MySQL 一起配合使用，两者并不是相互替换和竞争关系，而是共用和&lt;strong&gt;配合使用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内存存储&lt;/strong&gt;和&lt;strong&gt;持久化&lt;/strong&gt;（ &lt;code&gt;RDB&lt;/code&gt; + &lt;code&gt;AOF&lt;/code&gt; ）：Redis 支持异步将内存中的数据写到硬盘上，同时不影响继续服务&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231202180535935.png&#34; alt=&#34;image-20231202180535935&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高可用架构搭配&lt;/strong&gt;：避免某台 Redis 挂了后，影响系统运行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单机&lt;/li&gt;
&lt;li&gt;主从（replica）&lt;/li&gt;
&lt;li&gt;哨兵（sentinel）&lt;/li&gt;
&lt;li&gt;集群（cluster)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231202180648762.png&#34; alt=&#34;image-20231202180648762&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓存穿透、击穿、雪崩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分布式锁&lt;/strong&gt;：跨服务器加锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;消息队列平台&lt;/strong&gt;：Reids&lt;font color=&#39;red&#39;&gt;提供 list 和 set 操作&lt;/font&gt;，这使得 Redis 能作为一个很好的消息队列平台来使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过 Reids 的队列功能做&lt;strong&gt;购买限制&lt;/strong&gt;。比如到节假日或者推广期间，进行一些活动，对用户购买行为进行限制，限制今天只能购买几次商品或者一段时间内只能购买一次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;排行榜&lt;/strong&gt; +&lt;strong&gt; 点赞&lt;/strong&gt;：Redis 提供的&lt;font color=&#39;red&#39;&gt;zset 数据类型&lt;/font&gt;能够快速实现这些复杂的排行榜。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802155434366.png&#34; alt=&#34;image-20230802155434366&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;redis-优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-优势&#34;&gt;#&lt;/a&gt; Redis 优势&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;读写性能极高&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据类型丰富&lt;/strong&gt;：不仅支持&lt;font color=&#39;red&#39;&gt;key-value&lt;/font&gt;类型的数据，同时还提供&lt;font color=&#39;red&#39;&gt;list，set，zset，hash&lt;/font&gt;等数据结构的存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持数据持久化&lt;/strong&gt;：可将内存中的数据存入磁盘中，重启时再加载到内存使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持数据备份&lt;/strong&gt;，即 master-slave 模式的数据备份&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis-迭代历史&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-迭代历史&#34;&gt;#&lt;/a&gt; Redis 迭代历史&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802161140294.png&#34; alt=&#34;image-20230802161140294&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;5.0 版本&lt;/font&gt;是直接升级到&lt;font color=&#39;red&#39;&gt;6.0 版本&lt;/font&gt;，对于这个激进的升级，Redis 之父 antirez 表现得很有信心和兴奋，所以第一时间发文来阐述 6.0 的一些重大功能 &amp;quot;Redis 6.0.0 GA is out!&amp;quot;&lt;/p&gt;
&lt;p&gt;随后 Redis 再接再厉，直接王炸&lt;font color=&#39;red&#39;&gt;Redis7.0&lt;/font&gt;---2023 年爆款。2022 年 4 月 27 日 Redis 正式发布了 7.0 更新（其实早在 2022 年 1 月 31 日，Redis 已经预发布了 7.0rc-1，经过社区的考验后，确认没重大 Bug 才会正式发布）&lt;/p&gt;
&lt;p&gt;Redis&lt;strong&gt; 版本的命名规则&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本号第二位如果是奇数，则为非稳定版本。如 2.7、2.9、3.1&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;版本号第二位如果是偶数，则为稳定版本&lt;/font&gt;。如 2.6、2.8、3.0、3.2&lt;/li&gt;
&lt;li&gt;当前奇数版本就是下一个稳定版本的开发版本。如 2.9 版本是 3.0 版本的开发版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis7-新特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis7-新特性&#34;&gt;#&lt;/a&gt; Redis7 新特性&lt;/h2&gt;
&lt;p&gt;可以从 redis 的 GitHub 的 releases 中查看当前版本的新特性，Redis7 的部分新特性总览：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802162007264.png&#34; alt=&#34;image-20230802162007264&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Redis Functions：Redis 函数，一种新的通过服务端脚本扩展 Redis 的方式，函数与数据本身一起存储。简言之，redis 自己要去&lt;font color=&#39;red&#39;&gt;抢夺 Lua 脚本的饭碗&lt;/font&gt;，但是 Lua 已经稳定且普及，所以 Redis Functions&lt;font color=&#39;red&#39;&gt;没必要学&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802162230304.png&#34; alt=&#34;image-20230802162230304&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Client-eviction&lt;/strong&gt;：客户端相关优化，能让更多 client 连接上&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;限制客户端内存使用&lt;/font&gt;，一旦 Redis 连接较多，再加上每个连接的内存占用都比较大的时候，Redis 总连接内存占用可能会达到 maxmemory 的上限，可以增加允许限制所有客户端的总内存使用量配置项，redis.config 中对应的配置项，有两种配置形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;指定内存大小&lt;/font&gt;。例如 maxmemory-clients 1g&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;基于 maxmemory 的百分比&lt;/font&gt;。例如 maxmemory-clients 10%&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802162439869.png&#34; alt=&#34;image-20230802162439869&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multi-part AOF&lt;/strong&gt;：多 AOF 文件支持，AOF 文件由一个变成了多个，主要分为两种类型：&lt;font color=&#39;red&#39;&gt;基本文件 (base files)&lt;/font&gt;、&lt;font color=&#39;red&#39;&gt;增量文件 (incr files)&lt;/font&gt;，请注意这些文件名称是复数形式说明每一类文件不仅仅只有一个。在此之外还引入了一个&lt;font color=&#39;red&#39;&gt;清单文件 (manifest) &lt;/font&gt;用于跟踪文件以及文件的创建和应用顺序（恢复）。性能急剧上升，再也不用担心 AOFRW 异步读写时的运维痛点&lt;/p&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802163004405.png&#34; alt=&#34;image-20230802163004405&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;config 命令增强&lt;/strong&gt;：对于&lt;font color=&#39;red&#39;&gt;Config Set 和 Get 命令&lt;/font&gt;，支持在一次调用过程中&lt;font color=&#39;red&#39;&gt;传递多个配置参数&lt;/font&gt;。例如，现在我们可以在执行一次 Config Set 命令中更改多个参数： config set maxmemory 10000001 maxmemory-clients 50% port 6399&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;访问安全性增强 ACL V2&lt;/strong&gt;：访问控制，在 redis.conf 配置文件中，&lt;font color=&#39;red&#39;&gt;protected-mode 默认为 yes&lt;/font&gt;，只有当你希望你的客户端在没有授权的情况下可以连接到 Redis server 的时候可以将 protected-mode 设置为 no&lt;/p&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230802163118585.png&#34; alt=&#34;image-20230802163118585&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;listpack 紧凑列表调整&lt;/strong&gt;：listpack 是用来&lt;font color=&#39;red&#39;&gt;替代 ziplist 的新数据结构&lt;/font&gt;，在 7.0 版本已经没有 ziplist 的配置了（6.0 版本仅部分数据类型作为过渡阶段在使用），listpack 已经替换了 ziplist 类似 hash-max-ziplist-entries 的配置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RDB 保存时间调整：将持久化文件 RDB 的保存规则发生了改变，尤其是时间记录频度变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令新增和变动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zset (有序集合) 增加 ZMPOP、BZMPOP、ZINTERCARD 等命令&lt;/li&gt;
&lt;li&gt;Set (集合) 增加 SINTERCARD 命令&lt;/li&gt;
&lt;li&gt;LIST (列表) 增加 LMPOP、BLMPOP ，从提供的键名列表中的第一个非空列表键中弹出一个或多个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能资源利用率、安全、等改进&lt;/strong&gt;：自身&lt;font color=&#39;red&#39;&gt;底层部分优化&lt;/font&gt;改动，Redis 核心在许多方面进行了重构和改进&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;主动碎片整理 V2&lt;/font&gt;：增强版主动碎片整理，配合 Jemalloc 版本更新，更快更智能，延时更低&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;HyperLogLog 改进&lt;/font&gt;：在 Redis5.0 中，HyperLogLog 算法得到改进，优化了计数统计时的内存使用效率，7 更加优秀&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;更好的内存统计报告&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;如果不为了 API 向后兼容，我们将&lt;font color=&#39;red&#39;&gt;不再使用 slave 一词&lt;/font&gt;......(政治正确)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis-为什么这么快&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-为什么这么快&#34;&gt;#&lt;/a&gt; &lt;mark&gt;Redis 为什么这么快？&lt;/mark&gt;&lt;/h2&gt;
&lt;p&gt;Redis 内部做了非常多的性能优化，比较重要的有下面 3 点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Redis &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;基于内存&lt;/font&gt;&lt;/strong&gt;，内存的访问速度是磁盘的上千倍；&lt;/li&gt;
&lt;li&gt;Redis 基于 Reactor 模式设计开发了 **&lt;font color=&#39;red&#39;&gt;一套高效的事件处理模型&lt;/font&gt;**，主要是&lt;font color=&#39;red&#39;&gt;单线程事件循环&lt;/font&gt;和&lt;font color=&#39;red&#39;&gt; IO 多路复用&lt;/font&gt;（Redis 线程模式后面会详细介绍到）；&lt;/li&gt;
&lt;li&gt;Redis 内置了多种 **&lt;font color=&#39;red&#39;&gt;优化过后的数据类型 / 结构实现&lt;/font&gt;**，性能非常高；&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;下面这张图片总结的挺不错的，分享一下，出自 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90d2l0dGVyLmNvbS9hbGV4eHVieXRlL3N0YXR1cy8xNDk4NzAzODIyNTI4NTQ0Nzcw&#34;&gt;Why is Redis so fast?&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/why-redis-so-fast-E21l9uI2.png&#34; alt=&#34;why-redis-so-fast&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;分布式缓存常见的技术选型方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式缓存常见的技术选型方案&#34;&gt;#&lt;/a&gt; 分布式缓存常见的技术选型方案&lt;/h2&gt;
&lt;p&gt;分布式缓存的话，比较老牌同时也是使用的比较多的还是 &lt;strong&gt;Memcached&lt;/strong&gt; 和 &lt;strong&gt;Redis&lt;/strong&gt;。不过，&lt;font color=&#39;red&#39;&gt;现在基本没有看过还有项目使用 Memcached 来做缓存&lt;/font&gt;，都是直接用 Redis。&lt;/p&gt;
&lt;p&gt;Memcached 是分布式缓存最开始兴起的那会，比较常用的。后来，随着 Redis 的发展，大家慢慢都&lt;font color=&#39;red&#39;&gt;转而使用更加强大的 Redis 了&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;另外，腾讯也开源了一款类似于 Redis 的分布式高性能 KV 存储数据库，基于知名的开源项目 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JvY2tzZGI=&#34;&gt;RocksDB&lt;/span&gt; 作为存储引擎 ，100% 兼容 Redis 协议和 Redis4.0 所有数据模型，名为 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1RlbmNlbnQvVGVuZGlz&#34;&gt;Tendis&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;关于 Redis 和 Tendis 的对比，腾讯官方曾经发过一篇文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvTWVZa2ZPSWRuVTZMWWxzR2IyNEtqUQ==&#34;&gt;Redis vs Tendis：冷热混合存储版架构揭秘&lt;/span&gt; ，可以简单参考一下。&lt;/p&gt;
&lt;p&gt;从这个项目的 GitHub 提交记录可以看出，&lt;font color=&#39;red&#39;&gt;Tendis 开源版几乎已经没有被维护更新了，加上其关注度并不高，使用的公司也比较少&lt;/font&gt;。因此，不建议你使用 Tendis 来实现分布式缓存。&lt;/p&gt;
&lt;h2 id=&#34;redis-和-memcached-的区别和共同点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-和-memcached-的区别和共同点&#34;&gt;#&lt;/a&gt; Redis 和 Memcached 的区别和共同点&lt;/h2&gt;
&lt;p&gt;现在公司一般都是用 Redis 来实现缓存，而且 Redis 自身也越来越强大了！不过，了解 Redis 和 Memcached 的区别和共同点，有助于我们在做相应的技术选型的时候，能够做到有理有据！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;共同点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;都基于内存&lt;/font&gt;，一般都用来当做缓存使用。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;都有过期策略&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;性能都非常高&lt;/font&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;区别&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Redis 支持更丰富的数据类型（支持更复杂的应用场景）&lt;/font&gt;&lt;/strong&gt;。Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 &lt;font color=&#39;red&#39;&gt;list，set，zset，hash&lt;/font&gt; 等数据结构的存储。Memcached 只支持最简单的 k/v 数据类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Redis 支持数据的持久化&lt;/font&gt;&lt;/strong&gt;，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用，而 Memcached 把数据全部存在内存之中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Redis 有灾难恢复机制&lt;/font&gt;&lt;/strong&gt;。因为可以把缓存中的数据持久化到磁盘上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Redis 在服务器内存使用完之后，可以将不用的数据放到磁盘上&lt;/strong&gt;。但是，Memcached 在服务器内存使用完之后，就会直接报异常。&lt;/li&gt;
&lt;li&gt;Memcached 没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据；但是 &lt;strong&gt;Redis 目前是原生支持 cluster 模式的。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Memcached 是多线程，非阻塞 IO 复用的网络模型；&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Redis 使用单线程的多路 IO 复用模型&lt;/font&gt;&lt;/strong&gt;。（Redis 6.0 针对网络数据的读写引入了多线程）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Redis 支持发布订阅模型、Lua 脚本、事务等功能&lt;/strong&gt;，而 Memcached 不支持。并且，Redis 支持更多的编程语言。&lt;/li&gt;
&lt;li&gt;Memcached 过期数据的删除策略只用了惰性删除，而 &lt;strong&gt;Redis 针对过期数据同时使用了惰性删除、定期删除。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;相信看了上面的对比之后，我们已经没有什么理由可以选择使用 Memcached 来作为自己项目的分布式缓存了。&lt;/p&gt;
&lt;h2 id=&#34;为什么要用-redis或者缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么要用-redis或者缓存&#34;&gt;#&lt;/a&gt; &lt;mark&gt;为什么要用 Redis（或者缓存）？&lt;/mark&gt;&lt;/h2&gt;
&lt;p&gt;1、&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;高性能&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假如用户第一次访问数据库中的某些数据的话，这个过程是比较慢，毕竟是从硬盘中读取的。但是如果说，用户访问的数据属于高频数据并且不会经常改变的话，那么我们就可以很放心地&lt;font color=&#39;red&#39;&gt;将该用户访问的数据存在缓存中&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;这样有什么好处呢？那就是&lt;font color=&#39;red&#39;&gt;保证用户下一次再访问这些数据的时候，就可以直接从缓存中获取了&lt;/font&gt;。操作缓存就是直接操作内存，所以速度相当快。&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;高并发&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般像 MySQL 这类的数据库的 QPS 大概都在 1w 左右（4 核 8g），但是使用 Redis 缓存之后很容易达到 10w+，甚至最高能达到 30w+（就单机 Redis 的情况，Redis 集群的话会更高）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;QPS（Query Per Second）&lt;/code&gt; ：服务器每秒可以执行的查询次数；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此可见，&lt;font color=&#39;red&#39;&gt;直接操作缓存能够承受的数据库请求数量是远远大于直接访问数据库的&lt;/font&gt;，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。进而，我们也就提高了系统整体的并发。&lt;/p&gt;
&lt;h2 id=&#34;常见的缓存读写策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的缓存读写策略&#34;&gt;#&lt;/a&gt; 常见的缓存读写策略&lt;/h2&gt;
&lt;p&gt;指路→&lt;a href=&#34;#%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D?&#34;&gt;常见的缓存更新策略有哪几种？&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;redis-应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-应用&#34;&gt;#&lt;/a&gt; Redis 应用&lt;/h1&gt;
&lt;h2 id=&#34;redis-除了做缓存还能做什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-除了做缓存还能做什么&#34;&gt;#&lt;/a&gt; Redis 除了做缓存，还能做什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;分布式锁&lt;/font&gt;&lt;/strong&gt;：通过 Redis 来做分布式锁是一种比较常见的方式。通常情况下，我们都是基于 &lt;font color=&#39;red&#39;&gt;Redisson&lt;/font&gt; 来实现分布式锁。关于 Redis 实现分布式锁的详细介绍，可以看我写的这篇文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGlzdHJpYnV0ZWQtc3lzdGVtL2Rpc3RyaWJ1dGVkLWxvY2suaHRtbA==&#34;&gt;分布式锁详解&lt;/span&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;限流&lt;/font&gt;&lt;/strong&gt;：一般是通过&lt;font color=&#39;red&#39;&gt; Redis + Lua 脚本&lt;/font&gt;的方式来实现限流。相关阅读：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mva3lGQVdIM21WTkp2dXJRRHQ0dmNoQQ==&#34;&gt;《我司用了 6 年的 Redis 分布式限流器，可以说是非常厉害了！》&lt;/span&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;消息队列&lt;/font&gt;&lt;/strong&gt;：Redis 自带的 &lt;font color=&#39;red&#39;&gt;List&lt;/font&gt; 数据结构可以作为一个简单的队列使用。Redis 5.0 中增加的 &lt;font color=&#39;red&#39;&gt;Stream&lt;/font&gt; 类型的数据结构更加适合用来做消息队列。它比较&lt;font color=&#39;red&#39;&gt;类似于 Kafka，有主题和消费组的概念，支持消息持久化以及 ACK 机制&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;延时队列&lt;/strong&gt;：Redisson 内置了延时队列（基于 &lt;font color=&#39;red&#39;&gt;Sorted Set&lt;/font&gt; 实现的）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分布式 Session&lt;/strong&gt;：利用&lt;font color=&#39;red&#39;&gt; String 或者 Hash &lt;/font&gt;数据类型保存 Session 数据，所有的服务器都可以访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;复杂业务场景&lt;/strong&gt;：通过 Redis 以及 Redis 扩展（比如 &lt;font color=&#39;red&#39;&gt;Redisson&lt;/font&gt;）提供的数据结构，我们可以很方便地完成很多复杂的业务场景，比如&lt;font color=&#39;red&#39;&gt;通过 Bitmap 统计活跃用户、通过 Sorted Set 维护排行榜&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis-如何实现分布式锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-如何实现分布式锁&#34;&gt;#&lt;/a&gt; Redis 如何实现分布式锁？&lt;/h2&gt;
&lt;p&gt;指路 -&amp;gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGlzdHJpYnV0ZWQtc3lzdGVtL2Rpc3RyaWJ1dGVkLWxvY2suaHRtbA==&#34;&gt; 分布式锁详解&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;redis-可以做消息队列么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-可以做消息队列么&#34;&gt;#&lt;/a&gt; Redis 可以做消息队列么？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;实际项目中也没见谁使用 Redis 来做消息队列，对于这部分知识点大家了解就好了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先说结论：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;可以是可以，但不建议使用 Redis 来做消息队列，因为它不如专业的消息队列&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;list-实现方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#list-实现方式&#34;&gt;#&lt;/a&gt; List 实现方式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Redis 2.0 之前，如果想要使用 Redis 来做消息队列的话，只能通过 List 来实现。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过  &lt;code&gt;RPUSH/LPOP&lt;/code&gt;  或者  &lt;code&gt;LPUSH/RPOP&lt;/code&gt;  即可实现简易版消息队列：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 生产者生产消息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; RPUSH myList msg1 msg2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; RPUSH myList msg3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 消费者消费消息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; LPOP myList&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;msg1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;不过，通过  &lt;code&gt;RPUSH/LPOP&lt;/code&gt;  或者  &lt;code&gt;LPUSH/RPOP&lt;/code&gt;  这样的方式&lt;font color=&#39;red&#39;&gt;存在性能问题，需要不断轮询去调用  &lt;code&gt;RPOP&lt;/code&gt;  或  &lt;code&gt;LPOP&lt;/code&gt;  来消费消息&lt;/font&gt;。当 List 为空时，大部分的轮询的请求都是无效请求，这种方式大量浪费了系统资源。&lt;/p&gt;
&lt;p&gt;因此，Redis &lt;font color=&#39;red&#39;&gt;还提供了  &lt;code&gt;BLPOP&lt;/code&gt; 、 &lt;code&gt;BRPOP&lt;/code&gt;  这种阻塞式读取的命令&lt;/font&gt;（带 B：Bloking 的都是阻塞式），并且还支持一个超时参数。&lt;font color=&#39;red&#39;&gt;如果 List 为空，Redis 服务端不会立刻返回结果&lt;/font&gt;，它会等待 List 中有新数据后，再返回或者是等待最多一个超时时间后返回空。如果将超时时间设置为 0 时，即可无限等待，直到弹出消息。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 超时时间为 10s&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 如果有数据则立刻返回，否则最多等待 10 秒&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; BRPOP myList &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;null&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;List 实现消息队列功能太简单，像 &lt;u&gt;ACK 机制&lt;/u&gt;等功能还需要我们自己实现，最要命的是没有&lt;u&gt;广播机制&lt;/u&gt;，消息也只能被消费一次&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;发布订阅pubsub实现方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发布订阅pubsub实现方式&#34;&gt;#&lt;/a&gt; 发布订阅（pub/sub）实现方式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Redis 2.0 引入了发布订阅 (pub/sub) 功能，解决了 List 实现消息队列没有&lt;u&gt;广播机制&lt;/u&gt;的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-pub-sub.png&#34; alt=&#34;Redis 发布订阅 (pub/sub) 功能&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Redis 发布订阅 (pub/sub) 功能&lt;/center&gt;
&lt;p&gt;pub/sub 中引入了一个概念叫 &lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;channel（频道）&lt;/font&gt;&lt;/strong&gt;，发布订阅机制的实现就是基于这个 channel 来做的。&lt;/p&gt;
&lt;p&gt;pub/sub 涉及两个角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;发布者（Publisher）&lt;/font&gt;：通过  &lt;code&gt;PUBLISH&lt;/code&gt;  投递消息给指定 channel。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;订阅者（Subscriber，也叫消费者）&lt;/font&gt;：通过  &lt;code&gt;SUBSCRIBE&lt;/code&gt;  订阅它关心的 channel。并且，订阅者可以订阅一个或者多个 channel。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里启动 3 个 Redis 客户端来简单演示一下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-pubsub-message-queue.png&#34; alt=&#34;pub/sub 实现消息队列演示&#34; /&gt;&lt;/p&gt;
&lt;center&gt;pub/sub 实现消息队列演示&lt;/center&gt;
&lt;p&gt;pub/sub 既能单播又能广播，还支持 channel 的简单正则匹配。不过，&lt;font color=&#39;red&#39;&gt;消息丢失（客户端断开连接或者 Redis 宕机都会导致消息丢失）、消息堆积（发布者发布消息的时候不会管消费者的具体消费能力如何）等问题依然没有一个比较好的解决办法&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;stream-实现方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stream-实现方式&#34;&gt;#&lt;/a&gt; Stream 实现方式&lt;/h3&gt;
&lt;p&gt;为此，&lt;font color=&#39;red&#39;&gt;Redis 5.0&lt;/font&gt; 新增加的一个数据结构  &lt;code&gt;Stream&lt;/code&gt;  来做消息队列。 &lt;code&gt;Stream&lt;/code&gt;  支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;发布订阅（pub/sub）模式&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;按照&lt;font color=&#39;red&#39;&gt;消费者组&lt;/font&gt;进行消费（借鉴了 Kafka 消费者组的概念）&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;消息持久化（RDB 和 AOF）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;ACK 机制&lt;/font&gt;（通过确认机制来告知已经成功处理了消息）&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;阻塞式获取消息&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt;  的结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-stream-structure-ZjK8peV8.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt;  使用起来相对要麻烦一些，这里就不演示了。而且，&lt;font color=&#39;red&#39;&gt; &lt;code&gt;Stream&lt;/code&gt;  在实际使用中依然会有一些小问题不太好解决&lt;/font&gt;，比如在 Redis 发生故障恢复后不能保证消息至少被消费一次。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt;  被用作消息队列时，依赖于下面这些命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XADD&lt;/code&gt; ：向流中添加新的消息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XREAD&lt;/code&gt; ：从流中读取消息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XREADGROUP&lt;/code&gt; ：从消费组中读取消息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XRANGE&lt;/code&gt; ：根据消息 ID 范围读取流中的消息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XREVRANGE&lt;/code&gt; ：与  &lt;code&gt;XRANGE&lt;/code&gt;  类似，但以相反顺序返回结果。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XDEL&lt;/code&gt; ：从流中删除消息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XTRIM&lt;/code&gt; ：修剪流的长度，可以指定修建策略。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XLEN&lt;/code&gt; ：获取流的长度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XGROUP&lt;/code&gt; ：管理消费组，包括创建、删除和修改。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XACK&lt;/code&gt; ：确认消费组中的消息已被处理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XPENDING&lt;/code&gt; ：查询消费组中挂起（未确认）的消息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XCLAIM&lt;/code&gt; ：将挂起的消息从一个消费者转移到另一个消费者。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XINFO&lt;/code&gt; ：获取流、消费组或消费者的详细信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，和专业的消息队列相比，使用 Redis 来实现消息队列还是有很多欠缺的地方，比如&lt;font color=&#39;red&#39;&gt;消息丢失和堆积问题&lt;/font&gt;不好解决。因此，我们&lt;font color=&#39;red&#39;&gt;通常建议不要使用 Redis 来做消息队列&lt;/font&gt;，你完全可以选择市面上比较成熟的一些消息队列比如 RocketMQ、Kafka。不过，如果你就是想要用 Redis 来做消息队列的话，那我&lt;font color=&#39;red&#39;&gt;建议优先考虑  &lt;code&gt;Stream&lt;/code&gt; &lt;/font&gt;，这是目前相对最优的 Redis 消息队列实现。&lt;/p&gt;
&lt;p&gt;相关阅读：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZ0NVVDVUY0NRUkF4WWtUSmZUUmpKdw==&#34;&gt;Redis 消息队列发展历程 - 阿里开发者 - 2022&lt;/span&gt;。&lt;/p&gt;
&lt;h1 id=&#34;redis-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-命令&#34;&gt;#&lt;/a&gt; Redis 命令&lt;/h1&gt;
&lt;p&gt;Redis 根据命令所操作对象的不同，可以分为三大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对 Redis 进行基础性操作的命令&lt;/li&gt;
&lt;li&gt;对 Key 的操作命令&lt;/li&gt;
&lt;li&gt;对 Value 的操作命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基础命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础命令&#34;&gt;#&lt;/a&gt; 基础命令&lt;/h2&gt;
&lt;p&gt;首先通过  &lt;code&gt;redis-cli&lt;/code&gt;  命令进入到 Redis 命令行客户端，然后再运行下面的命令：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PING&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;心跳命令&lt;/font&gt;，会看到 PONG 响应，则说明该客户端与 Redis 的连接是正常的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SELECT&lt;/code&gt;  dbindex&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;切换数据库&lt;/font&gt;。Redis 默认有 16 个数据库，这个在 RDM 图形客户端中可以直观地看到。默认使用的是 0 号 DB，可以通过 select db 索引来切换 DB。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DBSIZE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查看当前数据库中 key 的数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FLUSHDB&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除当前数据库中的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FLUSHALL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除所有数据库中的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用  &lt;code&gt;exit&lt;/code&gt;  /  &lt;code&gt;quit&lt;/code&gt;  命令均可退出 Redis 命令行客户端。&lt;/p&gt;
&lt;h2 id=&#34;key-相关命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#key-相关命令&#34;&gt;#&lt;/a&gt; key 相关命令&lt;/h2&gt;
&lt;p&gt;因此，在介绍 Redis 中常用的 value 数据类型前，先介绍一下 key 相关的命令。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DEL&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;key 存在时，删除 key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNLINK&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;非阻塞删除 key，仅仅将 key 从 keyspace 元数据中删除，真正的删除会在后续异步中操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DUMP key&lt;/td&gt;
&lt;td&gt;返回 key 被序列化后的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EXISTS&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;检查 key 是否存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EXPIRE&lt;/code&gt;  key seconds&lt;/td&gt;
&lt;td&gt;以秒为单位，设置 key 的过期时间。&lt;font color=&#39;red&#39;&gt;默认 -1 表示永不过期&lt;/font&gt;。（时间间隔）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PEXPIRE key milliseconds&lt;/td&gt;
&lt;td&gt;以毫秒为单位，设置 key 过期时间。（时间间隔）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EXPIREAT&lt;/code&gt;  key timestamp&lt;/td&gt;
&lt;td&gt;与 EXPIRE 类似，以秒为单位，不同点在于该命令接受的时间参数是 UNIX 时间戳（unix timestamp）&lt;font color=&#39;red&#39;&gt;（时刻）&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PEXPIREAT key milliseconds-timestamp&lt;/td&gt;
&lt;td&gt;以毫秒为单位，设置 key 过期时间的 UNIX 时间戳。&lt;font color=&#39;red&#39;&gt;（时刻）&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KEYS&lt;/code&gt;  pattern&lt;/td&gt;
&lt;td&gt;查找所有符合给定模式（pattern）的 key。例如  &lt;code&gt;KEYS *&lt;/code&gt;  查看当前数据库的所有 key。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MOVE&lt;/code&gt;  key dbindex[0-15]&lt;/td&gt;
&lt;td&gt;将当前数据库的 key 移动到指定数据库 [0-15] 中，默认为 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SELECT&lt;/code&gt;  dbindex&lt;/td&gt;
&lt;td&gt;切换到指定的数据库 [0-15]，默认为 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DBSIZE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查看当前数据库的 key 数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FLUSHDB&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;清空当前库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FLUSHALL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通杀所有库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PERSIST&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;持久保持 key，移除其过期时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TTL&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;以秒为单位，返回 key 的剩余生存时间（TTL，time to live）。&lt;font color=&#39;red&#39;&gt;其中 -1 表示永不过期，-2 表示已过期&lt;/font&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PTTL key&lt;/td&gt;
&lt;td&gt;以毫秒为单位，返回 key 的剩余生存时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RANDOMKEY&lt;/td&gt;
&lt;td&gt;从当前数据库中随机返回一个 key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RENAME key newkey&lt;/td&gt;
&lt;td&gt;将 key 改名为 newkey&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RENAMENX key newkey&lt;/td&gt;
&lt;td&gt;仅当 newkey 不存在时，将 key 改名为 newkey&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TYPE&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;返回 key 所存储&lt;font color=&#39;red&#39;&gt; value 的数据类型&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;redis-数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-数据类型&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟Redis 数据类型&lt;/mark&gt;&lt;/h1&gt;
&lt;p&gt;前文已声明过 Redis 是基于 Key-Value 的，而 &lt;strong&gt;&lt;font color=&#39;orange&#39;&gt;key 类型一般是 String，这里所介绍的数据类型指的是 value 的数据类型&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;常用数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用数据类型&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟常用数据类型&lt;/mark&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;更多 Redis value 数据类型 命令以及详细使用指南，请查看 Redis 官网对应的介绍：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcw==&#34;&gt;https://redis.io/commands&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis 中比较常见的数据类型有下面这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;5 种基础数据类型&lt;/font&gt;&lt;/strong&gt;： &lt;code&gt;String&lt;/code&gt; （字符串）、 &lt;code&gt;List&lt;/code&gt; （列表）、 &lt;code&gt;Set&lt;/code&gt; （集合）、 &lt;code&gt;Hash&lt;/code&gt; （散列）、 &lt;code&gt;Zset&lt;/code&gt; （有序集合）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;3 种特殊数据类型&lt;/font&gt;&lt;/strong&gt;： &lt;code&gt;HyperLogLog&lt;/code&gt; （基数统计）、 &lt;code&gt;Bitmap&lt;/code&gt; （位图）、 &lt;code&gt;Geospatial&lt;/code&gt;  (地理位置)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了上面提到的之外，还有一些其他的比如 &lt;a href=&#34;https://javaguide.cn/cs-basics/data-structure/bloom-filter.html&#34;&gt; &lt;code&gt;Bloom filter&lt;/code&gt; （布隆过滤器）&lt;/a&gt;、 &lt;code&gt;Bitfield&lt;/code&gt; （位域）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231203143049962.png&#34; alt=&#34;image-20231203143049962&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-种基础数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-种基础数据类型&#34;&gt;#&lt;/a&gt; 5 种基础数据类型&lt;/h3&gt;
&lt;p&gt;Redis 共有 5 种基本数据类型：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。&lt;/p&gt;
&lt;p&gt;这 5 种数据类型是直接提供给用户使用的，是数据的保存形式，其底层实现主要依赖这 8 种数据结构：简单动态字符串（ &lt;code&gt;SDS&lt;/code&gt; ）、 &lt;code&gt;LinkedList&lt;/code&gt; （双向链表）、 &lt;code&gt;Dict&lt;/code&gt; （哈希表 / 字典）、 &lt;code&gt;SkipList&lt;/code&gt; （跳跃表）、 &lt;code&gt;Intset&lt;/code&gt; （整数集合）、 &lt;code&gt;ZipList&lt;/code&gt; （压缩列表）、 &lt;code&gt;QuickList&lt;/code&gt; （快速列表）。&lt;/p&gt;
&lt;p&gt;**&lt;font color=&#39;red&#39;&gt;5 种基本数据类型对应的底层数据结构&lt;/font&gt;** 实现如下表所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;String&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;List&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Hash&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Set&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Zset&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SDS&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;LinkedList/ZipList/QuickList&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Dict、ZipList&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Dict、Intset&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ZipList、SkipList&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Redis 3.2 之前，List 底层实现是 LinkedList 或者 ZipList。 Redis 3.2 之后，引入了 LinkedList 和 ZipList 的结合 QuickList，List 的底层实现变为 QuickList。从 Redis 7.0 开始， ZipList 被 ListPack 取代。&lt;/p&gt;
&lt;p&gt;你可以在 Redis 官网上找到 Redis 数据类型 / 结构非常详细的介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5jb20vcmVkaXMtZW50ZXJwcmlzZS9kYXRhLXN0cnVjdHVyZXMv&#34;&gt;Redis Data Structures&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby9kb2NzL21hbnVhbC9kYXRhLXR5cGVzL2RhdGEtdHlwZXMtdHV0b3JpYWwv&#34;&gt;Redis Data types tutorial&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;未来随着 Redis 新版本的发布，可能会有新的数据结构出现，通过查阅 Redis 官网对应的介绍，你总能获取到最靠谱的信息。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220720181630203.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;string字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string字符串&#34;&gt;#&lt;/a&gt; String（字符串）&lt;/h4&gt;
&lt;h5 id=&#34;介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;p&gt;String 是 Redis 中&lt;font color=&#39;red&#39;&gt;最简单、最常用&lt;/font&gt;的一个数据类型。&lt;/p&gt;
&lt;p&gt;String 是一种 **&lt;font color=&#39;red&#39;&gt;二进制安全&lt;/font&gt;** 的数据类型，&lt;font color=&#39;red&#39;&gt;可以用来存储任何类型的数据&lt;/font&gt;，比如字符串、整数、浮点数、图片（图片的 base64 编码或者解码或者图片的路径）、序列化后的对象。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220719124403897.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;虽然 Redis 是用 C 语言写的，但是 Redis 并没有使用 C 的字符串表示，而是自己构建了一种 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;简单动态字符串&lt;/font&gt;&lt;/strong&gt;（Simple Dynamic String， &lt;code&gt;SDS&lt;/code&gt; ）。相比于 C 的原生字符串，Redis 的 &lt;font color=&#39;red&#39;&gt;SDS 不光可以保存文本数据，还可以保存二进制数据，并且获取字符串长度复杂度为 O (1)&lt;/font&gt;（C 字符串为 O (N)）。此外，Redis 的 &lt;font color=&#39;red&#39;&gt;SDS API 是安全的，不会造成缓冲区溢出&lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令&#34;&gt;#&lt;/a&gt; 命令&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SET key value&lt;/td&gt;
&lt;td&gt;设置指定 key 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SETNX&lt;/code&gt;  key value&lt;/td&gt;
&lt;td&gt;只有在&lt;font color=&#39;red&#39;&gt; key 不存在时&lt;/font&gt;设置 key 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET key&lt;/td&gt;
&lt;td&gt;获取指定 key 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MSET&lt;/code&gt;  key1 value1 key2 value2 ……&lt;/td&gt;
&lt;td&gt;设置一个或&lt;font color=&#39;red&#39;&gt;多个&lt;/font&gt;指定 key 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MGET key1 key2 ...&lt;/td&gt;
&lt;td&gt;获取一个或多个指定 key 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;STRLEN&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;返回 key 所储存的&lt;font color=&#39;red&#39;&gt;字符串值的长度&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;INCR&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;将 key 中储存的数字值增一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DECR&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;将 key 中储存的数字值减一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EXISTS key&lt;/td&gt;
&lt;td&gt;判断指定 key 是否存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DEL&lt;/code&gt;  key（通用）&lt;/td&gt;
&lt;td&gt;删除指定的 key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EXPIRE&lt;/code&gt;  key seconds（通用）&lt;/td&gt;
&lt;td&gt;给指定 key 设置过期时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;基本操作&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SET key value&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GET key&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;value&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; EXISTS key&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; STRLEN key&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; DEL key&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GET key&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nil&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;批量设置&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; MSET key1 value1 key2 value2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; MGET key1 key2 &lt;span class=&#34;token comment&#34;&gt;# 批量获取多个 key 对应的 value&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;计数器（字符串的内容为整数的时候可以使用）：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SET number &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; INCR number &lt;span class=&#34;token comment&#34;&gt;# 将 key 中储存的数字值增一&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GET number&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; DECR number &lt;span class=&#34;token comment&#34;&gt;# 将 key 中储存的数字值减一&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GET number&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;设置过期时间（默认为永不过期）&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; EXPIRE key &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SETEX key &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt; value &lt;span class=&#34;token comment&#34;&gt;# 设置值并设置过期时间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; TTL key&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;56&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;string-应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string-应用&#34;&gt;#&lt;/a&gt; String 应用&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;常规数据的缓存&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例：缓存 Session、Token、图片地址、序列化后的对象 (相比较于 Hash 存储更节省内存)。&lt;/li&gt;
&lt;li&gt;相关命令： &lt;code&gt;SET&lt;/code&gt; 、 &lt;code&gt;GET&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;需要&lt;font color=&#39;red&#39;&gt;计数&lt;/font&gt;的场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例：用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数。&lt;/li&gt;
&lt;li&gt;相关命令： &lt;code&gt;SET&lt;/code&gt; 、 &lt;code&gt;GET&lt;/code&gt; 、  &lt;code&gt;INCR&lt;/code&gt; 、 &lt;code&gt;DECR&lt;/code&gt;  。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;分布式锁&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;利用  &lt;code&gt;SETNX key value&lt;/code&gt;  命令可以实现一个最简易的分布式锁（存在一些缺陷，通常不建议这样实现分布式锁）。&lt;/p&gt;
&lt;h4 id=&#34;list列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#list列表&#34;&gt;#&lt;/a&gt; List（列表）&lt;/h4&gt;
&lt;h5 id=&#34;介绍-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-2&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;p&gt;Redis 中的 List 其实就是&lt;font color=&#39;red&#39;&gt;链表数据结构的实现&lt;/font&gt;。我在 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vY3MtYmFzaWNzL2RhdGEtc3RydWN0dXJlL2xpbmVhci1kYXRhLXN0cnVjdHVyZS5odG1s&#34;&gt;线性数据结构：数组、链表、栈、队列&lt;/span&gt; 这篇文章中详细介绍了链表这种数据结构，我这里就不多做介绍了。&lt;/p&gt;
&lt;p&gt;许多高级编程语言都内置了链表的实现比如 Java 中的  &lt;code&gt;LinkedList&lt;/code&gt; ，但是 C 语言并没有实现链表，所以 Redis 实现了自己的链表数据结构。Redis 的 List 的实现为一个 **&lt;font color=&#39;#B32015&#39;&gt;双向链表&lt;/font&gt;**，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220719124413287.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;命令-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令-2&#34;&gt;#&lt;/a&gt; 命令&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RPUSH&lt;/code&gt;  key value1 value2 ...&lt;/td&gt;
&lt;td&gt;在指定列表的尾部（右边）添加一个或多个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LPUSH key value1 value2 ...&lt;/td&gt;
&lt;td&gt;在指定列表的头部（左边）添加一个或多个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LSET&lt;/code&gt;  key index value&lt;/td&gt;
&lt;td&gt;将指定列表索引 index 位置的值设置为 value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RPOP&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;移除并获取指定列表的最后一个元素 (最右边)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LPOP key&lt;/td&gt;
&lt;td&gt;移除并获取指定列表的第一个元素 (最左边)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LLEN&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;获取列表元素数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LRANGE&lt;/code&gt;  key start end&lt;/td&gt;
&lt;td&gt;获取列表 start 和 end 之间 的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;通过  &lt;code&gt;RPUSH/LPOP&lt;/code&gt;  或者  &lt;code&gt;LPUSH/RPOP&lt;/code&gt; &lt;strong&gt; 实现队列（先进先出）&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; RPUSH myList value1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; RPUSH myList value2 value3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; LPOP myList&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;value1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; LRANGE myList &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value3&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; LRANGE myList &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value3&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过  &lt;code&gt;RPUSH/RPOP&lt;/code&gt;  或者 &lt;code&gt;LPUSH/LPOP&lt;/code&gt;  &lt;strong&gt;实现栈（先进后出）&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; RPUSH myList2 value1 value2 value3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; RPOP myList2 &lt;span class=&#34;token comment&#34;&gt;# 将 list 的最右边的元素取出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;value3&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我专门画了一个图方便大家理解  &lt;code&gt;RPUSH&lt;/code&gt;  ,  &lt;code&gt;LPOP&lt;/code&gt;  ,  &lt;code&gt;lpush&lt;/code&gt;  ,  &lt;code&gt;RPOP&lt;/code&gt;  命令：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/github/javaguide/database/redis/redis-list.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通过  &lt;code&gt;LRANGE&lt;/code&gt;  &lt;strong&gt;查看对应下标范围的列表元素&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; RPUSH myList value1 value2 value3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; LRANGE myList &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; LRANGE myList &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value3&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过  &lt;code&gt;LRANGE&lt;/code&gt;  命令，你可以&lt;font color=&#39;red&#39;&gt;基于 List 实现分页查询&lt;/font&gt;，性能非常高！&lt;/p&gt;
&lt;p&gt;通过  &lt;code&gt;LLEN&lt;/code&gt;  &lt;strong&gt;查看链表长度&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; LLEN myList&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用&#34;&gt;#&lt;/a&gt; 应用&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;信息流展示&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例：最新文章、最新动态。&lt;/li&gt;
&lt;li&gt;相关命令： &lt;code&gt;LPUSH&lt;/code&gt; 、 &lt;code&gt;LRANGE&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;消息队列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt;  可以用来做消息队列，只是&lt;font color=&#39;red&#39;&gt;功能过于简单且存在很多缺陷&lt;/font&gt;，不建议这样做。&lt;/p&gt;
&lt;p&gt;相对来说，Redis 5.0 新增加的一个数据结构  &lt;code&gt;Stream&lt;/code&gt;  更适合做消息队列一些，只是功能依然非常简陋。和专业的消息队列相比，还是有很多欠缺的地方比如&lt;font color=&#39;red&#39;&gt;消息丢失和堆积问题&lt;/font&gt;不好解决。&lt;/p&gt;
&lt;h4 id=&#34;hash哈希&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hash哈希&#34;&gt;#&lt;/a&gt; Hash（哈希）&lt;/h4&gt;
&lt;h5 id=&#34;介绍-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-3&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;p&gt;Redis 中的 Hash 是一个&lt;font color=&#39;red&#39;&gt; String 类型的 field-value（键值对） &lt;/font&gt;的映射表，特别适合用于&lt;font color=&#39;red&#39;&gt;存储对象&lt;/font&gt;，后续操作的时候，你可以直接修改这个对象中的某些字段的值。&lt;/p&gt;
&lt;p&gt;Hash 类似于 JDK1.8 前的  &lt;code&gt;HashMap&lt;/code&gt; ，内部实现也差不多 (&lt;font color=&#39;red&#39;&gt;数组 + 链表&lt;/font&gt;)。不过，Redis 的 Hash 做了更多优化。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220719124421703.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;命令-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令-3&#34;&gt;#&lt;/a&gt; 命令&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HSET&lt;/code&gt;  key field value&lt;/td&gt;
&lt;td&gt;将指定哈希表 key 中指定字段 field 的值设置为 value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HSETNX key field value&lt;/td&gt;
&lt;td&gt;仅当指定字段 field 不存在时，设置其值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HMSET&lt;/code&gt;  key field1 value1 field2 value2 ...&lt;/td&gt;
&lt;td&gt;同时将一个或&lt;font color=&#39;red&#39;&gt;多个&lt;/font&gt; field-value (域 - 值) 对设置到指定哈希表 key 中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HGET key field&lt;/td&gt;
&lt;td&gt;获取指定哈希表中指定字段的&lt;font color=&#39;red&#39;&gt;值&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HMGET key field1 field2 ...&lt;/td&gt;
&lt;td&gt;获取指定哈希表中一个或者多个指定字段的&lt;font color=&#39;red&#39;&gt;值&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HGETALL&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;获取指定哈希表 key 中所有的 **&lt;font color=&#39;red&#39;&gt;键值对&lt;/font&gt;**&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HEXISTS&lt;/code&gt;  key field&lt;/td&gt;
&lt;td&gt;查看指定哈希表中指定的字段是否存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HDEL&lt;/code&gt;  key field1 field2 ...&lt;/td&gt;
&lt;td&gt;删除一个或多个哈希表字段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HLEN&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;获取指定哈希表中字段的数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HINCRBY&lt;/code&gt;  key field increment&lt;/td&gt;
&lt;td&gt;对指定哈希中的指定字段做运算操作（正数为加，负数为减）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;模拟对象数据存储&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; HMSET userInfoKey name &lt;span class=&#34;token string&#34;&gt;&#34;guide&#34;&lt;/span&gt; description &lt;span class=&#34;token string&#34;&gt;&#34;dev&#34;&lt;/span&gt; age &lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; HEXISTS userInfoKey name &lt;span class=&#34;token comment&#34;&gt;# 查看 key 对应的 value 中指定的字段是否存在。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; HGET userInfoKey name &lt;span class=&#34;token comment&#34;&gt;# 获取存储在哈希表中指定字段的值。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;guide&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; HGET userInfoKey age&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;24&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; HGETALL userInfoKey &lt;span class=&#34;token comment&#34;&gt;# 获取在哈希表中指定 key 的所有字段和值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;guide&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;description&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;dev&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;age&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;24&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; HSET userInfoKey name &lt;span class=&#34;token string&#34;&gt;&#34;GuideGeGe&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; HGET userInfoKey name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;GuideGeGe&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; HINCRBY userInfoKey age &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;26&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;应用-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用-2&#34;&gt;#&lt;/a&gt; 应用&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;对象数据存储场景&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例：用户信息、商品信息、文章信息、购物车信息。&lt;/li&gt;
&lt;li&gt;相关命令： &lt;code&gt;HSET&lt;/code&gt;  （设置单个字段的值）、 &lt;code&gt;HMSET&lt;/code&gt; （设置多个字段的值）、 &lt;code&gt;HGET&lt;/code&gt; （获取单个字段的值）、 &lt;code&gt;HMGET&lt;/code&gt; （获取多个字段的值）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set集合&#34;&gt;#&lt;/a&gt; Set（集合）&lt;/h4&gt;
&lt;h5 id=&#34;介绍-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-4&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;p&gt;Redis 中的 Set 类型是一种无序集合，集合中的 **&lt;font color=&#39;red&#39;&gt;元素没有先后顺序，但都唯一（不重复）&lt;/font&gt;**，有点类似于 Java 中的  &lt;code&gt;HashSet&lt;/code&gt;  。当你需要存储一个列表数据，又不希望出现重复数据时，Set 是一个很好的选择，并且 Set 提供了判断某个元素是否在一个 Set 集合内的重要接口，这个也是 List 所不能提供的。&lt;/p&gt;
&lt;p&gt;你可以基于 Set 轻易实现&lt;font color=&#39;red&#39;&gt;交集、并集、差集&lt;/font&gt;的操作，比如你可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。这样的话，Set 可以非常方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220719124430264.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;命令-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令-4&#34;&gt;#&lt;/a&gt; 命令&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SADD&lt;/code&gt;  key member1 member2 ...&lt;/td&gt;
&lt;td&gt;向指定集合添加一个或多个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SMEMBERS&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;获取指定集合中的所有元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SCARD&lt;/code&gt;  key&lt;/td&gt;
&lt;td&gt;获取指定集合的元素数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SISMEMBER&lt;/code&gt;  key member&lt;/td&gt;
&lt;td&gt;判断指定元素是否在指定集合中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SINTER&lt;/code&gt;  key1 key2 ...&lt;/td&gt;
&lt;td&gt;获取给定所有集合的交集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SINTERSTORE destination key1 key2 ...&lt;/td&gt;
&lt;td&gt;将给定所有集合的交集存储在 destination 中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SUNION&lt;/code&gt;  key1 key2 ...&lt;/td&gt;
&lt;td&gt;获取给定所有集合的并集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUNIONSTORE destination key1 key2 ...&lt;/td&gt;
&lt;td&gt;将给定所有集合的并集存储在 destination 中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SDIFF&lt;/code&gt;  key1 key2 ...&lt;/td&gt;
&lt;td&gt;获取给定所有集合的差集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SDIFFSTORE destination key1 key2 ...&lt;/td&gt;
&lt;td&gt;将给定所有集合的差集存储在 destination 中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SPOP&lt;/code&gt;  key count&lt;/td&gt;
&lt;td&gt;随机移除并获取指定集合中一个或多个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SRANDMEMBER&lt;/code&gt;  key count&lt;/td&gt;
&lt;td&gt;随机获取指定集合中指定数量的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;基本操作&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SADD mySet value1 value2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SADD mySet value1 &lt;span class=&#34;token comment&#34;&gt;# 不允许有重复元素，因此添加失败&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SMEMBERS mySet&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SCARD mySet&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SISMEMBER mySet value1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SADD mySet2 value2 value3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mySet&lt;/code&gt;  :  &lt;code&gt;value1&lt;/code&gt; 、 &lt;code&gt;value2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mySet2&lt;/code&gt; ： &lt;code&gt;value2&lt;/code&gt; 、 &lt;code&gt;value3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;求交集&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SINTERSTORE mySet3 mySet mySet2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SMEMBERS mySet3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;求并集&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SUNION mySet mySet2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value3&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;求差集&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SDIFF mySet mySet2 &lt;span class=&#34;token comment&#34;&gt;# 差集是由所有属于 mySet 但不属于 A 的元素组成的集合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;set-应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set-应用&#34;&gt;#&lt;/a&gt; Set 应用&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;需要存放的&lt;font color=&#39;red&#39;&gt;数据不能重复&lt;/font&gt;的场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例：&lt;font color=&#39;red&#39;&gt;网站 UV （Unique Visitor，独立访客）统计&lt;/font&gt;（数据量巨大的场景还是  &lt;code&gt;HyperLogLog&lt;/code&gt;  更适合一些）、&lt;font color=&#39;red&#39;&gt;点赞数统计&lt;/font&gt;等场景。&lt;/li&gt;
&lt;li&gt;相关命令： &lt;code&gt;SCARD&lt;/code&gt; （获取集合数量）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220719073733851.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要获取多个数据源&lt;font color=&#39;red&#39;&gt;交集、并集和差集&lt;/font&gt;的场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例：共同好友 (交集)、共同粉丝 (交集)、共同关注 (交集)、好友推荐（差集）、音乐推荐（差集）、订阅号推荐（差集 + 交集） 等场景。&lt;/li&gt;
&lt;li&gt;相关命令： &lt;code&gt;SINTER&lt;/code&gt; （交集）、 &lt;code&gt;SINTERSTORE&lt;/code&gt;  （交集）、 &lt;code&gt;SUNION&lt;/code&gt;  （并集）、 &lt;code&gt;SUNIONSTORE&lt;/code&gt; （并集）、 &lt;code&gt;SDIFF&lt;/code&gt; （差集）、 &lt;code&gt;SDIFFSTORE&lt;/code&gt;  （差集）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220719074543513.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要&lt;font color=&#39;red&#39;&gt;随机获取数据源中的元素&lt;/font&gt;的场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例：&lt;font color=&#39;red&#39;&gt;抽奖系统、随机点名&lt;/font&gt;等场景。&lt;/li&gt;
&lt;li&gt;相关命令： &lt;code&gt;SPOP&lt;/code&gt; （随机获取集合中的元素并移除，适合&lt;font color=&#39;red&#39;&gt;不允许重复中奖&lt;/font&gt;的场景）、 &lt;code&gt;SRANDMEMBER&lt;/code&gt; （随机获取集合中的元素，适合&lt;font color=&#39;red&#39;&gt;允许重复中奖&lt;/font&gt;的场景）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sorted-setzset有序集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sorted-setzset有序集合&#34;&gt;#&lt;/a&gt; Sorted Set/Zset（有序集合）&lt;/h4&gt;
&lt;h5 id=&#34;介绍-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-5&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;p&gt;Sorted Set 也称 Zset，和 Set 相比 **&lt;font color=&#39;red&#39;&gt;增加了一个权重参数&lt;/font&gt;**  &lt;code&gt;score&lt;/code&gt; ，使得集合中的元素能够按  &lt;code&gt;score&lt;/code&gt;  进行 **&lt;font color=&#39;red&#39;&gt;有序排列&lt;/font&gt;**，还可以通过  &lt;code&gt;score&lt;/code&gt;  的范围来获取元素的列表。有点像是 Java 中  &lt;code&gt;HashMap&lt;/code&gt;  和  &lt;code&gt;TreeSet&lt;/code&gt;  的结合体。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220719124437791.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;命令-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令-5&#34;&gt;#&lt;/a&gt; 命令&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ZADD&lt;/code&gt;  key score1 member1 score2 member2 ...&lt;/td&gt;
&lt;td&gt;向指定有序集合添加一个或多个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ZCARD&lt;/code&gt;  KEY&lt;/td&gt;
&lt;td&gt;获取指定有序集合的元素数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ZSCORE&lt;/code&gt;  key member&lt;/td&gt;
&lt;td&gt;获取指定有序集合中指定元素的 score 值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ZINTERSTORE&lt;/code&gt;  destination numkeys key1 key2 ...&lt;/td&gt;
&lt;td&gt;将给定所有有序集合的交集存储在 destination 中，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;对相同元素对应的 score 值进行 SUM 聚合操作&lt;/font&gt;&lt;/strong&gt;，&lt;font color=&#39;red&#39;&gt;numkeys 为集合数量&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ZUNIONSTORE&lt;/code&gt;  destination numkeys key1 key2 ...&lt;/td&gt;
&lt;td&gt;求并集，其它和 ZINTERSTORE 类似&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ZDIFFSTORE&lt;/code&gt;  destination numkeys key1 key2 ...&lt;/td&gt;
&lt;td&gt;求差集，其它和 ZINTERSTORE 类似&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ZRANGE&lt;/code&gt;  key start end&lt;/td&gt;
&lt;td&gt;获取指定有序集合 start 和 end 之间的元素（&lt;font color=&#39;red&#39;&gt;score 从低到高&lt;/font&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ZREVRANGE&lt;/code&gt;  key start end&lt;/td&gt;
&lt;td&gt;获取指定有序集合 start 和 end 之间的元素（&lt;font color=&#39;red&#39;&gt;score 从高到底&lt;/font&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ZREVRANK&lt;/code&gt;  key member&lt;/td&gt;
&lt;td&gt;获取指定有序集合中指定元素的排名 (&lt;font color=&#39;red&#39;&gt;score 从大到小排序&lt;/font&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;基本操作&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZADD myZset &lt;span class=&#34;token number&#34;&gt;2.0&lt;/span&gt; value1 &lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt; value2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZCARD myZset&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZSCORE myZset value1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2.0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZRANGE myZset &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZREVRANGE myZset &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;value2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZADD myZset2 &lt;span class=&#34;token number&#34;&gt;4.0&lt;/span&gt; value2 &lt;span class=&#34;token number&#34;&gt;3.0&lt;/span&gt; value3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;myZset&lt;/code&gt;  :  &lt;code&gt;value1&lt;/code&gt; (2.0)、 &lt;code&gt;value2&lt;/code&gt; (1.0) 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;myZset2&lt;/code&gt; ： &lt;code&gt;value2&lt;/code&gt;  （4.0）、 &lt;code&gt;value3&lt;/code&gt; (3.0) 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;获取指定元素的排名&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZREVRANK myZset value1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZREVRANK myZset value2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;求交集&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZINTERSTORE myZset3 &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; myZset myZset2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZRANGE myZset3 &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; WITHSCORES&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;value2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;求并集&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZUNIONSTORE myZset4 &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; myZset myZset2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZRANGE myZset4 &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; WITHSCORES&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;value1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;value3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;value2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;求差集&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZDIFF &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; myZset myZset2 WITHSCORES&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;value1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;zset-应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zset-应用&#34;&gt;#&lt;/a&gt; Zset 应用&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;需要&lt;font color=&#39;red&#39;&gt;根据某个权重对元素进行排序（排行榜）&lt;/font&gt;的场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例：各种排行榜比如直播间送礼物的排行榜、朋友圈的微信步数排行榜、王者荣耀中的段位排行榜、话题热度排行榜等等。&lt;/li&gt;
&lt;li&gt;相关命令： &lt;code&gt;ZRANGE&lt;/code&gt;  (从小到大排序)、  &lt;code&gt;ZREVRANGE&lt;/code&gt;  （从大到小排序）、 &lt;code&gt;ZREVRANK&lt;/code&gt;  (获取指定元素的排名)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/2021060714195385.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Sorted Set 能够轻松应对百万级别的用户数据排序，简直就是专门为排行榜设计的数据结构！下面详细介绍一下如何使用 Sorted Set 来设计制作一个排行榜：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;User&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;user1&lt;/td&gt;
&lt;td&gt;112.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user2&lt;/td&gt;
&lt;td&gt;100.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user3&lt;/td&gt;
&lt;td&gt;123.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user4&lt;/td&gt;
&lt;td&gt;100.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user5&lt;/td&gt;
&lt;td&gt;33.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user6&lt;/td&gt;
&lt;td&gt;993.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;把上表中的数据添加到 Sorted Set 中：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 通过 zadd 命令添加了 6 个元素到 cus_order_set 中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZADD cus_order_set &lt;span class=&#34;token number&#34;&gt;112.0&lt;/span&gt; user1 &lt;span class=&#34;token number&#34;&gt;100.0&lt;/span&gt; user2 &lt;span class=&#34;token number&#34;&gt;123.0&lt;/span&gt; user3 &lt;span class=&#34;token number&#34;&gt;100.0&lt;/span&gt; user4 &lt;span class=&#34;token number&#34;&gt;33.0&lt;/span&gt; user5 &lt;span class=&#34;token number&#34;&gt;993.0&lt;/span&gt; user6&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/up-c25cf4cc1d4d3a484b4db93672138b8c104.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看包含所有用户的排行榜：&lt;/strong&gt; 通过 ZRANGE (从小到大排序) / ZREVRANGE （从大到小排序）&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# -1 代表的是全部的用户数据，&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZREVRANGE cus_order_set &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user6&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user3&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user4&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user5&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;查看只包含前 3 名的排行榜:&lt;/strong&gt; 限定范围区间即可。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 0 为 start  2 为 stop&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZREVRANGE cus_order_set &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user6&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user3&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;查询某个用户的分数:&lt;/strong&gt; 通过  &lt;code&gt;ZSCORE &lt;/code&gt; 命令即可。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZSCORE  cus_order_set &lt;span class=&#34;token string&#34;&gt;&#34;user1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;112&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;查询某个用户的排名:&lt;/strong&gt; 通过  &lt;code&gt;ZREVRANK&lt;/code&gt;  命令即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bahs&#34;&gt;127.0.0.1:6379&amp;gt; ZREVRANK  cus_order_set &amp;quot;user3&amp;quot;
(integer) 1 # user3 排名第2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;对用户的排名数据进行更新:&lt;/strong&gt; 通过  &lt;code&gt; ZINCRBY&lt;/code&gt;  命令即可。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 对 user1 的分数加 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZINCRBY cus_order_set +2 &lt;span class=&#34;token string&#34;&gt;&#34;user1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;114&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 对 user1 的分数减 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZINCRBY cus_order_set &lt;span class=&#34;token parameter variable&#34;&gt;-1&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;113&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 查看 user1 的分数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZSCORE  cus_order_set &lt;span class=&#34;token string&#34;&gt;&#34;user1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;113&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;除了我上面提到的之外，还有一些其他的命令来帮助你解决更多排行榜场景的需求，想要深入研究的小伙伴可以仔细学习哦！&lt;/p&gt;
&lt;p&gt;不过，需要注意的一点是：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Redis 中只保存了排行榜展示所需的数据，需要用户的具体信息数据的话，还是需要去对应的数据库（比如 MySQL）中查。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你以为这样就完事了？ 不存在的！还有一些无法仅仅通过 Redis 提供的命令解决的场景。&lt;/p&gt;
&lt;p&gt;比如，&lt;strong&gt;如何实现多条件排序？&lt;/strong&gt; 其实，答案也比较简单，对于大部分场景，我们直接对 score 值做文章即可。&lt;/p&gt;
&lt;p&gt;更具体点的话就是，我们&lt;font color=&#39;red&#39;&gt;根据特定的条件来拼接 score 值即可&lt;/font&gt;。比如我们还要加上时间先后条件的话，直接在 score 值添加上时间戳即可。&lt;/p&gt;
&lt;p&gt;再比如，&lt;strong&gt;如何实现指定日期（比如最近 7 天）的用户数据排序？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我说一种比较简单的方法：我们把每一天的数据都按照日期为名字，比如 20350305 就代表 2035 年 3 月 5 号。&lt;/p&gt;
&lt;p&gt;如果我们需要查询最近 n 天的排行榜数据的话，直接 ZUNIONSTORE 来求 n 个  &lt;code&gt;sorted set &lt;/code&gt; 的并集即可。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ZUNIONSTORE last_n_days n &lt;span class=&#34;token number&#34;&gt;20350305&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20350306&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我不知道大家看懂了没有，我这里还是简单地造一些数据模拟一下吧！&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 分别添加了 3 天的数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZADD &lt;span class=&#34;token number&#34;&gt;20350305&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;112.0&lt;/span&gt; user1 &lt;span class=&#34;token number&#34;&gt;100.0&lt;/span&gt; user2 &lt;span class=&#34;token number&#34;&gt;123.0&lt;/span&gt; user3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZADD &lt;span class=&#34;token number&#34;&gt;20350306&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100.0&lt;/span&gt; user4&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZADD &lt;span class=&#34;token number&#34;&gt;20350307&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;33.0&lt;/span&gt; user5 &lt;span class=&#34;token number&#34;&gt;993.0&lt;/span&gt; user6&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过 ZUNIONSTORE 命令来查看最近 3 天的排行榜情况：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZUNIONSTORE last_n_days &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20350305&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20350306&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20350307&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;现在，这 3 天的数据都集中在了 last_n_days 中。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZREVRANGE last_n_days &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user6&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user3&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user4&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;user5&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果一个用户同时在多个 &lt;code&gt; sorted set&lt;/code&gt;  中的话，它最终的 &lt;code&gt;score&lt;/code&gt;  值就等于这些 &lt;code&gt;sorted set&lt;/code&gt;  中该用户的  &lt;code&gt;score &lt;/code&gt; 值之和。&lt;/p&gt;
&lt;p&gt;既然可以求并集，那必然也可以求交集。你可以通过  &lt;code&gt;ZINTERSTORE &lt;/code&gt; 命令来求多个 n 个  &lt;code&gt;sorted set&lt;/code&gt;  的交集。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有哪些场景可以用到多个  &lt;code&gt;sorted set&lt;/code&gt;  的交集呢？&lt;/strong&gt; 比如每日打卡的场景，你对某一段时间每天打卡的人进行排序。&lt;/p&gt;
&lt;p&gt;这个命令还有一个常用的权重参数 &lt;code&gt;weights&lt;/code&gt; （默认为 1）。在进行并集 / 交集的过程中，每个集合中的元素会将自己的  &lt;code&gt;score&lt;/code&gt;  * &lt;code&gt;weights&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;我下面演示一下这个参数的作用。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# staff_set 存放员工的排名信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZADD staff_set &lt;span class=&#34;token number&#34;&gt;3.0&lt;/span&gt; staff1 &lt;span class=&#34;token number&#34;&gt;4.0&lt;/span&gt; staff2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# staff_set 存放管理者的排名信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZADD manager_set &lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt; manager1 &lt;span class=&#34;token number&#34;&gt;2.0&lt;/span&gt; manager2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果，我们需要将员工和管理者放在一起比较，不过，两者权重分别为 1 和 3。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# staff_set 的权重为 1 manager_set 的权重为 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZUNIONSTORE all_user_set &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; staff_set manager_set WEIGHTS &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;最终排序的结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ZREVRANGE all_user_set &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;manager2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;staff2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;staff1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;manager1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;需要存储的&lt;font color=&#39;red&#39;&gt;数据有优先级&lt;/font&gt;的场景&lt;/strong&gt; 比如&lt;font color=&#39;red&#39;&gt;优先级任务队列&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例：优先级任务队列。&lt;/li&gt;
&lt;li&gt;相关命令： &lt;code&gt;ZRANGE&lt;/code&gt;  (从小到大排序)、  &lt;code&gt;ZREVRANGE&lt;/code&gt;  （从大到小排序）、 &lt;code&gt;ZREVRANK&lt;/code&gt;  (指定元素排名)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小结&#34;&gt;#&lt;/a&gt; 小结&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;一种二进制安全的数据类型，可以用来存储&lt;font color=&#39;red&#39;&gt;任何类型的数据&lt;/font&gt;比如字符串、整数、浮点数、图片（图片的 base64 编码或者解码或者图片的路径）、序列化后的对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List&lt;/td&gt;
&lt;td&gt;Redis 的 List 的实现为一个&lt;font color=&#39;red&#39;&gt;双向链表&lt;/font&gt;，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hash&lt;/td&gt;
&lt;td&gt;一个 String 类型的 &lt;font color=&#39;red&#39;&gt;field-value（键值对）&lt;/font&gt; 的映射表，特别适合用于&lt;font color=&#39;red&#39;&gt;存储对象&lt;/font&gt;，后续操作的时候，你可以直接修改这个对象中的某些字段的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;无序集合&lt;/font&gt;，集合中的元素没有先后顺序但都唯一，有点类似于 Java 中的  &lt;code&gt;HashSet&lt;/code&gt;  。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zset&lt;/td&gt;
&lt;td&gt;和 Set 相比，Sorted Set 增加了一个权重参数  &lt;code&gt;score&lt;/code&gt; ，使得集合中的元素能够按  &lt;code&gt;score&lt;/code&gt;  进行&lt;font color=&#39;red&#39;&gt;有序排列&lt;/font&gt;，还可以通过  &lt;code&gt;score&lt;/code&gt;  的范围来获取元素的列表。有点像是 Java 中  &lt;code&gt;HashMap&lt;/code&gt;  和  &lt;code&gt;TreeSet&lt;/code&gt;  的结合体。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;3-种特殊数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-种特殊数据类型&#34;&gt;#&lt;/a&gt; 3 种特殊数据类型&lt;/h3&gt;
&lt;h4 id=&#34;bitmap位图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bitmap位图&#34;&gt;#&lt;/a&gt; Bitmap（位图）&lt;/h4&gt;
&lt;h5 id=&#34;介绍-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-6&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;官网介绍：Bitmap 不是 Redis 中的实际数据类型，而&lt;strong&gt;是在 String 类型上定义的一组面向位的操作，将其视为位向量&lt;/strong&gt;。由于字符串是二进制安全的块，且最大长度为 512 MB，它们适合用于设置最多 2&lt;sup&gt;32&lt;/sup&gt; 个不同的位。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bitmap 存储的是 **&lt;font color=&#39;red&#39;&gt;连续的二进制数字&lt;/font&gt;**（0 和 1），通过 Bitmap，只需要一个 bit 位来表示某个元素对应的值或者状态，key 就是对应元素本身 。我们知道 8 个 bit 可以组成一个 byte，所以 Bitmap 本身会极大的节省储存空间。&lt;/p&gt;
&lt;p&gt;你可以将 Bitmap 看作是一个存储二进制数字（0 和 1）的数组，数组中&lt;font color=&#39;red&#39;&gt;每个元素的下标叫做 offset（偏移量）&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220720194154133.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;命令-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令-6&#34;&gt;#&lt;/a&gt; 命令&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SETBIT&lt;/code&gt;  key offset value&lt;/td&gt;
&lt;td&gt;设置指定 offset 位置的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GETBIT&lt;/code&gt;  key offset&lt;/td&gt;
&lt;td&gt;获取指定 offset 位置的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BITCOUNT&lt;/code&gt;  key start end&lt;/td&gt;
&lt;td&gt;获取 start 和 end 之前&lt;font color=&#39;red&#39;&gt;值为 1 &lt;/font&gt;的元素个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BITOP&lt;/code&gt;  operation destkey key1 key2 ...&lt;/td&gt;
&lt;td&gt;对一个或多个 Bitmap 进行运算，可用运算符有 &lt;font color=&#39;red&#39;&gt;AND, OR, XOR 以及 NOT&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Bitmap 基本操作演示：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# SETBIT 会返回之前位的值（默认是 0）这里会生成 7 个位&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SETBIT mykey &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SETBIT mykey &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GETBIT mykey &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SETBIT mykey &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SETBIT mykey &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 通过 bitcount 统计被被设置为 1 的位的数量。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; BITCOUNT mykey&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;bitmap-应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bitmap-应用&#34;&gt;#&lt;/a&gt; Bitmap 应用&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;需要保存&lt;font color=&#39;red&#39;&gt;状态信息（0/1 即可表示）&lt;/font&gt;的场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例：用户签到情况、活跃用户情况、用户行为统计（比如是否点赞过某个视频）。&lt;/li&gt;
&lt;li&gt;相关命令： &lt;code&gt;SETBIT&lt;/code&gt; 、 &lt;code&gt;GETBIT&lt;/code&gt; 、 &lt;code&gt;BITCOUNT&lt;/code&gt; 、 &lt;code&gt;BITOP&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hyperloglog基数统计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hyperloglog基数统计&#34;&gt;#&lt;/a&gt; HyperLogLog（基数统计）&lt;/h4&gt;
&lt;h5 id=&#34;介绍-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-7&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;p&gt;HyperLogLog 是一种有名的&lt;font color=&#39;red&#39;&gt;基数计数概率算法&lt;/font&gt; ，基于 LogLog Counting (LLC) 优化改进得来，并不是 Redis 特有的，Redis 只是实现了这个算法并提供了一些开箱即用的 API。&lt;/p&gt;
&lt;p&gt;Redis 提供的 HyperLogLog &lt;font color=&#39;red&#39;&gt;占用空间非常非常小，只需要 12k 的空间就能存储接近 2&lt;sup&gt;64&lt;/sup&gt; 个不同元素&lt;/font&gt;。这是真的厉害，这就是数学的魅力么！并且，Redis 对 HyperLogLog 的存储结构做了优化，采用两种方式计数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稀疏矩阵&lt;/strong&gt;：计数较少的时候，占用空间很小。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;稠密矩阵&lt;/strong&gt;：计数达到某个阈值的时候，占用 12k 的空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis 官方文档中有对应的详细说明：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231206160533080.png&#34; alt=&#34;image-20231206160533080&#34; /&gt;&lt;/p&gt;
&lt;p&gt;基数计数概率算法 **&lt;font color=&#39;red&#39;&gt;为了节省内存并不会直接存储元数据，而是通过一定的概率统计方法预估基数值（集合中包含元素的个数）&lt;/font&gt;&lt;strong&gt;。因此，&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;HyperLogLog 的计数结果并不是一个精确值，存在一定的误差&lt;/font&gt;**（标准误差为  &lt;code&gt;0.81%&lt;/code&gt;  ）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231206160401312.png&#34; alt=&#34;image-20231206160401312&#34; /&gt;&lt;/p&gt;
&lt;p&gt;HyperLogLog 的使用非常简单，但原理非常复杂。HyperLogLog 的原理以及在 Redis 中的实现可以看这篇文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNzg1NzQ0MDU2MzMz&#34;&gt;HyperLogLog 算法的原理讲解以及 Redis 是如何应用它的&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;再推荐一个可以帮助理解 HyperLogLog 原理的工具：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NvbnRlbnQucmVzZWFyY2gubmV1c3Rhci5iaXovYmxvZy9obGwuaHRtbA==&#34;&gt;Sketch of the Day: HyperLogLog — Cornerstone of a Big Data Infrastructure&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;除了 HyperLogLog 之外，Redis 还提供了其他的概率数据结构，对应的官方文档地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby9kb2NzL2RhdGEtdHlwZXMvcHJvYmFiaWxpc3RpYy8=&#34;&gt;https://redis.io/docs/data-types/probabilistic/&lt;/span&gt; 。&lt;/p&gt;
&lt;h5 id=&#34;命令-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令-7&#34;&gt;#&lt;/a&gt; 命令&lt;/h5&gt;
&lt;p&gt;HyperLogLog 相关的命令非常少，最常用的也就 3 个。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PFADD&lt;/code&gt;  key element1 element2 ...&lt;/td&gt;
&lt;td&gt;添加一个或多个元素到 HyperLogLog 中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PFCOUNT&lt;/code&gt;  key1 key2&lt;/td&gt;
&lt;td&gt;获取一个或者多个 HyperLogLog 的唯一计数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PFMERGE&lt;/code&gt;  destkey sourcekey1 sourcekey2 ...&lt;/td&gt;
&lt;td&gt;将多个 HyperLogLog 合并到 destkey 中，destkey 会结合多个源，算出对应的唯一计数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;HyperLogLog 基本操作演示&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; PFADD hll foo bar zap&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; PFADD hll zap zap zap&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; PFADD hll foo bar&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; PFCOUNT hll&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; PFADD some-other-hll &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; PFCOUNT hll some-other-hll&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; PFMERGE desthll hll some-other-hll&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;OK&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; PFCOUNT desthll&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;应用-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用-3&#34;&gt;#&lt;/a&gt; 应用&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;数据量巨大（百万、千万级别以上）的计数场景&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例：热门网站每日 / 每周 / 每月访问 ip 数统计、热门帖子 uv 统计&lt;/li&gt;
&lt;li&gt;相关命令： &lt;code&gt;PFADD&lt;/code&gt; 、 &lt;code&gt;PFCOUNT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;geospatial地理位置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#geospatial地理位置&#34;&gt;#&lt;/a&gt; Geospatial（地理位置）&lt;/h4&gt;
&lt;h5 id=&#34;介绍-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-8&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;p&gt;Geospatial index（地理空间索引，简称 GEO） 主要 **&lt;font color=&#39;red&#39;&gt;用于存储地理位置信息，基于 Sorted Set 实现&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;通过 GEO 我们可以轻松实现&lt;font color=&#39;red&#39;&gt;两个位置距离的计算、获取指定位置附近的元素&lt;/font&gt;等功能。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220720194359494.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;命令-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令-8&#34;&gt;#&lt;/a&gt; 命令&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GEOADD&lt;/code&gt;  key longitude1 latitude1 member1 ...&lt;/td&gt;
&lt;td&gt;添加一个或多个元素对应的经纬度信息到 GEO 中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GEOPOS&lt;/code&gt;  key member1 member2 ...&lt;/td&gt;
&lt;td&gt;返回给定元素的经纬度信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GEODIST&lt;/code&gt;  key member1 member2 M/KM/FT/MI&lt;/td&gt;
&lt;td&gt;返回两个给定元素之间的距离&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GEORADIUS&lt;/code&gt;  key longitude latitude radius distance&lt;/td&gt;
&lt;td&gt;获取指定位置&lt;font color=&#39;red&#39;&gt;附近 distance 范围内&lt;/font&gt;的其他元素，支持 ASC (由近到远)、DESC（由远到近）、Count (数量) 等参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GEORADIUSBYMEMBER&lt;/code&gt;  key member radius distance&lt;/td&gt;
&lt;td&gt;类似于 GEORADIUS 命令，只是&lt;font color=&#39;red&#39;&gt;参照的中心点是 GEO 中的元素&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;基本操作&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GEOADD personLocation &lt;span class=&#34;token number&#34;&gt;116.33&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;39.89&lt;/span&gt; user1 &lt;span class=&#34;token number&#34;&gt;116.34&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;39.90&lt;/span&gt; user2 &lt;span class=&#34;token number&#34;&gt;116.35&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;39.88&lt;/span&gt; user3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GEOPOS personLocation user1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;116.3299986720085144&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;39.89000061669732844&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GEODIST personLocation user1 user2 km&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1.4018&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过 Redis 可视化工具查看  &lt;code&gt;personLocation&lt;/code&gt;  ，果不其然，底层就是 Sorted Set。&lt;/p&gt;
&lt;p&gt;GEO 中存储的地理位置信息的经纬度数据通过 GeoHash 算法转换成了一个整数，这个整数作为 Sorted Set 的 score (权重参数) 使用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220721201545147.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取指定位置范围内的其他元素&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GEORADIUS personLocation &lt;span class=&#34;token number&#34;&gt;116.33&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;39.87&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; km&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GEORADIUS personLocation &lt;span class=&#34;token number&#34;&gt;116.33&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;39.87&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; km&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GEORADIUS personLocation &lt;span class=&#34;token number&#34;&gt;116.33&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;39.87&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; km&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GEORADIUSBYMEMBER personLocation user1 &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; km&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GEORADIUSBYMEMBER personLocation user1 &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; km&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;GEORADIUS&lt;/code&gt;  命令的底层原理解析可以看看阿里的这篇文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzOTY2MDYxMzYzMjA3&#34;&gt;Redis 到底是怎么实现 “附近的人” 这个功能的呢？&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;移除元素&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;GEO 底层是 Sorted Set ，你可以对 GEO 使用 Sorted Set 相关的命令。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZREM personLocation user1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZRANGE personLocation &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ZSCORE personLocation user2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4069879562983946&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;应用-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用-4&#34;&gt;#&lt;/a&gt; 应用&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;需要管理使用&lt;font color=&#39;red&#39;&gt;地理空间数据&lt;/font&gt;的场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例：附近的人&lt;/li&gt;
&lt;li&gt;相关命令:  &lt;code&gt;GEOADD&lt;/code&gt; 、 &lt;code&gt;GEORADIUS&lt;/code&gt; 、 &lt;code&gt;GEORADIUSBYMEMBER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;小结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小结-2&#34;&gt;#&lt;/a&gt; 小结&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bitmap&lt;/td&gt;
&lt;td&gt;可以将 Bitmap 看作一个存储二进制数字（0 和 1）的数组，数组中每个元素的下标叫做 offset（偏移量）。通过 Bitmap，只需要一个 bit 位来表示某个元素对应的值或者状态，key 就是对应元素本身 。我们知道 8 个 bit 可以组成一个 byte，所以 Bitmap 本身会极大的节省储存空间。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HyperLogLog&lt;/td&gt;
&lt;td&gt;Redis 提供的&lt;font color=&#39;red&#39;&gt; HyperLogLog 占用空间非常非常小&lt;/font&gt;，只需要 12k 的空间就能存储接近 &lt;code&gt;2^64&lt;/code&gt;  个不同元素。不过，HyperLogLog 的计数结果并不是一个精确值，&lt;font color=&#39;red&#39;&gt;存在一定的误差&lt;/font&gt;（标准误差为  &lt;code&gt;0.81%&lt;/code&gt;  ）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Geospatial index&lt;/td&gt;
&lt;td&gt;Geospatial index（地理空间索引，简称 GEO） 主要&lt;font color=&#39;red&#39;&gt;用于存储地理位置信息，基于 Sorted Set 实现&lt;/font&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;string-应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string-应用场景&#34;&gt;#&lt;/a&gt; String 应用场景&lt;/h2&gt;
&lt;p&gt;[String 应用](#String 应用)&lt;/p&gt;
&lt;h2 id=&#34;对象数据的存储建议使用-string&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象数据的存储建议使用-string&#34;&gt;#&lt;/a&gt; 对象数据的存储建议使用 String&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;String 存储的是序列化后的对象数据，存放的是整个对象&lt;/font&gt;&lt;/strong&gt;。Hash 是对对象的每个字段单独存储，可以获取部分字段的信息，也可以修改或者添加部分字段，节省网络流量。&lt;font color=&#39;red&#39;&gt;如果对象中某些字段需要经常变动，或者需要经常单独查询对象中的个别字段信息，Hash 就非常适合&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;String 存储对象相对更加节省内存&lt;/font&gt;&lt;/strong&gt;，缓存相同数量的对象数据，String 消耗的内存约是 Hash 的一半。并且，&lt;font color=&#39;red&#39;&gt;String 存储具有多层嵌套的对象时，也方便很多&lt;/font&gt;。如果系统对性能和资源消耗非常敏感的话，String 就非常适合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在绝大部分情况，我们建议使用 String 来存储对象数据即可！&lt;/p&gt;
&lt;h2 id=&#34;string-的底层实现sds&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string-的底层实现sds&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟String 的底层实现：SDS&lt;/mark&gt;&lt;/h2&gt;
&lt;h3 id=&#34;sds-介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sds-介绍&#34;&gt;#&lt;/a&gt; SDS 介绍&lt;/h3&gt;
&lt;p&gt;Redis 是基于 C 语言编写的，但 Redis 的 String 类型的底层实现并不是 C 语言中的字符串（即以空字符  &lt;code&gt;\0&lt;/code&gt;  结尾的字符数组），而是自己编写了 **&lt;font color=&#39;cornflowerblue&#39;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FudGlyZXovc2Rz&#34;&gt;SDS&lt;/span&gt;（Simple Dynamic String，简单动态字符串）&lt;/font&gt;** 来作为底层实现。&lt;/p&gt;
&lt;p&gt;SDS 最早是 Redis 作者为日常 C 语言开发而设计的 C 字符串，后来被应用到了 Redis 上，并经过了大量的修改完善以适合&lt;font color=&#39;red&#39;&gt;高性能操作&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;sds-结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sds-结构&#34;&gt;#&lt;/a&gt; SDS 结构&lt;/h3&gt;
&lt;p&gt;Redis7.0 的 SDS 的部分&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzL3JlZGlzL2Jsb2IvNy4wL3NyYy9zZHMuaA==&#34;&gt;源码&lt;/span&gt;如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* Note: sdshdr5 is never used, we just access the flags byte directly.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * However is here to document the layout of type 5 SDS strings. */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__packed__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;sdshdr5&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; flags&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 3 lsb of type, and 5 msb of string length */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; buf&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__packed__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;sdshdr8&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* used */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; alloc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* excluding the header and null terminator */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; flags&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 3 lsb of type, 5 unused bits */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; buf&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__packed__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;sdshdr16&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;uint16_t&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* used */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;uint16_t&lt;/span&gt; alloc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* excluding the header and null terminator */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; flags&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 3 lsb of type, 5 unused bits */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; buf&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__packed__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;sdshdr32&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* used */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; alloc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* excluding the header and null terminator */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; flags&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 3 lsb of type, 5 unused bits */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; buf&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__packed__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;sdshdr64&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;uint64_t&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* used */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;uint64_t&lt;/span&gt; alloc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* excluding the header and null terminator */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; flags&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 3 lsb of type, 5 unused bits */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; buf&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过源码可以看出，SDS 共有五种实现方式 SDS_TYPE_5（并未用到）、SDS_TYPE_8、SDS_TYPE_16、SDS_TYPE_32、SDS_TYPE_64，其中只有后四种实际用到。&lt;font color=&#39;red&#39;&gt;Redis 会根据初始化的长度决定使用哪种类型的 SDS，从而减少内存的使用&lt;/font&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;字节&lt;/th&gt;
&lt;th&gt;位&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sdshdr5&lt;/td&gt;
&lt;td&gt;&amp;lt; 1&lt;/td&gt;
&lt;td&gt;&amp;lt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sdshdr8&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sdshdr16&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sdshdr32&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sdshdr64&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis_sdshdr5.png&#34; alt=&#34;redis字符窜数据结构简述 - 知乎&#34; /&gt;&lt;/p&gt;
&lt;center&gt;SDSHDR5&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231206204849898.png&#34; alt=&#34;image-20231206204849898&#34; /&gt;&lt;/p&gt;
&lt;center&gt;SDSHDR 结构示意图&lt;/center&gt;
&lt;p&gt;对于后四种实现都包含了下面这 4 个属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;len&lt;/code&gt; ：字符串的长度，即&lt;font color=&#39;red&#39;&gt;已使用的&lt;/font&gt;字节数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alloc&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;总共可用的&lt;/font&gt;字符空间大小（字节数），&lt;font color=&#39;red&#39;&gt;不包括 &lt;code&gt;\0&lt;/code&gt; &lt;/font&gt;，alloc-len 就是 SDS 剩余的空间大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buf[]&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;实际存储字符串的数组&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flags&lt;/code&gt; ：大小为 1 个字节，其中&lt;font color=&#39;red&#39;&gt;低 3 位保存类型标志&lt;/font&gt;，高 5 位闲置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sds-相比-c-字符串的优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sds-相比-c-字符串的优势&#34;&gt;#&lt;/a&gt; SDS 相比 C 字符串的优势&lt;/h3&gt;
&lt;p&gt;SDS 相比于 C 语言中的字符串有如下提升：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;可以避免缓冲区溢出&lt;/font&gt;&lt;/strong&gt;：C 语言中的字符串被修改（比如拼接）时，一旦没有分配足够长度的内存空间，就会造成缓冲区溢出。SDS 被修改时，会先根据 len 属性检查空间大小是否满足要求，如果不满足，则先扩展至所需大小再进行修改操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;获取字符串长度的复杂度较低&lt;/font&gt;&lt;/strong&gt;：C 语言中的字符串的长度通常是经过遍历计数来实现的，时间复杂度为 O (n)。SDS 的长度获取&lt;font color=&#39;red&#39;&gt;直接读取 len 属性即可，时间复杂度为 O (1)&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;减少内存分配次数&lt;/font&gt;&lt;/strong&gt;：为了避免修改（增加 / 减少）字符串时，每次都需要重新分配内存（C 语言的字符串是这样的），SDS 实现了&lt;font color=&#39;cornflowerblue&#39;&gt;空间预分配&lt;/font&gt;和&lt;font color=&#39;cornflowerblue&#39;&gt;惰性空间释放&lt;/font&gt;两种优化策略。当 SDS 需要增加字符串时，Redis 会为 SDS 分配好内存，并且根据特定的算法分配多余的内存，这样可以减少连续执行字符串增长操作所需的内存重分配次数。当 SDS 需要减少字符串时，这部分内存不会立即被回收，会被记录下来，等待后续使用（支持手动释放，有对应的 API）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;二进制安全&lt;/font&gt;&lt;/strong&gt;：C 语言中的字符串以空字符  &lt;code&gt;\0&lt;/code&gt;  作为字符串结束的标识，这存在一些问题，像一些二进制文件（比如图片、视频、音频）就可能包括空字符，C 字符串无法正确保存。&lt;font color=&#39;red&#39;&gt;SDS 使用 len 属性判断字符串是否结束，不存在这个问题&lt;/font&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;sds-旧版本结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sds-旧版本结构&#34;&gt;#&lt;/a&gt; SDS 旧版本结构&lt;/h3&gt;
&lt;p&gt;🤐 多提一嘴，很多文章里 SDS 的定义是下面这样的：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;sdshdr&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 记录 buf 数组中已使用字节的数量 = sds 所保存字符串的长度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; free&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 记录 buf 数组中未使用字节的数量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; buf&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 字节数组，用于保存字符串&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/v2-3423339183d978aed32dca64447d728d_b.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;SDS旧版本结构&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis_sds_1.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个也没错，&lt;font color=&#39;red&#39;&gt;Redis 3.2 之前就是这样定义的&lt;/font&gt;。后来，由于这种方式的定义存在问题， &lt;code&gt;len&lt;/code&gt;  和  &lt;code&gt;free&lt;/code&gt;  的定义用了 4 个字节，造成了浪费。Redis 3.2 之后，Redis 改进了 SDS 的定义，将其划分为了现在的 5 种类型。&lt;/p&gt;
&lt;h2 id=&#34;购物车信息的存储建议使用-hash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#购物车信息的存储建议使用-hash&#34;&gt;#&lt;/a&gt; 购物车信息的存储建议使用 Hash&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;你肯定会问：购物车信息也是对象数据，前文不是说了建议使用 String 存储对象数据吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;因为购物车中的商品频繁修改和变动&lt;/font&gt;&lt;/strong&gt;，购物车信息建议使用 Hash 存储：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户 id 为 key&lt;/li&gt;
&lt;li&gt;商品 id 为 field，商品数量为 value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231206193856739.png&#34; alt=&#34;Hash维护简单的购物车信息&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Hash维护简单的购物车信息&lt;/center&gt;
&lt;p&gt;那用户购物车信息的维护具体应该怎么操作呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户添加商品就是往 Hash 里面增加新的 field 与 value；&lt;/li&gt;
&lt;li&gt;查询购物车信息就是遍历对应的 Hash；&lt;/li&gt;
&lt;li&gt;更改商品数量直接修改对应的 value 值（直接 set 或者做运算皆可）；&lt;/li&gt;
&lt;li&gt;删除商品就是删除 Hash 中对应的 field；&lt;/li&gt;
&lt;li&gt;清空购物车直接删除对应的 key 即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里只是以业务比较简单的购物车场景举例，实际电商场景下，field 只保存一个商品 id 是没办法满足需求的。&lt;/p&gt;
&lt;h2 id=&#34;使用-sorted-set-实现排行榜&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-sorted-set-实现排行榜&#34;&gt;#&lt;/a&gt; 使用 Sorted Set 实现排行榜&lt;/h2&gt;
&lt;p&gt;[Zset 应用](#Zset 应用)&lt;/p&gt;
&lt;h2 id=&#34;set-应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set-应用场景&#34;&gt;#&lt;/a&gt; Set 应用场景&lt;/h2&gt;
&lt;p&gt;[Set 应用](#Set 应用)&lt;/p&gt;
&lt;h2 id=&#34;使用-set-实现抽奖系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-set-实现抽奖系统&#34;&gt;#&lt;/a&gt; 使用 Set 实现抽奖系统&lt;/h2&gt;
&lt;p&gt;如果想要使用  &lt;code&gt;Set&lt;/code&gt;  实现一个简单的抽奖系统的话，直接使用下面这几个命令就可以了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SADD key member1 member2 ...&lt;/code&gt; ：向指定集合添加一个或多个元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPOP key count&lt;/code&gt; ：随机移除并获取指定集合中一个或多个元素，适合不允许重复中奖的场景。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SRANDMEMBER key count&lt;/code&gt; ：随机获取指定集合中指定数量的元素，适合允许重复中奖的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;集合的底层实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集合的底层实现&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟集合的底层实现&lt;/mark&gt;&lt;/h2&gt;
&lt;p&gt;Redis 中&lt;font color=&#39;red&#39;&gt;对于 Set 类型的底层实现，直接采用了 hashTable&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;对于 Hash 与 ZSet 集合，其底层的实现实际有两种&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zipList&lt;/code&gt; （&lt;font color=&#39;cornflowerblue&#39;&gt;压缩列表&lt;/font&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skipList&lt;/code&gt; （&lt;font color=&#39;cornflowerblue&#39;&gt;跳跃列表&lt;/font&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种实现对于用户来说是透明的，但用户写入不同的数据，系统会自动使用不同的实现。只要同时满足配置文件 redis.conf 中相关集合&lt;font color=&#39;red&#39;&gt;元素数量阈值&lt;/font&gt;、&lt;font color=&#39;red&#39;&gt;元素大小阈值&lt;/font&gt;两个条件，使用的就是压缩列表 zipList；只要有一个条件不满足，使用的就是跳跃列表 skipList。&lt;/p&gt;
&lt;p&gt;例如，对于 ZSet 集合中这两个条件如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集合元素个数小于 redis.conf 中 zset-max-ziplist-entries 属性的值，其默认值为 128&lt;/li&gt;
&lt;li&gt;每个集合元素大小都小于 redis.conf 中 zset-max-ziplist-value 属性的值，其默认值为 64 字节&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ziplist压缩列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ziplist压缩列表&#34;&gt;#&lt;/a&gt; zipList（压缩列表）&lt;/h3&gt;
&lt;p&gt;zipList，通常称为压缩列表，是一个&lt;font color=&#39;red&#39;&gt;经过特殊编码&lt;/font&gt;的用于&lt;font color=&#39;red&#39;&gt;存储字符串或整数&lt;/font&gt;的 **&lt;font color=&#39;red&#39;&gt;双向链表&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;其底层数据结构由&lt;font color=&#39;red&#39;&gt;在内存上是连续存放的三部分&lt;/font&gt;构成：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231206212946057.png&#34; alt=&#34;image-20231206212946057&#34; /&gt;&lt;/p&gt;
&lt;center&gt;zipList 结构&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;green&#39;&gt;head&lt;/font&gt;&lt;/strong&gt;：10 字节
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;zlbytes（列表长度）&lt;/font&gt;：4 字节，存放 zipList 列表整体数据结构所占的字节数，包括 zlbytes 本身的长度。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;zltail（尾 entry 的偏移量）&lt;/font&gt;：4 字节，用于存放 zipList 中最后一个 entry 在整个数据结构中的偏移量（字节）。该数据的存在可以快速定位列表的尾 entry 位置，以方便操作。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;zllen（entry 个数）&lt;/font&gt;：2 字节，用于存放 zipList 包含的 entry 个数。由于其只有 16 位，所以 zipList 最多可以含有的 entry 个数为 2&lt;sup&gt;16&lt;/sup&gt;-1 = 65535 个。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;green&#39;&gt;entries&lt;/font&gt;&lt;/strong&gt;：真正的列表，由很多的元素 entry 构成。由于不同的元素类型、数值的不同，从而导致每个 entry 的长度不同。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;gree&#39;&gt;prevlength（前一个 entry 的长度）&lt;/font&gt;&lt;/strong&gt;： &lt;font color=&#39;red&#39;&gt;1/3 字节&lt;/font&gt;，用于记录前一个 entry 的长度，&lt;font color=&#39;red&#39;&gt;以实现逆序遍历&lt;/font&gt;。默认长度为 1 字节，只要上一个 entry 的长度小于 254 字节， prevlength 就占 1 字节，否则其会自动扩展为 3 字节长度。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;encoding（data 具体类型）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;1/2/5 字节&lt;/font&gt;，用于标志后面的 data 的具体类型。如果 data 为整数类型， encoding 固定长度为 1 字节。如果 data 为字符串类型，则 encoding 长度可能会是 1 字节、 2 字&lt;br /&gt;
节或 5 字节。 &lt;font color=&#39;red&#39;&gt;data 字符串不同的长度，对应着不同的 encoding 长度&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;data（真正的数据）&lt;/font&gt;：数据类型只能是&lt;font color=&#39;red&#39;&gt;整数类型或字符串类型&lt;/font&gt;，不同的数据占用的字节长度不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;green&#39;&gt;end&lt;/font&gt;&lt;/strong&gt;：只包含一部分
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;zlend（zipList 结束标记）&lt;/font&gt;：1 字节，值固定为 255，即&lt;font color=&#39;red&#39;&gt;二进制位为全 1&lt;/font&gt;，表示一个 zipList 列表的结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;listpack紧凑列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#listpack紧凑列表&#34;&gt;#&lt;/a&gt; listPack（紧凑列表）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;重写并替代 zipList（压缩列表）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ziplist 实现复杂，为了逆序遍历，每个 entry 中包含前一个 entry 的长度，这样会导致&lt;font color=&#39;red&#39;&gt;在 ziplist 中间修改或者插入 entry 时需要进行级联更新&lt;/font&gt;，在高并发的写操作场景下会极度降低 Redis 的性能。为了实现更紧凑、更快的解析，更简单的实现，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;重写实现了 ziplist，并命名为 listPack&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;在 Redis 7.0 中，已经将 zipList 全部替换为了 listPack&lt;/font&gt;，但为了兼容性，在配置中也保留了 zipList 的相关属性。&lt;/p&gt;
&lt;p&gt;与 zipList 一样，listPack 也是一个&lt;font color=&#39;red&#39;&gt;经过特殊编码&lt;/font&gt;的用于&lt;font color=&#39;red&#39;&gt;存储字符串或整数&lt;/font&gt;的 **&lt;font color=&#39;red&#39;&gt;双向链表&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;其底层数据结构也由在内存上也是连续存放的三部分构成：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;listPack 与 zipList 的 **&lt;font color=&#39;red&#39;&gt;重大区别：head 与 entry 的结构&lt;/font&gt;**。表示列表结束的 end 与 zipList 的 zlend 是相同的，占一个字节，且 8 位全为 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231207093508520.png&#34; alt=&#34;image-20231207093508520&#34; /&gt;&lt;/p&gt;
&lt;center&gt;listPack 结构&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;green&#39;&gt;head&lt;/font&gt;&lt;/strong&gt;：6 字节&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与 zipList 的 head 相比最大的变化：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;不再记录尾 entry 的偏移量&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;totalBytes（列表长度）&lt;/font&gt;：4 字节，用于存放 listPack 列表&lt;font color=&#39;red&#39;&gt;整体数据结构&lt;/font&gt;所占的字节数，包括 totalBytes 本身的长度。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;elemNum（entry 个数）&lt;/font&gt;：2 字节，用于存放列表包含的&lt;font color=&#39;red&#39;&gt; entry 个数&lt;/font&gt;。其意义与 zipList 中 zllen 的相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;green&#39;&gt;entries&lt;/font&gt;&lt;/strong&gt;：真正的列表，由很多的元素 entry 构成。由于不同的元素类型、数值的不同，从而导致每个 entry 的长度不同。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与 zipList 的 entries 相比最大的变化：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;不再记录前一个 entry 长度的 prevlength，而是记录当前 entry 长度的 element-total-len&lt;/font&gt;&lt;/strong&gt;。而这个改变&lt;font color=&#39;red&#39;&gt;仍然可以实现逆序遍历，但却避免了由于在列表中间修改或插入 entry 时引发的级联更新&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;encoding（data 具体类型）&lt;/font&gt;：1/2/3/4/5/9 字节，用于标志后面的 data 的具体类型。如果 data 为整数类型，encoding 长度可能会是 1、 2、 3、 4、 5 或 9 字节。不同的字节长度，其标识位不同。如果 data 为字符串类型，则 encoding 长度可能会是 1、 2 或 5 字节。 data 字符串不同的长度，对应着不同的 encoding 长度。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;data（真正的数据）&lt;/font&gt;：只能是&lt;font color=&#39;red&#39;&gt;整数类型或字符串类型&lt;/font&gt;。不同的数据占用的字节长度不同。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;gree&#39;&gt;element-total-len（当前 entry 的长度）&lt;/font&gt;&lt;/strong&gt;：1/2/3/4/5 字节，用于记录当前 entry 的长度，以实现逆序遍历。由于其特殊的记录方式，使其本身占有的字节数据可能会是 1、 2、 3、 4 或 5 字节。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;green&#39;&gt;end&lt;/font&gt;&lt;/strong&gt;：只包含一部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;zlend（zipList 结束标记）&lt;/font&gt;：1 字节，值固定为 255，即&lt;font color=&#39;red&#39;&gt;二进制位为全 1&lt;/font&gt;，表示一个 zipList 列表的结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;skiplist跳跃列表跳表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#skiplist跳跃列表跳表&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟skipList（跳跃列表 / 跳表）&lt;/mark&gt;&lt;/h3&gt;
&lt;p&gt;skipList，跳跃列表，简称跳表，是一种&lt;font color=&#39;red&#39;&gt;随机化的&lt;/font&gt;数据结构，基于&lt;font color=&#39;red&#39;&gt;并联的链表&lt;/font&gt;，实现简单，查找效率较高。简单来说跳表也是链表的一种，只不过它 **&lt;font color=&#39;red&#39;&gt;在链表的基础上增加了跳跃功能&lt;/font&gt;**。也正是这个跳跃功能，使得在&lt;font color=&#39;red&#39;&gt;查找元素时，能够提供较高的效率&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;原理-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理-3&#34;&gt;#&lt;/a&gt; 原理&lt;/h4&gt;
&lt;p&gt;假设有一个&lt;font color=&#39;red&#39;&gt;带头、尾结点的有序链表&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231207150413317.png&#34; alt=&#34;image-20231207150413317&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在该链表中，如果要查找某个数据，需要从头开始逐个进行比较，直到找到包含数据的那个节点，或者找到第一个比给定数据大的节点，或者找到最后尾结点，后两种都属于没有找到的情况。同样，当我们要插入新数据的时候，也要经历同样的查找过程，从而确定插入位置。&lt;/p&gt;
&lt;p&gt;为了提升查找效率，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;在偶数结点上增加一个指针，让其指向下一个偶数结点，形成一个新的链表（&lt;font color=&#39;cornflowerblue&#39;&gt;高层链表&lt;/font&gt;）&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231207150636138.png&#34; alt=&#34;image-20231207150636138&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当然，高层链表包含的节点个数只是原来链表的一半。此时再想查找某个数据时，&lt;font color=&#39;red&#39;&gt;先沿着高层链表进行查找，当遇到第一个比待查数据大的节点时，立即从前一个节点，再回到原链表中进行查找&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;例如，若想插入一个数据 20，则先在（8， 19，31， 42）的链表中查找，找到第一个比 20 大的节点 31，然后再在高层链表中找到 31 节点的前一个节点 19，然后再在原链表中获取到其下一个节点值为 23。比 20 大，则将 20 插入到 19 节点与 23 节点之间。若插入的是 25，比节点 23 大，则插入到 23 节点与 31 节点之间。&lt;/p&gt;
&lt;p&gt;该方式明显&lt;font color=&#39;red&#39;&gt;可以减少比较次数，提高查找效率&lt;/font&gt;。如果链表元素较多，为了进一步提升查找效率，可以将原链表构建为三层链表，或再高层级链表。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231207151233404.png&#34; alt=&#34;image-20231207151233404&#34; /&gt;&lt;/p&gt;
&lt;p&gt;层级越高，查找效率就会越高。&lt;/p&gt;
&lt;h4 id=&#34;存在问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存在问题&#34;&gt;#&lt;/a&gt; 存在问题&lt;/h4&gt;
&lt;p&gt;这种对链表分层级的方式从原理上看确实提升了查找效率，但在实际操作时就出现了问题：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;由于固定序号的元素拥有固定层级，所以列表元素出现增加或删除的情况下，会导致列表整体元素层级大调整，但这样势必会大大降低系统性能&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如，对于划分两级的链表，可以规定奇数结点为高层级链表，偶数结点为低层级链表。对于划分三级的链表，可以按照节点序号与 3 取模结果进行划分。但如果插入了新的节点，或删除的原来的某些节点，那么定会按照原来的层级划分规则进行重新层级划分，那么势必会大大降低系统性能。&lt;/p&gt;
&lt;h4 id=&#34;算法优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算法优化&#34;&gt;#&lt;/a&gt; 算法优化&lt;/h4&gt;
&lt;p&gt;为了避免前面的问题，skipList 采用了 **&lt;font color=&#39;#B32015&#39;&gt;随机分配层级&lt;/font&gt;** 方式。即&lt;font color=&#39;red&#39;&gt;在确定了总层级后，每添加一个新的元素时会自动为其随机分配一个层级&lt;/font&gt;。这种随机性就&lt;font color=&#39;red&#39;&gt;解决了节点序号与层级间的固定关系问题&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231207151544039.png&#34; alt=&#34;image-20231207151544039&#34; /&gt;&lt;/p&gt;
&lt;center&gt;skipList 在生成过程中为每个元素随机分配层级的过程&lt;/center&gt;
&lt;p&gt;从这个 skiplist 的创建和插入过程可以看出，每一个节点的层级数都是随机分配的。而且&lt;font color=&#39;red&#39;&gt;新插入一个节点不会影响到其它节点的层级数，只需要修改插入节点前后的指针&lt;/font&gt;，这就降低了插入操作的复杂度。&lt;/p&gt;
&lt;p&gt;skipList 指的就是除了最下面第 1 层链表之外，它会产生若干层稀疏的链表，这些链表里面的指针跳过了一些节点，并且越高层级的链表跳过的节点越多。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;在查找数据的时先在高层级链表中进行查找，然后逐层降低，最终可能会降到第 1 层链表来精确地确定数据位置&lt;/font&gt;&lt;/strong&gt;。在这个过程中由于跳过了一些节点，从而加快了查找速度。&lt;/p&gt;
&lt;h3 id=&#34;quicklist快速列表快表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quicklist快速列表快表&#34;&gt;#&lt;/a&gt; quickList（快速列表 / 快表）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;从 Redis 3.2 开始成为是 List 的底层实现，替代了 zipList 和 LinkedList&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;原理-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理-4&#34;&gt;#&lt;/a&gt; 原理&lt;/h4&gt;
&lt;p&gt;quickList，快速列表， quickList 本身是一个&lt;font color=&#39;red&#39;&gt;双向无循环链表&lt;/font&gt;，它的 **&lt;font color=&#39;red&#39;&gt;每个节点都是一个 zipList&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;zipList 与 linkedList 都存在有明显不足，而 quickList 则对它们进行了改进：吸取了 zipList 和 linkedList 的优点，避开了它们的不足。&lt;/p&gt;
&lt;p&gt;quickList 本质上 **&lt;font color=&#39;red&#39;&gt;是 zipList 和 linkedList 的混合体&lt;/font&gt;**，&lt;font color=&#39;red&#39;&gt;将 linkedList 按段切分，每一段使用 zipList 来紧凑存储若干真正的数据元素，多个 zipList 之间使用双向指针串接起来&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231207153821870.png&#34; alt=&#34;image-20231207153821870&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当然，对于&lt;font color=&#39;red&#39;&gt;每个 zipList 中最多可存放多大容量的数据元素&lt;/font&gt;，在配置文件中通过  &lt;code&gt;list-max-ziplist-size&lt;/code&gt;  属性可以指定。&lt;/p&gt;
&lt;h4 id=&#34;检索操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检索操作&#34;&gt;#&lt;/a&gt; 检索操作&lt;/h4&gt;
&lt;p&gt;为了更深入的理解 quickList 的工作原理，通过对检索、插入、删除等操作的实现分析来加深理解。&lt;/p&gt;
&lt;p&gt;对于 List 元素的检索，都是以其索引 index 为依据的。quickList 由一个个的 zipList 构成，每个 zipList 的 zllen 中记录的就是当前 zipList 中包含的 entry 的个数，即包含的真正数据元素的个数。&lt;font color=&#39;red&#39;&gt;根据要检索元素的 index，从 quickList 的头节点开始，&lt;strong&gt;逐个对 zipList 的 zllen 做 sum 求和&lt;/strong&gt;，直到找到第一个求和后 sum 大于 index 的 zipList，那么要检索的这个元素就在这个 zipList 中&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;插入操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插入操作&#34;&gt;#&lt;/a&gt; 插入操作&lt;/h4&gt;
&lt;p&gt;由于 zipList 是有大小限制的，所以在 quickList 中插入一个元素在逻辑上相对就比较复杂一些。假设要插入的元素的大小为  &lt;code&gt;insertBytes&lt;/code&gt; ，而查找到的插入位置所在的 zipList 当前的大小为  &lt;code&gt;zlBytes&lt;/code&gt; ，那么具体可分为下面几种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;情况一：&lt;font color=&#39;red&#39;&gt;当 insertBytes + zlBytes &amp;lt;= list-max-ziplist-size 时&lt;/font&gt;， 直接插入到 zipList 中相应位置即可&lt;/li&gt;
&lt;li&gt;情况二：&lt;font color=&#39;red&#39;&gt;当 insertBytes + zlBytes &amp;gt; list-max-ziplist-size，且插入的位置位于该 zipList 的首部位置&lt;/font&gt;，此时需要查看该 zipList 的前一个 zipList 的大小  &lt;code&gt;prev_zlBytes&lt;/code&gt; 。
&lt;ul&gt;
&lt;li&gt;若 insertBytes + prev_zlBytes&amp;lt;= list-max-ziplist-size 时，直接将元素插入到前一个 zipList 的尾部位置即可&lt;/li&gt;
&lt;li&gt;若 insertBytes + prev_zlBytes&amp;gt; list-max-ziplist-size 时，直接将元素自己构建为一个新的 zipList，并连入 quickList 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;情况三：&lt;font color=&#39;red&#39;&gt;当 insertBytes + zlBytes &amp;gt; list-max-ziplist-size，且插入的位置位于该 zipList 的尾部位置&lt;/font&gt;，此时需要查看该 zipList 的后一个 zipList 的大小  &lt;code&gt;next_zlBytes&lt;/code&gt; 。
&lt;ul&gt;
&lt;li&gt;若 insertBytes + next_zlBytes&amp;lt;= list-max-ziplist-size 时，直接将元素插入到后一个 zipList 的头部位置即可&lt;/li&gt;
&lt;li&gt;若 insertBytes + next_zlBytes&amp;gt; list-max-ziplist-size 时，直接将元素自己构建为一个新的 zipList，并连入 quickList 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;情况四：&lt;font color=&#39;red&#39;&gt;当 insertBytes + zlBytes &amp;gt; list-max-ziplist-size，且插入的位置位于该 zipList 的中间位置&lt;/font&gt;，则将当前 zipList 分割为两个 zipList 连接入 quickList 中，然后将元素插入到分割后的前面 zipList 的尾部位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;删除操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除操作&#34;&gt;#&lt;/a&gt; 删除操作&lt;/h4&gt;
&lt;p&gt;对于删除操作，只需要注意一点，&lt;font color=&#39;red&#39;&gt;在相应的 zipList 中删除元素后，如果该 zipList 中没有其它元素了，则将该 zipList 删除，将其前后两个 zipList 相连接&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&#34;使用-bitmap-统计活跃用户&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-bitmap-统计活跃用户&#34;&gt;#&lt;/a&gt; 使用 Bitmap 统计活跃用户&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;[Bitmap 应用](#Bitmap 应用)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果想要使用 Bitmap 统计活跃用户的话，&lt;font color=&#39;red&#39;&gt;可以使用日期（精确到天）作为 key，然后用户 ID 为 offset，如果当日活跃过就设置为 1&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;初始化数据：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SETBIT &lt;span class=&#34;token number&#34;&gt;20210308&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SETBIT &lt;span class=&#34;token number&#34;&gt;20210308&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SETBIT &lt;span class=&#34;token number&#34;&gt;20210309&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;统计 20210308~20210309 总活跃用户数：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; BITOP and desk1 &lt;span class=&#34;token number&#34;&gt;20210308&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20210309&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; BITCOUNT desk1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;统计 20210308~20210309 在线活跃用户数：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; BITOP or desk2 &lt;span class=&#34;token number&#34;&gt;20210308&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20210309&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; BITCOUNT desk2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;使用-hyperloglog-统计页面-uv独立访客&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-hyperloglog-统计页面-uv独立访客&#34;&gt;#&lt;/a&gt; 使用 HyperLogLog 统计页面 UV（独立访客）&lt;/h2&gt;
&lt;p&gt;使用 HyperLogLog 统计页面 UV 主要需要用到下面这两个命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PFADD key element1 element2 ...&lt;/code&gt; ：添加一个或多个元素到 HyperLogLog 中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PFCOUNT key1 key2&lt;/code&gt; ：获取一个或者多个 HyperLogLog 的唯一计数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、将访问指定页面的每个用户 ID 添加到  &lt;code&gt;HyperLogLog&lt;/code&gt;  中。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;PFADD PAGE_1:UV USER1 USER2 &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt; USERn&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2、统计指定页面的 UV。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;PFCOUNT PAGE_1:UV&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;redis-持久化机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-持久化机制&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟Redis 持久化机制&lt;/mark&gt;&lt;/h1&gt;
&lt;p&gt;Redis 为什么需要持久化？Redis 是一个内存数据库，所以其运行效率非常高。但也存在一个问题：&lt;font color=&#39;red&#39;&gt;内存中的数据是不持久的，若主机宕机或 Redis 关机重启，则内存中的数据全部丢失&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;为了&lt;font color=&#39;red&#39;&gt;重用数据（比如重启机器、机器故障之后恢复数据）&lt;/font&gt;/&lt;font color=&#39;red&#39;&gt;数据同步（比如 Redis 集群的主从节点通过 RDB 文件同步数据）&lt;/font&gt;，Redis 需要持久化功能。&lt;/p&gt;
&lt;p&gt;Redis 会按照设置以&lt;font color=&#39;cornflowerblue&#39;&gt;快照&lt;/font&gt;或&lt;font color=&#39;cornflowerblue&#39;&gt;操作日志&lt;/font&gt;的形式将数据持久化到磁盘，对应两种持久化方式：RDB 与 AOF。但实际上，Redis 支持 3 种持久化方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;RDB&lt;/font&gt;（ &lt;code&gt;R&lt;/code&gt; edis  &lt;code&gt;D&lt;/code&gt; ata &lt;code&gt;B&lt;/code&gt; ase）：快照&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;AOF&lt;/font&gt;（ &lt;code&gt;A&lt;/code&gt; ppend  &lt;code&gt;O&lt;/code&gt; nly  &lt;code&gt;F&lt;/code&gt; ile）：只追加文件&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;RDB + AOF&lt;/font&gt;：RDB 和 AOF 的混合持久化 (Redis 4.0 新增)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;持久化基本原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#持久化基本原理&#34;&gt;#&lt;/a&gt; 持久化基本原理&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231207165444513.png&#34; alt=&#34;image-20231207165444513&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Redis 持久化也称为&lt;font color=&#39;red&#39;&gt; &lt;code&gt;钝化&lt;/code&gt; ，是指将内存中数据库的状态描述信息保存到磁盘中&lt;/font&gt;。只不过不同的持久化技术，对数据的状态描述信息是不同的，生成的持久化文件也是不同的。但它们的作用都是相同的：&lt;font color=&#39;red&#39;&gt;避免数据意外丢失&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;通过手动方式，或自动定时方式，或自动条件触发方式，将内存中数据库的状态描述信息写入到指定的持久化文件中。&lt;font color=&#39;red&#39;&gt;当系统重新启动时，自动加载持久化文件，并根据文件中数 \ 据库状态描述信息将数据恢复到内存中，这个数据恢复过程也称为 &lt;code&gt;激活&lt;/code&gt; &lt;/font&gt;。这个钝化与激活的过程就是 Redis 持久化的基本原理。&lt;/p&gt;
&lt;p&gt;不过从以上分析可知，对于 Redis 单机状态下，无论是手动方式，还是定时方式或条件触发方式，都存在&lt;font color=&#39;red&#39;&gt; &lt;code&gt;数据丢失问题&lt;/code&gt; ：在尚未手动 / 自动保存时发生了 Redis 宕机状况，那么从上次保存到宕机期间产生的数据就会丢失&lt;/font&gt;。不同的持久化方式，其数据的丢失率也是不同的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231207165853136.png&#34; alt=&#34;image-20231207165853136&#34; /&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;RDB 是默认持久化方式&lt;/font&gt;&lt;/strong&gt;。但 Redis 允许 RDB 与 AOF 两种持久化技术同时开启，此时系统会使用 AOF 方式做持久化，即&lt;font color=&#39;red&#39;&gt; AOF 持久化技术的优先级要更高&lt;/font&gt;。同样的道理，两种技术同时开启状态下，系统启动时若两种持久化文件同时存在，则优先加载 AOF 持久化文件。&lt;/p&gt;
&lt;h2 id=&#34;rdb-持久化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb-持久化&#34;&gt;#&lt;/a&gt; RDB 持久化&lt;/h2&gt;
&lt;h3 id=&#34;rdb-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb-简介&#34;&gt;#&lt;/a&gt; RDB 简介&lt;/h3&gt;
&lt;p&gt;RDB（Redis DataBase）将内存中某一时刻的数据以 **&lt;font color=&#39;red&#39;&gt;全量快照&lt;/font&gt;** 的形式写入磁盘中的&lt;font color=&#39;red&#39;&gt; rdb 文件&lt;/font&gt;。RDB 持久化默认是开启的。当 Redis 启动时会自动读取 rdb 快照文件，将数据从硬盘载入到内存，以恢复 Redis 关机前的数据库状态。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806005245328.png&#34; alt=&#34;image-20230806005245328&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;rdb-快照的触发方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb-快照的触发方式&#34;&gt;#&lt;/a&gt; RDB 快照的触发方式&lt;/h3&gt;
&lt;h4 id=&#34;手动-save-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手动-save-命令&#34;&gt;#&lt;/a&gt; 手动 save 命令&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;线上严禁使用！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过在 redis-cli 客户端中手动执行 save 命令，可立即让 Redis 保存一次数据库的快照。&lt;font color=&#39;red&#39;&gt;但是，save 命令在执行期间&lt;strong&gt;会阻塞&lt;/strong&gt; redis-server 进程，导致 Redis 不能处理任何读写请求，无法对外提供缓存服务，直至持久化过程完毕&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806123508579.png&#34; alt=&#34;image-20230806123508579&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;手动-bgsave-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手动-bgsave-命令&#34;&gt;#&lt;/a&gt; 手动 bgsave 命令&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;默认使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过在 redis-cli 客户端中执行 bgsave 命令，可立即让 Redis 保存一次数据库的快照。不同于 save 命令的是，正如该命令的名称一样，background save，后台运行 save。&lt;font color=&#39;red&#39;&gt;bgsave 命令会使服务器进程 redis-server 通过 fork () 生成一个子进程，由该子进程负责完成保存过程，&lt;strong&gt;不会阻塞&lt;/strong&gt; redis-server 进程对客户端读写请求的处理&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806145215893.png&#34; alt=&#34;image-20230806145215893&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;自动条件触发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自动条件触发&#34;&gt;#&lt;/a&gt; 自动条件触发&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;本质：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;定时自动执行 bgsave 命令&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用户可修改配置文件  &lt;code&gt;redis.conf&lt;/code&gt;  中 SNAPSHOTTING 的 save 参数，从而设置自动触发快照的时间间隔。比如  &lt;code&gt;save m n&lt;/code&gt;  表示每隔 m 秒检测一次数据集，如果检测出超过 n 次变化时，自动触发 RDB 持久化条件，执行快照。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，这里说的是&lt;strong&gt;每隔 m 秒检测一次，&lt;font color=&#39;red&#39;&gt;对变化的计数是累加的&lt;/font&gt;，只要在某次检测中发现变化数累加值达到 n 次，就会触发 RDB 持久化。&lt;font color=&#39;red&#39;&gt;而不是要求 n 次变化都集中发生在某个 m 秒内！&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Redis 6.0.16 及之前&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;save 900 1：每隔 900s (15min) 检测一次，如果有超过 1 个 key 发生了变化，就写一份新的 RDB 文件&lt;/li&gt;
&lt;li&gt;save 300 10：每隔 300s (5min) 检测一次，如果有超过 10 个 key 发生了变化，就写一份新的 RDB 文件&lt;/li&gt;
&lt;li&gt;save 60 10000：每隔 60s (1min) 检测一次，如果有超过 10000 个 key 发生了变化，就写一份新的 RDB 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806010837837.png&#34; alt=&#34;image-20230806010837837&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Redis 6.0.16 以后至今&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每隔 3600s（1hour）检测一次，如果有超过 1 处变化，就写一份新的 RDB 文件&lt;/li&gt;
&lt;li&gt;每隔 300s（5min）检测一次，如果有超过 100 处变化，就写一份新的 RDB 文件&lt;/li&gt;
&lt;li&gt;每隔 60s（1min）检测一次，如果有超过 10000 处变化，就写一份新的 RDB 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806010819707.png&#34; alt=&#34;image-20230806010819707&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;rdb-持久化过程工作机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb-持久化过程工作机制&#34;&gt;#&lt;/a&gt; RDB 持久化过程（工作机制）&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806145215893.png&#34; alt=&#34;image-20230806145215893&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Redis 进行 bgsave 持久化时，服务器进程 redis-server 会执行以下操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器进程（父进程）调用 &lt;font color=&#39;red&#39;&gt;forks&lt;/font&gt; 生成一个 bgsave 子进程&lt;/li&gt;
&lt;li&gt;bgsave 子进程调用 &lt;font color=&#39;red&#39;&gt;dump&lt;/font&gt; 将内存数据写入到一个 RDB 临时文件中&lt;/li&gt;
&lt;li&gt;新 RDB 文件&lt;font color=&#39;red&#39;&gt;覆盖&lt;/font&gt;原来的 RDB 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bgsave 子进程以 **&lt;font color=&#39;red&#39;&gt;异步方式&lt;/font&gt;** 完成持久化，该过程&lt;font color=&#39;red&#39;&gt;不会阻塞 redis-server 进程&lt;/font&gt;，Redis 可以继续接收并处理用户的读写请求。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/Redis%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6.png&#34; alt=&#34;Redis写时复制&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Redis写时复制&lt;/center&gt;
&lt;p&gt;其中，bgsave 子进程的详细工作原理如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231207202547716.png&#34; alt=&#34;image-20231207202547716&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由于子进程可以继承父进程的所有资源，且父进程不能拒绝子进程的继承权。所以，bgsave 子进程有权读取到 redis-server 进程写入到内存中的用户数据，使得将内存数据持久化到 dump.rdb 成为可能。&lt;/p&gt;
&lt;p&gt;bgsave 子进程在持久化时首先会将内存中的全量数据 &lt;font color=&#39;red&#39;&gt;copy&lt;/font&gt; 到磁盘中的一个 RDB 临时文件，copy 结束后，再将该文件 &lt;font color=&#39;red&#39;&gt;rename&lt;/font&gt; 为 dump.rdb，替换掉原来的同名文件。&lt;/p&gt;
&lt;p&gt;不过，在进行持久化过程中，如果 redis-server 进程接收到了用户写请求，则系统会将内存中发生数据修改的物理块 copy 出一个副本。等内存中的全量数据 copy 结束后，会再将副本中的数据 copy 到 RDB 临时文件。这个副本的生成是由于 Linux 系统的&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;写时复制技术&lt;/strong&gt;（ &lt;code&gt;Copy-On-Write&lt;/code&gt; ）&lt;/font&gt;实现的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;copy-on-write 是 Linux 系统的一种进程管理技术。&lt;/p&gt;
&lt;p&gt;原本在 Unix 系统中，当一个主进程通过 fork () 系统调用创建子进程后，内核进程会&lt;font color=&#39;red&#39;&gt;复制主进程的整个内存空间中的数据，并将其分配给子进程&lt;/font&gt;。这种方式存在的问题有以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个过程非常耗时&lt;/li&gt;
&lt;li&gt;这个过程降低了系统性能&lt;/li&gt;
&lt;li&gt;如果主进程修改了其内存数据，子进程副本中的数据是没有修改的。即出现了数据冗余，而冗余数据最大的问题是&lt;font color=&#39;red&#39;&gt;数据一致性&lt;/font&gt;无法保证。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现代的 Linux 则采用了更为有效的方式：&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;写时复制&lt;/font&gt;&lt;/strong&gt;。子进程会继承父进程的所有资源，其中就包括主进程的内存空间。即&lt;font color=&#39;red&#39;&gt;子进程与父进程共享内存&lt;/font&gt;。只要内存被共享，那么该内存就是只读的（写保护的）。而 **&lt;font color=&#39;red&#39;&gt;写时复制则是在任何一方需要写入数据到共享内存时，都会出现异常，此时内核进程就会将需要写入的数据 copy 出一个副本，写入到另外一块非共享内存区域&lt;/font&gt;**。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;rdb-配置项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb-配置项&#34;&gt;#&lt;/a&gt; RDB 配置项&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;RDB 相关的配置在配置文件  &lt;code&gt;redis.conf&lt;/code&gt;  中的 SNAPSHOTTING 部分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置参数&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;save&lt;/code&gt;  &amp;lt;seconds&amp;gt; &amp;lt;changes&amp;gt;&lt;/td&gt;
&lt;td&gt;设置快照自动触发的条件（&lt;font color=&#39;red&#39;&gt;时间间隔、变化数&lt;/font&gt;）。默认情况下持久化条件为 save 3600 1 300 100 60 10000&lt;/td&gt;
&lt;td&gt;&lt;code&gt;save m n&lt;/code&gt;  表示每隔 m 秒检测一次数据集，如果检测出超过 n 次变化（累积）时，自动触发 RDB 持久化条件，执行快照。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dbfilename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置 rdb 文件的名称，默认为 dump.rdb&lt;/td&gt;
&lt;td&gt;dbfilename dump.rdb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置 rdb 文件的保存路径，默认为 Redis 安装根目录&lt;/td&gt;
&lt;td&gt;dir ./&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stop-write-on-bgsave-error&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当子进程执行快照保存出现错误时，&lt;font color=&#39;red&#39;&gt;是否让主进程停止接收新的写请求&lt;/font&gt;，默认为 yes&lt;/td&gt;
&lt;td&gt;stop-write-on-bgsave-error yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rdbcompression&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对于存储到磁盘中的快照，&lt;font color=&#39;red&#39;&gt;是否采用 LZF 算法对字符串对象进行压缩&lt;/font&gt;，默认为 yes。可大幅降低文件的大小，方便保存到磁盘，加速主从集群中从节点的数据同步。&lt;/td&gt;
&lt;td&gt;rdbcompression yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rdbchecksum&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;是否采用 CRC64 算法对快照文件进行数据校验&lt;/font&gt;，默认为 yes&lt;/td&gt;
&lt;td&gt;rdbchecksum yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sanitize-dump-payload&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置在加载 RDB 文件或进行持久化时&lt;font color=&#39;red&#39;&gt;是否开启对 zipList、 listPack 等数据的全面安全检测&lt;/font&gt;，该检测可以降低命令处理时发生系统崩溃的可能，默认为 no&lt;/td&gt;
&lt;td&gt;sanitize-dump-payload clients 表示只有当客户端连接时检测，排除了加载 RDB 文件与进行持久化时的检测。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rdb-del-sync-files&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;主从复制时，是否删除用于同步的从机上的 RDB 文件&lt;/font&gt;。默认是 no，不删除。不过需要注意，只有当从机的 RDB 和 AOF 持久化功能都未开启时才生效。&lt;/td&gt;
&lt;td&gt;rdb-del-sync-files no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;rdb-文件结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb-文件结构&#34;&gt;#&lt;/a&gt; RDB 文件结构&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231207205049480.png&#34; alt=&#34;image-20231207205049480&#34; /&gt;&lt;/p&gt;
&lt;p&gt;RDB 持久化文件 dump.rdb 由五部分构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;SOF（文件开始标识）&lt;/font&gt;：是一个长度为 5 的字符串常量 &amp;quot;REDIS&amp;quot;，标识 RDB 文件的开始，以便在加载 RDB 文件时可以迅速判断出文件是否是 RDB 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;rdb_version（文件版本号）&lt;/font&gt;：是一个长度为 4 字节的整数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;EOF（文件结束标识）&lt;/font&gt;：长度为 1 字节的常量，用于标识 RDB 数据的结束，校验和的开始。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;check_sum（校验和）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;用于判断 RDB 文件中是否出现数据异常&lt;/font&gt;，采用的是 &lt;font color=&#39;red&#39;&gt;CRC 校验算法&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CRC 校验算法：&lt;/p&gt;
&lt;p&gt;在持久化时，先将 SOF、rdb_version 及内存数据库中的数据快照这三者的二进制数据拼接起来，形成一个二进制数（假设称为数 a），然后再使用这个 a 除以校验和 check_sum，此时可获取到一个余数 b，然后再将这个 b 拼接到 a 的后面，形成 databases。&lt;/p&gt;
&lt;p&gt;在加载时，需要先使用 check_sum 对 RDB 文件进行数据损坏验证。验证过程：只需将 RDB 文件中除 EOF 与 check_sum 外的数据除以 check_sum。只要除得的余数不是 0，就说明文件发生损坏。当然，如果余数是 0，也不能肯定文件没有损坏。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;这种验证算法，是数据损坏校验，而不是数据没有损坏的校验&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;databases（数据库）&lt;/font&gt;&lt;/strong&gt;：可以包含任意多个非空数据库 database，每个 database 又由三部分构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;blue&#39;&gt;SODB（数据库开始标识）&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;blue&#39;&gt;db_number（数据库编号）&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;blue&#39;&gt;key_value_pairs（键值对数据）&lt;/font&gt;：每个键值对又由多个描述数据构成：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231207211310010.png&#34; alt=&#34;image-20231207211310010&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VALUE_TYPE&lt;/li&gt;
&lt;li&gt;EXPIRETIME_UNIT（过期时间的单位）&lt;/li&gt;
&lt;li&gt;time（当前键值对的过期时间）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rdb-优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb-优缺点&#34;&gt;#&lt;/a&gt; RDB 优缺点&lt;/h3&gt;
&lt;p&gt;RDB 持久化的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适合&lt;font color=&#39;red&#39;&gt;大规模&lt;/font&gt;的数据恢复&lt;/li&gt;
&lt;li&gt;按照业务，&lt;font color=&#39;red&#39;&gt;定时备份&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;对数据完整性和一致性要求不高&lt;/li&gt;
&lt;li&gt;dump.rdb 文件在内存中的&lt;font color=&#39;red&#39;&gt;加载速度&lt;/font&gt;要比 AOF 快得多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RDB 持久化的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一定间隔时间做一次备份，所以如果 Redis 意外 down 掉的话，就会丢失从当前至最近一次快照期间的数据，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;快照之间的数据会丢失&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;内存数据的全量同步，如果数据量太大会导致&lt;font color=&#39;red&#39;&gt; I/O 严重影响服务器性能&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;RDB 依赖于主进程的 fork，在更大的数据集中，这可能会导致&lt;font color=&#39;red&#39;&gt;服务请求的瞬间延迟&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;fork 的时候内存中的数据被克降了一份，&lt;font color=&#39;red&#39;&gt;大致 2 倍的数据膨胀性&lt;/font&gt;，需要考虑&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何禁用-rdb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何禁用-rdb&#34;&gt;#&lt;/a&gt; 如何禁用 RDB&lt;/h3&gt;
&lt;p&gt;将配置文件中的 save 参数设置为空串 &amp;quot;&amp;quot;，有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;命令： &lt;code&gt;res-cli config set save &amp;quot;&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改配置文件：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806152126685.png&#34; alt=&#34;image-20230806152126685&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何恢复-rdb-文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何恢复-rdb-文件&#34;&gt;#&lt;/a&gt; 如何恢复 RDB 文件&lt;/h3&gt;
&lt;p&gt;当 dump.rdb 文件破损时可以使用  &lt;code&gt;redis-check-rdb&lt;/code&gt;  命令进行修复。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806151515656.png&#34; alt=&#34;image-20230806151515656&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;rdb-小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb-小结&#34;&gt;#&lt;/a&gt; RDB 小结&lt;/h3&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806153628002.png&#34; alt=&#34;image-20230806153628002&#34;  /&gt;
&lt;h2 id=&#34;aof-持久化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof-持久化&#34;&gt;#&lt;/a&gt; AOF 持久化&lt;/h2&gt;
&lt;h3 id=&#34;aof-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof-简介&#34;&gt;#&lt;/a&gt; AOF 简介&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;动机：对于 RDB 持久化的快照，如果 Redis 因为某些原因而造成故障停机，那么服务器&lt;font color=&#39;red&#39;&gt;将丢失最近写入、但仍未保存到快照中的那些数据&lt;/font&gt;。因此，Redis 增加了一种 **&lt;font color=&#39;red&#39;&gt;完全耐久、实时性更好&lt;/font&gt;** 的持久化方式：AOF 持久化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AOF（ &lt;code&gt;A&lt;/code&gt; ppend  &lt;code&gt;O&lt;/code&gt; nly  &lt;code&gt;F&lt;/code&gt; ile）&lt;font color=&#39;red&#39;&gt;以&lt;strong&gt;日志文件&lt;/strong&gt;（ &lt;code&gt;appendonly.aof&lt;/code&gt;  文件）的形式来&lt;strong&gt;追加&lt;/strong&gt;记录 Redis 执行过的每个&lt;strong&gt;写操作指令&lt;/strong&gt;&lt;/font&gt;。Redis 重启时就根据日志文件的内容将写指令从前到后重新执行一次，以完成数据的恢复工作。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Redis 6.0 之前默认关闭 AOF，Redis 6.0 之后默认开启 AOF&lt;/font&gt;。开启 AOF 功能需要在配置文件  &lt;code&gt;redis.conf&lt;/code&gt;  中设置配置:  &lt;code&gt;appendonly yes&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;aof-文件格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof-文件格式&#34;&gt;#&lt;/a&gt; AOF 文件格式&lt;/h3&gt;
&lt;p&gt;从 Redis 7 开始，采用 &lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;Multi Part AOF&lt;/font&gt;&lt;/strong&gt; 机制，将原来的单个 AOF 文件拆分成三类多个 AOF 文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;基本文件（base.rdb/aof）&lt;/font&gt;：可以是 RDB / AOF 格式，默认为 RDB 格式，即混合式持久化。一般由子线程通过 rewrite 产生，该文件最多只有一个。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;增量文件（incr.aof）&lt;/font&gt;：以操作日志形式记录写命令，一般在 rewrite 开始执行时创建，该文件可以有多个。&lt;/li&gt;
&lt;li&gt;历史文件：由 BASE 和 INCR AOF 变化而来，每次 AOFRW 成功完成时，本次 AOFRW 之前对应的 BASE 和 INCR AOF 都将变为 HISTORY，HISTORY 类型的 AOF 会被 Redis 自动删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，还有&lt;font color=&#39;gree&#39;&gt;清单文件（manifest）&lt;/font&gt;：该文件首先会按照 seq 序号列举出所有&lt;font color=&#39;red&#39;&gt;基本文件&lt;/font&gt;，基本文件 type 类型为 b，然后再按照 seq 序号再列举出所有&lt;font color=&#39;red&#39;&gt;增量文件&lt;/font&gt;，增量文件 type 类型为 i。对于 Redis 启动时的数据恢复，也会按照该文件由上到下依次加载它们中的数据。可以维护 AOF 文件的创建顺序，保障激活时的应用顺序。&lt;/p&gt;
&lt;p&gt;其中基本文件一般为 rdb 格式，在前面已经研究过了。下面就来看一下增量文件与清单文件的内容格式。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806210712843.png&#34; alt=&#34;image-20230806210712843&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;aof-配置项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof-配置项&#34;&gt;#&lt;/a&gt; AOF 配置项&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置参数&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;appendonly&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是否开启 AOF&lt;/td&gt;
&lt;td&gt;appendonly yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;appendfilename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置 AOF 文件的名称&lt;/td&gt;
&lt;td&gt;appendfilename &amp;quot;appendonly.aof&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aof-use-rdb-preamble&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置基本文件为 RDF 格式 / AOF 格式，&lt;font color=&#39;red&#39;&gt;默认为 yes（RDB 格式），即混合式持久化&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;aof-use-rdb-preamble yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;appenddirname&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置 AOF 文件目录，默认为 Redis 安装目录&lt;/td&gt;
&lt;td&gt;appenddirname &amp;quot;appendonlydir&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;appendfsync&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置同步方式（刷盘时机）&lt;/td&gt;
&lt;td&gt;appendfsync &lt;font color=&#39;red&#39;&gt;always/everysec/no&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;no-appendfsync-on-rewrite&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;AOF rewrite 期间是否同步（刷盘）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auto-aof-rewrite-percentage&lt;/code&gt; &lt;/br&gt; &lt;code&gt;auto-aof-rewrite-min-size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;rewrite 触发配置、文件重写策略&lt;/td&gt;
&lt;td&gt;auto-aof-rewrite-percentage 100&lt;/br&gt;auto-aof-rewrite-min-size 64mb&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;aof-持久化过程工作基本流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof-持久化过程工作基本流程&#34;&gt;#&lt;/a&gt; AOF 持久化过程（工作基本流程）&lt;/h3&gt;
&lt;p&gt;AOF 持久化功能的实现可以简单分为 5 步：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231208165553752.png&#34; alt=&#34;image-20231208165553752&#34; /&gt;&lt;/p&gt;
&lt;center&gt;AOF 工作基本流程&lt;/center&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;命令追加（append）&lt;/font&gt;&lt;/strong&gt;：所有的写命令会  &lt;code&gt;append&lt;/code&gt;  到内存中的&lt;font color=&#39;gree&#39;&gt; AOF 缓冲区&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;文件写入（write）&lt;/font&gt;&lt;/strong&gt;：将 AOF 缓冲区的数据写入到 AOF 文件中。这一步需要调用  &lt;code&gt;write&lt;/code&gt;  函数（系统调用）将数据写入到了&lt;font color=&#39;gree&#39;&gt;系统内核缓冲区&lt;/font&gt;之后&lt;font color=&#39;red&#39;&gt;直接返回了（延迟写）&lt;/font&gt;。注意！！！&lt;font color=&#39;red&#39;&gt;此时并没有同步到磁盘&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;文件同步（fsync）&lt;/font&gt;&lt;/strong&gt;：AOF 缓冲区根据对应的持久化方式（  &lt;code&gt;fsync&lt;/code&gt;  策略）向&lt;font color=&#39;gree&#39;&gt;硬盘&lt;/font&gt;做同步操作。这一步需要调用  &lt;code&gt;fsync&lt;/code&gt;  函数（系统调用），  &lt;code&gt;fsync&lt;/code&gt;  针对单个文件操作，对其进行强制硬盘同步， &lt;code&gt;fsync&lt;/code&gt;  将&lt;font color=&#39;red&#39;&gt;阻塞&lt;/font&gt;直到写入磁盘完成后返回，保证了数据持久化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;文件重写（rewrite）&lt;/font&gt;&lt;/strong&gt;：随着&lt;font color=&#39;red&#39;&gt;磁盘上&lt;/font&gt;的 AOF 文件越来越大，到达 rewrite 条件时，主线程会 fork 一个子线程 bgrewriteaof 定期 AOF 文件进行重写（&lt;font color=&#39;red&#39;&gt;根据规则去合并写命令&lt;/font&gt;），达到&lt;font color=&#39;red&#39;&gt;压缩&lt;/font&gt;的目的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果在 rewrite 过程中又有写操作命令追加，那么这些数据会暂时写入 aof_rewrite_buf 缓冲区。等将全部 rewrite 计算结果写入临时文件后，会先将 aof_rewrite_buf 缓冲区中的数据写入临时文件，然后再 rename 为磁盘文件的原名称，覆盖原文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;重启加载（load）&lt;/font&gt;&lt;/strong&gt;：当 Redis 重启时，可以加载磁盘上的 AOF 文件，执行其中的写命令，进行数据恢复。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux 系统直接提供了一些函数用于对文件和设备进行访问和控制，这些函数被称为&lt;strong&gt;系统调用（syscall）&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里对上面提到的一些 Linux 系统调用再做一遍解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;write&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;写入系统内核缓冲区之后直接返回（仅仅是写到缓冲区），不会立即同步到硬盘&lt;/font&gt;。虽然提高了效率，但也带来了&lt;font color=&#39;red&#39;&gt;数据丢失的风险&lt;/font&gt;。同步硬盘操作通常依赖于系统调度机制，Linux 内核通常为 30s 同步一次，具体值取决于写出的数据量和 I/O 缓冲区的状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fsync&lt;/code&gt; ：用于&lt;font color=&#39;red&#39;&gt;强制刷新系统内核缓冲区（同步到到磁盘）&lt;/font&gt;，会一直阻塞直到确保写磁盘操作结束才会返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231208170306808.png&#34; alt=&#34;image-20231208170306808&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;aof-缓冲区的三种写回刷盘策略fsync-策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof-缓冲区的三种写回刷盘策略fsync-策略&#34;&gt;#&lt;/a&gt; AOF 缓冲区的三种写回 / 刷盘策略（ &lt;code&gt;fsync&lt;/code&gt;  策略）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;主要区别在于 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;fsync 同步 AOF 文件的时机（刷盘）&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231208165553752.png&#34; alt=&#34;image-20231208165553752&#34; /&gt;&lt;/p&gt;
&lt;p&gt;AOF 缓冲区需要将它保存的写命令写入磁盘上的 AOF 文件，可以修改配置文件中的 &lt;code&gt;参数 appendfsync&lt;/code&gt; ，有三种策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;always&lt;/code&gt; ：&lt;strong&gt;&lt;font color=&#39;gree&#39;&gt;同步写回&lt;/font&gt;&lt;/strong&gt;，主线程调用 write 后，后台线程会立即调用 fsync 函数同步 AOF 文件（刷盘）。fsync 完成后线程返回，这会严重降低 Redis 的性能&lt;font color=&#39;red&#39;&gt;（write + fsync）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;everysec&lt;/code&gt; ：&lt;strong&gt;&lt;font color=&#39;gree&#39;&gt;每秒写回&lt;/font&gt;&lt;/strong&gt;，主线程调用 write 后立即返回，由后台线程每秒调用 fsync 函数同步一次 AOF 文件&lt;font color=&#39;red&#39;&gt;（write + fsync，其中 fsync 间隔为 1 秒）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no&lt;/code&gt; ：&lt;strong&gt;&lt;font color=&#39;gree&#39;&gt;操作系统控制的写回&lt;/font&gt;&lt;/strong&gt;，主线程调用 write 后立即返回，让操作系统决定何时进行同步（刷盘）。Linux 中一般为 30 秒一次&lt;font color=&#39;red&#39;&gt;（write 但不 fsync，其中 fsync 的时机由操作系统决定）&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230806200107294.png&#34; alt=&#34;image-20230806200107294&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;aof-重写机制rewrite&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof-重写机制rewrite&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟AOF 重写机制（Rewrite）&lt;/mark&gt;&lt;/h3&gt;
&lt;h4 id=&#34;何为-rewrite&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#何为-rewrite&#34;&gt;#&lt;/a&gt; 何为 rewrite&lt;/h4&gt;
&lt;p&gt;当 AOF 变得太大时，Redis 能够在后台产生一个新的 AOF 文件，该文件与原有的 AOF 文件所保存的&lt;font color=&#39;red&#39;&gt;数据库状态一样，但体积更小&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AOF 重写是一个有歧义的名字，该功能是通过读取数据库中的键值对来实现的，程序无须对现有 AOF 文件进行任何读入、分析或者写入操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;orange&#39;&gt;AOF 重写机制&lt;/font&gt;：启动 AOF 文件的内容压缩，&lt;font color=&#39;red&#39;&gt;合并其中的命令，只保留可以恢复数据的最小指令集&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;重写完成后&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重写结果被保存到一个新的 BASE AOF 文件中，文件名上的标号加 1。&lt;/li&gt;
&lt;li&gt;同时，新建一个空的 INCR AOF 文件，文件名上的标号加 1，旧的被删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;rewrite-触发方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rewrite-触发方式&#34;&gt;#&lt;/a&gt; rewrite 触发方式&lt;/h4&gt;
&lt;p&gt;AOF 重写机制有&lt;font color=&#39;red&#39;&gt;两种触发方式&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;自动触发&lt;/font&gt;：当 INCR AOF 文件&lt;font color=&#39;red&#39;&gt;同时满足&lt;/font&gt;以下两个条件时，Redis 就会&lt;font color=&#39;red&#39;&gt;自动&lt;/font&gt;启动重写机制，只保留可以恢复数据的最小指令集&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;INCR AOF 文件负责记录从 AOF 缓冲区写回的写命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;当 INCR AOF 文件的大小超过上一次重写结果（即 BASE AOF 文件）大小 1 倍（可以通过配置 &lt;code&gt;auto-aof-rewrite-percentage&lt;/code&gt;  修改）&lt;/li&gt;
&lt;li&gt;当 INCR AOF 文件的大小超过 64MB（可以通过配置 &lt;code&gt;auto-aof-rewrite-min-size&lt;/code&gt;  修改）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;手动触发&lt;/font&gt;：可以手动使用命令  &lt;code&gt;bgrewriteaof&lt;/code&gt;  来重写。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体过程见脑图，这里只演示 AOF 重写后的效果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807004504357.png&#34; alt=&#34;image-20230807004504357&#34; /&gt;&lt;/p&gt;
&lt;center&gt;自动重写&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807004613263.png&#34; alt=&#34;image-20230807004613263&#34; /&gt;&lt;/p&gt;
&lt;center&gt;手动重写&lt;/center&gt;
&lt;p&gt;结论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AOF 文件重写并不是对原文件进行重新整理，而是&lt;font color=&#39;red&#39;&gt;直接读取服务器现有的键值对，然后用一条命令去代替之前记录这个键值对的多条命令&lt;/font&gt;，生成一个新的文件后去替换原来的 AOF 文件。&lt;/li&gt;
&lt;li&gt;AOF 文件重写触发机制：通过 redis.conf 配置文件中的 &lt;code&gt;auto-aof-rewrite-percentage&lt;/code&gt; : 默认值为 100，以及 &lt;code&gt;auto-aof-rewrite·min-size&lt;/code&gt; : 64mb 配置，也就是说默认 Redis 会记录上次重写时的 AOF 大小，默认配置是当 AOF 文件大小是上次 rewrite 后大小的一倍&lt;strong&gt;且&lt;/strong&gt;文件大于 64M 时触发。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rewrite-原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rewrite-原理&#34;&gt;#&lt;/a&gt; rewrite 原理&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/2032648-20220207170749957-1755223036.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在重写开始前，Redis 会创建一个重写子进程  &lt;code&gt;bgrewriteaof&lt;/code&gt; ，这个子进程会读取现有的 AOF 文件，并将其包含的指令进行&lt;font color=&#39;red&#39;&gt;分析、压缩&lt;/font&gt;，写入到一个临时文件中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与此同时，主进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的 AOF 文件中，这样做是保证原有的 AOF 文件的可用性，避免在重写过程中出现意外。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当重写子进程完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新 AOF 文件中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当追加结束后，Redis 就会用新 AOF 文件来&lt;font color=&#39;red&#39;&gt;代替&lt;/font&gt;旧 AOF 文件，之后再有新的写指令，就都会追加到新的 AOF 文件中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重写 AOF 文件的操作，并没有读取旧的 AOF 文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的 AOF 文件，这点和快照有点类似&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;aof-校验机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof-校验机制&#34;&gt;#&lt;/a&gt; AOF 校验机制&lt;/h3&gt;
&lt;p&gt;AOF 校验机制是 Redis 在启动时对 AOF 文件进行检查，以&lt;font color=&#39;red&#39;&gt;判断文件是否完整，是否有损坏或者丢失的数据&lt;/font&gt;。这个机制的原理其实非常简单，就是通过使用一种叫做 **&lt;font color=&#39;#B32015&#39;&gt;校验和（checksum）&lt;/font&gt;** 的数字来验证 AOF 文件。这个校验和是通过对整个 AOF 文件内容进行&lt;font color=&#39;red&#39;&gt; CRC64 算法&lt;/font&gt;计算得出的数字。如果文件内容发生了变化，那么校验和也会随之改变。因此，Redis 在启动时会比较计算出的校验和与文件末尾保存的校验和（计算的时候会把最后一行保存校验和的内容给忽略点），从而判断 AOF 文件是否完整。如果发现文件有问题，Redis 就会拒绝启动并提供相应的错误信息。AOF 校验机制十分简单有效，可以提高 Redis 数据的可靠性。&lt;/p&gt;
&lt;p&gt;类似地，&lt;font color=&#39;red&#39;&gt;RDB 文件也有类似的校验机制&lt;/font&gt;来保证 RDB 文件的正确性，这里就不重复进行介绍了。&lt;/p&gt;
&lt;h3 id=&#34;aof-记录日志过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof-记录日志过程&#34;&gt;#&lt;/a&gt; AOF 记录日志过程&lt;/h3&gt;
&lt;p&gt;关系型数据库（如 MySQL）通常都是执行命令之前记录日志（方便故障恢复），而 &lt;font color=&#39;red&#39;&gt;Redis AOF 持久化机制是在执行完命令之后再记录日志&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-aof-write-log-disc.png&#34; alt=&#34;AOF 记录日志过程&#34; /&gt;&lt;/p&gt;
&lt;center&gt;AOF 记录日志过程&lt;/center&gt;
&lt;p&gt;&lt;strong&gt;为什么是在执行完命令之后记录日志呢？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;避免额外的检查开销&lt;/font&gt;，AOF 记录日志不会对命令进行语法检查；&lt;/li&gt;
&lt;li&gt;在命令执行完之后再记录，&lt;font color=&#39;red&#39;&gt;不会阻塞当前的命令执行&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样也带来了风险（我在前面介绍 AOF 持久化的时候也提到过）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果刚执行完命令 Redis 就宕机&lt;font color=&#39;red&#39;&gt;会导致对应的修改丢失&lt;/font&gt;；&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;可能会阻塞后续其他命令的执行&lt;/font&gt;（AOF 记录日志是在 Redis 主线程中进行的）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aof-优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof-优缺点&#34;&gt;#&lt;/a&gt; AOF 优缺点&lt;/h3&gt;
&lt;p&gt;AOF 有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;更好地保护数据不丢失&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 AOF Redis 更加持久∶您可以有&lt;font color=&#39;red&#39;&gt;不同的 fsync 策略&lt;/font&gt;：根本不 fsync、每秒 fsync、每次查询时 fsync。使用每秒 fsync 的默认策略，写入性能仍然很棒。fsync 是使用后台线程执行的，当没有 fsync 正在进行时，主线程将努力执行写入，因此您&lt;font color=&#39;red&#39;&gt;只能丢失一秒钟的写入&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;易修复&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AOF 日志是一个仅附加日志，因此不会出现寻道问题，也不会在断电时出现损坏问题。即使由于某种原因（磁盘已满或其他原因）日志以写一半的命令结尾， &lt;code&gt;redis-check-aof&lt;/code&gt;  工具也能够轻松修复它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;得益于 AOF 的重写机制，能够自我压缩&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当 AOF 变得太大时，Redis 能够在后台自动重写 AOF。重写是完全安全的，因为当 Redis 继续附加到旧文件时，会使用创建当前数据集所需的最少操作集生成一个全新的文件，一旦第二个文件准备就绪，Redis 就会切换两者并开始附加到新的那一个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件内容易理解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AOF 以易于理解和解析的格式依次包含所有操作的日志。您甚至可以轻松导出 AOF 文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可做紧急恢复&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;即使您不小心使用该 &lt;code&gt;FLUSHALL&lt;/code&gt;  命令刷新了所有内容，只要在此期间没有执行日志重写，您仍然可以通过停止服务器、&lt;font color=&#39;red&#39;&gt;删除最新命令&lt;/font&gt;并重新启动 Redis 来保存您的数据集。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AOF 有以下缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于相同的数据集而言，aof 文件要 **&lt;font color=&#39;red&#39;&gt;远大于 rdb 文件&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;恢复速度慢于 rdb&lt;/font&gt;**&lt;/li&gt;
&lt;li&gt;aof**&lt;font color=&#39;red&#39;&gt;运行效率要慢于 rdb&lt;/font&gt;**，每秒同步策略效率较好，不同步效率和 rdb 相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aof-小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof-小结&#34;&gt;#&lt;/a&gt; AOF 小结&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807005534144.png&#34; alt=&#34;image-20230807005534144&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;rdb-aof-混合持久化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb-aof-混合持久化&#34;&gt;#&lt;/a&gt; RDB-AOF 混合持久化&lt;/h2&gt;
&lt;p&gt;Redis**&lt;font color=&#39;red&#39;&gt;默认仅使用 RDB 持久化&lt;/font&gt;&lt;strong&gt;，禁用 AOF 持久化。但是，当我们&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;手动启用 AOF 持久化后，AOF 的优先级高于 RDB&lt;/font&gt;**！对应的数据恢复顺序和加载流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231207165853136.png&#34; alt=&#34;image-20231207165853136&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;rdb-与-aof-对比持久化技术选型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb-与-aof-对比持久化技术选型&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟RDB 与 AOF 对比（持久化技术选型）&lt;/mark&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;RDB：定时一锅端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二者各自的特点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;RDB 持久化（定时一锅端）&lt;/font&gt;：能够在指定的时间间隔对数据库进行全量快照存储&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;AOF 持久化（实时记录写命令）&lt;/font&gt;：记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，命令以 Redis 协议追加保存每次写的操作到文件末尾。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RDB 优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDB 文件较小&lt;/li&gt;
&lt;li&gt;数据恢复速度快&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RDB 不足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据安全性较差&lt;/li&gt;
&lt;li&gt;写时复制会降低性能&lt;/li&gt;
&lt;li&gt;RDB 文件的可读性较差&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AOF 优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据安全性高（仅追加新执行的写命令）&lt;/li&gt;
&lt;li&gt;AOF 文件的可读性强，以一种易于理解和解析的格式包含所有写操作的日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AOF 不足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AOF 文件较大&lt;/li&gt;
&lt;li&gt;数据恢复速度慢&lt;/li&gt;
&lt;li&gt;写操作会影响性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RDB + AOF 同时开启时的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 redis 重启的时候会&lt;font color=&#39;red&#39;&gt;优先载入 AOF 文件&lt;/font&gt;来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集&lt;font color=&#39;red&#39;&gt;更完整&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件。&lt;font color=&#39;red&#39;&gt;但是作者建议不要只使用 AOF&lt;/font&gt;，因为 RDB 更适合用于备份数据库 (AOF 在不断变化不好备份)，&lt;font color=&#39;red&#39;&gt;留着 rdb 以防万一&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;orange&#39;&gt;官方推荐 RDB+AOF 混合方式&lt;/font&gt;&lt;/strong&gt;，既能快速加载又能避免丢失过多的数据。配置方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对应配置文件中的 &lt;code&gt;aof-use-rdb-preamble&lt;/code&gt; ，默认为 yes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;开启 AOF 持久化&lt;/font&gt;，对应配置文件中的 &lt;code&gt;appendonly&lt;/code&gt;  设置为 yes，默认为 no&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若对数据安全性要求不高，则推荐使用纯 RDB 持久化方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不推荐使用纯 AOF 持久化方式，因为 RDB 更适合备份数据库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若 Redis 仅用于缓存，则无需使用任何持久化技术&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;采用 RDB+AOF 混合持久化时，&lt;font color=&#39;red&#39;&gt;RDB 做&lt;strong&gt;全量&lt;/strong&gt;持久化，AOF 做&lt;strong&gt;增量&lt;/strong&gt;持久化&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先使用 RDB 进行快照存储&lt;/li&gt;
&lt;li&gt;然后使用 AOF 持久化记录所有的写操作&lt;/li&gt;
&lt;li&gt;当重写策略满足或手动触发重写的时候，将最新的数据存储为新的 RDB 记录。&lt;/li&gt;
&lt;li&gt;这样的话，重启服务的时候会从 RDB 和 AOF 两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单来说：混合持久化方式产生的文件一部分是 RDB 格式，一部分是 AOF 格式。&lt;strong&gt;----》&lt;font color=&#39;red&#39;&gt;AOF 包括了 RDB 头部 + AOF 混写&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807011820642.png&#34; alt=&#34;image-20230807011820642&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;纯缓存模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#纯缓存模式&#34;&gt;#&lt;/a&gt; 纯缓存模式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 作为基于 key-value 的内存数据库，&lt;strong&gt;Redis 最主要的功能是用作缓存&lt;/strong&gt;，而 Redis 持久化会消耗 Redis 的性能，因此可以&lt;strong&gt;同时关闭 RDB+AOF&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;禁用 RDB&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此时仍然可以手动使用命令 &lt;code&gt;SAVE&lt;/code&gt;  和 &lt;code&gt;BGSAVE&lt;/code&gt;  生成 rdb 文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;命令： &lt;code&gt;res-cli config set save &amp;quot;&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改配置文件：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807012414863.png&#34; alt=&#34;image-20230807012414863&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;禁用 AOF&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此时仍然可以手动使用命令 &lt;code&gt;BGREWRITEAOF&lt;/code&gt;  生成 aof 文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;命令： &lt;code&gt;res-cli config set appendonly no&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改配置文件：将 &lt;code&gt;redis.conf&lt;/code&gt;  中 APPEND ONLY MODE 模块下的 &lt;code&gt;参数appendonly&lt;/code&gt;  设置为 no&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;redis-线程io模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-线程io模型&#34;&gt;#&lt;/a&gt; Redis 线程（IO）模型&lt;/h1&gt;
&lt;p&gt;Redis 客户端提交的各种请求是如何最终被 Redis 处理的？&lt;font color=&#39;red&#39;&gt;Redis 处理客户端请求所采用的处理架构，称为 Redis 的 IO 模型&lt;/font&gt;。不同版本的 Redis 采用的 IO 模型是不同的。&lt;/p&gt;
&lt;p&gt;对于读写命令来说，Redis 一直是单线程模型。不过，&lt;font color=&#39;red&#39;&gt;在 Redis 4.0 版本之后引入了多线程来执行一些大键值对的异步删除操作&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;Redis 6.0 版本之后引入了多线程来处理网络请求（提高网络 IO 读写性能）&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&#34;单线程模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单线程模型&#34;&gt;#&lt;/a&gt; 单线程模型&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 3.0 及其以前版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231208205447709.png&#34; alt=&#34;image-20231208205447709&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231208210519289.png&#34; alt=&#34;image-20231208210519289&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Redis 的单线程模型：&lt;font color=&#39;red&#39;&gt;所有客户端的请求全部由一个线程处理&lt;/font&gt;，采用了 &lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;IO 多路复用（multiplexing）技术&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Redis 基于 Reactor 模式开发了自己的网络事件处理器：这个处理器被称为 **&lt;font color=&#39;cornflowerblue&#39;&gt;文件事件处理器（file event handler）&lt;/font&gt;**。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件事件处理器使用&lt;font color=&#39;cornflowerblue&#39;&gt; I/O 多路复用程序&lt;/font&gt;来同时监听多个&lt;font color=&#39;cornflowerblue&#39;&gt;套接字（socket）&lt;/font&gt;，并根据套接字目前执行的任务来为套接字关联不同的事件处理器。&lt;/li&gt;
&lt;li&gt;当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作时，与操作相对应的文件事件就会产生，这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件事件处理器（file event handler）主要是包含 4 个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个 socket（客户端连接）&lt;/li&gt;
&lt;li&gt;IO 多路复用程序（支持多个客户端连接的关键）&lt;/li&gt;
&lt;li&gt;文件事件分派器（将 socket 关联到相应的事件处理器）&lt;/li&gt;
&lt;li&gt;事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-event-handler.png&#34; alt=&#34;文件事件处理器（file event handler）&#34; /&gt;&lt;/p&gt;
&lt;center&gt;文件事件处理器（file event handler）&lt;/center&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;虽然文件事件处理器以单线程方式运行，但通过使用 I/O 多路复用程序来监听多个套接字&lt;/font&gt;&lt;/strong&gt;，文件事件处理器既实现了高性能的网络通信模型，又可以很好地与 Redis 服务器中其他同样以单线程方式运行的模块进行对接，这保持了 Redis 内部单线程设计的简单性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IO 多路复用技术是一种处理多个 IO 流的技术。它允许单个进程同时监视多个文件描述符（file descriptor，fd），当一个或多个 fd 准备好读或写时，它就可以立即响应。这种技术可以提高系统的并发性和响应能力，减少系统资源的浪费。&lt;/p&gt;
&lt;p&gt;在 Linux 中，epoll、select、poll 都是 IO 多路复用的实现方式，都可以监视多个 fd，一旦某个 fd 就绪 (一般是读就绪或者写就绪)，能够通知程序进行相应的读写操作。&lt;/p&gt;
&lt;p&gt;对于 IO 多路复用的实现方式常见的有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;select 模型&lt;/font&gt;：最早的 IO 多路复用机制，&lt;font color=&#39;red&#39;&gt;同时监视 fd 的数量不超过 1024 个，而且每次只能监视一部分 fd 的状态变化&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;poll 模型&lt;/font&gt;：与 select 类似，采用的是&lt;font color=&#39;red&#39;&gt;轮询算法&lt;/font&gt;，但是可以同时监视 fd 的数量更多（65536 个），该模型对客户端的就绪处理是有延迟的。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;epoll 模型&lt;/font&gt;：是 Linux 所特有的，采用的是&lt;font color=&#39;red&#39;&gt;回调方式&lt;/font&gt;，支持更多的 fd 数量（8192 个），根据就绪事件发生后的处理方式的不同，又可分为 LT 模型与 ET 模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个&lt;font color=&#39;gree&#39;&gt;客户端&lt;/font&gt;若要向 Redis 提交请求，都需要与 Redis 建立一个 &lt;font color=&#39;gree&#39;&gt;socket 连接&lt;/font&gt;，并向&lt;font color=&#39;gree&#39;&gt;事件分发器&lt;/font&gt;注册一个事件。一旦该事件发生就表明该连接已经就绪。而一旦连接就绪，事件分发器就会感知到，然后获取客户端通过该连接发送的请求，并将由该事件分发器所绑定的这个&lt;font color=&#39;red&#39;&gt;唯一的线程&lt;/font&gt;来处理。如果该线程还在处理多个任务，则将该任务写入到&lt;font color=&#39;gree&#39;&gt;任务队列&lt;/font&gt;等待线程处理。&lt;/p&gt;
&lt;p&gt;之所以称为事件分发器，是因为它会根据不同的就绪事件，将任务交由不同的&lt;font color=&#39;gree&#39;&gt;事件处理器&lt;/font&gt;去处理。&lt;/p&gt;
&lt;h2 id=&#34;混合线程模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#混合线程模型&#34;&gt;#&lt;/a&gt; 混合线程模型&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 4.0 开始&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从 Redis 4.0 版本开始，Redis 中就开始加入了多线程元素。处理客户端请求的仍是单线程模型，但&lt;font color=&#39;red&#39;&gt;对于一些比较耗时但又不影响对客户端的响应的操作，就由后台其它线程来处理&lt;/font&gt;。例如，持久化、对 AOF 的 rewrite、对失效连接的清理等。&lt;/p&gt;
&lt;h2 id=&#34;多线程模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多线程模型&#34;&gt;#&lt;/a&gt; 多线程模型&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 6.0 开始&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Redis 6.0 版本，才是真正意义上的多线程模型&lt;/font&gt;。因为其 **&lt;font color=&#39;red&#39;&gt;对于客户端请求的处理采用的是多线程模型&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231208211428194.png&#34; alt=&#34;image-20231208211428194&#34; /&gt;&lt;/p&gt;
&lt;p&gt;多线程 IO 模型中的&lt;font color=&#39;red&#39;&gt;“多线程” 仅用于接受、解析客户端的请求，然后将解析出的请求写入到任务队列&lt;/font&gt;。而 **&lt;font color=&#39;red&#39;&gt;对具体任务（命令）的处理，仍是由主线程处理&lt;/font&gt;**。这样做使得用户无需考虑线程安全问题，无需考虑事务控制，无需考虑像 LPUSH/LPOP 等命令的执行顺序问题。&lt;/p&gt;
&lt;h2 id=&#34;优缺点总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优缺点总结&#34;&gt;#&lt;/a&gt; 优缺点总结&lt;/h2&gt;
&lt;p&gt;单线程模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;可维护性高&lt;/li&gt;
&lt;li&gt;不存在并发读写情况，所以也就不存在执行顺序的不确定性，不存在线程切换开销，不存在死锁问题，不存在为了数据安全而进行的加锁 / 解锁&lt;br /&gt;
开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;性能低&lt;/li&gt;
&lt;li&gt;会形成处理器浪费（单线程只能使用一个处理器）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多线程模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;结合了多线程与单线程的优点，避开了它们的所有不足&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;非是一个真正意义上的 “多线程”，因为真正处理 “任务” 的线程仍是单线程。所以，其对性能也是有些影响的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis-60-之前为什么不使用多线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-60-之前为什么不使用多线程&#34;&gt;#&lt;/a&gt; Redis 6.0 之前为什么不使用多线程？&lt;/h2&gt;
&lt;p&gt;虽然说 Redis 是单线程模型，但是实际上，&lt;strong&gt;Redis 在 4.0 之后的版本中就已经加入了对多线程的支持。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不过，&lt;font color=&#39;red&#39;&gt;Redis 4.0 增加的多线程主要是针对一些大键值对的删除操作的命令&lt;/font&gt;，使用这些命令就会使用主线程之外的其他线程来 “异步处理”。&lt;/p&gt;
&lt;p&gt;为此，Redis 4.0 之后新增了 &lt;code&gt;UNLINK&lt;/code&gt; （可以看作是  &lt;code&gt;DEL&lt;/code&gt;  的异步版本）、 &lt;code&gt;FLUSHALL ASYNC&lt;/code&gt; （清空所有数据库的所有 key，不仅仅是当前  &lt;code&gt;SELECT&lt;/code&gt;  的数据库）、 &lt;code&gt;FLUSHDB ASYNC&lt;/code&gt; （清空当前  &lt;code&gt;SELECT&lt;/code&gt;  数据库中的所有 key）等异步命令。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis4.0-more-thread.png&#34; alt=&#34;redis4.0 more thread&#34; /&gt;&lt;/p&gt;
&lt;center&gt;redis4.0 more thread&lt;/center&gt;
&lt;p&gt;大体上来说，Redis 6.0 之前主要还是单线程处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那 Redis6.0 之前为什么不使用多线程？&lt;/strong&gt; 我觉得主要原因有 3 点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;单线程编程容易并且更容易维护&lt;/font&gt;；&lt;/li&gt;
&lt;li&gt;Redis 的性能瓶颈不在 CPU ，主要在内存和网络；&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;多线程就会存在死锁、线程上下文切换等问题&lt;/font&gt;，甚至会影响性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关阅读：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kcmF2ZW5lc3MubWUvd2h5cy10aGUtZGVzaWduLXJlZGlzLXNpbmdsZS10aHJlYWQv&#34;&gt;为什么 Redis 选择单线程模型？&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;redis60-之后为何引入了多线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis60-之后为何引入了多线程&#34;&gt;#&lt;/a&gt; Redis6.0 之后为何引入了多线程？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Redis6.0 引入多线程主要是为了提高网络 IO 读写性能&lt;/font&gt;&lt;/strong&gt;，因为这个算是 Redis 中的一个性能瓶颈（Redis 的瓶颈主要受限于内存和网络）。&lt;/p&gt;
&lt;p&gt;虽然，Redis6.0 引入了多线程，&lt;font color=&#39;red&#39;&gt;但是 Redis 的多线程只是在网络数据的读写这类耗时操作上使用了，执行命令仍然是单线程顺序执行&lt;/font&gt;。因此，你也不需要担心线程安全问题。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Redis6.0 的多线程默认是禁用的，只使用主线程&lt;/font&gt;。如需开启需要设置 IO 线程数 &amp;gt; 1，需要修改 redis 配置文件  &lt;code&gt;redis.conf&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;io-threads &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#设置 1 的话只会开启主线程，官网建议 4 核的机器建议设置为 2 或 3 个线程，8 核的建议设置为 6 个线程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;另外：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;io-threads 的个数一旦设置，不能通过 config 动态设置。&lt;/li&gt;
&lt;li&gt;当设置 ssl 后，io-threads 将不工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开启多线程后，默认只会使用多线程进行 IO 写入 writes，即发送数据给客户端，如果需要开启多线程 IO 读取 reads，同样需要修改 redis 配置文件  &lt;code&gt;redis.conf&lt;/code&gt;  :&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;io-threads-do-reads &lt;span class=&#34;token function&#34;&gt;yes&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;但是 **&lt;font color=&#39;red&#39;&gt;官网描述开启多线程读并不能有太大提升，因此一般情况下并不建议开启&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;相关阅读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRlp1M2Fjd0s2enJDQlpRXzNIb1Vndw==&#34;&gt;Redis 6.0 新特性 - 多线程连环 13 问！&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzOTIyMzY5Ng==&#34;&gt;Redis 多线程网络模型全面揭秘&lt;/span&gt;（推荐）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis-后台线程了解吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-后台线程了解吗&#34;&gt;#&lt;/a&gt; Redis 后台线程了解吗？&lt;/h2&gt;
&lt;p&gt;我们虽然经常说 Redis 是单线程模型（主要逻辑是单线程完成的），但实际还有一些后台线程用于执行一些比较耗时的操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bio_close_file&lt;/code&gt;  后台线程：释放 AOF / RDB 等过程中产生的临时文件资源。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bio_aof_fsync&lt;/code&gt;  后台线程：调用  &lt;code&gt;fsync&lt;/code&gt;  函数将系统内核缓冲区还未同步到到磁盘的数据强制刷到磁盘（ AOF 文件）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bio_lazy_free&lt;/code&gt;  后台线程：释放大对象（已删除）占用的内存空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在  &lt;code&gt;bio.h&lt;/code&gt;  文件中有定义（Redis 6.0 版本，源码地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzL3JlZGlzL2Jsb2IvNi4wL3NyYy9iaW8uaCVFRiVCQyU4OSVFRiVCQyU5QQ==&#34;&gt;https://github.com/redis/redis/blob/6.0/src/bio.h）：&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#ifndef __BIO_H&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#define __BIO_H&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* Exported API */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;bioInit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;bioCreateBackgroundJob&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; type&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;arg1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;arg2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;arg3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;unsigned &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;bioPendingJobsOfType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; type&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;unsigned &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;bioWaitStepOfType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; type&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;time_t &lt;span class=&#34;token function&#34;&gt;bioOlderJobOfType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; type&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;bioKillThreads&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* Background job opcodes */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#define &lt;span class=&#34;token constant&#34;&gt;BIO_CLOSE_FILE&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Deferred close(2) syscall. */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#define &lt;span class=&#34;token constant&#34;&gt;BIO_AOF_FSYNC&lt;/span&gt;     &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Deferred AOF fsync. */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#define &lt;span class=&#34;token constant&#34;&gt;BIO_LAZY_FREE&lt;/span&gt;     &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Deferred objects freeing. */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#define &lt;span class=&#34;token constant&#34;&gt;BIO_NUM_OPS&lt;/span&gt;       &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#endif&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;关于 Redis 后台线程的详细介绍可以查看 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MTAyNzgwNDM0NzM5NjI2MDE0&#34;&gt;Redis 6.0 后台线程有哪些？&lt;/span&gt; 这篇就文章。&lt;/p&gt;
&lt;h1 id=&#34;redis-内存管理缓存数据管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-内存管理缓存数据管理&#34;&gt;#&lt;/a&gt; Redis 内存管理（缓存数据管理）&lt;/h1&gt;
&lt;h2 id=&#34;redis-给缓存数据设置过期时间的意义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-给缓存数据设置过期时间的意义&#34;&gt;#&lt;/a&gt; Redis 给缓存数据设置过期时间的意义&lt;/h2&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;因为内存是有限的&lt;/font&gt;，如果缓存中的所有数据都是一直保存的话，分分钟直接 Out of memory。&lt;/p&gt;
&lt;p&gt;Redis 自带了给缓存数据设置过期时间的功能，比如：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; expire key &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 数据在 60s 后过期&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; setex key &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt; value &lt;span class=&#34;token comment&#34;&gt;# 数据在 60s 后过期 (setex:[set] + [ex] pire)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; ttl key &lt;span class=&#34;token comment&#34;&gt;# 查看数据还有多久过期&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;56&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;注意：&lt;strong&gt;Redis 中除了字符串类型有自己独有设置过期时间的命令  &lt;code&gt;setex&lt;/code&gt;  外，其他方法都需要依靠  &lt;code&gt;expire&lt;/code&gt;  命令来设置过期时间。另外， &lt;code&gt;persist&lt;/code&gt;  命令可以移除一个键的过期时间。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;过期时间除了&lt;font color=&#39;red&#39;&gt;有助于缓解内存的消耗&lt;/font&gt;，还有什么其他用么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多时候，我们的 **&lt;font color=&#39;red&#39;&gt;业务场景就是需要某个数据只在某一时间段内存在&lt;/font&gt;**，比如我们的短信验证码可能只在 1 分钟内有效，用户登录的 Token 可能只在 1 天内有效。&lt;/p&gt;
&lt;p&gt;如果使用传统的数据库来处理的话，一般都是自己判断过期，这样更麻烦并且性能要差很多。&lt;/p&gt;
&lt;h2 id=&#34;过期数据的判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过期数据的判断&#34;&gt;#&lt;/a&gt; 过期数据的判断&lt;/h2&gt;
&lt;p&gt;Redis 通过一个叫做 **&lt;font color=&#39;cornflowerblue&#39;&gt;过期字典&lt;/font&gt;**（可以看作是 hash 表）来保存数据过期的时间。过期字典的&lt;font color=&#39;red&#39;&gt;键指向 Redis 数据库中的某个 key (键)&lt;/font&gt;，过期字典的&lt;font color=&#39;red&#39;&gt;值是一个 long long 类型的整数&lt;/font&gt;，这个整数保存了 key 所指向的数据库键的过期时间（毫秒精度的 UNIX 时间戳）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-expired-dictionary.png&#34; alt=&#34;redis过期字典&#34; /&gt;&lt;/p&gt;
&lt;center&gt;redis过期字典&lt;/center&gt;
&lt;p&gt;过期字典是存储在  &lt;code&gt;redisDb&lt;/code&gt;  这个结构里的：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;redisDb&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    dict &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;dict&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 数据库键空间，保存着数据库中所有键值对&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    dict &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;expires   &lt;span class=&#34;token comment&#34;&gt;// 过期字典，保存着键的过期时间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; redisDb&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;过期的数据的删除策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过期的数据的删除策略&#34;&gt;#&lt;/a&gt; 过期的数据的删除策略&lt;/h2&gt;
&lt;p&gt;如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？&lt;/p&gt;
&lt;p&gt;常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;惰性删除&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;只会在取出 key 的时候才对数据进行过期检查&lt;/font&gt;。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;定期删除&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;每隔一段时间抽取一批 key 执行删除过期 key 操作&lt;/font&gt;。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 &lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;定期删除 + 惰性删除&lt;/font&gt;&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是&lt;font color=&#39;red&#39;&gt;可能存在定期删除和惰性删除漏掉了很多过期 key 的情况&lt;/font&gt;。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。&lt;/p&gt;
&lt;p&gt;怎么解决这个问题呢？答案就是：&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;Redis 内存淘汰机制&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;redis-内存淘汰机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-内存淘汰机制&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟Redis 内存淘汰机制&lt;/mark&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;相关问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，&lt;font color=&#39;red&#39;&gt;如何保证 Redis 中的数据都是热点数据？&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis 提供 6 种数据淘汰策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;volatile-lru（least recently used）&lt;/strong&gt;：从&lt;u&gt;已设置过期时间的数据集&lt;/u&gt;（ &lt;code&gt;server.db[i].expires&lt;/code&gt; ）中挑选&lt;font color=&#39;red&#39;&gt;最近最少使用的&lt;/font&gt;数据淘汰。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volatile-ttl&lt;/strong&gt;：从&lt;u&gt;已设置过期时间的数据集&lt;/u&gt;（ &lt;code&gt;server.db[i].expires&lt;/code&gt; ）中挑选&lt;font color=&#39;red&#39;&gt;将要过期的&lt;/font&gt;数据淘汰。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volatile-random&lt;/strong&gt;：从&lt;u&gt;已设置过期时间的数据集&lt;/u&gt;（ &lt;code&gt;server.db[i].expires&lt;/code&gt; ）中&lt;font color=&#39;red&#39;&gt;任意选择&lt;/font&gt;数据淘汰。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;allkeys-lru（least recently used）&lt;/strong&gt;：当内存不足以容纳新写入数据时，在&lt;u&gt;键空间中&lt;/u&gt;，移除&lt;font color=&#39;red&#39;&gt;最近最少使用的&lt;/font&gt; key（这个是&lt;font color=&#39;gree&#39;&gt;最常用的&lt;/font&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;allkeys-random&lt;/strong&gt;：从数据集（ &lt;code&gt;server.db[i].dict&lt;/code&gt; ）中&lt;font color=&#39;red&#39;&gt;任意选择&lt;/font&gt;数据淘汰。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;no-eviction&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;禁止驱逐数据&lt;/font&gt;，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Redis 4.0 版本后增加以下两种：&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;volatile-lfu（least frequently used）&lt;/strong&gt;：从&lt;u&gt;已设置过期时间的数据集&lt;/u&gt;（ &lt;code&gt;server.db[i].expires&lt;/code&gt; ）中挑选&lt;font color=&#39;red&#39;&gt;最不经常使用的&lt;/font&gt;数据淘汰。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;allkeys-lfu（least frequently used）&lt;/strong&gt;：当内存不足以容纳新写入数据时，在&lt;u&gt;键空间中&lt;/u&gt;，移除&lt;font color=&#39;red&#39;&gt;最不经常使用的&lt;/font&gt; key。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;redis-事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-事务&#34;&gt;#&lt;/a&gt; Redis 事务&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;Redis 的事务的本质是 **&lt;font color=&#39;red&#39;&gt;一组命令的批处理&lt;/font&gt;**。这组命令在执行过程中会被&lt;font color=&#39;red&#39;&gt;按顺序、一次性、串行化&lt;/font&gt;全部执行完毕，只要没有出现语法错误，这组命令在执行期间是&lt;font color=&#39;red&#39;&gt;不会被中断（其他命令无法插入）&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&#34;常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用命令&#34;&gt;#&lt;/a&gt; 常用命令&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MULTI&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;标记一个事务块的开始&lt;/font&gt;。随后的一系列指令将在执行 &lt;code&gt;EXEC&lt;/code&gt;  时作为一个原子执行。&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WATCH key [key ...]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;监视若干个 key&lt;/font&gt;，如果在事务执行前这些 key 发生改动，那么事务将被打断。在事务中有条件的执行（&lt;font color=&#39;red&#39;&gt;乐观锁&lt;/font&gt;）。&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EXEC&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;执行事务块中所有在排队等待的指令&lt;/font&gt;，并将链接状态恢复到正常。&lt;br/&gt;当使用 &lt;code&gt;WATCH&lt;/code&gt;  时，只有当被监视的键没有被修改，且允许检查设定机制时， &lt;code&gt;EXEC&lt;/code&gt;  会被执行。&lt;/td&gt;
&lt;td&gt;每个元素与原子事务中的指令一一对应。&lt;br/&gt;使用 &lt;code&gt;WATCH&lt;/code&gt;  时，如果被终止， &lt;code&gt;EXEC&lt;/code&gt;  则返回一个空的应答集合。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNWATCH &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;释放所有被 &lt;code&gt;WATCH&lt;/code&gt;  命令监视的 key&lt;/font&gt;&lt;br/&gt;如果执行 &lt;code&gt;EXEC&lt;/code&gt;  或者 &lt;code&gt;DISCARD&lt;/code&gt; ，则不需要手动执行该命令。&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DISCARD&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;取消事务，放弃执行事务块中的所有指令&lt;/font&gt;。&lt;br/&gt;同时，&lt;font color=&#39;red&#39;&gt;释放所有被 &lt;code&gt;WATCH&lt;/code&gt;  命令监视的 key&lt;/font&gt;。&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Redis 可以通过  &lt;code&gt;MULTI&lt;/code&gt; ， &lt;code&gt;EXEC&lt;/code&gt; ， &lt;code&gt;DISCARD&lt;/code&gt;  和  &lt;code&gt;WATCH&lt;/code&gt;  等命令来实现事务 (Transaction) 功能。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; MULTI&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SET PROJECT &lt;span class=&#34;token string&#34;&gt;&#34;JavaGuide&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;QUEUED&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GET PROJECT&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;QUEUED&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; EXEC&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;JavaGuide&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&#34;https://redis.io/commands/multi&#34;&gt; &lt;code&gt;MULTI&lt;/code&gt; &lt;/a&gt; 命令后可以输入多个命令，Redis 不会立即执行这些命令，而是将它们放到队列，当调用了 &lt;a href=&#34;https://redis.io/commands/exec&#34;&gt; &lt;code&gt;EXEC&lt;/code&gt; &lt;/a&gt; 命令后，再执行所有的命令。&lt;/p&gt;
&lt;p&gt;这个过程是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开始事务（ &lt;code&gt;MULTI&lt;/code&gt; ）；&lt;/li&gt;
&lt;li&gt;命令入队（批量操作 Redis 的命令，先进先出（FIFO）的顺序执行）；&lt;/li&gt;
&lt;li&gt;执行事务（ &lt;code&gt;EXEC&lt;/code&gt; ）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你也可以通过 &lt;a href=&#34;https://redis.io/commands/discard&#34;&gt; &lt;code&gt;DISCARD&lt;/code&gt; &lt;/a&gt; 命令取消一个事务，它会清空事务队列中保存的所有命令。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; MULTI&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SET PROJECT &lt;span class=&#34;token string&#34;&gt;&#34;JavaGuide&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;QUEUED&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GET PROJECT&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;QUEUED&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; DISCARD&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;你可以通过 &lt;a href=&#34;https://redis.io/commands/watch&#34;&gt; &lt;code&gt;WATCH&lt;/code&gt; &lt;/a&gt; 命令监听指定的 Key，当调用  &lt;code&gt;EXEC&lt;/code&gt;  命令执行事务时，如果一个被  &lt;code&gt;WATCH&lt;/code&gt;  命令监视的 Key 被 &lt;strong&gt;其他客户端 / Session&lt;/strong&gt; 修改的话，整个事务都不会被执行。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 客户端 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SET PROJECT &lt;span class=&#34;token string&#34;&gt;&#34;RustGuide&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; WATCH PROJECT&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; MULTI&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SET PROJECT &lt;span class=&#34;token string&#34;&gt;&#34;JavaGuide&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;QUEUED&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 客户端 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 在客户端 1 执行 EXEC 命令提交事务之前修改 PROJECT 的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SET PROJECT &lt;span class=&#34;token string&#34;&gt;&#34;GoGuide&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 客户端 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 修改失败，因为 PROJECT 的值被客户端 2 修改了&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; EXEC&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nil&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GET PROJECT&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;GoGuide&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;不过，如果 &lt;strong&gt;WATCH&lt;/strong&gt; 与 &lt;strong&gt;事务&lt;/strong&gt; 在同一个 Session 里，并且被 &lt;strong&gt;WATCH&lt;/strong&gt; 监视的 Key 被修改的操作发生在事务内部，这个事务是可以被执行成功的（相关 issue：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1NuYWlsY2xpbWIvSmF2YUd1aWRlL2lzc3Vlcy8xNzE0&#34;&gt;WATCH 命令碰到 MULTI 命令时的不同效果&lt;/span&gt;）。&lt;/p&gt;
&lt;p&gt;事务内部修改 WATCH 监视的 Key：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SET PROJECT &lt;span class=&#34;token string&#34;&gt;&#34;JavaGuide&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; WATCH PROJECT&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; MULTI&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SET PROJECT &lt;span class=&#34;token string&#34;&gt;&#34;JavaGuide1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;QUEUED&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SET PROJECT &lt;span class=&#34;token string&#34;&gt;&#34;JavaGuide2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;QUEUED&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SET PROJECT &lt;span class=&#34;token string&#34;&gt;&#34;JavaGuide3&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;QUEUED&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; EXEC&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; GET PROJECT&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34;JavaGuide3&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;事务外部修改 WATCH 监视的 Key：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SET PROJECT &lt;span class=&#34;token string&#34;&gt;&#34;JavaGuide&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; WATCH PROJECT&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; SET PROJECT &lt;span class=&#34;token string&#34;&gt;&#34;JavaGuide2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; MULTI&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; GET &lt;span class=&#34;token environment constant&#34;&gt;USER&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;QUEUED&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; EXEC&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nil&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Redis 官网相关介绍 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby90b3BpY3MvdHJhbnNhY3Rpb25z&#34;&gt;https://redis.io/topics/transactions&lt;/span&gt; 如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-transactions.png&#34; alt=&#34;Redis 事务&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特性&#34;&gt;#&lt;/a&gt; 特性&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 的事务和我们平时理解的关系型数据库的事务不同。我们知道事务具有四大特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;** 原子性（Atomicity）：** 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成（commit），要么完全不起作用（rollback）；&lt;/li&gt;
&lt;li&gt;** 一致性（Consistency）：** 执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；&lt;/li&gt;
&lt;li&gt;** 隔离性（Isolation）：** 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；&lt;/li&gt;
&lt;li&gt;** 持久性（Durability）：** 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Redis 事务仅保证了数据的一致性（C），不具有像 DBMS 一样的 ACID 特性&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这组命令中的&lt;font color=&#39;red&#39;&gt;某些命令的执行失败不会影响其它命令的执行，不会引发回滚，因此不具备原子性（A）&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;这组命令&lt;font color=&#39;red&#39;&gt;仅通过&lt;strong&gt;乐观锁机制&lt;/strong&gt;实现了简单的隔离性&lt;/font&gt;，没有复杂的隔离级别（I）。&lt;/li&gt;
&lt;li&gt;这组命令的&lt;font color=&#39;red&#39;&gt;执行结果是被写入到内存的，是否持久（D）取决于 Redis 的持久化策略，与事务无关&lt;/font&gt;。而且，Redis 的持久化策略也存在数据丢失的问题，更加没法保证持久性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不具备原子性a&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不具备原子性a&#34;&gt;#&lt;/a&gt; 不具备原子性（A）&lt;/h3&gt;
&lt;p&gt;Redis 事务在运行错误的情况下，除了执行过程中出现错误的命令外，其他命令都能正常执行。并且，&lt;font color=&#39;red&#39;&gt;Redis 事务是不支持回滚（roll back）操作的&lt;/font&gt;。因此，Redis 事务其实是不满足原子性的。&lt;/p&gt;
&lt;p&gt;Redis 官网也解释了自己为啥不支持回滚。简单来说就是&lt;font color=&#39;red&#39;&gt; Redis 开发者们觉得没必要支持回滚，这样更简单便捷并且性能更好&lt;/font&gt;。Redis 开发者觉得即使命令执行错误也应该在开发过程中就被发现而不是生产过程中。&lt;/p&gt;
&lt;h3 id=&#34;实现了简单的隔离性i&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现了简单的隔离性i&#34;&gt;#&lt;/a&gt; 实现了简单的隔离性（I）&lt;/h3&gt;
&lt;p&gt;从 Redis 2.2 开始，允许以&lt;font color=&#39;red&#39;&gt;乐观锁&lt;/font&gt;的形式为 Redis 事务操作提供额外保证，其方式与  &lt;code&gt;check-and-set&lt;/code&gt; （CAS）操作非常相似。稍后将对此进行记录，具体可见&lt;a href=&#34;#%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6&#34;&gt;隔离机制&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;无法保证持久性d&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无法保证持久性d&#34;&gt;#&lt;/a&gt; 无法保证持久性（D）&lt;/h3&gt;
&lt;p&gt;Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持 3 种持久化方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快照（snapshotting，RDB）&lt;/li&gt;
&lt;li&gt;只追加文件（append-only file, AOF）&lt;/li&gt;
&lt;li&gt;RDB 和 AOF 的混合持久化 (Redis 4.0 新增)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与 RDB 持久化相比，AOF 持久化的实时性更好。在 Redis 的配置文件中存在三种不同的 AOF 持久化方式（  &lt;code&gt;fsync&lt;/code&gt;  策略），它们分别是：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;appendfsync always    &lt;span class=&#34;token comment&#34;&gt;#每次有数据修改发生时都会调用 fsync 函数同步 AOF 文件，fsync 完成后线程返回，这样会严重降低 Redis 的速度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;appendfsync everysec  &lt;span class=&#34;token comment&#34;&gt;#每秒钟调用 fsync 函数同步一次 AOF 文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;appendfsync no        &lt;span class=&#34;token comment&#34;&gt;#让操作系统决定何时进行同步，一般为 30 秒一次&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;font color=&#39;red&#39;&gt;AOF 持久化的  &lt;code&gt;fsync&lt;/code&gt;  策略为 no、everysec 时都会存在数据丢失的情况&lt;/font&gt;。always 下可以基本是可以满足持久性要求的，但性能太差，实际开发过程中不会使用。&lt;/p&gt;
&lt;p&gt;因此，Redis 事务的持久性也是没办法保证的。&lt;/p&gt;
&lt;h2 id=&#34;异常处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常处理&#34;&gt;#&lt;/a&gt; 异常处理&lt;/h2&gt;
&lt;h3 id=&#34;语法错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语法错误&#34;&gt;#&lt;/a&gt; 语法错误&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;当事务中的命令出现语法错误时，整个事务在  &lt;code&gt;exec&lt;/code&gt;  执行时会被取消&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231209124406832.png&#34; alt=&#34;image-20231209124406832&#34; /&gt;&lt;/p&gt;
&lt;p&gt;exec 的提示是 exec 被忽略，事务被取消，因为之前的错误。&lt;/p&gt;
&lt;p&gt;此时访问 age 的值，发现其仍为 19，并没有变为事务中设置的 20。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231209124451759.png&#34; alt=&#34;image-20231209124451759&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;执行异常&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行异常&#34;&gt;#&lt;/a&gt; 执行异常&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;如果事务中的命令没有语法错误，但在执行过程中出现异常，该异常不会影响其它命令的执行&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231209124658817.png&#34; alt=&#34;image-20231209124658817&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以上事务中第 2 条命令在执行时出现异常。因为 score 并非是整型，无法被增加 20 的操作。但该异常并不会影响其前后命令的正确执行。查看 score 与 name 的值，发现是执行成功的结果。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231209124800203.png&#34; alt=&#34;image-20231209124800203&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;隔离机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隔离机制&#34;&gt;#&lt;/a&gt; 隔离机制&lt;/h2&gt;
&lt;h3 id=&#34;为什么需要隔离机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么需要隔离机制&#34;&gt;#&lt;/a&gt; 为什么需要隔离机制&lt;/h3&gt;
&lt;p&gt;在并发场景下可能会出现多个客户端对同一个数据进行修改的情况。&lt;/p&gt;
&lt;p&gt;例如：有两个客户端 C 左与 C 右， C 左需要申请 40 个资源， C 右需要申请 30 个资源。它们首先查看了当前拥有的资源数量，即 resources 的值。它们查看到的都是 50，都感觉资源数量可以满足自己的需求，于是修改资源数量，以占有资源。但结果却是资源出现了 “超卖” 情况。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231209123019238.png&#34; alt=&#34;image-20231209123019238&#34; /&gt;&lt;/p&gt;
&lt;p&gt;为了解决这种情况，Redis 事务通过 **&lt;font color=&#39;#B32015&#39;&gt;乐观锁机制&lt;/font&gt;** 实现了多线程下的执行隔离。&lt;/p&gt;
&lt;h3 id=&#34;隔离的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隔离的实现&#34;&gt;#&lt;/a&gt; 隔离的实现&lt;/h3&gt;
&lt;p&gt;Redis 通过  &lt;code&gt;watch&lt;/code&gt;  命令再配合事务实现了多线程下的执行隔离。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231209123108530.png&#34; alt=&#34;image-20231209123108530&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以上两个客户端执行的时间顺序为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231209123147370.png&#34; alt=&#34;image-20231209123147370&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当 C 左客户端在  &lt;code&gt;exec&lt;/code&gt;  事务前发现其  &lt;code&gt;watch&lt;/code&gt;  的数据发生了改动，则会打断事务执行。&lt;/p&gt;
&lt;h3 id=&#34;实现原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现原理&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟实现原理&lt;/mark&gt;&lt;/h3&gt;
&lt;p&gt;其内部的执行过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当某一客户端对 key 执行了  &lt;code&gt;watch&lt;/code&gt;  后，系统就会为该 key 添加一个 &lt;font color=&#39;gree&#39;&gt;version 乐观锁&lt;/font&gt;，并初始化 version。例如初值为 1.0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此后客户端 C 左将对该 key 的修改语句写入到了事务命令队列中，虽未执行，但其将该 key 的 value 值与 version 进行了读取并保存到了当前客户端缓存。此时读取并保存的是 version 的初值 1.0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此后客户端 C 右对该 key 的值进行了修改，这个修改不仅修改了 key 的 value 本身，同时也增加了 version 的值，例如使其 version 变为了 2.0，并将该 version 记录到了该 key 信息中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此后客户端 C 左执行 exec，开始执行事务中的命令。不过，其在执行到对该 key 进行修改的命令时，该命令&lt;font color=&#39;red&#39;&gt;首先对当前客户端缓存中保存的 version 值与当前 key 信息中的 version 值进行比较&lt;/font&gt;。如果缓存 version 小于 key 的 version，则说明客户端缓存的 key 的 value 已经过时，该写操作如果执行可能会破坏数据的一致性。所以该写操作不执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;redis事务-vs-数据库事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis事务-vs-数据库事务&#34;&gt;#&lt;/a&gt; Redis 事务 v.s 数据库事务&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单独的隔离操作&lt;/strong&gt;：Redis 的事务仅仅是保证事务里的操作会被连续独占的执行，redis 命令执行是单线程架构，&lt;font color=&#39;red&#39;&gt;在执行完事务内所有指令前，是不可能再去同时执行其他客户端的请求&lt;/font&gt;的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;没有隔离级别的概念&lt;/font&gt;&lt;/strong&gt;：因为&lt;font color=&#39;red&#39;&gt;事务提交前任何指令都不会被实际执行&lt;/font&gt;，也就不存在 “事务内的查询要看到事务里的更新，在事务外查询不能看到” 这种问题了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因此&lt;font color=&#39;red&#39;&gt;不存在 “三大读问题”：不可重复读、脏读、幻读&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;不保证原子性&lt;/font&gt;&lt;/strong&gt;：Redis 的事务 **&lt;font color=&#39;red&#39;&gt;不保证原子性&lt;/font&gt;**，也就是不保证所有指令同时成功或同时失败，只有决定是否开始执行全部指令的能力，&lt;font color=&#39;red&#39;&gt;没有回滚能力&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;排它性&lt;/strong&gt;：Redis 会保证一个事务内的命令依次执行，而&lt;font color=&#39;red&#39;&gt;不会被其它命令插入&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;如何解决-redis-事务的缺陷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何解决-redis-事务的缺陷&#34;&gt;#&lt;/a&gt; 如何解决 Redis 事务的缺陷&lt;/h2&gt;
&lt;p&gt;Redis 从 2.6 版本开始支持执行 Lua 脚本，它的功能和事务非常类似。&lt;font color=&#39;red&#39;&gt;可以利用 Lua 脚本来批量执行多条 Redis 命令&lt;/font&gt;，这些 Redis 命令会被提交到 Redis 服务器一次性执行完成，大幅减小了网络开销。&lt;/p&gt;
&lt;p&gt;一段 Lua 脚本可以视作一条命令执行，&lt;font color=&#39;red&#39;&gt;一段 Lua 脚本执行过程中不会有其他脚本或 Redis 命令同时执行&lt;/font&gt;，保证了操作不会被其他指令插入或打扰。&lt;/p&gt;
&lt;p&gt;不过，&lt;font color=&#39;red&#39;&gt;如果 Lua 脚本运行时出错并中途结束，出错之后的命令是不会被执行的&lt;/font&gt;。并且，&lt;font color=&#39;red&#39;&gt;出错之前执行的命令是无法被撤销的，无法实现类似关系型数据库执行失败可以回滚的那种原子性效果&lt;/font&gt;。因此， 严格来说的话，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;通过 Lua 脚本来批量执行 Redis 命令实际也是不完全满足原子性的&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果想要让 Lua 脚本中的命令全部执行，必须保证语句语法和命令都是对的。&lt;/p&gt;
&lt;p&gt;另外，Redis 7.0 新增了 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby9kb2NzL21hbnVhbC9wcm9ncmFtbWFiaWxpdHkvZnVuY3Rpb25zLWludHJvLw==&#34;&gt;Redis functions&lt;/span&gt; 特性，你可以将 Redis functions 看作是比 Lua 更强大的脚本。&lt;/p&gt;
&lt;h1 id=&#34;redis-管道pipeline&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-管道pipeline&#34;&gt;#&lt;/a&gt; Redis 管道（pipeline）&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 管道 与 Redis 事务 之间的关系，类似于雷锋与雷峰塔的关系，Java 与 JavaScript 的关系，&lt;font color=&#39;red&#39;&gt;看上去相似，但实际没有任何关系！&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;引言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引言&#34;&gt;#&lt;/a&gt; 引言&lt;/h2&gt;
&lt;p&gt;如何优化命令频繁往返造成的性能瓶颈？&lt;/p&gt;
&lt;p&gt;Redis 是一种基于&lt;font color=&#39;red&#39;&gt;客户端 - 服务端模型&lt;/font&gt;以及请求 / 响应协议的 TCP 服务。一个请求会遵循以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;客户端向服务端发送命令&lt;/font&gt;(分四步：发送命令→命令排队→命令执行→返回结果)，并监听 Socket 返回，通常&lt;font color=&#39;red&#39;&gt;以&lt;strong&gt;阻塞模式&lt;/strong&gt;等待服务端响应&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;服务端处理命令，并将结果返回给客户端&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述两步的总耗时称为：&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;Round Trip Time（即 RTT，数据包往返于两端的时间)&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果同时需要执行大量的命令，那么就&lt;font color=&#39;red&#39;&gt;要等待上一条命令应答后再执行&lt;/font&gt;，这中间不仅仅多了 RTT（Round Time Trip），而且还频繁调用系统 IO，发送网络请求，同时需要 redis 调用多次 read () 和 write () 系统方法，系统方法会将数据从用户态转移到内核态，这样就会对进程上下文有比较大的影响了，&lt;font color=&#39;red&#39;&gt;性能不太好&lt;/font&gt;o(╥﹏╥)o&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807140057973.png&#34; alt=&#34;image-20230807140057973&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;通过 **&lt;font color=&#39;red&#39;&gt;批处理 Redis 命令&lt;/font&gt;** 来&lt;font color=&#39;red&#39;&gt;优化往返时间 RTT&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Redis 管道 (pipeline)&lt;/strong&gt;：为了优化 RTT 往返时间，可以&lt;font color=&#39;orange&#39;&gt;一次性打包发送多条命令&lt;/font&gt;给服务端，而&lt;font color=&#39;red&#39;&gt;无需等待对每个命令的响应&lt;/font&gt;。等待服务端依次处理完完毕后，&lt;font color=&#39;red&#39;&gt;通过一条响应一次性将结果返回&lt;/font&gt;，通过减少客户端与 redis 的通信次数来实现降低往返延时时间。pipeline 的&lt;font color=&#39;orange&#39;&gt;实现原理是队列&lt;/font&gt;，先进先出特性就保证数据的顺序性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是&lt;strong&gt;一种批处理命令的变种优化措施&lt;/strong&gt;，类似 Redis 原生的批命令（例如 mget 和 mset）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1ffba84802bd4732b4a390d0aade8020.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例&#34;&gt;#&lt;/a&gt; 案例&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;将欲执行的命令全部写到一个 txt 文件中&lt;/li&gt;
&lt;li&gt;将 txt 文件的内容传递给 Redis 的 pipe 参数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807140935362.png&#34; alt=&#34;image-20230807140935362&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;h3 id=&#34;管道-vs-原生批量操作命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管道-vs-原生批量操作命令&#34;&gt;#&lt;/a&gt; 管道 vs 原生批量操作命令&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;管道&lt;/th&gt;
&lt;th&gt;原生批量命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;非原子性&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;原子性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;支持批量执行不同命令&lt;/td&gt;
&lt;td&gt;一次只能执行一种命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;服务端与客户端共同完成&lt;/td&gt;
&lt;td&gt;服务端实现&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;管道-vs-redis-事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管道-vs-redis-事务&#34;&gt;#&lt;/a&gt; 管道 vs Redis 事务&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;管道&lt;/th&gt;
&lt;th&gt;Redis 事务&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;非原子性，pipeline 之间可以&lt;font color=&#39;red&#39;&gt;交错执行&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;可视为原子操作，但不满足原子性&lt;/font&gt;，虽然两个不同的事务不会同时运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一次性发送多条命令到服务端，请求次数更少&lt;/td&gt;
&lt;td&gt;需要逐条发送命令到服务端&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;非阻塞&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;会阻塞其他命令的执行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;使用管道的注意事项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用管道的注意事项&#34;&gt;#&lt;/a&gt; 使用管道的注意事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pipeline 缓冲的指令只是会依次执行，&lt;font color=&#39;red&#39;&gt;不保证原子性，如果执行中指令发生异常，将会继续执行后续的指令&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与 Redis 事务发生命令的运行时异常类似，冤头债主，不会连坐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 pipeline 组装的&lt;font color=&#39;red&#39;&gt;命令个数不能太多&lt;/font&gt;（例如 10k），不然数据量过大客户端阻塞的时间可能过久，同时&lt;font color=&#39;red&#39;&gt;服务端此时也被迫回复一个队列答复，占用很多内存&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;redis-性能优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-性能优化&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟Redis 性能优化&lt;/mark&gt;&lt;/h1&gt;
&lt;p&gt;除了下面介绍的内容之外，再推荐两篇不错的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvbk5FdVl3ME5sWUdodUtLS0tvV2ZjUQ==&#34;&gt;你的 Redis 真的变慢了吗？性能优化如何做 - 阿里开发者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGF0YWJhc2UvcmVkaXMvcmVkaXMtY29tbW9uLWJsb2NraW5nLXByb2JsZW1zLXN1bW1hcnkuaHRtbA==&#34;&gt;Redis 常见阻塞原因总结 - JavaGuide&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用批量操作减少网络传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用批量操作减少网络传输&#34;&gt;#&lt;/a&gt; 使用批量操作减少网络传输&lt;/h2&gt;
&lt;p&gt;一个 Redis 命令的执行可以简化为以下 4 步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发送命令&lt;/li&gt;
&lt;li&gt;命令排队&lt;/li&gt;
&lt;li&gt;命令执行&lt;/li&gt;
&lt;li&gt;返回结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中，第 1 步和第 4 步耗费时间之和称为 &lt;strong&gt;Round Trip Time (RTT, 往返时间)&lt;/strong&gt; ，也就是数据在网络上传输的时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;使用批量操作可以减少网络传输次数，进而有效减小网络开销，大幅减少 RTT&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;另外，除了能减少 RTT 之外，发送一次命令的 socket I/O 成本也比较高（涉及上下文切换，存在 &lt;code&gt;read()&lt;/code&gt;  和 &lt;code&gt;write()&lt;/code&gt;  系统调用），&lt;font color=&#39;red&#39;&gt;批量操作还可以减少 socket I/O 成本&lt;/font&gt;。这个在官方对 pipeline 的介绍中有提到：[&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby9kb2NzL21hbnVhbC9waXBlbGluaW5nLw==&#34;&gt;https://redis.io/docs/manual/pipelining/&lt;/span&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;原生批量操作命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原生批量操作命令&#34;&gt;#&lt;/a&gt; 原生批量操作命令&lt;/h3&gt;
&lt;p&gt;Redis 中有一些原生支持批量操作的命令，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MGET&lt;/code&gt;  (获取一个或多个指定 key 的值)、 &lt;code&gt;MSET&lt;/code&gt;  (设置一个或多个指定 key 的值)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HMGET&lt;/code&gt;  (获取指定哈希表中一个或者多个指定字段的值)、 &lt;code&gt;HMSET&lt;/code&gt;  (同时将一个或多个 field-value 对设置到指定哈希表中)、&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SADD&lt;/code&gt; （向指定集合添加一个或多个元素）&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过，在 Redis 官方提供的分片集群解决方案 &lt;font color=&#39;red&#39;&gt;Redis Cluster 下，使用这些原生批量操作命令可能会存在一些小问题需要解决&lt;/font&gt;。就比如说  &lt;code&gt;MGET&lt;/code&gt;  无法保证所有的 key 都在同一个 &lt;strong&gt;hash slot&lt;/strong&gt;（哈希槽）上， &lt;code&gt;MGET&lt;/code&gt;  可能还是需要多次网络传输，原子操作也无法保证了。不过，相较于非批量操作，还是可以节省不少网络传输次数。&lt;/p&gt;
&lt;p&gt;整个步骤的简化版如下（通常由 Redis 客户端实现，无需我们自己再手动实现）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到 key 对应的所有 hash slot；&lt;/li&gt;
&lt;li&gt;分别向对应的 Redis 节点发起  &lt;code&gt;MGET&lt;/code&gt;  请求获取数据；&lt;/li&gt;
&lt;li&gt;等待所有请求执行结束，重新组装结果数据，保持跟入参 key 的顺序一致，然后返回结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果想要解决这个多次网络传输的问题，比较常用的办法是自己维护 key 与 slot 的关系。不过这样不太灵活，虽然带来了性能提升，但同样让系统复杂性提升。&lt;/p&gt;
&lt;h3 id=&#34;管道pipeline&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管道pipeline&#34;&gt;#&lt;/a&gt; 管道（pipeline）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;参考前文 [Redis 管道](#Redis 管道（pipeline）)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于不支持批量操作的命令，我们&lt;font color=&#39;red&#39;&gt;可以利用 &lt;strong&gt;pipeline（流水线)&lt;/strong&gt; 将一批 Redis 命令封装成一组，这些 Redis 命令会被一次性提交到 Redis 服务器，只需要一次网络传输&lt;/font&gt;。不过，需要注意控制一次批量操作的 &lt;strong&gt;元素个数&lt;/strong&gt; (例如 500 以内，实际也和元素字节数有关)，避免网络传输的数据量过大。&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;MGET&lt;/code&gt; 、 &lt;code&gt;MSET&lt;/code&gt;  等原生批量操作命令一样，&lt;font color=&#39;red&#39;&gt;pipeline 同样在 Redis Cluster 上使用会存在一些小问题&lt;/font&gt;。原因类似，无法保证所有的 key 都在同一个 &lt;strong&gt;hash slot&lt;/strong&gt;（哈希槽）上。如果想要使用的话，客户端需要自己维护 key 与 slot 的关系。&lt;/p&gt;
&lt;p&gt;[pipeline 与原生批量操作命令的区别](# 管道 vs 原生批量操作命令)&lt;/p&gt;
&lt;p&gt;[pipeline 与 Redis 事务的区别](# 管道 vs Redis 事务)&lt;/p&gt;
&lt;p&gt;另外，&lt;font color=&#39;red&#39;&gt;pipeline 不适用于执行顺序有依赖关系的一批命令&lt;/font&gt;。就比如说，你需要将前一个命令的结果给后续的命令使用，pipeline 就没办法满足你的需求了。对于这种需求，我们可以使用 &lt;strong&gt;Lua 脚本&lt;/strong&gt; 。&lt;/p&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-pipeline-vs-transaction.png&#34; alt=&#34;img&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;h3 id=&#34;lua-脚本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lua-脚本&#34;&gt;#&lt;/a&gt; Lua 脚本&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Lua 脚本同样支持批量操作多条命令，一段 Lua 脚本可以视作一条命令执行，可以看作是 &lt;strong&gt;原子操作&lt;/strong&gt; &lt;/font&gt;。也就是说，一段 Lua 脚本执行过程中不会有其他脚本或 Redis 命令同时执行，保证了操作不会被其他指令插入或打扰，这是 pipeline 所不具备的。&lt;/p&gt;
&lt;p&gt;并且，&lt;font color=&#39;red&#39;&gt;Lua 脚本中支持一些简单的逻辑处理&lt;/font&gt;，比如使用命令读取值并在 Lua 脚本中进行处理，这同样是 pipeline 所不具备的。&lt;/p&gt;
&lt;p&gt;不过，Lua 脚本依然存在下面这些缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;如果 Lua 脚本运行时出错并中途结束，之后的操作不会进行，但是之前已经发生的写操作不会撤销&lt;/font&gt;，所以即使使用了 Lua 脚本，也不能实现类似数据库回滚的原子性。&lt;/li&gt;
&lt;li&gt;Redis Cluster 下 Lua 脚本的原子操作也无法保证了，原因同样是无法保证所有的 key 都在同一个 &lt;strong&gt;hash slot&lt;/strong&gt;（哈希槽）上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;大量-key-集中过期问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大量-key-集中过期问题&#34;&gt;#&lt;/a&gt; 大量 key 集中过期问题&lt;/h2&gt;
&lt;p&gt;我在前面提到过：对于过期 key，Redis 采用的是 &lt;font color=&#39;cornflowerblue&#39;&gt;定期删除 + 惰性删除&lt;/font&gt; 策略。&lt;/p&gt;
&lt;p&gt;定期删除执行过程中，如果&lt;font color=&#39;red&#39;&gt;突然遇到大量过期 key &lt;/font&gt;的话，客户端请求必须等待定期清理过期 key 任务线程执行完成，因为这个这个&lt;font color=&#39;red&#39;&gt;定期任务线程是在 Redis 主线程中执行的&lt;/font&gt;。这就导致客户端请求没办法被及时处理，响应速度会比较慢。&lt;/p&gt;
&lt;p&gt;下面是两种常见的解决方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给 key 设置 **&lt;font color=&#39;red&#39;&gt;随机过期时间&lt;/font&gt;**。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;开启 lazy-free（惰性删除）&lt;/font&gt;&lt;/strong&gt;。该特性是 Redis 4.0 开始引入的，指的是让 Redis &lt;font color=&#39;red&#39;&gt;采用异步方式延迟释放 key 使用的内存，将该操作交给单独的子线程处理，避免阻塞主线程&lt;/font&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;个人建议不管是否开启 lazy-free，我们都&lt;font color=&#39;red&#39;&gt;尽量给 key 设置随机过期时间&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&#34;bigkey大-key&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bigkey大-key&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟bigkey（大 Key）&lt;/mark&gt;&lt;/h2&gt;
&lt;h3 id=&#34;bigkey-是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bigkey-是什么&#34;&gt;#&lt;/a&gt; bigkey 是什么&lt;/h3&gt;
&lt;p&gt;简单来说，如果 **&lt;font color=&#39;red&#39;&gt;一个 key 对应的 value 所占用的内存比较大&lt;/font&gt;**，那这个 key 就可以看作是 bigkey。具体多大才算大呢？有一个不是特别精确的参考标准：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;String 类型的 value 超过 1MB&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;复合类型（List、Hash、Set、Sorted Set 等）的 value 包含的元素超过 5000 个&lt;/font&gt;（不过，对于复合类型的 value 来说，不一定包含的元素越多，占用的内存就越多）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/bigkey-criterion.png&#34; alt=&#34;bigkey 判定标准&#34; /&gt;&lt;/p&gt;
&lt;center&gt;bigkey 判定标准&lt;/center&gt;
&lt;h3 id=&#34;bigkey-怎么产生的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bigkey-怎么产生的&#34;&gt;#&lt;/a&gt; bigkey 怎么产生的&lt;/h3&gt;
&lt;p&gt;bigkey 通常是由于下面这些原因产生的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序设计不当，比如直接使用 String 类型存储较大的文件对应的二进制数据。&lt;/li&gt;
&lt;li&gt;对于业务的数据规模考虑不周到，比如使用集合类型的时候没有考虑到数据量的快速增长。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;未及时清理垃圾数据&lt;/font&gt;，比如哈希中冗余了大量的无用键值对。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bigkey-的危害&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bigkey-的危害&#34;&gt;#&lt;/a&gt; bigkey 的危害&lt;/h3&gt;
&lt;p&gt;bigkey 除了&lt;font color=&#39;red&#39;&gt;会消耗更多的内存空间和带宽，还会对性能造成比较大的影响&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;&#34;&gt; Redis 常见阻塞原因总结&lt;/a&gt;这篇文章中我们提到：大 key 还会造成阻塞问题。具体来说，主要体现在下面三个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;客户端超时阻塞&lt;/font&gt;：由于 Redis 执行命令是单线程处理，然后在操作大 key 时会比较耗时，那么就会阻塞 Redis，从客户端这一视角看，就是很久很久都没有响应。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;网络阻塞&lt;/font&gt;：每次获取大 key 产生的网络流量较大，如果一个 key 的大小是 1 MB，每秒访问量为 1000，那么每秒会产生 1000MB 的流量，这对于普通千兆网卡的服务器来说是灾难性的。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;工作线程阻塞&lt;/font&gt;：如果使用 del 删除大 key 时，会阻塞工作线程，这样就没办法处理后续的命令。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大 key 造成的阻塞问题还会&lt;font color=&#39;red&#39;&gt;进一步影响到主从同步和集群扩容&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;综上，大 key 带来的潜在问题是非常多的，我们应该尽量避免 Redis 中存在 bigkey。&lt;/p&gt;
&lt;h3 id=&#34;如何发现-bigkey&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何发现-bigkey&#34;&gt;#&lt;/a&gt; 如何发现 bigkey&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;1、使用 Redis 自带的 --bigkeys 参数来查找&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# redis-cli -p 6379 --bigkeys&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Scanning the entire keyspace to find biggest keys as well as&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# per 100 SCAN commands (not usually needed).&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;00.00%&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; Biggest string found so far &lt;span class=&#34;token string&#34;&gt;&#39;&#34;ballcat:oauth:refresh_auth:f6cdb384-9a9d-4f2f-af01-dc3f28057c20&#34;&#39;&lt;/span&gt; with &lt;span class=&#34;token number&#34;&gt;4437&lt;/span&gt; bytes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;00.00%&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; Biggest list   found so far &lt;span class=&#34;token string&#34;&gt;&#39;&#34;my-list&#34;&#39;&lt;/span&gt; with &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt; items&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-------- summary -------&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Sampled &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; keys &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; the keyspace&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Total key length &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; bytes is &lt;span class=&#34;token number&#34;&gt;264&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;avg len &lt;span class=&#34;token number&#34;&gt;52.80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Biggest   list found &lt;span class=&#34;token string&#34;&gt;&#39;&#34;my-list&#34;&#39;&lt;/span&gt; has &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt; items&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Biggest string found &lt;span class=&#34;token string&#34;&gt;&#39;&#34;ballcat:oauth:refresh_auth:f6cdb384-9a9d-4f2f-af01-dc3f28057c20&#34;&#39;&lt;/span&gt; has &lt;span class=&#34;token number&#34;&gt;4437&lt;/span&gt; bytes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; lists with &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt; items &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20.00&lt;/span&gt;% of keys, avg size &lt;span class=&#34;token number&#34;&gt;17.00&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; hashs with &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; fields &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;00.00% of keys, avg size &lt;span class=&#34;token number&#34;&gt;0.00&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; strings with &lt;span class=&#34;token number&#34;&gt;4831&lt;/span&gt; bytes &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;80.00&lt;/span&gt;% of keys, avg size &lt;span class=&#34;token number&#34;&gt;1207.75&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; streams with &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; entries &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;00.00% of keys, avg size &lt;span class=&#34;token number&#34;&gt;0.00&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; sets with &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; members &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;00.00% of keys, avg size &lt;span class=&#34;token number&#34;&gt;0.00&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; zsets with &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; members &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;00.00% of keys, avg size &lt;span class=&#34;token number&#34;&gt;0.00&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;从这个命令的运行结果，我们可以看出：这个命令&lt;font color=&#39;red&#39;&gt;会扫描 (Scan) Redis 中的所有 key&lt;/font&gt; ，会对 Redis 的性能有一点影响。并且，这种方式&lt;font color=&#39;red&#39;&gt;只能找出每种数据结构 top 1 bigkey&lt;/font&gt;（占用内存最大的 String 数据类型，包含元素最多的复合数据类型）。然而，一个 key 的元素多并不代表占用内存也多，需要我们根据具体的业务情况来进一步判断。&lt;/p&gt;
&lt;p&gt;在线上执行该命令时，为了降低对 Redis 的影响，&lt;font color=&#39;red&#39;&gt;需要指定  &lt;code&gt;-i&lt;/code&gt;  参数控制扫描的频率&lt;/font&gt;。 &lt;code&gt;redis-cli -p 6379 --bigkeys -i 3&lt;/code&gt;  表示扫描过程中每次扫描后休息的时间间隔为 3 秒。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;2、使用 Redis 自带的 SCAN 命令&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SCAN&lt;/code&gt;  命令可以按照一定的模式、数量返回匹配的 key。获取了 key 之后，可以利用  &lt;code&gt;STRLEN&lt;/code&gt; 、 &lt;code&gt;HLEN&lt;/code&gt; 、 &lt;code&gt;LLEN&lt;/code&gt;  等命令返回其长度或成员数量。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据结构&lt;/th&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;复杂度&lt;/th&gt;
&lt;th&gt;结果（对应 key）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;STRLEN&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;字符串值的长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hash&lt;/td&gt;
&lt;td&gt;HLEN&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;哈希表中字段的数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List&lt;/td&gt;
&lt;td&gt;LLEN&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;列表元素数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set&lt;/td&gt;
&lt;td&gt;SCARD&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;集合元素数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sorted Set&lt;/td&gt;
&lt;td&gt;ZCARD&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;有序集合的元素数量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;对于集合类型还可以使用  &lt;code&gt;MEMORY USAGE&lt;/code&gt;  命令（Redis 4.0+），这个命令会返回键值对占用的内存空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;3、借助开源工具分析 RDB 文件&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过分析 RDB 文件来找出 big key。这种方案的前提是你的 Redis 采用的是 RDB 持久化。&lt;/p&gt;
&lt;p&gt;网上有现成的代码 / 工具可以直接拿来使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NyaXBhdGhpa3Jpc2huYW4vcmVkaXMtcmRiLXRvb2xz&#34;&gt;redis-rdb-tools&lt;/span&gt;：Python 语言写的用来分析 Redis 的 RDB 快照文件用的工具&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3dlaXlhbndlaTQxMi9yZGJfYmlna2V5cw==&#34;&gt;rdb_bigkeys&lt;/span&gt; : Go 语言写的用来分析 Redis 的 RDB 快照文件用的工具，性能更好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;4、借助公有云的 Redis 分析服务&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你用的是公有云的 Redis 服务的话，可以看看其是否提供了 key 分析功能（一般都提供了）。&lt;/p&gt;
&lt;p&gt;这里以阿里云 Redis 为例说明，它&lt;font color=&#39;red&#39;&gt;支持 bigkey 实时分析、发现&lt;/font&gt;，文档地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3poL2Fwc2FyYWRiLWZvci1yZWRpcy9sYXRlc3QvdXNlLXRoZS1yZWFsLXRpbWUta2V5LXN0YXRpc3RpY3MtZmVhdHVyZQ==&#34;&gt;https://www.alibabacloud.com/help/zh/apsaradb-for-redis/latest/use-the-real-time-key-statistics-feature&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/aliyun-key-analysis.png&#34; alt=&#34;阿里云Key分析&#34; /&gt;&lt;/p&gt;
&lt;center&gt;阿里云Key分析&lt;/center&gt;
&lt;h3 id=&#34;如何处理-bigkey&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何处理-bigkey&#34;&gt;#&lt;/a&gt; 如何处理 bigkey&lt;/h3&gt;
&lt;p&gt;bigkey 的常见处理以及优化办法如下（这些方法可以配合起来使用）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;分割 bigkey&lt;/font&gt;&lt;/strong&gt;：将一个 bigkey 分割为多个小 key。例如，将一个含有上万字段数量的 Hash 按照一定策略（比如二次哈希）拆分为多个 Hash。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;手动清理&lt;/font&gt;&lt;/strong&gt;：Redis 4.0+ 可以使用  &lt;code&gt;UNLINK&lt;/code&gt;  命令来异步删除一个或多个指定的 key。Redis 4.0 以下可以考虑使用  &lt;code&gt;SCAN&lt;/code&gt;  命令结合  &lt;code&gt;DEL&lt;/code&gt;  命令来分批次删除。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;采用合适的数据结构&lt;/font&gt;&lt;/strong&gt;：例如，文件二进制数据不使用 String 保存、使用 HyperLogLog 统计页面 UV、Bitmap 保存状态信息（0/1）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;开启 lazy-free（惰性删除 / 延迟释放）&lt;/font&gt;&lt;/strong&gt;：lazy-free 特性是 Redis 4.0 开始引入的，指的是让 Redis 采用异步方式延迟释放 key 使用的内存，将该操作交给单独的子线程处理，避免阻塞主线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hotkey热-key&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hotkey热-key&#34;&gt;#&lt;/a&gt; hotkey（热 Key）&lt;/h2&gt;
&lt;h3 id=&#34;hotkey-是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hotkey-是什么&#34;&gt;#&lt;/a&gt; hotkey 是什么&lt;/h3&gt;
&lt;p&gt;如果 **&lt;font color=&#39;red&#39;&gt;一个 key 的访问次数比较多且明显多于其他 key&lt;/font&gt;** ，那这个 key 就可以看作是 hotkey（热 Key）。例如在 Redis 实例的每秒处理请求达到 5000 次，而其中某个 key 的每秒访问量就高达 2000 次，那这个 key 就可以看作是 hotkey。&lt;/p&gt;
&lt;p&gt;hotkey 出现的原因主要是&lt;font color=&#39;red&#39;&gt;某个热点数据访问量暴增&lt;/font&gt;，如重大的热搜事件、参与秒杀的商品。&lt;/p&gt;
&lt;h3 id=&#34;hotkey-的危害&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hotkey-的危害&#34;&gt;#&lt;/a&gt; hotkey 的危害&lt;/h3&gt;
&lt;p&gt;处理 hotkey 会&lt;font color=&#39;red&#39;&gt;占用大量的 CPU 和带宽，可能会影响 Redis 实例对其他请求的正常处理&lt;/font&gt;。此外，如果突然访问 hotkey 的请求超出了 Redis 的处理能力，&lt;font color=&#39;red&#39;&gt;Redis 就会直接宕机&lt;/font&gt;。这种情况下，大量请求将落到后面的数据库上，&lt;font color=&#39;red&#39;&gt;可能会导致数据库崩溃&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;因此，hotkey 很可能成为系统性能的瓶颈点，需要单独对其进行优化，以确保系统的高可用性和稳定性。&lt;/p&gt;
&lt;h3 id=&#34;如何发现-hotkey&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何发现-hotkey&#34;&gt;#&lt;/a&gt; 如何发现 hotkey&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;1、使用 Redis 自带的 --hotkeys 参数来查找&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Redis 4.0.3 版本中新增了  &lt;code&gt;hotkeys&lt;/code&gt;  参数，该参数&lt;font color=&#39;red&#39;&gt;能够返回所有 key 的被访问次数&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;使用该方案的前提条件是 Redis Server 的  &lt;code&gt;maxmemory-policy&lt;/code&gt;  &lt;font color=&#39;red&#39;&gt;参数设置为 LFU 算法&lt;/font&gt;，不然就会出现如下所示的错误。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# redis-cli -p 6379 --hotkeys&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Scanning the entire keyspace to find hot keys as well as&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# per 100 SCAN commands (not usually needed).&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Error: ERR An LFU maxmemory policy is not selected, access frequency not tracked. Please note that when switching between policies at runtime LRU and LFU data will take some &lt;span class=&#34;token function&#34;&gt;time&lt;/span&gt; to adjust.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Redis 中有两种 LFU 算法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;volatile-lfu（least frequently used）&lt;/strong&gt;：从&lt;u&gt;已设置过期时间的数据集&lt;/u&gt;（ &lt;code&gt;server.db[i].expires&lt;/code&gt; ）中挑选&lt;font color=&#39;red&#39;&gt;最不经常使用的&lt;/font&gt;数据淘汰。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;allkeys-lfu（least frequently used）&lt;/strong&gt;：当内存不足以容纳新写入数据时，在&lt;u&gt;键空间中&lt;/u&gt;，移除&lt;font color=&#39;red&#39;&gt;最不经常使用的&lt;/font&gt; key。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是配置文件  &lt;code&gt;redis.conf&lt;/code&gt;  中的示例：&lt;/p&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;figcaption data-lang=&#34;.properties&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 使用 volatile-lfu 策略&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;maxmemory-policy&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;volatile-lfu&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 或者使用 allkeys-lfu 策略&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;maxmemory-policy&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;allkeys-lfu&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;需要注意的是， &lt;code&gt;hotkeys&lt;/code&gt;  参数命令也会增加 Redis 实例的 CPU 和内存消耗（全局扫描），因此需要谨慎使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;2、使用 MONITOR 命令&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MONITOR&lt;/code&gt;  命令是 Redis 提供的一种实时查看 Redis 的所有操作的方式，可以用于&lt;font color=&#39;red&#39;&gt;实时监控 Redis 实例的操作情况，包括读写、删除等操作&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;由于该命令对 Redis 性能的影响比较大，&lt;font color=&#39;red&#39;&gt;因此禁止长时间开启&lt;/font&gt;  &lt;code&gt;MONITOR&lt;/code&gt; （生产环境中建议谨慎使用该命令）。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# redis&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;cli&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;MONITOR&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;OK&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1683638260.637378&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;172.17&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;61516&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ping&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1683638267.144236&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;172.17&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;61518&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;smembers&#34;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;mySet&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1683638268.941863&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;172.17&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;61518&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;smembers&#34;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;mySet&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1683638269.551671&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;172.17&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;61518&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;smembers&#34;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;mySet&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1683638270.646256&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;172.17&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;61516&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ping&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1683638270.849551&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;172.17&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;61518&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;smembers&#34;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;mySet&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1683638271.926945&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;172.17&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;61518&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;smembers&#34;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;mySet&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1683638274.276599&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;172.17&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;61518&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;smembers&#34;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;mySet2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1683638276.327234&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;172.17&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;61518&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;smembers&#34;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;mySet&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在发生紧急情况时，我们可以选择在合适的时机短暂执行  &lt;code&gt;MONITOR&lt;/code&gt;  命令并将输出重定向至文件，在关闭  &lt;code&gt;MONITOR&lt;/code&gt;  命令后通过对文件中请求进行归类分析即可找出这段时间中的 hotkey。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;3、借助开源项目&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;京东零售的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vamQtcGxhdGZvcm0tb3BlbnNvdXJjZS9ob3RrZXk=&#34;&gt;hotkey&lt;/span&gt; 这个项目不光支持 hotkey 的发现，还支持 hotkey 的处理。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/jd-hotkey.png&#34; alt=&#34;京东零售开源的 hotkey&#34; /&gt;&lt;/p&gt;
&lt;center&gt;京东零售开源的 hotkey&lt;/center&gt;
&lt;p&gt;&lt;strong&gt;4、根据业务情况提前预估&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以根据业务情况来预估一些 hotkey，比如参与秒杀活动的商品数据等。不过，我们无法预估所有 hotkey 的出现，比如突发的热点新闻事件等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、业务代码中记录分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在业务代码中添加相应的逻辑对 key 的访问情况进行记录分析。不过，这种方式会让业务代码的复杂性增加，一般也不会采用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;6、借助公有云的 Redis 分析服务&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你用的是公有云的 Redis 服务的话，可以看看其是否提供了 key 分析功能（一般都提供了）。&lt;/p&gt;
&lt;p&gt;这里以阿里云 Redis 为例说明，它&lt;font color=&#39;red&#39;&gt;支持 hotkey 实时分析、发现&lt;/font&gt;，文档地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYWxpYmFiYWNsb3VkLmNvbS9oZWxwL3poL2Fwc2FyYWRiLWZvci1yZWRpcy9sYXRlc3QvdXNlLXRoZS1yZWFsLXRpbWUta2V5LXN0YXRpc3RpY3MtZmVhdHVyZQ==&#34;&gt;https://www.alibabacloud.com/help/zh/apsaradb-for-redis/latest/use-the-real-time-key-statistics-feature&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/github/javaguide/database/redis/aliyun-key-analysis.png&#34; alt=&#34;阿里云Key分析&#34; /&gt;&lt;/p&gt;
&lt;center&gt;阿里云Key分析&lt;/center&gt;
&lt;h3 id=&#34;如何解决-hotkey&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何解决-hotkey&#34;&gt;#&lt;/a&gt; 如何解决 hotkey&lt;/h3&gt;
&lt;p&gt;hotkey 的常见处理以及优化办法如下（这些方法可以配合起来使用）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;读写分离&lt;/font&gt;&lt;/strong&gt;：主节点处理写请求，从节点处理读请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;使用 Redis Cluster&lt;/font&gt;&lt;/strong&gt;：将热点数据分散存储在多个 Redis 节点上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;二级缓存&lt;/font&gt;&lt;/strong&gt;：hotkey 采用二级缓存的方式进行处理，将 hotkey 存放一份到 JVM 本地内存中（可以用 Caffeine）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了这些方法之外，如果你使用&lt;font color=&#39;red&#39;&gt;公有云的 Redis 服务&lt;/font&gt;话，还可以留意其提供的开箱即用的解决方案。&lt;/p&gt;
&lt;p&gt;这里以阿里云 Redis 为例说明，它&lt;font color=&#39;red&#39;&gt;支持通过代理查询缓存功能（Proxy Query Cache）优化热点 Key 问题&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/aliyun-hotkey-proxy-query-cache.png&#34; alt=&#34;通过阿里云的Proxy Query Cache优化热点Key问题&#34; /&gt;&lt;/p&gt;
&lt;center&gt;通过阿里云的Proxy Query Cache优化热点Key问题&lt;/center&gt;
&lt;h2 id=&#34;慢查询命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#慢查询命令&#34;&gt;#&lt;/a&gt; 慢查询命令&lt;/h2&gt;
&lt;h3 id=&#34;慢查询命令的产生原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#慢查询命令的产生原因&#34;&gt;#&lt;/a&gt; 慢查询命令的产生原因&lt;/h3&gt;
&lt;p&gt;我们知道一个 Redis 命令的执行可以简化为以下 4 步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发送命令&lt;/li&gt;
&lt;li&gt;命令排队&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;命令执行&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;返回结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Redis 慢查询统计的是命令执行这一步骤的耗时，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;慢查询命令也就是那些命令执行时间较长的命令&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Redis 为什么会有慢查询命令呢？[O (n) 命令](#O (n) 命令)&lt;/p&gt;
&lt;h3 id=&#34;如何发现慢查询命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何发现慢查询命令&#34;&gt;#&lt;/a&gt; 如何发现慢查询命令&lt;/h3&gt;
&lt;p&gt;在  &lt;code&gt;redis.conf&lt;/code&gt;  文件中，我们可以使用  &lt;code&gt;slowlog-log-slower-than&lt;/code&gt;  参数设置耗时命令的阈值，并使用  &lt;code&gt;slowlog-max-len&lt;/code&gt;  参数设置耗时命令的最大记录条数。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;当 Redis 服务器检测到执行时间超过  &lt;code&gt;slowlog-log-slower-than&lt;/code&gt;  阈值的命令时&lt;/font&gt;，就会将该命令记录在 **&lt;font color=&#39;#B32015&#39;&gt;慢查询日志 (slow log)&lt;/font&gt;** 中，这点和 MySQL 记录慢查询语句类似。&lt;font color=&#39;red&#39;&gt;当慢查询日志超过设定的最大记录条数  &lt;code&gt;slowlog-max-len&lt;/code&gt;  之后，Redis 会把最早的执行命令依次舍弃&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;⚠️注意：由于慢查询日志会占用一定内存空间，如果设置最大记录条数过大，可能会导致内存占用过高的问题。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;slowlog-log-slower-than&lt;/code&gt;  和 &lt;code&gt;slowlog-max-len&lt;/code&gt;  的默认配置如下 (可以自行修改)：&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;figcaption data-lang=&#34;nginx&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# The following time is expressed in microseconds, so 1000000 is equivalent&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# to one second. Note that a negative number disables the slow log, while&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# a value of zero forces the logging of every command.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;slowlog-log-slower-than 10000&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# There is no limit to this length. Just be aware that it will consume memory.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# You can reclaim memory used by the slow log with SLOWLOG RESET.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;slowlog-max-len 128&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;除了修改配置文件之外，你也可以直接通过  &lt;code&gt;CONFIG&lt;/code&gt;  命令直接设置：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 命令执行耗时超过 10000 微妙（即 10 毫秒）就会被记录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;CONFIG SET slowlog-log-slower-than &lt;span class=&#34;token number&#34;&gt;10000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 只保留最近 128 条耗时命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;CONFIG SET slowlog-max-len &lt;span class=&#34;token number&#34;&gt;128&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;获取慢查询日志的内容很简单，直接使用  &lt;code&gt;SLOWLOG GET&lt;/code&gt;  命令即可。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;SLOWLOG&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;GET&lt;/span&gt; #慢日志查询&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1684326682&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;KEYS&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;*&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;172.17.0.1:61152&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// ...&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;慢查询日志中的每个条目都由以下六个值组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;唯一渐进的&lt;font color=&#39;gree&#39;&gt;日志标识符&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;处理记录命令的&lt;font color=&#39;gree&#39;&gt; Unix 时间戳&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;执行所需的时间量&lt;/font&gt;，以微秒为单位。&lt;/li&gt;
&lt;li&gt;组成&lt;font color=&#39;gree&#39;&gt;命令参数&lt;/font&gt;的数组。&lt;/li&gt;
&lt;li&gt;客户端&lt;font color=&#39;gree&#39;&gt; IP 地址和端口&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;客户端&lt;font color=&#39;gree&#39;&gt;名称&lt;/font&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;SLOWLOG GET&lt;/code&gt;  命令默认返回最近 10 条的的慢查询命令，你也自己可以指定返回的慢查询命令的数量  &lt;code&gt;SLOWLOG GET N&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;下面是其他比较常用的慢查询相关的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 返回慢查询命令的数量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; SLOWLOG LEN&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;128&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 清空慢查询命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:637&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;9&lt;/span&gt;&gt;&lt;/span&gt; SLOWLOG RESET&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OK&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;redis-内存碎片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-内存碎片&#34;&gt;#&lt;/a&gt; Redis 内存碎片&lt;/h2&gt;
&lt;h3 id=&#34;内存碎片是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存碎片是什么&#34;&gt;#&lt;/a&gt; 内存碎片是什么&lt;/h3&gt;
&lt;p&gt;可以将内存碎片简单地理解为那些&lt;font color=&#39;red&#39;&gt;不可用的空闲内存&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;举个例子：操作系统为你分配了 32 字节的连续内存空间，而你存储数据实际只需要使用 24 字节内存空间，那这多余出来的 8 字节内存空间如果后续没办法再被分配存储其他数据的话，就可以被称为内存碎片。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/memory-fragmentation.png&#34; alt=&#34;内存碎片&#34; /&gt;&lt;/p&gt;
&lt;center&gt;内存碎片&lt;/center&gt;
&lt;p&gt;Redis 内存碎片&lt;font color=&#39;red&#39;&gt;虽然不会影响 Redis 性能，但是会增加内存消耗&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;redis-内存碎片的产生原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-内存碎片的产生原因&#34;&gt;#&lt;/a&gt; Redis 内存碎片的产生原因&lt;/h3&gt;
&lt;p&gt;Redis 内存碎片产生比较常见的 2 个原因：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;1、Redis 存储数据时，向操作系统申请的内存空间可能会大于数据实际需要的存储空间。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Redis 使用  &lt;code&gt;zmalloc&lt;/code&gt;  方法（Redis 自己实现的内存分配方法) 进行内存分配的时候，除了要分配  &lt;code&gt;size&lt;/code&gt;  大小的内存之外，还会多分配  &lt;code&gt;PREFIX_SIZE&lt;/code&gt;  大小的内存。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;zmalloc&lt;/code&gt;  方法源码如下（源码地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FudGlyZXovcmVkaXMtdG9vbHMvYmxvYi9tYXN0ZXIvem1hbGxvYy5jJUVGJUJDJTg5&#34;&gt;https://github.com/antirez/redis-tools/blob/master/zmalloc.c）&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;zmalloc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size_t size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;// 分配指定大小的内存&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;ptr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;PREFIX_SIZE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;ptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;zmalloc_oom_handler&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#ifdef &lt;span class=&#34;token class-name&#34;&gt;HAVE_MALLOC_SIZE&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token function&#34;&gt;update_zmalloc_stat_alloc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;zmalloc_size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; ptr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size_t&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;ptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; size&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token function&#34;&gt;update_zmalloc_stat_alloc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;PREFIX_SIZE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;ptr&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;PREFIX_SIZE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#endif&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;另外，&lt;font color=&#39;red&#39;&gt;Redis 可以使用多种内存分配器（libc、jemalloc、tcmalloc）来分配内存&lt;/font&gt;，默认使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2plbWFsbG9jL2plbWFsbG9j&#34;&gt; jemalloc&lt;/span&gt;。而 jemalloc 按照一系列固定的大小（8 字节、16 字节、32 字节……）来分配内存的。jemalloc 划分的内存单元如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/6803d3929e3e46c1b1c9d0bb9ee8e717.png&#34; alt=&#34;jemalloc 内存单元示意图&#34; /&gt;&lt;/p&gt;
&lt;center&gt;jemalloc 内存单元示意图&lt;/center&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;当程序申请的内存最接近某个固定值时，jemalloc 会给它分配相应大小的空间&lt;/font&gt;。就比如说程序需要申请 17 字节的内存，jemalloc 会直接给它分配 32 字节的内存，这样会导致有 15 字节内存的浪费。不过，&lt;font color=&#39;red&#39;&gt;jemalloc 专门针对内存碎片问题做了优化，一般不会存在过度碎片化的问题&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;2、频繁修改 Redis 中的数据也会产生内存碎片。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;当 Redis 中的某个数据删除时，Redis 通常不会轻易释放内存给操作系统&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;这个在 Redis 官方文档中也有对应的原话：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-docs-memory-optimization.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;文档地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby90b3BpY3MvbWVtb3J5LW9wdGltaXphdGlvbg==&#34;&gt;https://redis.io/topics/memory-optimization&lt;/span&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;如何查看-redis-内存碎片的信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何查看-redis-内存碎片的信息&#34;&gt;#&lt;/a&gt; 如何查看 Redis 内存碎片的信息&lt;/h3&gt;
&lt;p&gt;使用  &lt;code&gt;info memory&lt;/code&gt;  命令即可查看 Redis 内存相关的信息。下图中每个参数具体的含义，Redis 官方文档有详细的介绍：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9JTkZP&#34;&gt;https://redis.io/commands/INFO&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-info-memory.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Redis 内存碎片率的计算公式： &lt;code&gt;mem_fragmentation_ratio&lt;/code&gt;  （内存碎片率）=  &lt;code&gt;used_memory_rss&lt;/code&gt;  (操作系统实际分配给 Redis 的物理内存空间大小)/  &lt;code&gt;used_memory&lt;/code&gt;  (Redis 内存分配器为了存储数据实际申请使用的内存空间大小)&lt;/p&gt;
&lt;p&gt;也就是说， &lt;code&gt;mem_fragmentation_ratio&lt;/code&gt;  （内存碎片率）的值越大代表内存碎片率越严重。&lt;/p&gt;
&lt;p&gt;一定不要误认为 &lt;code&gt;used_memory_rss&lt;/code&gt;  减去  &lt;code&gt;used_memory&lt;/code&gt;  值就是内存碎片的大小！！！这不仅包括内存碎片，还包括其他进程开销，以及共享库、堆栈等的开销。&lt;/p&gt;
&lt;p&gt;很多小伙伴可能要问了：“多大的内存碎片率才是需要清理呢？”。&lt;/p&gt;
&lt;p&gt;通常情况下，我们认为  &lt;code&gt;mem_fragmentation_ratio &amp;gt; 1.5&lt;/code&gt;  的话才需要清理内存碎片。  &lt;code&gt;mem_fragmentation_ratio &amp;gt; 1.5&lt;/code&gt;  意味着你使用 Redis 存储实际大小 2G 的数据需要使用大于 3G 的内存。&lt;/p&gt;
&lt;p&gt;如果想要快速查看内存碎片率的话，你还可以通过下面这个命令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; redis-cli &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt; info &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; mem_fragmentation_ratio&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;另外，内存碎片率可能存在小于 1 的情况。这种情况我在日常使用中还没有遇到过，感兴趣的小伙伴可以看看这篇文章 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZHJsRHZwN2JmcTVqdDJNNXBUcUpDdw==&#34;&gt;故障分析 | Redis 内存碎片率太低该怎么办？- 爱可生开源社区&lt;/span&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;如何清理-redis-内存碎片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何清理-redis-内存碎片&#34;&gt;#&lt;/a&gt; 如何清理 Redis 内存碎片？&lt;/h3&gt;
&lt;p&gt;Redis4.0-RC3 版本以后自带了内存整理，可以避免内存碎片率过大的问题。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;直接通过  &lt;code&gt;config set&lt;/code&gt;  命令将  &lt;code&gt;activedefrag&lt;/code&gt;  配置项设置为  &lt;code&gt;yes&lt;/code&gt;  即可&lt;/font&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;config &lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; activedefrag &lt;span class=&#34;token function&#34;&gt;yes&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;具体什么时候清理需要通过下面两个参数控制：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 内存碎片占用空间达到 500mb 的时候开始清理&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;config &lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; active-defrag-ignore-bytes 500mb&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 内存碎片率大于 1.5 的时候开始清理&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;config &lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; active-defrag-threshold-lower &lt;span class=&#34;token number&#34;&gt;50&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过 Redis 自动内存碎片清理机制可能会对 Redis 的性能产生影响，我们可以通过下面两个参数来减少对 Redis 性能的影响：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 内存碎片清理所占用 CPU 时间的比例不低于 20%&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;config &lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; active-defrag-cycle-min &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 内存碎片清理所占用 CPU 时间的比例不高于 50%&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;config &lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; active-defrag-cycle-max &lt;span class=&#34;token number&#34;&gt;50&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;另外，&lt;font color=&#39;red&#39;&gt;重启节点可以做到内存碎片重新整理&lt;/font&gt;。如果你采用的是高可用架构的 Redis 集群的话，你&lt;font color=&#39;red&#39;&gt;可以将碎片率过高的主节点转换为从节点，以便进行安全重启&lt;/font&gt;。&lt;/p&gt;
&lt;h1 id=&#34;redis-生产问题高并发问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-生产问题高并发问题&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟Redis 生产问题（高并发问题）&lt;/mark&gt;&lt;/h1&gt;
&lt;h2 id=&#34;缓存穿透&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存穿透&#34;&gt;#&lt;/a&gt; 缓存穿透&lt;/h2&gt;
&lt;h3 id=&#34;是什么-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么-5&#34;&gt;#&lt;/a&gt; 是什么&lt;/h3&gt;
&lt;p&gt;缓存穿透说简单点就是 **&lt;font color=&#39;#B32015&#39;&gt;&lt;font color=&#39;orange&#39;&gt;大量请求的 key 既不存在于缓存中，也不存在于数据库中&lt;/font&gt;，进行了两次无用的查询，最终返回空数据&lt;/font&gt;**。这就&lt;font color=&#39;red&#39;&gt;导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-cache-penetration.png&#34; alt=&#34;缓存穿透&#34; /&gt;&lt;/p&gt;
&lt;center&gt;缓存穿透&lt;/center&gt;
&lt;p&gt;举个例子：某个黑客故意制造一些非法的 key 发起大量请求，导致大量请求落到数据库，结果数据库上也没有查到对应的数据。也就是说这些请求最终都落到了数据库上，对数据库造成了巨大的压力。&lt;/p&gt;
&lt;h3 id=&#34;如何解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何解决&#34;&gt;#&lt;/a&gt; 如何解决&lt;/h3&gt;
&lt;p&gt;最基本的就是&lt;font color=&#39;red&#39;&gt;首先做好参数校验&lt;/font&gt;，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。&lt;/p&gt;
&lt;h4 id=&#34;1缓存无效-key&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1缓存无效-key&#34;&gt;#&lt;/a&gt; 1）缓存无效 key&lt;/h4&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;将缓存和数据库都查不到某个 key 的数据写到 Redis 中，并设置过期时间&lt;/font&gt;。具体命令如下： &lt;code&gt;SET key value EX 10086&lt;/code&gt;  。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;这种方案并不能从根本上解决此问题&lt;/font&gt;&lt;/strong&gt;。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。&lt;/p&gt;
&lt;p&gt;另外，这里多说一嘴，一般情况下我们是这样设计 key 的： &lt;code&gt;表名:列名:主键名:主键值&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如果用 Java 代码展示的话，差不多是下面这样的：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getObjectInclNullById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 从缓存中获取数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; cacheValue &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cache&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 缓存为空&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cacheValue &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 从数据库中获取&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; storageValue &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; storage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 缓存空对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        cache&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; storageValue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 如果存储数据为空，需要设置一个过期时间 (300 秒)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;storageValue &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 必须设置过期时间，否则有被攻击的风险&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            cache&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;expire&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; storageValue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; cacheValue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;2布隆过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2布隆过滤器&#34;&gt;#&lt;/a&gt; 2）布隆过滤器&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;常用方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;布隆过滤器是一个非常神奇的数据结构，它将所有可能存在的数据哈希到一个足够大的  &lt;code&gt;bitmap&lt;/code&gt;  中，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;一个一定不存在的数据会被拦截掉&lt;/font&gt;&lt;/strong&gt;，从而避免了对底层存储系统的查询压力。通过它我们&lt;font color=&#39;red&#39;&gt;可以非常方便地判断一个给定数据是否存在于海量数据中&lt;/font&gt;。我们需要的就是&lt;font color=&#39;red&#39;&gt;判断 key 是否合法&lt;/font&gt;，有没有感觉布隆过滤器就是我们想要找的那个 “人”。&lt;/p&gt;
&lt;p&gt;具体是这样做的：把所有可能存在的请求值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求值是否存在于布隆过滤器中。&lt;font color=&#39;red&#39;&gt;不存在的话，直接返回请求参数错误信息给客户端&lt;/font&gt;，存在的话才会走下面的流程。&lt;/p&gt;
&lt;p&gt;加入布隆过滤器之后的缓存处理流程图如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-cache-penetration-bloom-filter.png&#34; alt=&#34;加入布隆过滤器之后的缓存处理流程图&#34; /&gt;&lt;/p&gt;
&lt;center&gt;加入布隆过滤器之后的缓存处理流程图&lt;/center&gt;
&lt;p&gt;但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;为什么会出现误判的情况呢？我们还要从布隆过滤器的原理来说！&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们先来看一下，&lt;strong&gt;当一个元素加入布隆过滤器中的时候，会进行哪些操作：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用布隆过滤器中的&lt;font color=&#39;red&#39;&gt;哈希函数&lt;/font&gt;对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。&lt;/li&gt;
&lt;li&gt;根据得到的哈希值，在&lt;font color=&#39;gree&#39;&gt;位数组&lt;/font&gt;中把对应下标的值置为 1。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们再来看一下，&lt;strong&gt;当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对给定元素再次进行相同的哈希计算；&lt;/li&gt;
&lt;li&gt;得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后，一定会出现这样一种情况：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;不同的字符串可能哈希出来的位置相同。&lt;/font&gt;&lt;/strong&gt; （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）&lt;/p&gt;
&lt;p&gt;更多关于布隆过滤器的内容可以看我的这篇原创：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vY3MtYmFzaWNzL2RhdGEtc3RydWN0dXJlL2Jsb29tLWZpbHRlci8=&#34;&gt;《不了解布隆过滤器？一文给你整的明明白白！》&lt;/span&gt; ，强烈推荐，个人感觉网上应该找不到总结的这么明明白白的文章了。&lt;/p&gt;
&lt;h2 id=&#34;缓存击穿&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存击穿&#34;&gt;#&lt;/a&gt; 缓存击穿&lt;/h2&gt;
&lt;h3 id=&#34;是什么-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么-6&#34;&gt;#&lt;/a&gt; 是什么&lt;/h3&gt;
&lt;p&gt;缓存击穿中，&lt;strong&gt;&lt;font color=&#39;orange&#39;&gt;请求的 key 是&lt;u&gt;热点数据&lt;/u&gt;，该数据存在于数据库中，但不存在于缓存中（通常因为缓存中的那份数据已经过期）&lt;/font&gt;&lt;/strong&gt;。这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-cache-breakdown.png&#34; alt=&#34;缓存击穿&#34; /&gt;&lt;/p&gt;
&lt;center&gt;缓存击穿&lt;/center&gt;
&lt;p&gt;举个例子：秒杀进行过程中，缓存中的某个秒杀商品的数据突然过期，这就导致瞬时大量对该商品的请求直接落到数据库上，对数据库造成了巨大的压力。&lt;/p&gt;
&lt;h3 id=&#34;如何解决-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何解决-2&#34;&gt;#&lt;/a&gt; 如何解决&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;针对热点数据提前预热，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;将热点数据存入缓存中并设置合理的过期时间（永不过期 / 过期时间较长）&lt;/font&gt;&lt;/strong&gt;。比如秒杀场景下的数据在秒杀结束之前不过期。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求数据库写数据到缓存之前，先&lt;font color=&#39;red&#39;&gt;获取互斥锁 mutex&lt;/font&gt;，保证只有一个请求会落到数据库上，减少数据库的压力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缓存穿透与缓存击穿的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存穿透与缓存击穿的区别&#34;&gt;#&lt;/a&gt; 缓存穿透与缓存击穿的区别&lt;/h3&gt;
&lt;p&gt;缓存穿透中，请求的 key 既不存在于缓存中，也不存在于数据库中。&lt;/p&gt;
&lt;p&gt;缓存击穿中，请求的 key 对应的是 &lt;strong&gt;热点数据&lt;/strong&gt; ，该数据 &lt;strong&gt;存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期）&lt;/strong&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;缓存雪崩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存雪崩&#34;&gt;#&lt;/a&gt; 缓存雪崩&lt;/h2&gt;
&lt;h3 id=&#34;是什么-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么-7&#34;&gt;#&lt;/a&gt; 是什么&lt;/h3&gt;
&lt;p&gt;实际上，缓存雪崩描述的就是这样一个简单的场景：**&lt;font color=&#39;#B32015&#39;&gt;&lt;font color=&#39;orange&#39;&gt;缓存在同一时间大面积失效&lt;/font&gt;，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。&lt;/font&gt;** 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。&lt;/p&gt;
&lt;p&gt;另外，&lt;font color=&#39;red&#39;&gt;缓存服务宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-cache-avalanche.png&#34; alt=&#34;缓存雪崩&#34; /&gt;&lt;/p&gt;
&lt;center&gt;缓存雪崩&lt;/center&gt;
&lt;p&gt;举个例子：数据库中的大量数据在同一时间过期，这个时候突然有大量的请求需要访问这些过期的数据。这就导致大量的请求直接落到数据库上，对数据库造成了巨大的压力。&lt;/p&gt;
&lt;h3 id=&#34;如何解决-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何解决-3&#34;&gt;#&lt;/a&gt; 如何解决&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;针对热点缓存失效的情况：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置不同的失效时间，比如&lt;font color=&#39;red&#39;&gt;随机设置缓存的失效时间&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;缓存永不失效（不太推荐，实用性太差）。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;设置二级缓存&lt;/font&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;针对 Redis 服务不可用的情况：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;采用 Redis 集群&lt;/font&gt;，避免单机出现问题整个缓存服务都没办法使用。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;限流&lt;/font&gt;，避免同时处理大量的请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;缓存雪崩与缓存击穿的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存雪崩与缓存击穿的区别&#34;&gt;#&lt;/a&gt; 缓存雪崩与缓存击穿的区别&lt;/h3&gt;
&lt;p&gt;缓存雪崩和缓存击穿比较像，但&lt;font color=&#39;red&#39;&gt;导致缓存雪崩的原因是缓存中的大量或者所有数据失效&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;导致缓存击穿的原因主要是某个热点数据不存在于缓存中（通常是因为缓存中的那份数据已经过期）&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&#34;如何保证缓存和数据库数据的一致性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何保证缓存和数据库数据的一致性&#34;&gt;#&lt;/a&gt; 如何保证缓存和数据库数据的一致性？&lt;/h2&gt;
&lt;p&gt;个人觉得引入缓存之后，如果为了短时间的不一致性问题，选择让系统设计变得更加复杂的话，完全没必要。&lt;/p&gt;
&lt;p&gt;下面单独对 **&lt;font color=&#39;#B32015&#39;&gt;Cache Aside Pattern（旁路缓存模式）&lt;/font&gt;** 来聊聊。&lt;/p&gt;
&lt;p&gt;Cache Aside Pattern 中遇到写请求是这样的：更新 DB，然后直接删除 cache 。&lt;/p&gt;
&lt;p&gt;如果更新数据库成功，而删除缓存这一步失败的情况的话，简单说两个解决方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;缩短缓存失效时间（不推荐，治标不治本）&lt;/strong&gt;：我们让缓存数据的过期时间变短，这样的话缓存就会从数据库中加载数据。另外，这种解决办法对于先操作缓存后操作数据库的场景不适用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;增加 cache 更新重试机制（常用）&lt;/font&gt;&lt;/strong&gt;：如果 cache 服务当前不可用导致缓存删除失败的话，我们就隔一段时间进行重试，重试次数可以自己定。如果多次重试还是失败的话，我们可以把当前更新失败的 key 存入队列中，等缓存服务可用之后，再将缓存中对应的 key 删除即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;相关文章推荐：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJeU9UWXhOREk1T0E9PSZhbXA7bWlkPTIyNDc0ODczMTImYW1wO2lkeD0xJmFtcDtzbj1mYTE5NTY2ZjU3MjlkNjU5ODE1NWI1YzY3NmVlZTYyZCZhbXA7Y2hrc209ZThiZWI4ZTVkZmM5MzFmM2UzNTY1NWRhOWRhMGI2MWM3OWYyODQzMTAxYzEzMGNmMzg5OTY0NDY5NzUwMTRmOTU4YTY0ODFhYWNmMSZhbXA7c2NlbmU9MTc4JmFtcDtjdXJfYWxidW1faWQ9MTY5OTc2NjU4MDUzODAzMjEyOCNyZA==&#34;&gt;缓存和数据库一致性问题，看这篇就够了 - 水滴与银弹&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;redis-阻塞的常见原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-阻塞的常见原因&#34;&gt;#&lt;/a&gt; Redis 阻塞的常见原因&lt;/h2&gt;
&lt;h3 id=&#34;on-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#on-命令&#34;&gt;#&lt;/a&gt; O (n) 命令&lt;/h3&gt;
&lt;p&gt;Redis 中的大部分命令都是 O (1) 时间复杂度，但也有少部分&lt;font color=&#39;red&#39;&gt; O (n) 时间复杂度的命令&lt;/font&gt;，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;KEYS *&lt;/code&gt; ：会返回所有符合规则的 key。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HGETALL&lt;/code&gt; ：会返回一个 Hash 中所有的键值对。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LRANGE&lt;/code&gt; ：会返回 List 中指定范围内的元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SMEMBERS&lt;/code&gt; ：返回 Set 中的所有元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SINTER&lt;/code&gt; / &lt;code&gt;SUNION&lt;/code&gt; / &lt;code&gt;SDIFF&lt;/code&gt; ：计算多个 Set 的交集 / 并集 / 差集。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于这些命令时间复杂度是 O (n)，有时候也会全表扫描，随着 n 的增大，执行耗时也会越长。不过，这些命令并不是一定不能使用，但是需要明确 N 的值。另外，&lt;font color=&#39;red&#39;&gt;有遍历的需求可以使用  &lt;code&gt;HSCAN&lt;/code&gt; 、 &lt;code&gt;SSCAN&lt;/code&gt; 、 &lt;code&gt;ZSCAN&lt;/code&gt;  代替&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;除了这些 O (n) 时间复杂度的命令可能会导致慢查询之外， 还有一些&lt;font color=&#39;red&#39;&gt;时间复杂度可能在 O (N) 以上的命令&lt;/font&gt;，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ZRANGE&lt;/code&gt; / &lt;code&gt;ZREVRANGE&lt;/code&gt; ：返回指定 Sorted Set 中指定排名范围内的所有元素。时间复杂度为 O (log (n)+m)，n 为所有元素的数量， m 为返回的元素数量，当 m 和 n 相当大时，O (n) 的时间复杂度更小。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ZREMRANGEBYRANK&lt;/code&gt; / &lt;code&gt;ZREMRANGEBYSCORE&lt;/code&gt; ：移除 Sorted Set 中指定排名范围 / 指定 score 范围内的所有元素。时间复杂度为 O (log (n)+m)，n 为所有元素的数量， m 被删除元素的数量，当 m 和 n 相当大时，O (n) 的时间复杂度更小。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;save-创建-rdb-快照&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#save-创建-rdb-快照&#34;&gt;#&lt;/a&gt; SAVE 创建 RDB 快照&lt;/h3&gt;
&lt;p&gt;Redis 提供了两个命令来生成 RDB 快照文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;save&lt;/code&gt;  : 同步保存操作，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;会阻塞 Redis 主线程&lt;/font&gt;&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bgsave&lt;/code&gt;  : fork 出一个子进程，子进程执行，&lt;font color=&#39;red&#39;&gt;不会阻塞 Redis 主线程&lt;/font&gt;，默认选项。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认情况下，Redis 默认配置会使用  &lt;code&gt;bgsave&lt;/code&gt;  命令。如果手动使用  &lt;code&gt;save&lt;/code&gt;  命令生成 RDB 快照文件的话，就会阻塞主线程。&lt;/p&gt;
&lt;h3 id=&#34;aof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof&#34;&gt;#&lt;/a&gt; AOF&lt;/h3&gt;
&lt;h4 id=&#34;aof-日志记录阻塞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof-日志记录阻塞&#34;&gt;#&lt;/a&gt; AOF 日志记录阻塞&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;AOF 持久化机制是在执行完命令之后再记录日志&lt;/font&gt;&lt;/strong&gt;，这和关系型数据库（如 MySQL）通常都是执行命令之前记录日志（方便故障恢复）不同。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/github/javaguide/database/redis/redis-aof-write-log-disc.png&#34; alt=&#34;AOF 记录日志过程&#34; /&gt;&lt;/p&gt;
&lt;center&gt;AOF 记录日志过程&lt;/center&gt;
&lt;p&gt;为什么是在执行完命令之后记录日志呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;避免额外的命令语法检查开销&lt;/font&gt;，AOF 记录日志不会对命令进行语法检查；&lt;/li&gt;
&lt;li&gt;在命令执行完之后再记录，&lt;font color=&#39;red&#39;&gt;不会阻塞当前的命令执行&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样也带来了风险（我在前面介绍 AOF 持久化的时候也提到过）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果刚执行完命令 Redis 就宕机，会导致对应的修改丢失；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;由于 AOF 记录日志是在 Redis 主线程中进行的，因此可能会阻塞后续其他命令的执行&lt;/font&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;aof-刷盘阻塞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof-刷盘阻塞&#34;&gt;#&lt;/a&gt; AOF 刷盘阻塞&lt;/h4&gt;
&lt;p&gt;开启 AOF 持久化后，Redis 会将每条执行的写命令写入到 AOF 缓冲区  &lt;code&gt;server.aof_buf&lt;/code&gt;  中，然后再根据  &lt;code&gt;appendfsync&lt;/code&gt;  配置参数来决定何时将其同步到硬盘中的 AOF 文件（刷盘）。&lt;/p&gt;
&lt;p&gt;在 Redis 的配置文件中存在三种不同的 AOF 持久化方式（  &lt;code&gt;fsync&lt;/code&gt;  策略）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;always&lt;/code&gt; ：主线程调用  &lt;code&gt;write&lt;/code&gt;  执行写操作后，后台线程（  &lt;code&gt;aof_fsync&lt;/code&gt;  线程）立即会调用  &lt;code&gt;fsync&lt;/code&gt;  函数同步 AOF 文件（刷盘）， &lt;code&gt;fsync&lt;/code&gt;  完成后线程返回，这样会严重降低 Redis 的性能（ &lt;code&gt;write&lt;/code&gt;  +  &lt;code&gt;fsync&lt;/code&gt; ）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;everysec&lt;/code&gt; ：主线程调用  &lt;code&gt;write&lt;/code&gt;  执行写操作后立即返回，由后台线程（  &lt;code&gt;aof_fsync&lt;/code&gt;  线程）每秒钟调用  &lt;code&gt;fsync&lt;/code&gt;  函数（系统调用）同步一次 AOF 文件（ &lt;code&gt;write&lt;/code&gt; + &lt;code&gt;fsync&lt;/code&gt; ， &lt;code&gt;fsync&lt;/code&gt;  间隔为 1 秒）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no&lt;/code&gt; ：主线程调用  &lt;code&gt;write&lt;/code&gt;  执行写操作后立即返回，让操作系统决定何时进行同步，Linux 下一般为 30 秒一次（ &lt;code&gt;write&lt;/code&gt;  但不 &lt;code&gt;fsync&lt;/code&gt; ， &lt;code&gt;fsync&lt;/code&gt;  的时机由操作系统决定）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;当后台线程（  &lt;code&gt;aof_fsync&lt;/code&gt;  线程）调用  &lt;code&gt;fsync&lt;/code&gt;  函数同步 AOF 文件时，需要等待，直到写入完成&lt;/font&gt;。当磁盘压力太大的时候，会导致  &lt;code&gt;fsync&lt;/code&gt;  操作发生阻塞，主线程调用  &lt;code&gt;write&lt;/code&gt;  函数时也会被阻塞。&lt;font color=&#39;red&#39;&gt; &lt;code&gt;fsync&lt;/code&gt;  完成后，主线程执行  &lt;code&gt;write&lt;/code&gt;  才能成功返回&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;关于 AOF 工作流程的详细介绍可以查看：[AOF 持久化](#AOF 持久化)，有助于理解 AOF 刷盘阻塞。&lt;/p&gt;
&lt;h4 id=&#34;aof-重写阻塞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof-重写阻塞&#34;&gt;#&lt;/a&gt; AOF 重写阻塞&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/2032648-20220207170749957-1755223036.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主线程 fork 出一条子线程来将文件重写，在执行  &lt;code&gt;BGREWRITEAOF&lt;/code&gt;  命令时，Redis 服务器会维护一个&lt;font color=&#39;gree&#39;&gt; AOF 重写缓冲区&lt;/font&gt;，该缓冲区会在子线程创建新 AOF 文件期间，记录服务器执行的所有写命令。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;当子线程完成创建新 AOF 文件的工作之后，服务器会将 AOF 重写缓冲区中的所有内容追加到新 AOF 文件的末尾&lt;/font&gt;，使得新的 AOF 文件保存的数据库状态与现有的数据库状态一致。&lt;/li&gt;
&lt;li&gt;最后，服务器用新的 AOF 文件替换旧的 AOF 文件，以此来完成 AOF 文件重写操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;阻塞就是出现在第 2 步的过程中，将 AOF 重写缓冲区中的新数据写到新 AOF 文件的过程中会产生&lt;strong&gt;阻塞&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;相关阅读：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNjMzMDc3&#34;&gt;Redis AOF 重写阻塞问题分析&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&#34;bigkey&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bigkey&#34;&gt;#&lt;/a&gt; bigkey&lt;/h3&gt;
&lt;p&gt;[bigkey 是什么](#bigkey 是什么)&lt;/p&gt;
&lt;p&gt;[bigkey 的危害](#bigkey 的危害)&lt;/p&gt;
&lt;h4 id=&#34;查找-bigkey&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查找-bigkey&#34;&gt;#&lt;/a&gt; 查找 bigkey&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;[如何发现 bigkey](# 如何发现 bigkey)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当我们在使用 Redis 自带的  &lt;code&gt;--bigkeys&lt;/code&gt;  参数查找大 key 时，&lt;font color=&#39;red&#39;&gt;最好选择在从节点上执行该命令&lt;/font&gt;，因为主节点上执行时，会&lt;strong&gt;阻塞&lt;/strong&gt;主节点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们还可以使用  &lt;code&gt;SCAN&lt;/code&gt;  命令来查找大 key；&lt;/li&gt;
&lt;li&gt;通过分析 RDB 文件来找出 big key，这种方案的前提是 Redis 采用的是 RDB 持久化。网上有现成的工具：
&lt;ul&gt;
&lt;li&gt;redis-rdb-tools：Python 语言写的用来分析 Redis 的 RDB 快照文件用的工具&lt;/li&gt;
&lt;li&gt;rdb_bigkeys：Go 语言写的用来分析 Redis 的 RDB 快照文件用的工具，性能更好。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;删除-bigkey&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除-bigkey&#34;&gt;#&lt;/a&gt; 删除 bigkey&lt;/h4&gt;
&lt;p&gt;删除操作的本质是要释放键值对占用的内存空间。&lt;/p&gt;
&lt;p&gt;释放内存只是第一步，为了更加高效地管理内存空间，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;在应用程序释放内存时，操作系统需要把释放掉的内存块插入一个空闲内存块的链表，以便后续进行管理和再分配&lt;/font&gt;&lt;/strong&gt;。这个过程本身需要一定时间，而且会 **&lt;font color=&#39;red&#39;&gt;阻塞&lt;/font&gt;** 当前释放内存的应用程序。&lt;/p&gt;
&lt;p&gt;所以，如果一下子释放了大量内存，空闲内存块链表操作时间就会增加，相应地就会造成 Redis 主线程的阻塞，如果主线程发生了阻塞，其他所有请求可能都会超时，超时越来越多，会造成 Redis 连接耗尽，产生各种异常。&lt;/p&gt;
&lt;p&gt;删除大 key 时建议采用&lt;font color=&#39;cornflowerblue&#39;&gt;分批次删除&lt;/font&gt;和&lt;font color=&#39;cornflowerblue&#39;&gt;异步删除&lt;/font&gt;的方式进行。&lt;/p&gt;
&lt;h3 id=&#34;清空数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#清空数据库&#34;&gt;#&lt;/a&gt; 清空数据库&lt;/h3&gt;
&lt;p&gt;清空数据库和上面 bigkey 删除也是同样道理，&lt;font color=&#39;red&#39;&gt; &lt;code&gt;flushdb&lt;/code&gt; 、 &lt;code&gt;flushall&lt;/code&gt;  也涉及到删除和释放所有的键值对，也是 Redis 的阻塞点&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;集群扩容-缩容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群扩容-缩容&#34;&gt;#&lt;/a&gt; 集群扩容、缩容&lt;/h3&gt;
&lt;p&gt;Redis 集群可以进行&lt;font color=&#39;red&#39;&gt;节点的动态扩容、缩容&lt;/font&gt;，这一过程目前还处于半自动状态，需要人工介入。&lt;/p&gt;
&lt;p&gt;在扩缩容的时候，需要进行&lt;font color=&#39;red&#39;&gt;数据迁移&lt;/font&gt;。而 Redis 为了保证迁移的一致性，&lt;font color=&#39;red&#39;&gt;迁移所有操作都是同步操作&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;执行迁移时，两端的 Redis 均会进入时长不等的&lt;font color=&#39;red&#39;&gt;阻塞&lt;/font&gt;状态，对于小 Key，该时间可以忽略不计，但如果一旦 Key 的内存使用过大，严重的时候会触发集群内的故障转移，造成不必要的切换。&lt;/p&gt;
&lt;h3 id=&#34;swap内存交换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#swap内存交换&#34;&gt;#&lt;/a&gt; Swap（内存交换）&lt;/h3&gt;
&lt;p&gt;Linux 中的 Swap 常被称为内存交换。类似于 Windows 中的虚拟内存，就是&lt;font color=&#39;red&#39;&gt;当内存不足的时候，把一部分硬盘空间虚拟成内存使用，从而解决内存容量不足的情况&lt;/font&gt;。因此，Swap 分区的作用就是&lt;font color=&#39;red&#39;&gt;牺牲硬盘，增加内存&lt;/font&gt;，解决 VPS 内存不够用或者爆满的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Swap 对于 Redis 来说是非常致命的，因为 Redis 保证高性能的一个重要前提是所有的数据在内存中&lt;/font&gt;&lt;/strong&gt;。如果操作系统把 Redis 使用的部分内存换出硬盘，由于内存与硬盘的读写速度差几个数量级，会导致发生交换后的 Redis 性能急剧下降。&lt;/p&gt;
&lt;p&gt;识别 Redis 发生 Swap 的检查方法如下：&lt;/p&gt;
&lt;p&gt;1、查询 Redis 进程号&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;reids-cli &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6383&lt;/span&gt; info server &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; process_id&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;process_id: &lt;span class=&#34;token number&#34;&gt;4476&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2、根据进程号查询内存交换信息&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /proc/4476/smaps &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; Swap&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Swap: 0kB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Swap: 0kB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Swap: 4kB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Swap: 0kB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Swap: 0kB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果交换量都是 0KB 或者个别的是 4KB，则正常。&lt;/p&gt;
&lt;p&gt;预防内存交换的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证机器充足的可用内存&lt;/li&gt;
&lt;li&gt;确保所有 Redis 实例设置最大可用内存 (maxmemory)，防止极端情况 Redis 内存不可控的增长&lt;/li&gt;
&lt;li&gt;降低系统使用 swap 优先级，如 &lt;code&gt;echo 10 &amp;gt; /proc/sys/vm/swappiness&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cpu-竞争&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu-竞争&#34;&gt;#&lt;/a&gt; CPU 竞争&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Redis 是典型的 CPU 密集型应用，不建议和其他多核 CPU 密集型服务部署在一起&lt;/font&gt;。当其他进程过度消耗 CPU 时，将严重影响 Redis 的吞吐量。&lt;/p&gt;
&lt;p&gt;可以通过  &lt;code&gt;reids-cli --stat&lt;/code&gt;  获取当前 Redis 使用情况。通过  &lt;code&gt;top&lt;/code&gt;  命令获取进程对 CPU 的利用率等信息，通过  &lt;code&gt;info commandstats&lt;/code&gt;  统计信息分析出命令不合理开销时间，查看是否是因为高算法复杂度或者过度的内存优化问题。&lt;/p&gt;
&lt;h3 id=&#34;网络问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络问题&#34;&gt;#&lt;/a&gt; 网络问题&lt;/h3&gt;
&lt;p&gt;连接拒绝、网络延迟，网卡软中断等网络问题也可能会导致 Redis 阻塞。&lt;/p&gt;
&lt;h1 id=&#34;redis-发布订阅pubsub&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-发布订阅pubsub&#34;&gt;#&lt;/a&gt; Redis 发布订阅（pub/sub）&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;这是 Redis 的第一代消息中间件，第二代是 Stream，然而&lt;strong&gt;一般使用的都是更加成熟的第三方消息中间件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;了解即可&lt;/strong&gt;，实际工作中用的很少，一般都是将 Redis 用作&lt;strong&gt;分布式缓存&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;消息系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息系统&#34;&gt;#&lt;/a&gt; 消息系统&lt;/h2&gt;
&lt;p&gt;发布 / 订阅，即 pub/sub，是&lt;font color=&#39;red&#39;&gt;一种消息通信模式&lt;/font&gt;：发布者也称为消息生产者，生产和发送消息到存储系统；订阅者也称为消息消费者，从存储系统接收和消费消息。这个存储系统可以是文件系统 FS、消息中间件 MQ、数据管理系统 DBMS，也可以是 Redis。&lt;font color=&#39;red&#39;&gt;整个消息发布者、订阅者、存储系统称为消息系统&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231207161229390.png&#34; alt=&#34;image-20231207161229390&#34; /&gt;&lt;/p&gt;
&lt;p&gt;消息系统中的订阅者订阅了某类消息后，只要存储系统中存在该类消息，其就可不断的接收并消费这些消息。当存储系统中没有该消息后，订阅者的接收、消费阻塞。而当发布者将消息写入到存储系统后，会立即唤醒订阅者。当存储系统放满时，不同的发布者具有不同的处理方式：有的会阻塞发布者的发布，等待可用的存储空间；有的则会将多余的消息丢失。&lt;/p&gt;
&lt;p&gt;当然，不同的消息系统消息的发布 / 订阅方式也是不同的。例如 RocketMQ、 Kafka 等消息中间件构成的消息系统中，发布 / 订阅的消息都是以&lt;font color=&#39;gree&#39;&gt;主题 Topic &lt;/font&gt;分类的。而 Redis 构成的消息系统中，发布 / 订阅的消息都是以&lt;font color=&#39;gree&#39;&gt;频道 Channel &lt;/font&gt;分类的。&lt;/p&gt;
&lt;h2 id=&#34;pubsub-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pubsub-简介&#34;&gt;#&lt;/a&gt; pub/sub 简介&lt;/h2&gt;
&lt;p&gt;Redis 发布订阅（pub/sub）是一种消息通信模式：&lt;font color=&#39;red&#39;&gt;发送者 (PUBLISH) 发送消息，订阅者 (SUBSCRIBE) 接收消息&lt;/font&gt;，可以实现进程间的消息传递。&lt;/p&gt;
&lt;p&gt;一言蔽之：Redis 可以通过发布订阅实现消息的引导和分流，实现消息中间件 MQ 的功能。但是&lt;font color=&#39;red&#39;&gt;不推荐使用&lt;/font&gt;该功能，专业的事情交给专业的中间件处理，redis 就做好分布式缓存功能。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807173639960.png&#34; alt=&#34;image-20230807173639960&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Redis客户端可以订阅任意数量的频道，类似微信关注多个公众号&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807173711847.png&#34; alt=&#34;image-20230807173711847&#34; /&gt;&lt;/p&gt;
&lt;center&gt;当有新消息通过PUBLISH命令发送给频道时
&lt;/center&gt;
&lt;p&gt;小结：发布 / 订阅其实是&lt;strong&gt;一个轻量的队列&lt;/strong&gt;，只不过&lt;strong&gt;数据不会被持久化&lt;/strong&gt;，一般&lt;strong&gt;用来处理实时性较高的异步消息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807173943443.png&#34; alt=&#34;image-20230807173943443&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;相关命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关命令&#34;&gt;#&lt;/a&gt; 相关命令&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PUBLISH&lt;/code&gt;  channel message&lt;/td&gt;
&lt;td&gt;发布一个频道的消息。返回值为接收到该消息的订阅者数量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SUBSCRIBE&lt;/code&gt;  channel [channel ...]&lt;/td&gt;
&lt;td&gt;同时订阅任意数量的 channel。在输出了订阅了主题后，命令处于阻塞状态，等待相关 channel 的消息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PSUBSCRIBE&lt;/code&gt;  pattern [pattern …]&lt;/td&gt;
&lt;td&gt;订阅一个或多个符合给定模式 pattern 的频道 channel。这里的 pattern 只能使用通配符 *。例如，it* 可以匹配所有以 it 开头的频道，像 it.news、it.blog、 it.tweets 等；news.* 可以匹配所有以 news. 开头的频道，像 news.global.today、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25ld3MuaXQ=&#34;&gt;news.it&lt;/span&gt; 等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UNSUBSCRIBE&lt;/code&gt;  [channel [channel …]]&lt;/td&gt;
&lt;td&gt;退订指定的频道。如果没有频道被指定，也就是一个无参数的 UNSUBSCRIBE 命令被执行，那么客户端使用 SUBSCRIBE 命令订阅的所有频道都会被退订。在这种情况下，命令会返回一个信息，告知客户端所有被退订的频道。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PUNSUBSCRIBE&lt;/code&gt;  [channel [channel …]]&lt;/td&gt;
&lt;td&gt;退订一个或多个符合给定模式的频道。这里的 pattern 也只能使用通配符 *。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PUBSUB&lt;/code&gt;  &amp;lt;subcommand&amp;gt; [argument [argument …]]&lt;/td&gt;
&lt;td&gt;PUBSUB 是一个&lt;font color=&#39;red&#39;&gt;查看订阅与发布系统状态&lt;/font&gt;的&lt;font color=&#39;red&#39;&gt;内省命令集&lt;/font&gt;，它由数个不同格式的子命令组成。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;缺点-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点-4&#34;&gt;#&lt;/a&gt; 缺点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 Redis 系统中 **&lt;font color=&#39;red&#39;&gt;发布的消息不能持久化&lt;/font&gt;**。因此，&lt;font color=&#39;red&#39;&gt;必须先执行订阅，再等待消息发布&lt;/font&gt;。如果先发布了消息，那么该消息由于没有订阅者，消息将被直接丢弃。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息只管发送，对于发布者而言消息是即发即失的，不管接收，也 **&lt;font color=&#39;red&#39;&gt;没有 ACK 机制&lt;/font&gt;**，无法保证消息的消费成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以上的缺点导致 **&lt;font color=&#39;#B32015&#39;&gt;Redis 的 Pub/Sub 模式就像个小玩具&lt;/font&gt;**，在生产环境中几乎无用武之地。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为此 Redis5.0 版本新增了 Stream 数据结构，不但支持多播，还支持数据持久化，相比 Pub/Sub 更加的强大，但是也不推荐使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;redis-集群高可用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-集群高可用&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟Redis 集群（高可用）&lt;/mark&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 为了支持高可用（HA），有 2 套机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主从复制（replica）+ 哨兵（sentinel）&lt;/li&gt;
&lt;li&gt;集群（cluster）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了避免 Redis 的单点故障问题，我们可以搭建一个 Redis 集群，将数据备份到集群中的其它节点上。若一个 Redis 节点宕机，则由集群中的其它节点顶上。&lt;/p&gt;
&lt;h2 id=&#34;主从复制replica&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主从复制replica&#34;&gt;#&lt;/a&gt; 主从复制（replica）&lt;/h2&gt;
&lt;h3 id=&#34;是什么-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么-8&#34;&gt;#&lt;/a&gt; 是什么&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;承上启下的一节，前文都是在单机场景下，从此开始介绍多台 Redis 机器的场景，即&lt;strong&gt;通过主从复制支持多可用性、故障转移&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis 的主从集群是一个&lt;font color=&#39;red&#39;&gt;“一主多从” 的读写分离集群&lt;/font&gt;。集群中的 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Master 节点负责处理客户端的读写请求，而 Slave 节点仅能处理客户端的读请求&lt;/font&gt;&lt;/strong&gt;。之所以要将集群搭建为读写分离模式，主要原因是，对于数据库集群，写操作压力一般都较小，压力大多数来自于读操作请求。所以，只有一个节点负责处理写操作请求即可。&lt;/p&gt;
&lt;p&gt;当 Master 节点上的数据变化时，会自动将新数据&lt;font color=&#39;red&#39;&gt;异步复制&lt;/font&gt;到其他 Slave 节点上。&lt;/p&gt;
&lt;h3 id=&#34;作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用&#34;&gt;#&lt;/a&gt; 作用&lt;/h3&gt;
&lt;p&gt;Redis 主从复制（replica）的功能如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;读写分离&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容灾恢复&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据备份&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;水平扩容，支撑高并发&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本命令&#34;&gt;#&lt;/a&gt; 基本命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;INFO replication&lt;/code&gt; ：以一种易于理解和阅读的格式，&lt;font color=&#39;red&#39;&gt;返回关于当前 Redis 服务器的&lt;strong&gt;直接主 / 从&lt;/strong&gt;复制信息&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;REPLICAOF masterIp masterPort&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;修改当前 Redis 服务器的主 / 从复制设置（自动配置）&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般写入进 redis.conf 配置文件内&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SLAVEOF masterIp masterPort&lt;/code&gt; ：将当前 Redis 服务器&lt;font color=&#39;red&#39;&gt;转变为指定服务器的从属服务器&lt;/font&gt;（手动配置）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次与 master 断开之后，都需要&lt;font color=&#39;red&#39;&gt;重新连接&lt;/font&gt;，除非你配置进 redis.conf 文件&lt;/li&gt;
&lt;li&gt;在运行期间修改 slave 节点的信息，如果该数据库已经是某个主数据库的从数据库，那么会停止和原主数据库的同步关系，转而和新的主数据库同步，&lt;font color=&#39;red&#39;&gt;改换门庭&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SLAVEOF NO ONE&lt;/code&gt; ：将使得这个从属服务器关闭复制功能，并从从属服务器&lt;font color=&#39;red&#39;&gt;转回主服务器，自立为王&lt;/font&gt;，同时原来同步所得的数据集不会被丢弃。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用的3招&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用的3招&#34;&gt;#&lt;/a&gt; 常用的 3 招&lt;/h3&gt;
&lt;p&gt;配置方法：&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;配从不配主&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;master 如果配置了  &lt;code&gt;requirepass&lt;/code&gt;  参数，需要密码登陆&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;那么 slave 就要配置  &lt;code&gt;masterauth&lt;/code&gt;  来设置校验密码，否则 master 会拒绝 slave 的访问请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807183910365.png&#34; alt=&#34;image-20230807183910365&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;一主二从&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一主二从&#34;&gt;#&lt;/a&gt; 一主二从&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807201752116.png&#34; alt=&#34;image-20230807201752116&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;方案1配置文件固定写死&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方案1配置文件固定写死&#34;&gt;#&lt;/a&gt; 方案 1：配置文件固定写死&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;配从（6380 和 6381）不配主&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807193239828.png&#34; alt=&#34;image-20230807193239828&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;依次启动 master 和两台 slave&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807193418057.png&#34; alt=&#34;image-20230807193418057&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看主从关系&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过日志文件：通过 &lt;code&gt;vim 6379.log&lt;/code&gt;  查看 master 日志，通过 &lt;code&gt; vim 6380/6381.log&lt;/code&gt;  查看 slave 日志&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807193701621.png&#34; alt=&#34;image-20230807193701621&#34; /&gt;&lt;/p&gt;
&lt;center&gt;master日志&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807193733743.png&#34; alt=&#34;image-20230807193733743&#34; /&gt;&lt;/p&gt;
&lt;center&gt;slave日志&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过命令： &lt;code&gt;info relication&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807193843707.png&#34; alt=&#34;image-20230807193843707&#34; /&gt;&lt;/p&gt;
&lt;center&gt;master的主从复制信息&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807193915854.png&#34; alt=&#34;image-20230807193915854&#34; /&gt;&lt;/p&gt;
&lt;center&gt;slave的主从复制信息&lt;/center&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;主从复制问题演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主从复制问题演示&#34;&gt;#&lt;/a&gt; 主从复制问题演示&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题 1：&lt;strong&gt;slave 不能执行写命令！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807194936720.png&#34; alt=&#34;image-20230807194936720&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题 2：slave 切入点问题。当某台 slave shutdown 并重启后，&lt;strong&gt;slave 对 master 首次进行全量复制，然后进行增量复制&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807194924560.png&#34; alt=&#34;image-20230807194924560&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题 3：master shutdown 后，slave 原地待命，数据仍可以正常使用，&lt;strong&gt;slave 等待 master 重启归来&lt;/strong&gt;！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题 4：shutdown 后的&lt;strong&gt; master 重启归来，主从关系还在！slave 还能顺利复制！&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;方案2命令操作手动指定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方案2命令操作手动指定&#34;&gt;#&lt;/a&gt; 方案 2：命令操作手动指定&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;slave 停机并去掉配置项，清空主从关系。此时 3 机都是 master，互不从属。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在预设的 2 个 slave 上执行命令 &lt;code&gt;SLAVEOF masterIp masterHost&lt;/code&gt;  指定 master&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种情况下，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;若 slave shutdown 并重启，主从关系就不存在了（因为没有设置配置文件）！&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807200155294.png&#34; alt=&#34;image-20230807200155294&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;配置-vs-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置-vs-命令&#34;&gt;#&lt;/a&gt; 配置 vs 命令&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;配置（即方案 1）持久稳定，命令（即方案 2）临时生效&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;薪火相传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#薪火相传&#34;&gt;#&lt;/a&gt; 薪火相传&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807202217260.png&#34; alt=&#34;image-20230807202217260&#34; /&gt;&lt;/p&gt;
&lt;p&gt;要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slave（6380）也可以作为其他 slave（6381）的 master，接收其连接和同步请求，可以&lt;strong&gt;有效减轻主 master（6379）的写压力&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;改变 master 的命令： &lt;code&gt;SLAVEOF newMasterIp newMasterPort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;slave（6380）仍然无法执行写命令！&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;slave（6381）中途变更转向，master 从 6379 变为 6380，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;会清除之前 master（6379）的数据，重新建立拷贝新的 master（6380）的数据&lt;/font&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;自立为王&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自立为王&#34;&gt;#&lt;/a&gt; 自立为王&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;slave 转成 master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;命令 &lt;code&gt;SLAVEOF NO ONE&lt;/code&gt; ：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;停止与其他数据库的同步，清空数据，转成 Master 数据库&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;一主二从的案例演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一主二从的案例演示&#34;&gt;#&lt;/a&gt; 一主二从的案例演示&lt;/h3&gt;
&lt;h4 id=&#34;架构说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#架构说明&#34;&gt;#&lt;/a&gt; 架构说明&lt;/h4&gt;
&lt;p&gt;一主二从，一个 master，两个 slave，示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807185141276.png&#34; alt=&#34;image-20230807185141276&#34; /&gt;&lt;/p&gt;
&lt;p&gt;拷贝多份配置文件，分别命名为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis6379.conf&lt;/li&gt;
&lt;li&gt;redis6380.conf&lt;/li&gt;
&lt;li&gt;redis6381.conf&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;口诀&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#口诀&#34;&gt;#&lt;/a&gt; &lt;mark&gt;口诀&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;前提：三边网络互相 ping 通，同时注意防火墙配置。&lt;/p&gt;
&lt;p&gt;三大命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主从复制： &lt;code&gt;REPLICAOF masterIp masterPort&lt;/code&gt; ，配从不配主&lt;/li&gt;
&lt;li&gt;改换门庭： &lt;code&gt;SLAVEOF masterIp masterPort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自立为王： &lt;code&gt;SLAVEOF NO ONE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;修改配置文件的操作细节&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改配置文件的操作细节&#34;&gt;#&lt;/a&gt; 修改配置文件的操作细节&lt;/h4&gt;
&lt;p&gt;以 redis6379.conf 为例，步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;要求 Redis 后台运行，不要弹出命令行窗口： &lt;code&gt;daemonize yes&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取消 IP 的绑定，否则影响远程 IP 连接，注释掉 &lt;code&gt;bind 127.0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关闭保护模式，否则影响远程访问 / 连接： &lt;code&gt;protected-mode no&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定端口： &lt;code&gt;port 6379&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定当前工作目录， &lt;code&gt;dir /myredis&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置 pid（进程 id）文件的路径和名字： &lt;code&gt;pidfile /var/run/redis_6379.pid&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置 log 文件的路径和名字： &lt;code&gt;logfile &amp;quot;/myredis/6379.log&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;设置 Redis 服务器的密码&lt;/font&gt;： &lt;code&gt;requirepass 111111&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;master、slave 均配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置 rdb 文件的名称： &lt;code&gt;dbfilename dump6379.rdb&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若开启 AOF，还需设置 aof 文件的名字：appendfilename 。这里不开启了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;slave 设置所访问的 master 的 IP 和端口： &lt;code&gt;replicaof masterIp 6379&lt;/code&gt; ，并设置通行密码 &lt;code&gt;masterauth &amp;quot;111111&amp;quot;&lt;/code&gt; &lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;slave 需要配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;原理工作流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理工作流程&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟原理（工作流程）&lt;/mark&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/developer_1b16183.png&#34; alt=&#34;developer_1b16183&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;slave 首次连接，请求完全同步（sync）&lt;/font&gt;&lt;/strong&gt;：slave &lt;font color=&#39;red&#39;&gt;首次连接&lt;/font&gt; master 后会发送一个  &lt;code&gt;sync&lt;/code&gt;  命令，&lt;font color=&#39;red&#39;&gt;请求完全同步（全量复制）&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;执行一次完全同步（&lt;font color=&#39;red&#39;&gt;全量复制&lt;/font&gt;），slave 自身原有数据会被&lt;font color=&#39;red&#39;&gt;覆盖清除&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;master 保存 RDB 快照，同时缓存写命令，响应给所有 slave 进行初始化（完全同步）&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master 节点收到  &lt;code&gt;sync&lt;/code&gt;  命令后会开始在后台&lt;font color=&#39;red&#39;&gt;保存快照&lt;/font&gt;(即 RDB 持久化，主从复制时会触发 RDB)，同时&lt;font color=&#39;red&#39;&gt;缓存所有接收到的写命令&lt;/font&gt;，master 节点执行 RDB 持久化完后，&lt;font color=&#39;red&#39;&gt;master 将 rdb 快照文件和所有缓存的写命令发送到所有 slave&lt;/font&gt;，以完成一次完全同步&lt;/li&gt;
&lt;li&gt;而 slave 服务在接收到数据库文件数据后，将其&lt;font color=&#39;red&#39;&gt;存盘并加载到内存中&lt;/font&gt;，从而&lt;font color=&#39;red&#39;&gt;完成复制初始化&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;心跳持续，保持通信&lt;/font&gt;&lt;/strong&gt;：master 向 slave 发出 PING 包，周期默认 10 秒。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807205137957.png&#34; alt=&#34;image-20230807205137957&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;进入平稳，增量复制&lt;/font&gt;&lt;/strong&gt;：master 继续将新的所有收集到的写命令自动依次传给 slave，完成同步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;slave 下线，重连续传&lt;/font&gt;&lt;/strong&gt;：假设某台 slave 宕机并重启了，master 会检查 backlog 里面的 &lt;code&gt;offset&lt;/code&gt; ，master 和 slave 都会保存一个复制的  &lt;code&gt;offset&lt;/code&gt;  和一个 masterId， &lt;code&gt;offset&lt;/code&gt;  是保存在 backlog 中的。&lt;font color=&#39;red&#39;&gt;master 只会把已经复制的  &lt;code&gt;offset&lt;/code&gt;  后面的数据复制给 slave&lt;/font&gt;，类似 **&lt;font color=&#39;red&#39;&gt;断点续传&lt;/font&gt;**。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;分级管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分级管理&#34;&gt;#&lt;/a&gt; 分级管理&lt;/h3&gt;
&lt;p&gt;若 Redis 主从集群中的 Slave 较多时，它们的数据同步过程会对 Master 形成较大的性能压力。此时可以&lt;font color=&#39;red&#39;&gt;对这些 Slave 进行分级管理&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231210144213994.png&#34; alt=&#34;image-20231210144213994&#34; /&gt;&lt;/p&gt;
&lt;p&gt;设置方式很简单，只需要 **&lt;font color=&#39;red&#39;&gt;让低级别 Slave 指定其 slaveof 的主机为其上一级 Slave 即可&lt;/font&gt;**。不过，上一级 Slave 的状态仍为 Slave，只不过，其是更上一级的 Slave。&lt;/p&gt;
&lt;p&gt;例如，指定 6382 主机为 6381 主机的 Slave，而 6381 主机仍为真正的 Master 的 Slave。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231210144439772.png&#34; alt=&#34;image-20231210144439772&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时会发现， Master 的 Slave 只有 6381 一个主机。&lt;/p&gt;
&lt;h3 id=&#34;容灾冷处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容灾冷处理&#34;&gt;#&lt;/a&gt; 容灾冷处理&lt;/h3&gt;
&lt;p&gt;在 Master/Slave 的 Redis 集群中，&lt;font color=&#39;red&#39;&gt;若 Master 出现宕机怎么办呢？&lt;/font&gt;有两种处理方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;冷处理&lt;/font&gt;：手工角色调整，使 Slave 晋升为 Master&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;热处理（哨兵模式）&lt;/font&gt;：实现 Redis 集群的高可用 HA&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论 Master 是否宕机，Slave 都可通过 slaveof no one 将自己由 Slave 晋升为 Master。如果其原本就有下一级的 Slave，那么，其就直接变为了这些 Slave 的真正的 Master 了。而原来的 Master 也会失去这个原来的 Slave。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231210144722685.png&#34; alt=&#34;image-20231210144722685&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;缺点-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点-5&#34;&gt;#&lt;/a&gt; 缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;复制（同步）延时&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于所有的写操作都是先在 Master 上操作，然后同步更新到 Slave 上，所以从 Master 同步到 Slave 机器有一定的延迟，当&lt;font color=&#39;red&#39;&gt;系统很繁忙&lt;/font&gt;的时候，延迟问题会更加严重，&lt;font color=&#39;red&#39;&gt;Slave 机器数量的增加&lt;/font&gt;也会使这个问题更加严重。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807210259342.png&#34; alt=&#34;image-20230807210259342&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Master 宕机后群龙无首&lt;/font&gt;&lt;/strong&gt;！默认情况下，&lt;font color=&#39;red&#39;&gt;不会从 slave 中重选一个 master&lt;/font&gt;，系统会陷入半瘫痪状态（&lt;font color=&#39;red&#39;&gt;只能读取，不能写入&lt;/font&gt;）那客户端的写命令如何执行啊？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;期待有一种高可用的备份、恢复机制，能够从剩下的 slave 中选出一个 master！（&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;无人值守安装：哨兵！&lt;/font&gt;&lt;/strong&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;哨兵机制sentinel&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哨兵机制sentinel&#34;&gt;#&lt;/a&gt; 哨兵机制（sentinel）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;目的：为了实现主从集群中的 **&lt;font color=&#39;red&#39;&gt;自动化的故障转移&lt;/font&gt;**！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;普通的主从复制方案下，一旦 master 宕机，我们需要从 slave 中手动选择一个新的 master，同时需要修改应用方的主节点地址，还需要命令所有从节点去复制新的主节点，整个过程需要人工干预。人工干预大大增加了问题的处理时间以及出错的可能性。&lt;/p&gt;
&lt;p&gt;我们可以借助 Redis 官方的 Sentinel（哨兵）方案来帮助我们解决这个痛点，实现自动化的故障转移。&lt;/p&gt;
&lt;h3 id=&#34;是什么-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么-9&#34;&gt;#&lt;/a&gt; 是什么&lt;/h3&gt;
&lt;p&gt;Redis Sentinel 实现 Redis 集群高可用，&lt;font color=&#39;red&#39;&gt;只是在主从复制实现集群的基础下，多了一个 Sentinel 角色来帮助我们监控 Redis 节点的运行状态，并自动实现故障转移&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;当 master 节点出现故障的时候，Sentinel 会自动根据一定的规则选出一个 slave 升级为 master，从而实现自动化的故障转移，确保整个 Redis 系统的高可用性（HA）&lt;/font&gt;&lt;/strong&gt;。整个过程完全自动，不需要人工介入。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-master-slave-sentinel.png&#34; alt=&#34;redis-master-slave-sentinel.png&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;作用-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用-2&#34;&gt;#&lt;/a&gt; 作用&lt;/h3&gt;
&lt;p&gt;Sentinel 节点的功能如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;监控&lt;/font&gt;&lt;/strong&gt;：Sentinel 可以监控所有 Redis 节点（包括 Sentinel 节点自身）的&lt;font color=&#39;red&#39;&gt;状态是否正常&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;故障转移&lt;/font&gt;&lt;/strong&gt;：如果一个 master 出现故障，Sentinel 会帮助我们实现故障转移，&lt;font color=&#39;red&#39;&gt;自动将某一台 slave 升级为 master&lt;/font&gt;，确保整个 Redis 系统的可用性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;消息通知&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;通知 slave 新的 master 连接信息&lt;/font&gt;，让它们执行 replicaof 成为新的 master 的 slave。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;配置中心&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;客户端通过连接 sentinel 来获得 master 的地址&lt;/font&gt;，如果发生故障转移，sentinel 会通知新的 master 链接信息给客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sentinel 本身设计的就是一个分布式系统，&lt;font color=&#39;red&#39;&gt;建议多个 sentinel 节点协作运行&lt;/font&gt;，好处是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个 sentinel 节点通过&lt;font color=&#39;red&#39;&gt;投票&lt;/font&gt;的方式来确定 master 节点是否真的不可用，&lt;font color=&#39;red&#39;&gt;避免误判&lt;/font&gt;（比如网络问题可能会导致误判）。&lt;/li&gt;
&lt;li&gt;Sentinel 自身就是&lt;font color=&#39;red&#39;&gt;高可用&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sentinel-配置文件sentinelconf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sentinel-配置文件sentinelconf&#34;&gt;#&lt;/a&gt; Sentinel 配置文件（sentinel.conf）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;默认在 /opt/redis-7.0.0 目录下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sentinel（哨兵）只是 Redis 的一种运行模式，不提供读写服务，默认运行在 &lt;font color=&#39;red&#39;&gt;26379&lt;/font&gt; 端口上，依赖于 Redis 工作。&lt;/p&gt;
&lt;p&gt;Redis 在 Sentinel 这种特殊的运行模式下，使用专门的命令表，也就是说普通模式运行下的 Redis 命令将无法使用。&lt;/p&gt;
&lt;p&gt;通过下面的命令就可以&lt;font color=&#39;red&#39;&gt;让 Redis 以 Sentinel 的方式运行&lt;/font&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis-sentinel /path/to/sentinel.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;或者&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis-server /path/to/sentinel.conf &lt;span class=&#34;token parameter variable&#34;&gt;--sentinel&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Redis 源码中的&lt;font color=&#39;red&#39;&gt;  &lt;code&gt;sentinel.conf&lt;/code&gt;  文件是用来配置 Sentinel 的&lt;/font&gt;，一个常见的最小配置如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 指定要监视的 master&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 127.0.0.1 6379 为 master 地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 2 表示当有 2 个 sentinel 认为 master 失效时，master 才算真正失效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sentinel monitor mymaster &lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//master 节点宕机多长时间才会被 sentinel 认为是失效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sentinel down&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;after&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;milliseconds mymaster &lt;span class=&#34;token number&#34;&gt;60000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sentinel failover&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;timeout mymaster &lt;span class=&#34;token number&#34;&gt;180000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sentinel parallel&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;syncs mymaster &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sentinel monitor resque &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.3&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6380&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sentinel down&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;after&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;milliseconds resque &lt;span class=&#34;token number&#34;&gt;10000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sentinel failover&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;timeout resque &lt;span class=&#34;token number&#34;&gt;180000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 在发生主备切换时最多可以有 5 个 slave 同时对新的 master 进行同步&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sentinel parallel&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;syncs resque &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;重点参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; ：服务监听地址，用于客户端连接，默认为本机地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;daemonize&lt;/code&gt; ：是否以后台 daemon（后台进程）方式运行，设为 yes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;protected-mode&lt;/code&gt; ：是否开启安全保护模式，设为 no，否则影响远程访问 / 连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;port&lt;/code&gt; ：端口，默认是 26379&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;logfile&lt;/code&gt; ：日志文件路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pidfile&lt;/code&gt; ：pid 文件路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dir&lt;/code&gt; ：工作目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;sentinel monitor &amp;lt;master-name&amp;gt; &amp;lt;master-ip&amp;gt; &amp;lt;master-port&amp;gt; &amp;lt;quorum&amp;gt;&lt;/code&gt; &lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;设置 Sentinel 要监控的 master&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;quorum&lt;/code&gt; ：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;判定 master 失效（&lt;font color=&#39;cornflowerblue&#39;&gt;客观下线&lt;/font&gt;）最少需要的仲裁 Sentinel 节点数&lt;/font&gt;&lt;/strong&gt;，即同意故障转移的法定&lt;font color=&#39;red&#39;&gt;投票数&lt;/font&gt;。例如 quorum 为 2 表示当有 2 个 sentinel 认为 master 失效时，master 才算真正失效。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;sentinel 定时向 master 发出 PING 包&lt;/strong&gt;来确认 master 是否挂掉。&lt;/p&gt;
&lt;p&gt;但网络是不可靠的，有时某个 sentinel 可能因为&lt;strong&gt;网络拥堵&lt;/strong&gt;没收到 master 的响应，从而&lt;strong&gt;误以为 master 已挂掉&lt;/strong&gt;。因此需要多个 sentinel 都一致认为 master 已挂，才可进行主从切换、故障转移，保证了公平性和高可用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sentinel auth-pass &amp;lt;master-name&amp;gt; &amp;lt;password&amp;gt;&lt;/code&gt; ：设置连接 master 服务器的密码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;sentinel down-after-milliseconds &amp;lt;master-name&amp;gt; &amp;lt;milliseconds&amp;gt;&lt;/code&gt; &lt;/strong&gt;：指定如果 master 在多少毫秒之后没有应答 sentinel，sentinel 则主观上认为 master 下线（&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;主观下线&lt;/font&gt;&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sentinel parallel-syncs &amp;lt;master-name&amp;gt; &amp;lt;nums&amp;gt;&lt;/code&gt; ：表示允许并行同步的 slave 个数，当 master 挂了后，哨兵会选出新的 master，此时，剩余的 slave 会向新的 master 发起同步数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sentinel failover-timeout &amp;lt;master-name&amp;gt; &amp;lt;milliseconds&amp;gt;&lt;/code&gt; ：故障转移的超时时间。进行故障转移时，如果超过设置的毫秒，表示故障转移失败&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sentinel notification-script &amp;lt;master-name&amp;gt; &amp;lt;script-path&amp;gt; &lt;/code&gt; ：配置当某一事件发生时所需要执行的脚本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sentinel client-reconfig-script &amp;lt;master-name&amp;gt; &amp;lt;script-path&amp;gt;&lt;/code&gt; ：客户端重新配置 master 参数脚本&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;案例演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例演示&#34;&gt;#&lt;/a&gt; 案例演示&lt;/h3&gt;
&lt;h4 id=&#34;架构说明-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#架构说明-2&#34;&gt;#&lt;/a&gt; 架构说明&lt;/h4&gt;
&lt;p&gt;**&lt;font color=&#39;red&#39;&gt;如果想要实现高可用，建议将哨兵 Sentinel 配置成单数，且大于等于 3 台。&lt;/font&gt;** 好处有二：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防止某台 sentinel 无法连接到 master，导致误切换&lt;/li&gt;
&lt;li&gt;利于投票选举&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个最简易的 Redis Sentinel 集群如下所示（官方文档中的一个例子），其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3 个 Sentinel 节点&lt;/li&gt;
&lt;li&gt;1 个 Master 节点，2 个 Slave 节点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 Master 出现问题，只要 Sentinel 集群其中的两个投票赞同的话，就会开始故障转移工作，从 2 个 Slave 中重新选出一个作为 master。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808002037403.png&#34; alt=&#34;image-20230808002037403&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;配置说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置说明&#34;&gt;#&lt;/a&gt; 配置说明&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808105627695.png&#34; alt=&#34;image-20230808105627695&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由于机器硬件关系，我们的 3 个哨兵都同时配置进 192.168.111.169 同一台机器，即&lt;font color=&#39;red&#39;&gt;3 个哨兵和 master 在一台机器上&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;配置这 3 个哨兵的配置文件：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808104641977.png&#34; alt=&#34;image-20230808104641977&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808104655030.png&#34; alt=&#34;image-20230808104655030&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808104707250.png&#34; alt=&#34;image-20230808104707250&#34; /&gt;&lt;/p&gt;
&lt;p&gt;master 配置文件说明：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808104812771.png&#34; alt=&#34;image-20230808104812771&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;先测试正常的主从复制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#先测试正常的主从复制&#34;&gt;#&lt;/a&gt; 先测试正常的主从复制&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230807201752116.png&#34; alt=&#34;image-20230807201752116&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;169 机器上新建 redis6379.conf 配置文件，由于 6379 后续可能会变成从机，需要设置访问新主机的密码，请设置 masterauth 项访问密码为 111111，不然后续可能报错 master_link_status:down&lt;/li&gt;
&lt;li&gt;172 机器上新建 redis6380.conf 配置文件，设置好 &lt;code&gt;replicaof \&amp;lt;masterip&amp;gt; \&amp;lt;masterport&amp;gt;&lt;/code&gt; ，以及 masterauth 项访问密码为 111111&lt;/li&gt;
&lt;li&gt;173 机器上新建 redis6381.conf 配置文件，设置好 &lt;code&gt;replicaof \&amp;lt;masterip&amp;gt; \&amp;lt;masterport&amp;gt;&lt;/code&gt; ，以及 masterauth 项访问密码为 111111&lt;/li&gt;
&lt;li&gt;启动 3 台机器实例：
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;redis-cli -a 111111 -p 6379&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis-cli -a 111111 -p 6380&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis-cli -a 111111 -p 6381&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;sentinel-来了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sentinel-来了&#34;&gt;#&lt;/a&gt; Sentinel 来了！&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;sentinel 之间通过 master 来获取：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slave 信息&lt;/li&gt;
&lt;li&gt;其他 sentinel 信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从而实现通信。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 master（6379）这台机器上&lt;font color=&#39;red&#39;&gt;启动 3 个 sentinel&lt;/font&gt;（26379/26380/26381），完成监控&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;redis-sentinel sentinel26379.conf --sentinel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis-sentinel sentinel26380.conf --sentinel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis-sentinel sentinel26381.conf --sentinel&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808110202022.png&#34; alt=&#34;image-20230808110202022&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808110255818.png&#34; alt=&#34;image-20230808110255818&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看哨兵的日志文件 &lt;code&gt;sentinel26379.log&lt;/code&gt; ，可以看到&lt;font color=&#39;red&#39;&gt;当前 sentinel 的信息&lt;/font&gt;、&lt;font color=&#39;red&#39;&gt;所监控 master 以及 slave 的信息&lt;/font&gt;、&lt;font color=&#39;red&#39;&gt;其他 sentinel 的信息&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808111127304.png&#34; alt=&#34;image-20230808111127304&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再测试一次主从复制，木有问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;当-master-挂了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#当-master-挂了&#34;&gt;#&lt;/a&gt; 当 master 挂了！&lt;/h4&gt;
&lt;p&gt;通过命令 &lt;code&gt;SHUTDOWN&lt;/code&gt;  手动关闭 6379 服务器，模拟 master 挂掉。&lt;/p&gt;
&lt;p&gt;思考以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题 1：&lt;font color=&#39;red&#39;&gt;两台 slave 上的数据还 OK！&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题 2：** 会从这两台 slave 上选出新的 master！** 具体信息可查看 sentinel 的 log 文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在此过程中，哨兵配置文件 &lt;code&gt;sentinel.conf&lt;/code&gt;  中会自动生成内容信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题 3：&lt;strong&gt;down 机的旧 master 重启归来，也只能拜认新 master，作它的 slave！&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 master6379 宕机后，会出现两种错误：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Error：Server closed the connection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Error：Broken pipe&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;broken pipe&lt;/strong&gt;：pipe 是管道的意思，管道里面是数据流，通常是从文件或网络套接字读取的数据。&lt;font color=&#39;red&#39;&gt;当该管道从另一端突然关闭时，会发生数据突然中断&lt;/font&gt;，即是 broken，对于 socket 来说，可能是网络被拔出或另一端的进程崩溃。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何解决&lt;/strong&gt;：当该异常产生的时候，&lt;font color=&#39;red&#39;&gt;对于服务端来说，并没有多少影响&lt;/font&gt;。因为可能是某个客户端突然中止了进程导致了该错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：这个异常是&lt;font color=&#39;red&#39;&gt;客户端读取超时&lt;/font&gt;关闭了连接，这时候服务器端再向客户端已经断开的连接写数据时就发生了 broken pipe 异常！&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808113740061.png&#34; alt=&#34;image-20230808113740061&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对本次案例，分析谁是 master：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;6381 被选为新 master，上位成功&lt;/li&gt;
&lt;li&gt;以前的 6379 从 master 降级变成了 slave&lt;/li&gt;
&lt;li&gt;6380 还是 slave，只不过换了个新老大 6381 (6379 变 6381)，6380 还是 slave&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;对比新老master的配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对比新老master的配置文件&#34;&gt;#&lt;/a&gt; 对比新老 master 的配置文件&lt;/h4&gt;
&lt;p&gt;旧 master（6379）的配置文件  &lt;code&gt;redis6379.conf&lt;/code&gt;  中会自动生成以下内容，让 其去做新 master（6381）的 slave：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808115231877.png&#34; alt=&#34;image-20230808115231877&#34; /&gt;&lt;/p&gt;
&lt;p&gt;新 master（6381）的配置文件  &lt;code&gt;redis6381.conf&lt;/code&gt;  中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动删掉  &lt;code&gt;replicaof&lt;/code&gt;  参数的配置&lt;/li&gt;
&lt;li&gt;自动生成以下内容：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;conf 文件的内容会被 sentinel 动态更改&lt;/li&gt;
&lt;li&gt;Master-Slave 切换后，master_redis.conf、slave_redis.conf 和 sentinel.conf 的内容都会发生改变，即&lt;font color=&#39;red&#39;&gt;master_redis.conf 中会多一行 slaveof 的配置&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;sentinel.conf 的监控目标会随之调换&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;其他备注&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他备注&#34;&gt;#&lt;/a&gt; 其他备注&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;生产都是不同机房不同服务器，&lt;strong&gt;很少出现 Sentinel 全挂掉的情况&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以同时监控多个 master&lt;/strong&gt;，一行一个&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sentinel-原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sentinel-原理&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟Sentinel 原理&lt;/mark&gt;&lt;/h3&gt;
&lt;h4 id=&#34;三个定时任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三个定时任务&#34;&gt;#&lt;/a&gt; 三个定时任务&lt;/h4&gt;
&lt;p&gt;Sentinel 维护着三个定时任务以监测 Redis 节点及其它 Sentinel 节点的状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;info 任务&lt;/font&gt;：每个 Sentinel 每隔 10 秒就会向 Redis 集群中的每个节点发送  &lt;code&gt;info&lt;/code&gt;  命令，以&lt;font color=&#39;red&#39;&gt;获得最新的 Redis 拓扑结构&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;ping 任务&lt;/font&gt;：每个 Sentinel 每隔 1 秒就会向所有 Redis 节点及其它 Sentinel 节点发送一条  &lt;code&gt;ping&lt;/code&gt;  命令，以&lt;font color=&#39;red&#39;&gt;检测这些节点的存活状态&lt;/font&gt;。该任务&lt;font color=&#39;red&#39;&gt;是判断节点在线状态的重要依据&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;pub/sub 任务&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;​	每个 Sentinel 节点在启动时都会&lt;font color=&#39;red&#39;&gt;向所有 Redis 节点订阅  &lt;code&gt;__sentinel__:hello&lt;/code&gt;  主题的信息&lt;/font&gt;，当 Redis 节点中该主题的信息发生了变化，就会立即通知到所有订阅者。&lt;/p&gt;
&lt;p&gt;​	启动后，每个 Sentinel 节点每 2 秒就会向每个 Redis 节点发布一条  &lt;code&gt;__sentinel__:hello&lt;/code&gt;  主题的信息，该信息是&lt;font color=&#39;red&#39;&gt;当前 Sentinel 对每个 Redis 节点在线状态的判断结果及当前 Sentinel 节点信息&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;​	当 Sentinel 节点接收到  &lt;code&gt;__sentinel__:hello&lt;/code&gt;  主题信息后，就会读取并解析这些信息，然后主要完成以下三项工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果发现&lt;font color=&#39;red&#39;&gt;有新的 Sentinel 节点加入&lt;/font&gt;，则记录下新加入 Sentinel 节点信息，并与其建立连接。&lt;/li&gt;
&lt;li&gt;如果发现&lt;font color=&#39;red&#39;&gt;有 Sentinel Leader 选举的选票信息&lt;/font&gt;，则执行 Leader 选举过程。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;汇总其它 Sentinel 节点对当前 Redis 节点在线状态的判断结果&lt;/font&gt;，作为 Redis 节点客观下线的判断依据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;redis-节点下线down判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-节点下线down判断&#34;&gt;#&lt;/a&gt; Redis 节点下线（DOWN）判断&lt;/h4&gt;
&lt;p&gt;对于每个 Redis 节点在线状态的监控是由 Sentinel 完成的。&lt;/p&gt;
&lt;h5 id=&#34;主观下线subjectively-down&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主观下线subjectively-down&#34;&gt;#&lt;/a&gt; 主观下线（Subjectively DOWN）&lt;/h5&gt;
&lt;p&gt;每个 Sentinel 节点每秒就会向每个 Redis 节点发送  &lt;code&gt;ping&lt;/code&gt;  心跳检测，如果 Sentinel 在 [down-after-milliseconds] 时间内&lt;font color=&#39;red&#39;&gt;没有收到某 Redis 节点的回复&lt;/font&gt;，则 Sentinel 节点就会对该 Redis 节点做出 “下线状态” 的判断。这个判断 **&lt;font color=&#39;red&#39;&gt;仅仅是当前 Sentinel 节点的 “一家之言”&lt;/font&gt;**，所以称为主观下线。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-master-slave-sentinel-ping-sdown.png&#34; alt=&#34;redis-master-slave-sentinel-ping-sdown.png&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;客观下线objectively-down&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客观下线objectively-down&#34;&gt;#&lt;/a&gt; 客观下线（Objectively DOWN）&lt;/h5&gt;
&lt;p&gt;当 Sentinel 主观下线的节点是 master 时，该 Sentinel 节点会向每个其它 Sentinel 节点发送  &lt;code&gt;sentinel is-master-down-by-addr&lt;/code&gt;  命令，以询问其对 master 在线状态的判断结果。这些 Sentinel 节点在收到命令后会向这个发问 Sentinel 节点响应 0（在线）或 1（下线）。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;当 Sentinel 收到超过 quorum 个（通常为过半）下线判断后，就会对 master 做出客观下线判断&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/redis-master-slave-sentinel-ping-odown.png&#34; alt=&#34;redis-master-slave-sentinel-ping-odown.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;sentinel-leader-选举raft-算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sentinel-leader-选举raft-算法&#34;&gt;#&lt;/a&gt; Sentinel Leader 选举（Raft 算法）&lt;/h4&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;当 Sentinel 节点对 master 做出客观下线判断后，&lt;strong&gt;由 Sentinel Leader 来完成后续的故障转移&lt;/strong&gt;&lt;/font&gt;。即 Sentinel 集群中的节点也并非是对等节点，是存在 Leader 与 Follower 的。&lt;/p&gt;
&lt;p&gt;Sentinel Leader 的选举是通过 &lt;strong&gt;&lt;font color=&#39;orange&#39;&gt;Raft 算法&lt;/font&gt;&lt;/strong&gt; 实现的。Raft 算法比较复杂，后面会详细学习，这里仅简单介绍一下 **&lt;font color=&#39;red&#39;&gt;大致思路（先到先得）&lt;/font&gt;**：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个 Sentinel 选举参与者都具有当选 Leader 的资格，当其完成了 “客观下线” 判断后，就会立即 &lt;font color=&#39;red&#39;&gt;“毛遂自荐”&lt;/font&gt; 推选自己做 Leader，将自己的提案发送给所有 Sentinel 参与者。&lt;/li&gt;
&lt;li&gt;其它参与者在收到提案后，&lt;font color=&#39;red&#39;&gt;只要自己手中的选票没有投出去，其就会立即通过该提案&lt;/font&gt;，并将同意结果反馈给提案者。&lt;/li&gt;
&lt;li&gt;后续再过来的提案会由于该参与者没有了选票而被拒绝。&lt;/li&gt;
&lt;li&gt;当提案者收到了同意反馈数量大于等于 max (quorum， sentinelNum/2+1) 时，该提案者当选 Leader。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在网络没有问题的前提下，基本就是谁先做出了 “客观下线” 判断，谁就会首先发起 Sentinel Leader 的选举，谁就会得到大多数参与者的支持，谁就会当选 Leader。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;Sentinel Leader 选举在故障转移发生之前进行&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;故障转移结束后 Sentinel 不再维护这种 Leader-Follower 关系&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;master-选举&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#master-选举&#34;&gt;#&lt;/a&gt; Master 选举&lt;/h4&gt;
&lt;p&gt;在进行故障转移时，Sentinel Leader 需要从所有 Redis 的 Slave 节点中选择出新的 Master。其选择算法为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;过滤掉所有主观下线的，或心跳没有响应 Sentinel 的，或 replica-priority 值为 0 的 Redis 节点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;slave 优先级&lt;/strong&gt;：在剩余 Redis 节点中选择出 &lt;font color=&#39;red&#39;&gt; &lt;code&gt;replica-priority&lt;/code&gt;  最小&lt;/font&gt;的的节点列表。如果只有一个节点，则直接返回，否则，继续&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;复制进度&lt;/strong&gt;：从优先级相同的节点列表中选择&lt;font color=&#39;red&#39;&gt;复制偏移量最大&lt;/font&gt;的节点。如果只有一个节点，则直接返回，否则，继续&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;runid（运行 id）&lt;/strong&gt;：从复制偏移值量相同的节点列表中选择&lt;font color=&#39;red&#39;&gt;runid 最小&lt;/font&gt;的节点返回&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808165640759.png&#34; alt=&#34;image-20230808165640759&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;故障转移failover流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#故障转移failover流程&#34;&gt;#&lt;/a&gt; 故障转移（failover）流程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;集群正常运行&lt;/strong&gt;：3 个 sentinel 监控一主二从集群，正常运行中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808161905591.png&#34; alt=&#34;image-20230808161905591&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;SDown 主观下线（Subjectively Down）&lt;/font&gt;&lt;/strong&gt;：指的是&lt;font color=&#39;red&#39;&gt;单个 Sentinel 实例&lt;/font&gt;对 master 服务器做出的下线判断（有可能是接收不到订阅，之间的网络不通等等原因）。如果 master 服务器在 [ &lt;code&gt;sentinel down-after-milliseconds&lt;/code&gt; ] 给定的毫秒数之内没有回应 PING 命令，或者返回一个错误消息，那么这个 Sentinel 会主观的 (&lt;font color=&#39;red&#39;&gt;单方面的&lt;/font&gt;) 认为这个 master 不可以用了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sentinel 配置文件中的 &lt;code&gt;sentinel down-after-milliseconds &amp;lt;masterName&amp;gt; &amp;lt;timeout&amp;gt;&lt;/code&gt;  设置了判断主观下线的时间长度，表示 master 被当前 sentinel 实例认定为失效的间隔时间。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808162539926.png&#34; alt=&#34;image-20230808162539926&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;ODown 客观下线（Objectively Down）&lt;/font&gt;&lt;/strong&gt;：需要一定数量的 sentinel，&lt;font color=&#39;red&#39;&gt;多个 sentinel 达成一致意见&lt;/font&gt;才能认为一个 master 客观上已经宕掉。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808162827271.png&#34; alt=&#34;image-20230808162827271&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;master-name&lt;/code&gt;  是对某个 master+slave 组合的一个区分标识 (一套 sentinel 可以监听多组 master+slave 这样的组合)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;quorum&lt;/code&gt;  这个参数是进行客观下线的一个依据&lt;/strong&gt;，即法定人数 / 法定票数。意思是至少有 quorum 个 sentinel 认为这个 master 有故障才会对这个 master 进行下线以及故障转移。因为有的时候，某个 sentinel 节点可能因为自身网络原因导致无法连接 master，而此时 master 并没有出现故障，所以这就需要多个 sentinel 都一致认为该 master 有问题，才可以进行下一步操作，这就保证了公平性和高可用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sentinel Leader 选举&lt;/strong&gt;：从 sentinel 集群中选出 &lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;Sentinel Leader（兵王）&lt;/font&gt;&lt;/strong&gt;：当 master 被判断 ODown 以后，各个 sentinel 节点会进行协商，先通过&lt;font color=&#39;orange&#39;&gt;Raft 算法&lt;/font&gt;选举出一个 Sentinel Leader，&lt;font color=&#39;red&#39;&gt;由它进行 failover (故障迁移)&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;监视该 Master 的所有 Sentinel 都有可能被选为 Leader，选举使用的算法是 Raft 算法，其基本思路是 **&lt;font color=&#39;red&#39;&gt;先到先得&lt;/font&gt;**：即在一轮选举中，Sentinel A 向 Sentinel B 发送成为 Leader 的申请，如果 Sentinel B 没有同意过其他 Sentinel，则它会同意 Sentinel A 成为 Leader&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808164314705.png&#34; alt=&#34;image-20230808164314705&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从三个 sentinel 实例的 log 文件中可以看见兵王的诞生过程以及兵王执行故障迁移的过程：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808163922904.png&#34; alt=&#34;image-20230808163922904&#34; /&gt;&lt;/p&gt;
&lt;center&gt;sentinel26379.log&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808163958440.png&#34; alt=&#34;image-20230808163958440&#34; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;font color=&#39;red&#39;&gt;sentinel26380.log&lt;/font&gt;&lt;/font&gt;&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808164037410.png&#34; alt=&#34;image-20230808164037410&#34; /&gt;&lt;/p&gt;
&lt;center&gt;sentinel26381.log&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;orange&#39;&gt;故障转移，选举新的 master&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;新主登基&lt;/strong&gt;：**&lt;font color=&#39;orange&#39;&gt;新 master 选举算法&lt;/font&gt;** 如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;优先级高&lt;/font&gt;：所有 slave 中，根据 redis.conf 配置文件中的优先级 &lt;code&gt;slave-priority&lt;/code&gt;  或者 &lt;code&gt;replica-priority&lt;/code&gt; ，选择优先级最高的 slave 作为新 master。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数字越小优先级越高&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808170206385.png&#34; alt=&#34;image-20230808170206385&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;复制偏移大&lt;/font&gt;：所有 slave 中，根据复制偏移位置 &lt;code&gt;offset&lt;/code&gt; ，该值最大的 slave 作为新 master。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;Run ID 小&lt;/font&gt;：所有 slave 中，选择 Run ID 最小的 slave 作为新 master，是按照字典顺序，ASCII 码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230808165640759.png&#34; alt=&#34;image-20230808165640759&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;群臣俯首&lt;/strong&gt;：一朝天子一朝臣，换个码头重新拜&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sentinel leader 会对选举出的 slave 执行  &lt;code&gt;SLAVEOF NO ONE&lt;/code&gt;  命令，将其提拔为新 master&lt;/li&gt;
&lt;li&gt;Sentinel leader 向其余 slave 发送  &lt;code&gt;SLAVEOF&lt;/code&gt;  命令，使它们成为新 master 的 slave&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;旧主拜服&lt;/strong&gt;：老 master 回来也认怂&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;老 master 成为新 master 的 slave&lt;/li&gt;
&lt;li&gt;Sentinel leader 会让老 master 降级为 slave，并恢复正常工作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总结：上述 failover（故障迁移）均由 sentinel 独自完成，无需人工干预，因此称之为&lt;strong&gt;无人值守安装&lt;/strong&gt;！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;redis-节点上线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-节点上线&#34;&gt;#&lt;/a&gt; Redis 节点上线&lt;/h4&gt;
&lt;p&gt;不同的节点类型，其上线的方式也是不同的。&lt;/p&gt;
&lt;h5 id=&#34;原节点上线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原节点上线&#34;&gt;#&lt;/a&gt; 原节点上线&lt;/h5&gt;
&lt;p&gt;无论是原下线的 master 节点还是原下线的 slave 节点，只要是原 Redis 集群中的节点上线，&lt;font color=&#39;red&#39;&gt;只需启动 Redis 即可&lt;/font&gt;。因为每个 Sentinel 中都保存有原来其监控的所有 Redis 节点列表，Sentinel 会定时查看这些 Redis 节点是否恢复。&lt;font color=&#39;red&#39;&gt;如果 Sentinel 查看到其已经恢复，则会命其从当前 master 进行数据同步&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;不过，&lt;font color=&#39;red&#39;&gt;如果是原 master 上线，在新 master 晋升后 Sentinel Leader 会立即先将原 master 节点更新为 slave，然后才会定时查看其是否恢复&lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;新节点上线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#新节点上线&#34;&gt;#&lt;/a&gt; 新节点上线&lt;/h5&gt;
&lt;p&gt;如果需要在 Redis 集群中添加一个新的节点，其未曾出现在 Redis 集群中，则上线操作&lt;font color=&#39;red&#39;&gt;只能手工完成&lt;/font&gt;。即添加者在添加之前必须知道当前 master 是谁，然后在新节点启动后&lt;font color=&#39;red&#39;&gt;运行  &lt;code&gt;slaveof&lt;/code&gt;  命令加入集群&lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;sentinel-节点上线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sentinel-节点上线&#34;&gt;#&lt;/a&gt; Sentinel 节点上线&lt;/h5&gt;
&lt;p&gt;如果要添加的是 Sentinel 节点，无论其是否曾经出现在 Sentinel 集群中，都需要&lt;font color=&#39;red&#39;&gt;手工完成&lt;/font&gt;。即添加者在添加之前必须知道当前 master 是谁，然后在配置文件中修改 sentinel monitor 属性，&lt;font color=&#39;red&#39;&gt;指定要监控的 master，然后启动 Sentinel 即可&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;sentinel-使用建议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sentinel-使用建议&#34;&gt;#&lt;/a&gt; Sentinel 使用建议&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;哨兵的数量应为多个，且奇数&lt;/font&gt;&lt;/strong&gt;。哨兵本身应该集群，保证高可用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;各个哨兵的配置应一致&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果哨兵部署在 Docker 等容器里面，尤其要&lt;font color=&#39;red&#39;&gt;注意端口的正确映射&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;主从复制 + 哨兵&lt;/code&gt;  机制 **&lt;font color=&#39;#B32015&#39;&gt;并不能确保数据零丢失&lt;/font&gt;**。因为从 master 挂掉到选举出新 master 的这段时间内，无法执行写命令！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引出&lt;strong&gt;集群（cluster）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;分布式系统切片集群cluster&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式系统切片集群cluster&#34;&gt;#&lt;/a&gt; 分布式系统 / 切片集群（cluster）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;作为 Redis 实现高可用的一种方案，优于  &lt;code&gt;主从复制 + Sentinel&lt;/code&gt;  方案！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis 分布式系统，官方称为 Redis Cluster， Redis 集群，其是 Redis 3.0 开始推出的分布式解决方案。其可以&lt;font color=&#39;red&#39;&gt;很好地解决不同 Redis 节点存放不同数据，并将用户请求方便地路由到不同 Redis 的问题&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;已经有主从复制-sentinel了为什么还需要-redis-cluster&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#已经有主从复制-sentinel了为什么还需要-redis-cluster&#34;&gt;#&lt;/a&gt; 已经有主从复制、Sentinel 了，为什么还需要 Redis Cluster？&lt;/h3&gt;
&lt;p&gt;主从复制和 Redis Sentinel 这两种方案本质都是通过增加主库（master）的副本（slave）数量的方式来提高 Redis 服务的整体可用性和读吞吐量，&lt;font color=&#39;red&#39;&gt;都不支持横向扩展来缓解写压力，以及解决缓存数据量过大的问题&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/f682fc80-930c-4e35-978b-496b856d790b.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通常情况下，更建议使用 **&lt;font color=&#39;#B32015&#39;&gt;Redis 切片集群（cluster）&lt;/font&gt;** 这种方案，更能满足高并发场景下分布式缓存的要求。&lt;/p&gt;
&lt;h3 id=&#34;是什么-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么-10&#34;&gt;#&lt;/a&gt; 是什么&lt;/h3&gt;
&lt;p&gt;简单来说就是 **&lt;font color=&#39;red&#39;&gt;部署多台 master，它们之间平等，每个 master 只存储整个数据库的一部分数据，同时对外提供读 / 写服务，实现负载均衡&lt;/font&gt;**。&lt;font color=&#39;red&#39;&gt;缓存的数据库相对均匀地分布在这些 Redis 实例上，客户端的请求通过 &lt;code&gt;路由规则&lt;/code&gt; 转发到目标 master 上&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;为了保障集群整体的高可用，我们需要保证集群中每一个 master 的高可用，&lt;font color=&#39;red&#39;&gt;可以通过主从复制给每个 master 配置一个或者多个从节点（slave）&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/bd28bbbd-0ed4-46e6-ba94-aba9c730934d.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Redis 切片集群对于横向扩展非常友好，只需要增加 Redis 节点到集群中即可&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;作用-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用-3&#34;&gt;#&lt;/a&gt; 作用&lt;/h3&gt;
&lt;p&gt;Redis Cluster 的功能总结如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;支持多个 Master&lt;/font&gt;&lt;/strong&gt;，每个 Master 又可以挂载多个 Slave。
&lt;ul&gt;
&lt;li&gt;读写分离&lt;/li&gt;
&lt;li&gt;支持数据的高可用&lt;/li&gt;
&lt;li&gt;支持海量数据的读写存储操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;自带故障转移（failover）机制&lt;/font&gt;&lt;/strong&gt;，内置了高可用的支持，&lt;font color=&#39;red&#39;&gt;无需再去使用哨兵功能&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端只需连接集群中的任意一个可用 Master 节点即可&lt;/strong&gt;，不需要连接集群中的所有 Master 节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;槽位 slot&lt;/font&gt;&lt;strong&gt;负责分配到各个物理服务节点，由对应的集群来负责&lt;/strong&gt;维护 Redis 节点、插槽、数据之间的关系&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis Cluster 通过 &lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;分片（Sharding）&lt;/font&gt;&lt;/strong&gt; 来进行数据管理，提供 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;主从复制（Master-Slave Replication）&lt;/font&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;故障转移（Failover）&lt;/font&gt;&lt;/strong&gt; 等开箱即用的功能，可以非常方便地帮助我们解决 Redis 大数据量缓存以及 Redis 服务高可用的问题。&lt;/p&gt;
&lt;p&gt;Redis Cluster 这种方案可以很方便地进行 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;横向拓展（Scale Out）&lt;/font&gt;&lt;/strong&gt;，内置了开箱即用的解决方案。当 Redis Cluster 的处理能力达到瓶颈无法满足系统要求的时候，&lt;font color=&#39;red&#39;&gt;直接动态添加 Redis 节点到集群中即可&lt;/font&gt;。根据官方文档中的介绍，Redis Cluster 支持扩展到 1000 个节点。反之，当 Redis Cluster 的处理能力远远满足系统要求，&lt;font color=&#39;red&#39;&gt;同样可以动态删除集群中 Redis 节点，节省资源&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;D:%5C%E5%90%84%E4%B8%AA%E7%A7%91%E7%9B%AE%5CJava%5CJavaGuide%5C%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97%5C%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97.assets%5Cbef6547a-7325-4cdc-8fa5-b3db66826be2.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以说，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Redis Cluster 的动态扩容和缩容是其最大的优势&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;最基本架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最基本架构&#34;&gt;#&lt;/a&gt; 最基本架构&lt;/h3&gt;
&lt;p&gt;为了保证高可用，Redis Cluster &lt;font color=&#39;red&#39;&gt;至少需要 3 个 master 以及 3 个 slave&lt;/font&gt;，也就是说每个 master 必须至少有 1 个 slave。master 和 slave 之间做&lt;font color=&#39;red&#39;&gt;主从复制&lt;/font&gt;，slave 会实时同步 master 上的数据。&lt;/p&gt;
&lt;p&gt;不同于普通的 Redis 主从架构，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;这里的 slave 不对外提供读服务，主要用来保障 master 的高可用，当 master 出现故障的时候替代它&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/7fefb5f3-1978-432b-9a6b-3e1608d033df.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果 master 只有一个 slave 的话，master 宕机之后就直接使用这个 slave 替代 master 继续提供服务，保证 Redis Cluster 的高可用。&lt;/p&gt;
&lt;p&gt;如果 master 有多个 slave 的话，Redis Cluster 中的其他节点会从这个 master 的所有 slave 中选出一个替代 master 继续提供服务。Redis Cluster 总是希望&lt;font color=&#39;red&#39;&gt;数据最完整的&lt;/font&gt; slave 被提升为新的 master。&lt;/p&gt;
&lt;p&gt;Redis Cluster 是&lt;font color=&#39;red&#39;&gt;去中心化&lt;/font&gt;的（各个节点基于  &lt;code&gt;Gossip&lt;/code&gt;  进行通信），任何一个 master 出现故障，其它的 master 节点不受影响，因为 key 找的是 **&lt;font color=&#39;red&#39;&gt;哈希槽（hash slot）&lt;/font&gt;** 而不是 Redis 节点。不过，Redis Cluster 至少要保证宕机的 master 有一个 slave 可用。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;如果宕机的 master 无 slave 的话，为了保障集群的完整性，保证所有的哈希槽都指派给了可用的 master，整个集群将不可用&lt;/font&gt;。这种情况下，还是想让集群保持可用的话，可以将  &lt;code&gt;cluster-require-full-coverage&lt;/code&gt;  这个参数设置成 no，该参数表示需要 16384 个 slot 都正常被分配时 Redis Cluster 才可以对外提供服务。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;如果想要添加新的 master 节点，只需要重新分配 hash slot 即可&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/d6eb12c9-d6a9-4f7b-b0b7-158b0d735042.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;如果想要移除某个 master 节点，需要先将该节点的 hash slot 移动到其他节点上，这样才可以进行删除，不然会报错&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;数据分片算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据分片算法&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟数据分片算法&lt;/mark&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;类似的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Redis Cluster 是如何分片的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis Cluster 中的数据是如何分布的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何确定给定 key 应该分布到哪个哈希槽中？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;常见的数据分区规则有两大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;顺序分区&lt;/font&gt;：将数据&lt;font color=&#39;red&#39;&gt;按照某种顺序平均分配&lt;/font&gt;到不同的节点。不同的顺序方式，产生了不同的分区算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轮询：每产生一个数据，就依次分配到不同的节点。其分配的结果是，在数据总量非常庞大的情况下，每个节点中数据是很平均的。但生产者与数据节点间的连接要长时间保持。&lt;/li&gt;
&lt;li&gt;时间片轮转：在某固定长度的时间片内的数据都会分配到同一个节点。时间片结束，再产生的数据就会被分配到下一个节点。可能会出现节点数据不平均的情况（因为每个时间片内产生的数据量可能是不同的）。但生产者与节点间的连接只需占用当前正在使用的这个就可以，其它连接使用完毕后就立即释放。&lt;/li&gt;
&lt;li&gt;数据块：在整体数据总量确定的情况下，根据各个节点的存储能力，可以将连接的某一整块数据分配到某一节点。&lt;/li&gt;
&lt;li&gt;业务主题：数据可根据不同的业务主题，分配到不同的节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;哈希分区&lt;/font&gt;：充分&lt;font color=&#39;red&#39;&gt;利用数据的哈希值来完成分配&lt;/font&gt;，对数据哈希值的不同使用方式产生了不同的哈希分区算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;哈希取余&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一致性哈希&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;orange&#39;&gt;哈希槽&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis Cluster 采取的数据分片算法就是这种！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里仅展开介绍上述三种哈希分区算法！&lt;/p&gt;
&lt;h4 id=&#34;哈希取余-分区算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈希取余-分区算法&#34;&gt;#&lt;/a&gt; 哈希取余 分区算法&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;小厂可用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809004525207.png&#34; alt=&#34;image-20230809004525207&#34; /&gt;&lt;/p&gt;
&lt;p&gt;该算法的前提是，每个节点都已分配好了一个唯一序号，对于 N 个节点的集群，其序号范围为 [0, N-1]。&lt;font color=&#39;red&#39;&gt;选取数据本身或可以代表数据特征的数据的一部分作为 key，计算 hash (key) 与节点数量 N 的模，即  &lt;code&gt;hash(key) % N&lt;/code&gt; ，计算结果决定了该数据的存储节点的序号&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;优点&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单有效。只需要预估好数据规模，规划好节点，就能保证一段时间的数据支撑。&lt;/li&gt;
&lt;li&gt;负载均衡。使用 Hash 算法让固定的一部分请求落到同一台服务器上，这样&lt;font color=&#39;red&#39;&gt;每台服务器固定处理一部分请求&lt;/font&gt;（并维护这些请求的信息）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;缺点&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Redis 节点的扩容 / 缩容麻烦&lt;/font&gt;&lt;/strong&gt;。已经存储过的数据需要根据新的节点数量 N 进行&lt;font color=&#39;red&#39;&gt;数据迁移&lt;/font&gt;，否则用户根据 key 是无法再找到原来的数据的。生产中扩容一般采用翻倍扩容方式，以减少扩容时数据迁移的比例。&lt;/li&gt;
&lt;li&gt;某个 Redis 机器宕机了，由于台数数量变化，会导致 hash 取余全部数据重新洗牌。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;一致性哈希-分区算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一致性哈希-分区算法&#34;&gt;#&lt;/a&gt; 一致性哈希 分区算法&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在哈希取余算法的基础上，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;固定了取余的分母为 2&lt;sup&gt;32&lt;/sup&gt;-1（因此称之一致性）&lt;/font&gt;&lt;/strong&gt;，而不再是 Master 节点数量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;设计思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计思想&#34;&gt;#&lt;/a&gt; 设计思想&lt;/h5&gt;
&lt;p&gt;为了解决&lt;font color=&#39;red&#39;&gt;哈希取余分区算法中的数据变动和映射问题&lt;/font&gt;（某个机器宕机导致分母数量改变了，自然取余数不 OK 了）。目的是&lt;font color=&#39;red&#39;&gt;当 Redis 节点个数发生变动时，尽量减少客户端到服务器的映射关系的影响&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;一致性哈希算法通过一个叫作 **&lt;font color=&#39;#B32015&#39;&gt;一致性哈希环&lt;/font&gt;&lt;strong&gt;的数据结构实现。这个环的起点是 0，终点是 2&lt;sup&gt;32&lt;/sup&gt; - 1，并且&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;起点与终点重合&lt;/font&gt;&lt;strong&gt;。环中间的整数按逆 / 顺时针分布，故这个环的整数分布范围是&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;[0, 2&lt;sup&gt;32&lt;/sup&gt;-1]&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231210191026016.png&#34; alt=&#34;image-20231210191026016&#34; /&gt;&lt;/p&gt;
&lt;p&gt;上图中存在四个对象 o0、 o1、 o2、 o3，分别代表四个待分配的数据，红色方块是这四个数据的 hash (o) 在 Hash 环中的落点。同时，图上还存在三个节点 m0、 m1、 m2，绿色圆圈是这三节点的 hash (m) 在 Hash 环中的落点。&lt;/p&gt;
&lt;p&gt;现在要为数据分配其要存储的节点。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;该数据对象的 hash (o) 按照逆 / 顺时针方向距离哪个节点的 hash (m) 最近，就将该数据存储在哪个节点&lt;/font&gt;&lt;/strong&gt;。这样就会形成上图所示的分配结果。&lt;/p&gt;
&lt;h5 id=&#34;3大步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3大步骤&#34;&gt;#&lt;/a&gt; 3 大步骤&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构建一致性哈希环&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;一致性哈希算法必然有个 hash 函数用于产生 hash 值，这个算法的所有可能哈希值会构成一个&lt;font color=&#39;red&#39;&gt;全量集&lt;/font&gt;，这个集合可以成为一个 **&lt;font color=&#39;red&#39;&gt;hash 空间 [0,2&lt;sup&gt;32&lt;/sup&gt;-1]&lt;/font&gt;&lt;strong&gt;，这个是一个线性空间，但是在算法中，我们通过适当的逻辑控制将它&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;首尾相连 (0 = 2&lt;sup&gt;32&lt;/sup&gt;)&lt;/font&gt;**，这样让它形成了一个&lt;font color=&#39;red&#39;&gt;逻辑上的环形空间&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;它也是按照使用取模的方法，&lt;font color=&#39;red&#39;&gt;前面介绍的是对 Redis 节点的数量进行取模&lt;/font&gt;。而 **&lt;font color=&#39;orange&#39;&gt;一致性哈希算法是对 2&lt;sup&gt;32&lt;/sup&gt; 取模&lt;/font&gt;（因为取余的分母是固定的，所以称其一致性）**。&lt;/p&gt;
&lt;p&gt;简单来说，一致性 Hash 算法将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数的值空间为 [0,2&lt;sup&gt;32&lt;/sup&gt;-1]（即哈希值是一个 32 位无符号整形），整个哈希环如下图：整个空间按顺时针方向组织，圆环的正上方的点代表 0，0 点右侧的第一个点代表 1，以此类推，2、3、4、…… 直到 2&lt;sup&gt;32&lt;/sup&gt;-1，也就是说&lt;font color=&#39;red&#39;&gt;0 点左侧的第一个点代表 2&lt;sup&gt;32&lt;/sup&gt;-1&lt;/font&gt;， 0 和 2&lt;sup&gt;32&lt;/sup&gt;-1 在零点中方向重合，我们把这个 **&lt;font color=&#39;red&#39;&gt;由 2&lt;sup&gt;32&lt;/sup&gt; 个点组成&lt;/font&gt;** 的圆环称为 &lt;code&gt;Hash环&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809010605612.png&#34; alt=&#34;image-20230809010605612&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Redis 服务器节点 IP 映射&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;将集群中各个 Redis 节点的 IP 映射到环上的某一个位置。&lt;/p&gt;
&lt;p&gt;将各个 Redis 服务器的 IP 或主机名作为关键字使用 Hash 进行哈希，这样每台机器就能确定其在哈希环上的位置。假如 4 个 Redis 节点 NodeA、NodeB、NodeC、NodeD，经过&lt;font color=&#39;red&#39;&gt;IP 地址的哈希函数计算 hash (ip)&lt;/font&gt;，使用 IP 地址哈希后在环空间的位置如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809114247849.png&#34; alt=&#34;image-20230809114247849&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;落 key 规则&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;当我们需要存储一个键值对时，&lt;font color=&#39;red&#39;&gt;首先计算 key 的 hash 值，hash (key)&lt;/font&gt;，确定此数据在环上的位置，从此位置沿环 **&lt;font color=&#39;red&#39;&gt;顺时针&lt;/font&gt;**“行走”，&lt;font color=&#39;red&#39;&gt;第一台遇到的 Redis 服务器&lt;/font&gt;就是其应该定位到的服务器，并将该键值对存储在该节点上。&lt;/p&gt;
&lt;p&gt;如我们有 Object A、Object B、Object C、Object D 四个数据对象，经过哈希计算后，在环空间上的位置如下：根据一致性 Hash 算法，Object A 会被定为到 Node A 上，Object B 被定为到 Node B 上，Object C 被定为到 Node C 上，Object D 被定为到 Node D 上。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809114625589.png&#34; alt=&#34;image-20230809114625589&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优缺点&#34;&gt;#&lt;/a&gt; 优缺点&lt;/h5&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;优点&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;容错性&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设 Node C 宕机，可以看到此时对象 A、B、D 不会受到影响。一般的，在一致性 Hash 算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响。&lt;font color=&#39;red&#39;&gt;简单说，就是 C 挂了，受到影响的只是 B、C 之间的数据，且这些数据会转移到 D 进行存储&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809115305990.png&#34; alt=&#34;image-20230809115305990&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;Redis 节点的扩容 / 缩容方便&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;随着数据量的增加，需要增加一台节点 NodeX，位置在 A 和 B 之间，&lt;font color=&#39;red&#39;&gt;那受到影响的也就是 A 到 X 之间的数据，重新把 A 到 X 的数据录入到 X 上即可，不会导致 hash 取余全部数据重新洗牌&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809120153493.png&#34; alt=&#34;image-20230809120153493&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;缺点&lt;/font&gt;：&lt;strong&gt;数据倾斜&lt;/strong&gt;问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;当 Redis 服务节点太少时&lt;/strong&gt;，容易因为&lt;font color=&#39;red&#39;&gt;节点分布不均匀&lt;/font&gt;而造成&lt;strong&gt;数据倾斜&lt;/strong&gt;（被缓存的数据对象大部分集中缓存在某一台服务器上）问题。&lt;/p&gt;
&lt;p&gt;例如系统中只有两台服务器：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809120432504.png&#34; alt=&#34;image-20230809120432504&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;哈希槽slot-分区算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈希槽slot-分区算法&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟哈希槽 (slot) 分区算法&lt;/mark&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;大厂都用它！而且 &lt;strong&gt;Redis Cluster 的数据分区采用的就是这种方式！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;设计思想javaguide&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计思想javaguide&#34;&gt;#&lt;/a&gt; 设计思想（JavaGuide）&lt;/h5&gt;
&lt;p&gt;Redis Cluster 并没有使用一致性哈希，采用的是 **&lt;font color=&#39;#B32015&#39;&gt;哈希槽分区&lt;/font&gt;** ，每一个键值对都属于一个 hash slot（哈希槽）。&lt;/p&gt;
&lt;p&gt;Redis Cluster 通常有 16384 个哈希槽 ，要计算给定 key 应该分布到哪个哈希槽中，我们只需要先对每个 key 计算 CRC-16（XMODEM） 校验码，然后再对这个校验码对 16384 (哈希槽的总数) 取模，得到的值即是 key 对应的哈希槽。&lt;/p&gt;
&lt;p&gt;哈希槽的计算公式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;HASH_SLOT = CRC16(key) mod 16384
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建并初始化 Redis Cluster 的时候，Redis 会自动平均分配这 16384 个哈希槽到各个节点，不需要我们手动分配。如果你想自己手动调整的话，Redis Cluster 也内置了相关的命令比如  &lt;code&gt;ADDSLOTS、ADDSLOTSRANGE&lt;/code&gt; （后面会详细介绍到重新分配哈希槽相关的命令）。&lt;/p&gt;
&lt;p&gt;客户端连接 Redis Cluster 中任意一个 master 节点即可访问 Redis Cluster 的数据。&lt;font color=&#39;red&#39;&gt;当客户端发送命令请求的时候，需要先根据 key 通过上面的计算公示找到的对应的哈希槽，然后再查询哈希槽和节点的映射关系，即可找到目标节点。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/06f32493-52dc-4c53-8522-fb98e72da782.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果哈希槽确实是当前节点负责，那就直接响应客户端的请求返回结果，&lt;font color=&#39;red&#39;&gt;如果不由当前节点负责，就会返回  &lt;code&gt;-MOVED&lt;/code&gt;  重定向错误，告知客户端当前哈希槽是由哪个节点负责，客户端向目标节点发送请求并更新缓存的哈希槽分配信息&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231216122451496.png&#34; alt=&#34;image-20231216122451496&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个时候你可能就会疑问：&lt;strong&gt;为什么还会存在找错节点的情况呢？根据公式计算难道还会出错？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是因为 Redis Cluster &lt;font color=&#39;red&#39;&gt;内部可能会重新分配哈希槽，比如扩容缩容的时候&lt;/font&gt;（后文中有详细介绍到 Redis Cluster 的扩容和缩容问题），这就可能会导致客户端缓存的哈希槽分配信息会有误。&lt;/p&gt;
&lt;p&gt;从上面的介绍中，我们可以简单总结出 Redis Cluster 哈希槽分区机制的优点：&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;解耦了数据和节点之间的关系，提升了集群的横向扩展性和容错性。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;设计思想-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计思想-2&#34;&gt;#&lt;/a&gt; 设计思想&lt;/h5&gt;
&lt;p&gt;为了解决&lt;font color=&#39;red&#39;&gt;数据分配不均匀&lt;/font&gt;的问题（数据倾斜），哈希槽分区算法&lt;font color=&#39;red&#39;&gt;在数据和 Redis 节点之间加了一层哈希槽（slot）&lt;/font&gt;，用于管理数据和 Redis 节点之间的关系，相当于是&lt;font color=&#39;red&#39;&gt;把数据放入槽中，再把槽映射到 Redis 节点上&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231210194354635.png&#34; alt=&#34;image-20231210194354635&#34; /&gt;&lt;/p&gt;
&lt;p&gt;该算法 **&lt;font color=&#39;red&#39;&gt;首先虚拟出一个固定数量为 2&lt;sup&gt;14&lt;/sup&gt;=16384 的整数集合，其中每个整数称为一个槽（slot）&lt;/font&gt;&lt;strong&gt;。这个槽的数量一般是远远大于节点数量的。然后&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;再将所有槽平均映射到各个 Redis 节点之上&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;例如，Redis 分布式系统中共虚拟了 16384（即 2&lt;sup&gt;14&lt;/sup&gt;） 个 slot 槽，其范围为 [0, 16383]。假设共有 3 个节点，那么 slot 槽与节点间的映射关系如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231210192907595.png&#34; alt=&#34;image-20231210192907595&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;数据只与 slot 槽有关系，与 Redis 节点没有直接关系&lt;/font&gt;。数据根据计算公式 &lt;code&gt;slot = hash(key) % slotNums&lt;/code&gt;  映射到 slot 槽。这也是该算法的一个优点，&lt;font color=&#39;red&#39;&gt;解耦了数据与节点，客户端无需维护节点，只需维护与 slot 槽的关系即可&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;Redis Cluster 的数据分区采用的就是该算法。其计算槽点的公式为： &lt;code&gt;slot = CRC16(key) % 16384&lt;/code&gt; 。 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;CRC16 () 是一种带有校验功能的、具有良好分散功能的、特殊的 hash 算法函数&lt;/font&gt;&lt;/strong&gt;。 其实 Redis 中计算槽点的公式不是上面的那个，而是： &lt;code&gt;slot = CRC16(key) &amp;amp; 16383&lt;/code&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;若要计算 a % b，如果 b 是 2 的整数次幂，那么 a % b = a &amp;amp; (b-1)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;为什么哈希槽的数量是16384个&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么哈希槽的数量是16384个&#34;&gt;#&lt;/a&gt; 为什么哈希槽的数量是 16384 个？&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;CRC16 () 算法产生的哈希值有 16bit&lt;/strong&gt;，即 2&lt;sup&gt;16&lt;/sup&gt;=65536 个值，为什么 Redis 集群的算法只采用 2&lt;sup&gt;14&lt;/sup&gt;=16384 个哈希槽？&lt;/font&gt;在进行 mode 运算时，为什么是 &lt;code&gt;HASH_SLOT = CRC16(key) mod 16384&lt;/code&gt;  而不是 &lt;code&gt;HASH_SLOT = CRC16(key) mod 65536&lt;/code&gt; ？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;作者的回复&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809132510614.png&#34; alt=&#34;image-20230809132510614&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;消息头 clusterMsg 的结构&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230809132604570.png&#34; alt=&#34;image-20230809132604570&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;gree&#39;&gt;标准回答&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;正常的心跳包会携带一个节点的完整配置，它会以幂等的方式更新旧的配置，这意味着&lt;font color=&#39;red&#39;&gt;心跳包会附带当前节点的负责的哈希槽的信息&lt;/font&gt;。假设哈希槽采用 16384，则占空间 2k（16384/8）。假设哈希槽采用 65536，则占空间 8k (65536/8)，这是令人难以接受的内存占用。因此，&lt;font color=&#39;red&#39;&gt;如果槽位为 65536，那么发送心跳信息的消息头大小达到 8k，&lt;strong&gt;发送的心跳包过于庞大，浪费带宽&lt;/strong&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在消息头中最占空间的是 &lt;code&gt;myslots[CLUSTER_SLOTS/8]&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当槽位为 65536 时，这块的大小是: 65536÷8÷1024=&lt;font color=&#39;red&#39;&gt;8kb&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;当槽位为 16384 时，这块的大小是: 16384÷8÷1024=&lt;font color=&#39;red&#39;&gt;2kb&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为每秒钟 redis 节点需要发送一定数量的 ping 消息作为心跳包，如果槽位为 65536，这个 &lt;font color=&#39;red&#39;&gt;ping 消息的消息头太大了，浪费带宽&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;对于基本不可能超过 1000 个 master 节点数量的 redi 集群而言，&lt;strong&gt;16384 个槽位就已经够用了&lt;/strong&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;集群的节点越多，心跳包的消息体内携带的数据越多。如果节点过 1000 个，也会导致网络拥堵。因此 redis 作者不建议 redis cluster 节点数量超过 1000 个。那么，&lt;font color=&#39;red&#39;&gt;对于节点数在 1000 以内的 redis cluster 集群，16384 个槽位够用了&lt;/font&gt;。没有必要拓展到 65536 个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;槽位越小，节点少的情况下，&lt;strong&gt;压缩比高，容易传输&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 的 master 节点的配置信息中它所负责的哈希槽是通过一张 bitmap 的形式来保存的，在传输过程中会对 bitmap 进行压缩，但是&lt;font color=&#39;red&#39;&gt;如果 bitmap 的填充率 slots / N 很高的话 (N 表示节点数)，bitmap 的压缩率就很低&lt;/font&gt;。如果节点数很少，而哈希槽数量很多的话，bitmap 的压缩率就很低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集群操作案例演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群操作案例演示&#34;&gt;#&lt;/a&gt; 集群操作（案例演示）&lt;/h3&gt;
&lt;h4 id=&#34;集群架构说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群架构说明&#34;&gt;#&lt;/a&gt; 集群架构说明&lt;/h4&gt;
&lt;p&gt;集群的架构是最简单的三主三从。即在 3 台虚拟机上新建 6 个独立的 Redis 实例服务，每台机器上一主一从，&lt;font color=&#39;gree&#39;&gt;设计图&lt;/font&gt;如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;master 与 slave 的角色以及配对关系，实际上是在系统搭建成功后自动随机分配的&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/IMG_8445(20230809-135635).JPEG&#34; alt=&#34;IMG_8445(20230809-135635)&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;集群搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群搭建&#34;&gt;#&lt;/a&gt; 集群搭建&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;接下来的操作中，Redis 节点从 6381~6386 变成了 6380~6385。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;集群架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群架构&#34;&gt;#&lt;/a&gt; 集群架构&lt;/h5&gt;
&lt;p&gt;下面要搭建的 Redis 分布式系统由 6 个节点构成，这 6 个节点的地址及角色分别如下表所示。一个 master 配备一个 slave，不过 master 与 slave 的角色以及配对关系，实际上是在系统搭建成功后自动随机分配的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213190023854.png&#34; alt=&#34;image-20231213190023854&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;删除持久化文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除持久化文件&#34;&gt;#&lt;/a&gt; 删除持久化文件&lt;/h5&gt;
&lt;p&gt;先将之前 “Redis 主从集群” 中在 Redis 安装目录下生成的&lt;font color=&#39;red&#39;&gt; RDB 持久化文件&lt;/font&gt; dump638*.conf 与&lt;font color=&#39;red&#39;&gt; AOF 持久化文件&lt;/font&gt;删除。因为&lt;font color=&#39;red&#39;&gt; Redis 分布式系统要求创建在一个空的数据库之上&lt;/font&gt;。注意， AOF 持久化文件全部在 appendonlydir 目录中。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213190413135.png&#34; alt=&#34;image-20231213190413135&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;创建目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建目录&#34;&gt;#&lt;/a&gt; 创建目录&lt;/h5&gt;
&lt;p&gt;在 Redis 安装目录中 mkdir 一个新的目录 cluster-dis，用作分布式系统的工作目录。&lt;/p&gt;
&lt;h5 id=&#34;复制2个配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复制2个配置文件&#34;&gt;#&lt;/a&gt; 复制 2 个配置文件&lt;/h5&gt;
&lt;p&gt;将 cluster 目录中的 redis.conf 与 redis6380.conf 文件复制到 cluster-dis 目录。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213190509762.png&#34; alt=&#34;image-20231213190509762&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;修改-redisconf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改-redisconf&#34;&gt;#&lt;/a&gt; 修改 redis.conf&lt;/h5&gt;
&lt;p&gt;对于 redis.conf 配置文件，主要涉及到以下三个四个属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dir&lt;/code&gt; ：指定&lt;font color=&#39;red&#39;&gt;工作目录&lt;/font&gt;为前面创建的 cluster-dis 目录。持久化文件、节点配置文件将来都会在工作目录中自动生成。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213190633688.png&#34; alt=&#34;image-20231213190633688&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cluster-enabled&lt;/code&gt; ：开启 Redis 的&lt;font color=&#39;red&#39;&gt;集群模式&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213190642530.png&#34; alt=&#34;image-20231213190642530&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cluster-config-file&lt;/code&gt; ：指定 “集群节点” 的&lt;font color=&#39;red&#39;&gt;配置文件&lt;/font&gt;。该文件会在第一次节点启动时自动生成，其生成的路径是在 dir 属性指定的工作目录中。在集群节点信息发生变化后（如节点下线、故障转移等），节点会自动将集群状态信息保存到该配置文件中。不过，该属性在这里仍保持注释状态。&lt;font color=&#39;red&#39;&gt;在后面的每个节点单独的配置文件中配置它&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213190827903.png&#34; alt=&#34;image-20231213190827903&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cluster-node-timeout&lt;/code&gt; ：指定 “集群节点” 间&lt;font color=&#39;red&#39;&gt;通信的超时时间阈值&lt;/font&gt;，单位毫秒。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213190925419.png&#34; alt=&#34;image-20231213190925419&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;修改-redis6380conf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改-redis6380conf&#34;&gt;#&lt;/a&gt; 修改 redis6380.conf&lt;/h5&gt;
&lt;p&gt;仅添加一个 cluster-config-file 属性即可。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213191005505.png&#34; alt=&#34;image-20231213191005505&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;复制5个配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复制5个配置文件&#34;&gt;#&lt;/a&gt; 复制 5 个配置文件&lt;/h5&gt;
&lt;p&gt;使用 redis6380.conf 复制出 5 个配置文件 redis6381.conf、redis6382.conf、redis6383.conf、redis6384.conf、 redis6385.conf。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213191314724.png&#34; alt=&#34;image-20231213191314724&#34; /&gt;&lt;/p&gt;
&lt;p&gt;cluster-dis 中出现了 7 个配置文件。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213191414191.png&#34; alt=&#34;image-20231213191414191&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;修改5个配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改5个配置文件&#34;&gt;#&lt;/a&gt; 修改 5 个配置文件&lt;/h5&gt;
&lt;p&gt;修改 5 个配置文件 redis6381.conf、 redis6382.conf、 redis6383.conf、 redis6384.conf、redis6385.conf 的内容，将其中所有涉及的&lt;font color=&#39;red&#39;&gt;端口号&lt;/font&gt;全部替换为当前文件名称中的端口号。例如，下面的是 redis6381.conf 的配置文件内容。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213191459568.png&#34; alt=&#34;image-20231213191459568&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;集群启动与关闭&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群启动与关闭&#34;&gt;#&lt;/a&gt; 集群启动与关闭&lt;/h4&gt;
&lt;h5 id=&#34;启动节点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动节点&#34;&gt;#&lt;/a&gt; 启动节点&lt;/h5&gt;
&lt;p&gt;启动所有 Redis 节点。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213193441641.png&#34; alt=&#34;image-20231213193441641&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213193459669.png&#34; alt=&#34;image-20231213193459669&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时查看 cluster-dis 目录，可以看到生成了 6 个 nodes 的配置文件。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213193536609.png&#34; alt=&#34;image-20231213193536609&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;创建集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建集群&#34;&gt;#&lt;/a&gt; 创建集群&lt;/h5&gt;
&lt;p&gt;6 个节点启动后，它们仍是 6 个独立的 Redis，通过  &lt;code&gt;redis-cli --cluster create&lt;/code&gt;  命令可将 6 个节点创建了一个分布式系统。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213193647388.png&#34; alt=&#34;image-20231213193647388&#34; /&gt;&lt;/p&gt;
&lt;p&gt;该命令用于将指定的 6 个节点连接为一个分布式系统。  &lt;code&gt;--cluster replicas 1&lt;/code&gt;  &lt;font color=&#39;red&#39;&gt;指定每个 master 会带有一个 slave 作为副本&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;回车后会立即看到如下日志：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213193728569.png&#34; alt=&#34;image-20231213193728569&#34; /&gt;&lt;/p&gt;
&lt;p&gt;输入 yes 后回车，系统就会将以上显示的动态配置信息真正的应用到节点上，然后就可看到如下日志：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213193902008.png&#34; alt=&#34;image-20231213193902008&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;测试集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试集群&#34;&gt;#&lt;/a&gt; 测试集群&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213194244750.png&#34; alt=&#34;image-20231213194244750&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通过  &lt;code&gt;cluster nodes&lt;/code&gt;  命令可以&lt;font color=&#39;red&#39;&gt;查看系统中各节点的关系及连接情况&lt;/font&gt;。只要能看到每个节点给出 connected，就说明分布式系统已经成功搭建。不过，对于客户端连接命令 redis-cli，需要注意两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数 - c：表示这是要连接一个 “集群”，而非是一个节点。&lt;/li&gt;
&lt;li&gt;端口号：可以使用 6 个中的任意一个。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;关闭集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关闭集群&#34;&gt;#&lt;/a&gt; 关闭集群&lt;/h5&gt;
&lt;p&gt;对于分布式系统的关闭，只需将各个节点 shutdown 即可。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213194413240.png&#34; alt=&#34;image-20231213194413240&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;连接集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接集群&#34;&gt;#&lt;/a&gt; 连接集群&lt;/h4&gt;
&lt;p&gt;无论要怎样操作分布式系统，都需要首先连接上。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213194657202.png&#34; alt=&#34;image-20231213194657202&#34; /&gt;&lt;/p&gt;
&lt;p&gt;与之前单机连接相比的唯一区别就是增加了参数 - c。&lt;/p&gt;
&lt;h4 id=&#34;写入数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写入数据&#34;&gt;#&lt;/a&gt; 写入数据&lt;/h4&gt;
&lt;h5 id=&#34;key-单个写入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#key-单个写入&#34;&gt;#&lt;/a&gt; key 单个写入&lt;/h5&gt;
&lt;p&gt;无论 value 类型为 String 还是 List、Set 等集合类型，只要写入时操作的是一个 key，那么在分布式系统中就没有问题。例如：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213194800157.png&#34; alt=&#34;image-20231213194800157&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213195107814.png&#34; alt=&#34;image-20231213195107814&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;key-批量操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#key-批量操作&#34;&gt;#&lt;/a&gt; key 批量操作&lt;/h5&gt;
&lt;p&gt;对一次写入多个 key 的操作，&lt;font color=&#39;red&#39;&gt;由于多个 key 会计算出多个 slot，多个 slot 可能会对应多个节点。而由于&lt;strong&gt;一次只能写入一个节点，所以该操作会报错&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213195136514.png&#34; alt=&#34;image-20231213195136514&#34; /&gt;&lt;/p&gt;
&lt;p&gt;不过，系统也提供了一种对批量 key 的操作方案，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;为这些 key 指定一个统一的 group，让这个 group 作为计算 slot 的唯一值&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231213195151905.png&#34; alt=&#34;image-20231213195151905&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;集群查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群查询&#34;&gt;#&lt;/a&gt; 集群查询&lt;/h4&gt;
&lt;h5 id=&#34;查询-key-的-slot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查询-key-的-slot&#34;&gt;#&lt;/a&gt; 查询 key 的 slot&lt;/h5&gt;
&lt;p&gt;通过  &lt;code&gt;cluster keyslot&lt;/code&gt;  可以&lt;font color=&#39;red&#39;&gt;查询指定 key 的 slot&lt;/font&gt;。例如，下面是查询 emp 的 slot。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231214003835665.png&#34; alt=&#34;image-20231214003835665&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;查询-slot-中-key-的数量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查询-slot-中-key-的数量&#34;&gt;#&lt;/a&gt; 查询 slot 中 key 的数量&lt;/h5&gt;
&lt;p&gt;通过  &lt;code&gt;cluster countkeysinslot&lt;/code&gt;  命令可以查看到指定 slot 所包含的 key 的个数。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231214003913529.png&#34; alt=&#34;image-20231214003913529&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;查询-slot-中的-key&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查询-slot-中的-key&#34;&gt;#&lt;/a&gt; 查询 slot 中的 key&lt;/h5&gt;
&lt;p&gt;通过  &lt;code&gt;cluster getkeysinslot&lt;/code&gt;  命令可以查看到指定 slot 所包含的 key。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231214003941285.png&#34; alt=&#34;image-20231214003941285&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;故障转移failover&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#故障转移failover&#34;&gt;#&lt;/a&gt; 故障转移（failover）&lt;/h4&gt;
&lt;h5 id=&#34;模拟故障&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模拟故障&#34;&gt;#&lt;/a&gt; 模拟故障&lt;/h5&gt;
&lt;p&gt;通过  &lt;code&gt;cluster nodes&lt;/code&gt;  命令可以查看&lt;font color=&#39;red&#39;&gt;集群的整体架构及连接情况&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231214150028063.png&#34; alt=&#34;image-20231214150028063&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当然，也可以通过  &lt;code&gt;info replication&lt;/code&gt;  查看&lt;font color=&#39;red&#39;&gt;当前客户端连接的节点的角色&lt;/font&gt;。可以看到，6381 节点是 master，其 slave 为 6383 节点。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231214150155289.png&#34; alt=&#34;image-20231214150155289&#34; /&gt;&lt;/p&gt;
&lt;p&gt;为了模拟 6381 宕机，直接将其 shutdown。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231214150205563.png&#34; alt=&#34;image-20231214150205563&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通过客户端连接上 6383 节点后可以查看到，&lt;font color=&#39;red&#39;&gt;6383 节点已经自动晋升为了 master&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231214150223922.png&#34; alt=&#34;image-20231214150223922&#34; /&gt;&lt;/p&gt;
&lt;p&gt;重启 6381 节点后查看其角色，发现&lt;font color=&#39;red&#39;&gt; 6381 节点自动成为了 6383 节点的 slave&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231214150239399.png&#34; alt=&#34;image-20231214150239399&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;全覆盖需求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全覆盖需求&#34;&gt;#&lt;/a&gt; 全覆盖需求&lt;/h5&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;如果某 slot 范围对应节点的 master 与 slave 全部宕机，那么整个分布式系统是否还可以对外提供读服务&lt;/font&gt;，就取决于属性  &lt;code&gt;cluster-require-full-coverage&lt;/code&gt;  的设置。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231214150545505.png&#34; alt=&#34;image-20231214150545505&#34; /&gt;&lt;/p&gt;
&lt;p&gt;该属性有两种取值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;yes&lt;/font&gt;：默认值。要求所有 slot 节点必须全覆盖的情况下系统才能运行。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;no&lt;/font&gt;：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;slot 节点不全的情况下系统也可以提供查询服务&lt;/font&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;集群扩容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群扩容&#34;&gt;#&lt;/a&gt; 集群扩容&lt;/h4&gt;
&lt;p&gt;下面要在正在运行的分布式系统中添加两个新的节点：端口号为 6386 的节点为 master 节点，其下会有一个端口号为 6387 的 slave 节点。&lt;/p&gt;
&lt;h5 id=&#34;复制并修改-2-个配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复制并修改-2-个配置文件&#34;&gt;#&lt;/a&gt; 复制并修改 2 个配置文件&lt;/h5&gt;
&lt;p&gt;使用 redis6380.conf 复制出 2 个配置文件 redis6386.conf 与 redis6387.conf，并修改其中的各处端口号为相应端口号，为集群扩容做前期准备。&lt;/p&gt;
&lt;h5 id=&#34;启动系统与-2-个节点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动系统与-2-个节点&#34;&gt;#&lt;/a&gt; 启动系统与 2 个节点&lt;/h5&gt;
&lt;p&gt;由于要演示的是在分布式系统运行期间的动态扩容，所以这里先启动分布式系统。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231215172635503.png&#34; alt=&#34;image-20231215172635503&#34; /&gt;&lt;/p&gt;
&lt;p&gt;要添加的两个节点是两个 Redis，所以需要先将它们启动。只不过，在没有添加到分布式系统之前，它们两个是孤立节点，每个节点与其它任何节点都没有关系。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231215172655817.png&#34; alt=&#34;image-20231215172655817&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;添加-master-节点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加-master-节点&#34;&gt;#&lt;/a&gt; 添加 master 节点&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231215172700376.png&#34; alt=&#34;image-20231215172700376&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通过命令  &lt;code&gt;redis-cli --cluster add-node &amp;#123;newHost&amp;#125;:&amp;#123;newPort&amp;#125; &amp;#123;existHost&amp;#125;:&amp;#123;existPort&amp;#125;&lt;/code&gt;  可以将新的节点添加到系统中。其中 {newHost}:{newPort} 是新添加节点的地址，{existHost}:{existPort} 是&lt;font color=&#39;red&#39;&gt;原系统中的任意节点地址&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;添加成功后可看到如下日志。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231215172848431.png&#34; alt=&#34;image-20231215172848431&#34; /&gt;&lt;/p&gt;
&lt;p&gt;添加成功后，通过  &lt;code&gt;redis-cli -c -p 6386 cluster nodes&lt;/code&gt;  命令可以看到其它 master 节点都分配有 slot，只有新添加的 master 还没有相应的 slot。当然，通过该命令也可以看到该新节点的动态 ID。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231215172946229.png&#34; alt=&#34;image-20231215172946229&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;分配-slot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分配-slot&#34;&gt;#&lt;/a&gt; 分配 slot&lt;/h5&gt;
&lt;p&gt;为新的 master 分配的 slot 来自于其它节点，总 slot 数量并不会改变。所以 slot 分配过程&lt;font color=&#39;red&#39;&gt;本质是一个 slot 的移动过程&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;通过  &lt;code&gt;redis-cli –c --cluster reshard &amp;#123;existIP&amp;#125;:&amp;#123;existPort&amp;#125;&lt;/code&gt;  命令可 **&lt;font color=&#39;red&#39;&gt;开启 slot 分配流程&lt;/font&gt;**。其中地址 {existIP}:{existPort} 为分布式系统中的任意节点地址。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231215173057570.png&#34; alt=&#34;image-20231215173057570&#34; /&gt;&lt;/p&gt;
&lt;p&gt;该流程中会&lt;font color=&#39;red&#39;&gt;首先查询出当前节点的 slot 分配情况&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231215173132186.png&#34; alt=&#34;image-20231215173132186&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后&lt;font color=&#39;red&#39;&gt;开始 Q&amp;amp;A 交互&lt;/font&gt;。一共询问了四个问题，这里有三个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备移动多少 slot？&lt;/li&gt;
&lt;li&gt;准备由谁来接收移动的 slot？&lt;/li&gt;
&lt;li&gt;选择要移动 slot 的源节点，有两种方案。
&lt;ul&gt;
&lt;li&gt;如果选择键入 &lt;font color=&#39;gree&#39;&gt;all&lt;/font&gt;，则所有已存在 slot 的节点都将作为 slot 源节点，即该方案将进行一次 slot 全局大分配。&lt;/li&gt;
&lt;li&gt;也可以选择&lt;font color=&#39;gree&#39;&gt;其它部分节点&lt;/font&gt;作为 slot 源节点。此时将源节点的动态 ID 复制到这里，每个 ID 键入完毕后回车，然后再复制下一个 slot 源节点动态 ID，直至最后一个键入完毕回车后再键入 done。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里键入的是 all，进行全局大分配。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231215175514516.png&#34; alt=&#34;image-20231215175514516&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其首先会检测指定的 slot 源节点的数据，然后制定出 reshard 的方案。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231215180639548.png&#34; alt=&#34;image-20231215180639548&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里会再进行一次 Q&amp;amp;A 交互，询问是否想继续处理推荐的方案。键入 yes，然后开始真正的全局分配，直至完成。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231215180704120.png&#34; alt=&#34;image-20231215180704120&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时再通过 redis-cli -c -p 6386 cluster nodes 命令查看节点信息，可以看到 6386 节点中已经分配了 slot，只不过分配的 slot 编号并不连续。 master 节点新增完成。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231215180725935.png&#34; alt=&#34;image-20231215180725935&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;添加-slave-节点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加-slave-节点&#34;&gt;#&lt;/a&gt; 添加 slave 节点&lt;/h5&gt;
&lt;p&gt;现要将 6387 节点添加为 6386 节点的 slave。 当然，首先要确保 6387 节点的 Redis 是启动状态。&lt;/p&gt;
&lt;p&gt;通过  &lt;code&gt;redis-cli --cluster add-node &amp;#123;newHost&amp;#125;:&amp;#123;newPort&amp;#125; &amp;#123;existHost&amp;#125;:&amp;#123;existPort&amp;#125; --cluster-slave --cluster-master-id masterID&lt;/code&gt;  命令可将新添加的节点直接添加为指定 master 的 slave。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231215180849727.png&#34; alt=&#34;image-20231215180849727&#34; /&gt;&lt;/p&gt;
&lt;p&gt;回车后可看到如下的日志，说明添加成功。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231215180904899.png&#34; alt=&#34;image-20231215180904899&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时再通过 redis-cli -c -p 6386 cluster nodes 命令可以看到其已经添加成功，且为指定 master 的 slave。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231215180939876.png&#34; alt=&#34;image-20231215180939876&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;集群缩容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群缩容&#34;&gt;#&lt;/a&gt; 集群缩容&lt;/h4&gt;
&lt;p&gt;下面要将 slave 节点 6387 与 master 节点 6386 从分布式系统中删除。&lt;/p&gt;
&lt;h5 id=&#34;删除-slave-节点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除-slave-节点&#34;&gt;#&lt;/a&gt; 删除 slave 节点&lt;/h5&gt;
&lt;p&gt;对于 slave 节点，可以直接通过  &lt;code&gt;redis-cli --cluster del-node &amp;lt;delHost&amp;gt;:&amp;lt;delPort&amp;gt; delNodeID&lt;/code&gt;  命令删除。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231216113753611.png&#34; alt=&#34;image-20231216113753611&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时再查看集群，发现已经没有了 6387 节点。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231216113855438.png&#34; alt=&#34;image-20231216113855438&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;移出-master-的-slot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移出-master-的-slot&#34;&gt;#&lt;/a&gt; 移出 master 的 slot&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;在删除一个 master 之前，必须要保证该 master 上没有分配有 slot，否则无法删除&lt;/font&gt;&lt;/strong&gt;。所以，在删除一个 master 之前，需要先将其上分配的 slot 移出。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231216114101043.png&#34; alt=&#34;image-20231216114101043&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以上交互指定的是将 6386 节点中的 1999 个 slot 移动到 6380 节点。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要删除的节点所包含的 slot 数量在前面检测结果中都是可以看到的，例如， 6386 中的并不是 2000 个，而是 1999 个&lt;/li&gt;
&lt;li&gt;What is the receiving node ID？仅能指定一个接收节点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回车后继续。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231216114332934.png&#34; alt=&#34;image-20231216114332934&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231216114400814.png&#34; alt=&#34;image-20231216114400814&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时再查看发现，6386 节点中已经没有 slot 了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231216121516825.png&#34; alt=&#34;image-20231216121516825&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;删除-master-节点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除-master-节点&#34;&gt;#&lt;/a&gt; 删除 master 节点&lt;/h5&gt;
&lt;p&gt;此时就可以删除 6386 节点了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231216121543342.png&#34; alt=&#34;image-20231216121543342&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时再查看集群，发现已经没有了 6386 节点。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231216121555920.png&#34; alt=&#34;image-20231216121555920&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;局限性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#局限性&#34;&gt;#&lt;/a&gt; 局限性&lt;/h3&gt;
&lt;p&gt;Redis Cluster 存在一些使用限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅支持 0 号数据库&lt;/li&gt;
&lt;li&gt;批量 key 操作支持有限&lt;/li&gt;
&lt;li&gt;分区仅限于 key&lt;/li&gt;
&lt;li&gt;事务支持有限&lt;/li&gt;
&lt;li&gt;不支持分级管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;redis-cluster-在扩容缩容期间可以提供服务吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-cluster-在扩容缩容期间可以提供服务吗&#34;&gt;#&lt;/a&gt; Redis Cluster 在扩容 / 缩容期间可以提供服务吗？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;Redis Cluster 扩容和缩容本质是进行重新分片，动态迁移哈希槽。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了保证 Redis Cluster 在扩容和缩容期间依然能够对外正常提供服务，Redis Cluster 提供了重定向机制，两种不同的类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;ASK 重定向&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;MOVED 重定向&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从客户端的角度来看，ASK 重定向是下面这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送请求命令，如果请求的 key 对应的哈希槽还在当前节点的话，就直接响应客户端的请求。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;如果客户端请求的 key 对应的哈希槽当前正在迁移至新的节点，就会返回  &lt;code&gt;-ASK&lt;/code&gt;  重定向错误，告知客户端要将请求发送到哈希槽被迁移到的目标节点&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;客户端收到 -ASK 重定向错误后，将会临时（一次性）重定向，自动向目标节点发送一条 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcy9hc2tpbmcv&#34;&gt;ASKING&lt;/span&gt; 命令。也就是说，接收到 ASKING 命令的节点会强制执行一次请求，下次再来需要重新提前发送 ASKING 命令。&lt;/li&gt;
&lt;li&gt;客户端发送真正的请求命令。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;ASK 重定向并不会同步更新客户端缓存的哈希槽分配信息&lt;/font&gt;，也就是说，客户端对正在迁移的相同哈希槽的请求依然会发送到原节点而不是目标节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/ca358827-2d14-40cd-ab6a-64ec1ea21428.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;如果客户端请求的 key 对应的哈希槽已经迁移完成的话，就会返回  &lt;code&gt;-MOVED&lt;/code&gt;  重定向错误，告知客户端当前哈希槽是由哪个节点负责，客户端向目标节点发送请求并更新缓存的哈希槽分配信息&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;cap-定理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cap-定理&#34;&gt;#&lt;/a&gt; CAP 定理&lt;/h3&gt;
&lt;h4 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h4&gt;
&lt;p&gt;CAP 定理指的是 **&lt;font color=&#39;#B32015&#39;&gt;在一个分布式系统中，一致性（C）、可用性（A）、分区容错性（P）三者不可兼得&lt;/font&gt;**。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;一致性（Consistency）&lt;/font&gt;：分布式系统中多个主机之间是否能够保持数据一致的特性。即，&lt;font color=&#39;red&#39;&gt;当系统数据发生更新操作后，各个主机中的数据仍然处于一致的状态&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;可用性（Availability）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;系统提供的服务必须一直处于可用的状态&lt;/font&gt;，即对于用户的每一个请求，系统总是可以在有限的时间内对用户做出响应。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;分区容错性（Partition tolerance）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;分布式系统在遇到任何&lt;strong&gt;网络分区故障&lt;/strong&gt;时，仍能够保证对外提供满足一致性和可用性的服务&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;定理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定理&#34;&gt;#&lt;/a&gt; 定理&lt;/h4&gt;
&lt;p&gt;CAP 定理的内容是：&lt;font color=&#39;red&#39;&gt;对于分布式系统，网络环境相对是不可控的，出现网络分区是不可避免的，因此系统必须具备分区容错性&lt;/font&gt;。但 **&lt;font color=&#39;red&#39;&gt;系统不能同时保证一致性（C）与可用性（A）。即要么 CP，要么 AP&lt;/font&gt;**。&lt;/p&gt;
&lt;h4 id=&#34;base-理论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#base-理论&#34;&gt;#&lt;/a&gt; BASE 理论&lt;/h4&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;BASE 是对 CAP 中一致性和可用性权衡的结果&lt;/font&gt;，其来源于对大规模互联网系统分布式实践的结论，是基于 CAP 定理逐步演化而来的，由以下三个短语的简写组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt; &lt;code&gt;B&lt;/code&gt; asically  &lt;code&gt;A&lt;/code&gt; vailable（基本可用）&lt;/font&gt;：分布式系统在出现不可预知故障的时候，&lt;font color=&#39;red&#39;&gt;允许损失部分可用性&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt; &lt;code&gt;S&lt;/code&gt; oft state（软状态）&lt;/font&gt;：允许系统数据存在的中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即&lt;font color=&#39;red&#39;&gt;允许系统主机间进行数据同步的过程存在一定延时&lt;/font&gt;。软状态，其实就是一种灰度状态，过渡状态。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt; &lt;code&gt;E&lt;/code&gt; ventually consistent（最终一致性）&lt;/font&gt;：强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是&lt;font color=&#39;red&#39;&gt;需要系统保证最终数据能够达到一致，而不需要保证系统数据的实时一致性&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BASE 理论的核心思想是：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;即使无法做到强一致性，但每个系统都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;cap-应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cap-应用&#34;&gt;#&lt;/a&gt; CAP 应用&lt;/h4&gt;
&lt;h5 id=&#34;zookeepercp-模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zookeepercp-模式&#34;&gt;#&lt;/a&gt; Zookeeper：CP 模式&lt;/h5&gt;
&lt;p&gt;Zookeeper 遵循的是 CP 模式，即保证了一致性（C），但牺牲了可用性（A）。&lt;font color=&#39;red&#39;&gt;当 Leader 节点中的数据发生了变化后，在 Follower 还没有同步完成之前，整个 Zookeeper 集群是不对外提供服务的&lt;/font&gt;。如果此时有客户端来访问数据，则客户端会因访问超时而发生重试。不过，由于 Leader 的选举非常快，所以这种重试对于用户来说几乎是感知不到的。所以说，Zookeeper 保证了一致性，但牺牲了可用性。&lt;/p&gt;
&lt;h5 id=&#34;consulcp-模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#consulcp-模式&#34;&gt;#&lt;/a&gt; Consul：CP 模式&lt;/h5&gt;
&lt;h5 id=&#34;redisap-模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redisap-模式&#34;&gt;#&lt;/a&gt; Redis：AP 模式&lt;/h5&gt;
&lt;p&gt;Redis 遵循的是 AP 模式，即保证了可用性（A），但牺牲了一致性（C）。&lt;/p&gt;
&lt;h5 id=&#34;eurekaap-模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eurekaap-模式&#34;&gt;#&lt;/a&gt; Eureka：AP 模式&lt;/h5&gt;
&lt;h5 id=&#34;nacosap-模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nacosap-模式&#34;&gt;#&lt;/a&gt; Nacos：AP 模式&lt;/h5&gt;
&lt;p&gt;Nacos 在做注册中心时，默认是 AP 的。但其也支持 CP 模式，但需要用户提交请求进行转换。&lt;/p&gt;
&lt;h1 id=&#34;使用规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用规范&#34;&gt;#&lt;/a&gt; 使用规范&lt;/h1&gt;
&lt;p&gt;实际使用 Redis 的过程中，我们尽量要准守一些常见的规范，比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;使用连接池&lt;/font&gt;：避免频繁创建关闭客户端连接。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;尽量不使用 O (n) 指令&lt;/font&gt;，使用 O (n) 命令时要关注 n 的数量：像  &lt;code&gt;KEYS *&lt;/code&gt; 、 &lt;code&gt;HGETALL&lt;/code&gt; 、 &lt;code&gt;LRANGE&lt;/code&gt; 、 &lt;code&gt;SMEMBERS&lt;/code&gt; 、 &lt;code&gt;SINTER&lt;/code&gt; / &lt;code&gt;SUNION&lt;/code&gt; / &lt;code&gt;SDIFF&lt;/code&gt;  等 O (n) 命令并非不能使用，但是需要明确 n 的值。另外，有遍历的需求可以使用  &lt;code&gt;HSCAN&lt;/code&gt; 、 &lt;code&gt;SSCAN&lt;/code&gt; 、 &lt;code&gt;ZSCAN&lt;/code&gt;  代替。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;使用批量操作，减少网络传输&lt;/font&gt;：原生批量操作命令（比如  &lt;code&gt;MGET&lt;/code&gt; 、 &lt;code&gt;MSET&lt;/code&gt;  等等）、pipeline、Lua 脚本。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;尽量不用 Redis 事务，用 Lua 脚本代替&lt;/font&gt;：Redis 事务实现的功能比较鸡肋，可以使用 Lua 脚本代替。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;禁止长时间开启 monitor&lt;/font&gt;：对性能影响比较大。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;控制 key 的生命周期&lt;/font&gt;：避免 Redis 中存放了太多不经常被访问的数据。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;相关文章推荐：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzUzMTA2Nw==&#34;&gt;阿里云 Redis 开发规范&lt;/span&gt;。&lt;/p&gt;
&lt;h1 id=&#34;lua-脚本-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lua-脚本-2&#34;&gt;#&lt;/a&gt; Lua 脚本&lt;/h1&gt;
&lt;h1 id=&#34;分布式锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式锁&#34;&gt;#&lt;/a&gt; 分布式锁&lt;/h1&gt;
&lt;h1 id=&#34;️重要知识点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#️重要知识点&#34;&gt;#&lt;/a&gt; ⭐️重要知识点&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/database/mysql/MySQL-JavaGuide/</guid>
            <title>MySQL-JavaGuide</title>
            <link>http://example.com/database/mysql/MySQL-JavaGuide/</link>
            <category term="数据库" scheme="http://example.com/categories/database/" />
            <category term="MySQL" scheme="http://example.com/categories/database/mysql/" />
            <pubDate>Fri, 17 Nov 2023 19:50:54 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt; MySQL&lt;/h1&gt;
&lt;h2 id=&#34;数据库基础知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库基础知识&#34;&gt;#&lt;/a&gt; 数据库基础知识&lt;/h2&gt;
&lt;h3 id=&#34;数据库-数据库管理系统-数据库系统-数据库管理员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库-数据库管理系统-数据库系统-数据库管理员&#34;&gt;#&lt;/a&gt; 数据库，数据库管理系统，数据库系统，数据库管理员&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt;（DataBase 简称  &lt;code&gt;DB&lt;/code&gt; ）：就是信息的集合，或者说是由数据库管理系统管理的数据的集合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库管理系统&lt;/strong&gt;（Database Management System 简称  &lt;code&gt;DBMS&lt;/code&gt; ）：是一种操纵和管理数据库的大型软件，通常用于建立、使用和维护数据库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库系统&lt;/strong&gt;（Data Base System，简称  &lt;code&gt;DBS&lt;/code&gt; ）：通常由软件、数据库和数据管理员 (DBA) 组成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库管理员&lt;/strong&gt;（Database Administrator, 简称  &lt;code&gt;DBA&lt;/code&gt; ）：负责全面管理和控制数据库系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;元组-码-候选码-主码-外码-主属性-非主属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#元组-码-候选码-主码-外码-主属性-非主属性&#34;&gt;#&lt;/a&gt; 元组，码，候选码，主码，外码，主属性，非主属性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;元组&lt;/strong&gt;（tuple）：是关系数据库中的基本概念，关系是一张表，表中的&lt;font color=&#39;red&#39;&gt;每行（即数据库中的每条记录）就是一个元组&lt;/font&gt;，每列就是一个属性。在二维表里，元组也称为行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;码&lt;/strong&gt;：码就是&lt;font color=&#39;red&#39;&gt;能唯一标识实体的属性&lt;/font&gt;，对应表中的列。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;候选码&lt;/strong&gt;：若关系中的&lt;font color=&#39;red&#39;&gt;某一属性或属性组的值能唯一标识一个元组，而其任何、子集都不能再标识&lt;/font&gt;，则称该属性组为候选码。例如：在学生实体中，“学号” 是能唯一的区分学生实体的，同时又假设 “姓名”、“班级” 的属性组合足以区分学生实体，那么 {学号} 和 {姓名，班级} 都是候选码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主码&lt;/strong&gt;：主码也叫主键。主码是从候选码中选出来的。&lt;font color=&#39;red&#39;&gt;一个实体集中只能有一个主码，但可以有多个候选码&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外码&lt;/strong&gt;：外码也叫外键。如果一个关系中的一个属性是另外一个关系中的主码则这个属性为外码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主属性&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;候选码中出现过的属性称为主属性&lt;/font&gt;。比如关系 工人（工号，身份证号，姓名，性别，部门）. 显然工号和身份证号都能够唯一标示这个关系，所以都是候选码。工号、身份证号这两个属性就是主属性。如果主码是一个属性组，那么属性组中的属性都是主属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非主属性：&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;不包含在任何一个候选码中的属性称为非主属性&lt;/font&gt;。比如在关系 —— 学生（学号，姓名，年龄，性别，班级）中，主码是 “学号”，那么其他的 “姓名”、“年龄”、“性别”、“班级” 就都可以称为非主属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;er-图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#er-图&#34;&gt;#&lt;/a&gt; ER 图&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ER 图&lt;/strong&gt; 全称是 Entity Relationship Diagram（&lt;font color=&#39;red&#39;&gt;实体联系图&lt;/font&gt;），提供了表示实体类型、属性和联系的方法，用来设计数据库。&lt;/p&gt;
&lt;p&gt;ER 图由下面 3 个要素组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实体&lt;/strong&gt;：通常是现实世界的业务对象，当然使用一些逻辑对象也可以。比如对于一个校园管理系统，会涉及学生、教师、课程、班级等等实体。在 ER 图中，实体使用&lt;font color=&#39;red&#39;&gt;矩形框&lt;/font&gt;表示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;属性&lt;/strong&gt;：即某个实体拥有的属性，属性用来描述组成实体的要素，对于产品设计来说可以理解为字段。在 ER 图中，属性使用&lt;font color=&#39;red&#39;&gt;椭圆形&lt;/font&gt;表示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;联系&lt;/strong&gt;：即实体与实体之间的关系，在 ER 图中用&lt;font color=&#39;red&#39;&gt;菱形&lt;/font&gt;表示，这个关系不仅有业务关联关系，还能通过数字表示实体之间的数量对照关系。例如，一个班级会有多个学生就是一种实体间的联系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图是一个学生选课的 ER 图，每个学生可以选若干门课程，同一门课程也可以被若干人选择，所以它们之间的关系是&lt;font color=&#39;red&#39;&gt;多对多（M: N&lt;/font&gt;）。另外，还有其他两种实体之间的关系是：&lt;font color=&#39;red&#39;&gt;1 对 1（1:1）&lt;/font&gt;、&lt;font color=&#39;red&#39;&gt;1 对多（1: N）&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231129163909791.png&#34; alt=&#34;image-20231129163909791&#34; /&gt;&lt;/p&gt;
&lt;center&gt;学生与课程之间联系的E-R图&lt;/center&gt;
&lt;h3 id=&#34;数据库三大范式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库三大范式&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟数据库三大范式&lt;/mark&gt;&lt;/h3&gt;
&lt;p&gt;数据库范式有 3 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1NF (第一范式)：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;属性不可再分&lt;/font&gt;&lt;/strong&gt;，即每个属性都是不可分割的原子项。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2NF (第二范式)：满足第一范式；且 **&lt;font color=&#39;red&#39;&gt;不存在部分函数依赖&lt;/font&gt;**，即&lt;font color=&#39;red&#39;&gt;非主属性必须完全依赖于主属性&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主属性即主键；完全依赖是针对于联合主键的情况，非主键列不能只依赖于主键的一部分；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3NF (第三范式)：满足第二范式；且 **&lt;font color=&#39;red&#39;&gt;不存在传递函数依赖&lt;/font&gt;**，即非主属性必须直接依赖于主属性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不推荐使用外键与级联&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不推荐使用外键与级联&#34;&gt;#&lt;/a&gt; 不推荐使用外键与级联&lt;/h3&gt;
&lt;p&gt;对于外键和级联，阿里巴巴开发手册这样说到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【强制】&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;不得使用外键与级联，一切外键概念必须在应用层解决&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;说明：以学生和成绩的关系为例，学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外键与级联更新适用于单机低并发，&lt;font color=&#39;red&#39;&gt;不适合分布式、高并发集群&lt;/font&gt;；&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;级联更新是强阻塞，存在数据库更新风暴的风险&lt;/font&gt;；&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;外键影响数据库的插入速度&lt;/font&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;存储过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储过程&#34;&gt;#&lt;/a&gt; 存储过程&lt;/h3&gt;
&lt;p&gt;我们可以把存储过程看成是&lt;strong&gt;一些 SQL 语句的集合，中间加了点逻辑控制语句&lt;/strong&gt;。存储过程在业务比较复杂的时候是非常实用的，比如很多时候我们完成一个操作可能需要写一大串 SQL 语句，这时候我们就可以写有一个存储过程，这样也方便了我们下一次的调用。&lt;font color=&#39;red&#39;&gt;存储过程一旦调试完成通过后就能稳定运行&lt;/font&gt;，另外，&lt;font color=&#39;red&#39;&gt;使用存储过程比单纯 SQL 语句执行要快，因为存储过程是预编译过的&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;存储过程在互联网公司应用不多，因为&lt;font color=&#39;red&#39;&gt;存储过程难以调试和扩展，而且没有移植性，还会消耗数据库资源&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;阿里巴巴 Java 开发手册里要求 **&lt;font color=&#39;red&#39;&gt;禁止使用存储过程&lt;/font&gt;**。&lt;/p&gt;
&lt;h3 id=&#34;drop-delete-与-truncate-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#drop-delete-与-truncate-的区别&#34;&gt;#&lt;/a&gt; drop、delete 与 truncate 的区别&lt;/h3&gt;
&lt;h4 id=&#34;用法不同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用法不同&#34;&gt;#&lt;/a&gt; 用法不同&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drop&lt;/code&gt;  (丢弃数据):  &lt;code&gt;drop table 表名&lt;/code&gt;  ，直接将表都删除掉，在&lt;strong&gt;删除表&lt;/strong&gt;的时候使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;truncate&lt;/code&gt;  (清空数据) :  &lt;code&gt;truncate table 表名&lt;/code&gt;  ，只删除表中的数据，&lt;font color=&#39;red&#39;&gt;再插入数据的时候自增长 id 又从 1 开始&lt;/font&gt;，在&lt;strong&gt;清空表&lt;/strong&gt;中数据的时候使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt; （删除数据） :  &lt;code&gt;delete from 表名 where 列名=值&lt;/code&gt; ，&lt;strong&gt;删除某一行&lt;/strong&gt;的数据，如果不加  &lt;code&gt;where&lt;/code&gt;  子句和 &lt;code&gt;truncate table 表名&lt;/code&gt; 作用类似。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：&lt;strong&gt; &lt;code&gt;truncate&lt;/code&gt;  和  &lt;code&gt;delete&lt;/code&gt;  只删除数据不删除表的结构 (定义)，执行  &lt;code&gt;drop&lt;/code&gt;  语句，此表的结构也会删除，也就是执行  &lt;code&gt;drop&lt;/code&gt;  之后对应的表不复存在。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;属于不同的数据库语言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属于不同的数据库语言&#34;&gt;#&lt;/a&gt; 属于不同的数据库语言&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;truncate&lt;/code&gt;  和  &lt;code&gt;drop&lt;/code&gt;  属于 **DDL (数据定义语言)** 语句，操作立即生效，原数据不放到 rollback segment 中，&lt;font color=&#39;red&#39;&gt;不能回滚&lt;/font&gt;，操作不触发 trigger。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而  &lt;code&gt;delete&lt;/code&gt;  语句是 **DML (数据库操作语言)** 语句，这个操作会放到 rollback segement 中，&lt;font color=&#39;red&#39;&gt;可以回滚&lt;/font&gt;，事务提交之后才生效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DML 语句和 DDL 语句区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DML 是数据库操作语言（Data Manipulation Language）的缩写，是指&lt;font color=&#39;red&#39;&gt;对数据库中表记录的操作&lt;/font&gt;，主要包括表记录的插入、更新、删除和查询，是开发人员日常使用最频繁的操作。&lt;/li&gt;
&lt;li&gt;DDL （Data Definition Language）是数据定义语言的缩写，简单来说，就是&lt;font color=&#39;red&#39;&gt;对数据库内部的对象进行创建、删除、修改&lt;/font&gt;的操作语言。&lt;/li&gt;
&lt;li&gt;二者最大区别：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt; DML 只是对表内部数据的操作，而不涉及到表的定义、结构的修改&lt;/font&gt;&lt;/strong&gt;，更不会涉及到其他对象。DDL 语句更多的被数据库管理员（DBA）所使用，一般的开发人员很少使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，由于 &lt;code&gt;select&lt;/code&gt;  不会对表进行破坏，所以有的地方也会把 &lt;code&gt;select&lt;/code&gt;  单独区分开叫做数据库查询语言 DQL（Data Query Language）。&lt;/p&gt;
&lt;h4 id=&#34;执行速度不同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行速度不同&#34;&gt;#&lt;/a&gt; 执行速度不同&lt;/h4&gt;
&lt;p&gt;一般来说： &lt;code&gt;drop&lt;/code&gt;  &amp;gt;  &lt;code&gt;truncate&lt;/code&gt;  &amp;gt;  &lt;code&gt;delete&lt;/code&gt; （这个我没有设计测试过）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;  命令执行的时候&lt;font color=&#39;red&#39;&gt;会产生数据库的 &lt;code&gt;binlog&lt;/code&gt;  日志，而日志记录是需要消耗时间的&lt;/font&gt;，但是也有个&lt;font color=&#39;red&#39;&gt;好处是方便数据回滚恢复&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;truncate&lt;/code&gt;  命令执行的时候&lt;font color=&#39;red&#39;&gt;不会产生数据库日志&lt;/font&gt;，因此比 &lt;code&gt;delete&lt;/code&gt;  要快。除此之外，还&lt;font color=&#39;red&#39;&gt;会把表的自增值重置和索引恢复到初始大小等&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drop&lt;/code&gt;  命令会&lt;font color=&#39;red&#39;&gt;把表占用的空间全部释放掉&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tips：你应该更多地关注在使用场景上，而不是执行效率。&lt;/p&gt;
&lt;h3 id=&#34;数据库设计通常分为哪几步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库设计通常分为哪几步&#34;&gt;#&lt;/a&gt; 数据库设计通常分为哪几步？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;需求分析&lt;/strong&gt;：分析用户的需求，包括数据、功能和性能需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;概念结构设计&lt;/strong&gt;：主要采用 E-R 模型进行设计，包括画 &lt;code&gt; E-R 图&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逻辑结构设计&lt;/strong&gt;：通过将 E-R 图转换成 &lt;code&gt;表&lt;/code&gt; ，实现从 E-R 模型到关系模型的转换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物理结构设计&lt;/strong&gt;：主要是为所设计的数据库&lt;font color=&#39;red&#39;&gt;选择合适的存储结构和存取路径&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库实施&lt;/strong&gt;：包括编程、测试和试运行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库的运行和维护&lt;/strong&gt;：系统的运行与数据库的日常维护。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;nosql非关系型数据库基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nosql非关系型数据库基础&#34;&gt;#&lt;/a&gt; NoSQL（非关系型数据库）基础&lt;/h2&gt;
&lt;h3 id=&#34;nosql-是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nosql-是什么&#34;&gt;#&lt;/a&gt; NoSQL 是什么？&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;NoSQL&lt;/code&gt; （Not Only SQL）非关系型的数据库，主要针对的是&lt;font color=&#39;red&#39;&gt;键值、文档、图形类型&lt;/font&gt;数据存储。并且，NoSQL 数据库&lt;font color=&#39;red&#39;&gt;天生支持分布式，数据冗余和数据分片&lt;/font&gt;等特性，&lt;font color=&#39;red&#39;&gt;旨在提供可扩展、高可用、高性能的数据存储解决方案&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;一个常见的误解是 NoSQL 数据库或非关系型数据库不能很好地存储关系型数据。&lt;font color=&#39;red&#39;&gt;NoSQL 数据库可以存储关系型数据&lt;/font&gt;— 它们与关系型数据库的存储方式不同。&lt;/p&gt;
&lt;p&gt;NoSQL 数据库代表：HBase 、Cassandra、MongoDB、Redis。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/sql-nosql-tushi.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;sql数据库-和-nosql数据库-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql数据库-和-nosql数据库-的区别&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟SQL 数据库 和 NoSQL 数据库 的区别&lt;/mark&gt;&lt;/h3&gt;
&lt;p&gt;即关系型数据库与非关系型数据库的区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th&gt;SQL 数据库&lt;/th&gt;
&lt;th&gt;NoSQL 数据库&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;发展历程&lt;/td&gt;
&lt;td&gt;开发于 1970 年代，重点是&lt;font color=&#39;red&#39;&gt;减少数据重复&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;开发于 2000 年代后期，重点是&lt;font color=&#39;red&#39;&gt;提升可扩展性&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;减少大规模数据的存储成本&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;例子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Oracle&lt;/code&gt; 、 &lt;code&gt;MySQL&lt;/code&gt; 、Microsoft SQL Server 、PostgreSQL&lt;/td&gt;
&lt;td&gt;文档： &lt;code&gt;MongoDB&lt;/code&gt; 、CouchDB，键值： &lt;code&gt;Redis&lt;/code&gt;  、DynamoDB，宽列：Cassandra 、  &lt;code&gt;HBase&lt;/code&gt; ，图表： &lt;code&gt;Neo4j &lt;/code&gt; 、 Amazon Neptune、Giraph&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数据存储模型&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;结构化存储&lt;/font&gt;，具有固定行和列的表格&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;非结构化存储&lt;/font&gt;。文档：JSON 文档，键值：键值对，宽列：包含行和动态列的表，图：节点和边&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数据模式&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;必须先定义好表结构，才能添加数据&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;数据可以在任何时候任何地方添加，不需要预先定义&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;事务支持&lt;/td&gt;
&lt;td&gt;支持对事务原子性细粒度控制，并且易于回滚事务&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;没有事务这个概念&lt;/font&gt;，每一个数据集都是原子级别的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ACID 属性&lt;/td&gt;
&lt;td&gt;提供&lt;font color=&#39;red&#39;&gt;原子性、一致性、隔离性、持久性&lt;/font&gt;(ACID) 属性&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;通常不支持 ACID 事务&lt;/font&gt;，为了可扩展、高性能进行了权衡，少部分支持比如 MongoDB 。不过，MongoDB 对 ACID 事务 的支持和 MySQL 还是有所区别的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;查询速度&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;数据存储在磁盘中，查询速度较慢&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;数据存储在缓存中，且不需要经过 SQL 层的解析，查询速度较快&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;性能&lt;/td&gt;
&lt;td&gt;性能通常取决于磁盘子系统。要获得最佳性能，通常需要&lt;font color=&#39;red&#39;&gt;优化查询、索引、表结构&lt;/font&gt;。&lt;/td&gt;
&lt;td&gt;性能通常由底层硬件集群大小、网络延迟以及调用应用程序来决定。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;扩展&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;垂直&lt;/font&gt;（使用性能更强大的服务器进行扩展）、读写分离、分库分表&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;横向&lt;/font&gt;（增加服务器的方式横向扩展，通常是基于分片机制）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用途&lt;/td&gt;
&lt;td&gt;普通企业级的项目的数据存储&lt;/td&gt;
&lt;td&gt;用途广泛比如图数据库支持分析和遍历连接数据之间的关系、键值数据库可以处理大量数据扩展和极高的状态变化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;查询语法&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;结构化查询语言 (SQL)&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;数据访问语法可能&lt;font color=&#39;red&#39;&gt;因数据库而异&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;nosql-数据库的优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nosql-数据库的优势&#34;&gt;#&lt;/a&gt; NoSQL 数据库的优势&lt;/h3&gt;
&lt;p&gt;NoSQL 数据库非常适合许多现代应用程序，例如移动、Web 和游戏等应用程序，它们需要灵活、可扩展、高性能和功能强大的数据库以提供卓越的用户体验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;灵活性：&lt;/strong&gt; NoSQL 数据库通常提供灵活的架构，以实现更快速、更多的迭代开发。&lt;font color=&#39;red&#39;&gt;灵活的数据模型&lt;/font&gt;使 NoSQL 数据库成为 **&lt;font color=&#39;red&#39;&gt;半结构化和非结构化数据&lt;/font&gt;** 的理想之选。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可扩展性：&lt;/strong&gt; NoSQL 数据库通常被设计为&lt;font color=&#39;red&#39;&gt;通过使用分布式硬件集群来横向扩展&lt;/font&gt;，而不是通过添加昂贵和强大的服务器来纵向扩展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高性能：&lt;/strong&gt; NoSQL 数据库&lt;font color=&#39;red&#39;&gt;针对特定的数据模型和访问模式进行了优化&lt;/font&gt;，这与尝试使用关系数据库完成类似功能相比可实现更高的性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强大的功能：&lt;/strong&gt; NoSQL 数据库提供功能&lt;font color=&#39;red&#39;&gt;强大的 API 和数据类型&lt;/font&gt;，专门针对其各自的数据模型而构建。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nosql-数据库有哪些类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nosql-数据库有哪些类型&#34;&gt;#&lt;/a&gt; NoSQL 数据库有哪些类型？&lt;/h3&gt;
&lt;p&gt;NoSQL 数据库主要可以分为下面四种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;键值&lt;/strong&gt; ：键值数据库是一种较简单的数据库，其中&lt;font color=&#39;red&#39;&gt;每个项都包含键和值&lt;/font&gt;。这是极为灵活的 NoSQL 数据库类型，因为应用可以完全控制 value 字段中存储的内容，没有任何限制。 &lt;code&gt;Redis&lt;/code&gt;  和 DynanoDB 是两款非常流行的键值数据库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档&lt;/strong&gt; ：文档数据库中的数据被存储在类似于  &lt;code&gt;JSON&lt;/code&gt; （JavaScript 对象表示法）对象的文档中，非常清晰直观。&lt;font color=&#39;red&#39;&gt;每个文档包含成对的字段和值&lt;/font&gt;。这些值通常可以是各种类型，包括字符串、数字、布尔值、数组或对象等，并且它们的&lt;font color=&#39;red&#39;&gt;结构通常与开发者在代码中使用的对象保持一致&lt;/font&gt;。 &lt;code&gt;MongoDB&lt;/code&gt;  就是一款非常流行的文档数据库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图形&lt;/strong&gt; ：图形数据库旨在轻松构建和运行与高度连接的数据集一起使用的应用程序。图形数据库的典型使用案例包括社交网络、推荐引擎、欺诈检测和知识图谱。 &lt;code&gt;Neo4j&lt;/code&gt;  和 Giraph 是两款非常流行的图形数据库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;宽列&lt;/strong&gt; ：宽列存储数据库&lt;font color=&#39;red&#39;&gt;非常适合需要存储大量的数据&lt;/font&gt;。Cassandra 和  &lt;code&gt;HBase&lt;/code&gt;  是两款非常流行的宽列存储数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面这张图片来源于 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2VuLXVzL2RvdG5ldC9hcmNoaXRlY3R1cmUvY2xvdWQtbmF0aXZlL3JlbGF0aW9uYWwtdnMtbm9zcWwtZGF0YQ==&#34;&gt;微软的官方文档 | 关系数据与 NoSQL 数据&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/types-of-nosql-datastores.png&#34; alt=&#34;NoSQL 数据模型&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;mysql-常见面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-常见面试题&#34;&gt;#&lt;/a&gt; MySQL 常见面试题&lt;/h2&gt;
&lt;h3 id=&#34;mysql基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql基础&#34;&gt;#&lt;/a&gt; MySQL 基础&lt;/h3&gt;
&lt;h4 id=&#34;什么是关系型数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是关系型数据库&#34;&gt;#&lt;/a&gt; 什么是关系型数据库？&lt;/h4&gt;
&lt;p&gt;顾名思义， &lt;code&gt;关系型数据库（RDBMS，Relational Database Management System）&lt;/code&gt; 就是&lt;font color=&#39;red&#39;&gt;一种建立在&lt;u&gt;关系模型&lt;/u&gt;的基础上的数据库&lt;/font&gt;。关系模型表明了数据库中所存储的&lt;font color=&#39;red&#39;&gt;数据之间的联系（一对一、一对多、多对多）&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;关系型数据库中，我们的数据都被存放在了各种表中（比如用户表），表中的每一行就存放着一条数据（比如一个用户的信息）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/5e3c1a71724a38245aa43b02_99bf70d46cc247be878de9d3a88f0c44.png&#34; alt=&#34;关系型数据库表关系&#34; /&gt;&lt;/p&gt;
&lt;p&gt;大部分关系型数据库都使用 SQL 来操作数据库中的数据。并且，大部分关系型数据库都支持&lt;font color=&#39;red&#39;&gt;事务的四大特性 (ACID)&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;常见的关系型数据库：MySQL、PostgreSQL、Oracle、SQL Server、SQLite（微信本地的聊天记录的存储就是用的 SQLite） ......。&lt;/p&gt;
&lt;h4 id=&#34;什么是-sql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是-sql&#34;&gt;#&lt;/a&gt; 什么是 SQL？&lt;/h4&gt;
&lt;p&gt;SQL 是一种 &lt;code&gt;结构化查询语言(Structured Query Language)&lt;/code&gt; ，专门用来与数据库打交道，目的是提供一种&lt;font color=&#39;red&#39;&gt;从数据库中读写数据&lt;/font&gt;的简单有效的方法。&lt;/p&gt;
&lt;p&gt;几乎所有的主流关系数据库都支持 SQL ，适用性非常强。并且，一些非关系型数据库也兼容 SQL 或者使用的是类似于 SQL 的查询语言。&lt;/p&gt;
&lt;p&gt;SQL 可以帮助我们：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建数据库、数据表、字段；&lt;/li&gt;
&lt;li&gt;在数据库中增加，删除，修改，查询数据；&lt;/li&gt;
&lt;li&gt;新建视图、函数、存储过程；&lt;/li&gt;
&lt;li&gt;对数据库中的数据进行简单的数据分析；&lt;/li&gt;
&lt;li&gt;搭配 Hive，Spark SQL 做大数据；&lt;/li&gt;
&lt;li&gt;搭配 SQLFlow 做机器学习；&lt;/li&gt;
&lt;li&gt;......&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;什么是-mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是-mysql&#34;&gt;#&lt;/a&gt; 什么是 MySQL？&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/20210327143351823.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL 是一种关系型数据库，主要用于持久化存储我们的系统中的一些数据比如用户信息。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于 MySQL 是开源免费并且比较成熟的数据库，因此，MySQL 被大量使用在各种系统中。任何人都可以在 GPL (General Public License) 的许可下下载并根据个性化的需要对其进行修改。MySQL 的默认端口号是&lt;strong&gt; 3306&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;mysql-有什么优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-有什么优点&#34;&gt;#&lt;/a&gt; MySQL 有什么优点？&lt;/h4&gt;
&lt;p&gt;这个问题本质上是在问 MySQL 如此流行的原因。&lt;/p&gt;
&lt;p&gt;MySQL 主要具有下面这些优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;成熟稳定，功能完善。&lt;/li&gt;
&lt;li&gt;开源免费。&lt;/li&gt;
&lt;li&gt;文档丰富，既有详细的官方文档，又有非常多优质文章可供参考学习。&lt;/li&gt;
&lt;li&gt;开箱即用，操作简单，维护成本低。&lt;/li&gt;
&lt;li&gt;兼容性好，支持常见的操作系统，支持多种开发语言。&lt;/li&gt;
&lt;li&gt;社区活跃，生态完善。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事务支持&lt;/strong&gt;优秀， InnoDB 存储引擎默认使用 REPEATABLE-READ 并不会有任何性能损失，并且 InnoDB 实现的 REPEATABLE-READ 隔离级别其实是可以解决幻读问题发生的。&lt;/li&gt;
&lt;li&gt;支持&lt;strong&gt;分库分表、读写分离、高可用&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;mysql-中主键和-unique-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-中主键和-unique-的区别&#34;&gt;#&lt;/a&gt; &lt;mark&gt;MySQL 中主键和 unique 的区别&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;主键和 UNIQUE 约束&lt;font color=&#39;red&#39;&gt;都能保证某个列或者列组合的唯⼀性&lt;/font&gt;，但是有以下不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;⼀张表中只能定义⼀个主键&lt;/font&gt;，却可以定义多个 UNIQUE 约束！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;主键列不允许存放 NULL&lt;/font&gt;，⽽声明了 UNIQUE 属性的列可以存放 NULL ，⽽且 NULL 可以重复地出现在多条记录中！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mysql字段类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql字段类型&#34;&gt;#&lt;/a&gt; MySQL 字段类型&lt;/h3&gt;
&lt;h4 id=&#34;整数类型的-unsigned-属性有什么用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数类型的-unsigned-属性有什么用&#34;&gt;#&lt;/a&gt; 整数类型的 UNSIGNED 属性有什么用？&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;UNSIGNED 属性来表示不允许负值的无符号整数，因此可以将正整数的上限提高一倍&lt;/strong&gt;，因为它不需要存储负数值。&lt;/p&gt;
&lt;p&gt;例如， TINYINT UNSIGNED 类型的取值范围是 0 ~ 255，而普通的 TINYINT 类型的值范围是 -128 ~ 127。INT UNSIGNED 类型的取值范围是 0 ~ 4,294,967,295，而普通的 INT 类型的值范围是 2,147,483,648 ~ 2,147,483,647。&lt;/p&gt;
&lt;p&gt;对于&lt;font color=&#39;red&#39;&gt;从 0 开始递增的 ID 列&lt;/font&gt;，使用 UNSIGNED 属性可以非常适合，因为不允许负值并且可以拥有更大的上限范围，提供了更多的 ID 值可用。&lt;/p&gt;
&lt;h4 id=&#34;char-和-varchar-的区别是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#char-和-varchar-的区别是什么&#34;&gt;#&lt;/a&gt; CHAR 和 VARCHAR 的区别是什么？&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;CHAR 是定长字符串，VARCHAR 是变长字符串。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CHAR 在存储时会在右边&lt;font color=&#39;red&#39;&gt;填充空格&lt;/font&gt;以达到指定的长度，检索时会&lt;font color=&#39;red&#39;&gt;去掉空格&lt;/font&gt;；VARCHAR 在存储时需要&lt;font color=&#39;red&#39;&gt;使用 1 或 2 个额外字节记录字符串的长度&lt;/font&gt;，检索时不需要处理。&lt;/li&gt;
&lt;li&gt;CHAR 更适合存储&lt;font color=&#39;red&#39;&gt;长度较短或者长度都差不多&lt;/font&gt;的字符串，例如 Bcrypt 算法、MD5 算法加密后的密码、身份证号码。VARCHAR 类型适合存储&lt;font color=&#39;red&#39;&gt;长度不确定或者差异较大&lt;/font&gt;的字符串，例如用户昵称、文章标题等。&lt;/li&gt;
&lt;li&gt;CHAR (M) 和 VARCHAR (M) 的 M 都代表能够保存的字符数的最大值，&lt;font color=&#39;red&#39;&gt;无论是字母、数字还是中文，每个都只占用一个字符&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;varchar100和-varchar10的区别是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#varchar100和-varchar10的区别是什么&#34;&gt;#&lt;/a&gt; VARCHAR (100) 和 VARCHAR (10) 的区别是什么？&lt;/h4&gt;
&lt;p&gt;VARCHAR (100) 和 VARCHAR (10) 都是变长类型，表示能存储最多 100 个字符和 10 个字符。因此，&lt;font color=&#39;red&#39;&gt;VARCHAR (100) 可以满足更大范围的字符存储需求&lt;/font&gt;，有更好的业务拓展性。而 VARCHAR (10) 存储超过 10 个字符时，就需要修改表结构才可以。&lt;/p&gt;
&lt;p&gt;虽说 VARCHAR (100) 和 VARCHAR (10) 能存储的字符范围不同，但二者存储相同的字符串，所占用磁盘的存储空间其实是一样的，这也是很多人容易误解的一点。&lt;/p&gt;
&lt;p&gt;不过，&lt;font color=&#39;red&#39;&gt;VARCHAR (100) 会消耗更多的内存&lt;/font&gt;。这是因为 VARCHAR 类型在内存中操作时，&lt;font color=&#39;red&#39;&gt;通常会分配固定大小的内存块&lt;/font&gt;来保存值，即使用字符类型中定义的长度。例如在进行排序的时候，VARCHAR (100) 是按照 100 这个长度来进行的，也就会消耗更多内存。&lt;/p&gt;
&lt;h4 id=&#34;decimal-和-floatdouble-的区别是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#decimal-和-floatdouble-的区别是什么&#34;&gt;#&lt;/a&gt; DECIMAL 和 FLOAT/DOUBLE 的区别是什么？&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;DECIMAL 是定点数，可以存储精确的小数值；FLOAT/DOUBLE 是浮点数，只能存储近似的小数值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Java 中，MySQL 的 DECIMAL 类型对应的是 Java 类  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;为什么不推荐使用-text-和-blob&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么不推荐使用-text-和-blob&#34;&gt;#&lt;/a&gt; 为什么不推荐使用 TEXT 和 BLOB？&lt;/h4&gt;
&lt;p&gt;TEXT 类型类似于 CHAR（0-255 字节）和 VARCHAR（0-65,535 字节），但可以存储更长的字符串，即&lt;font color=&#39;cornflowerblue&#39;&gt;长文本数据&lt;/font&gt;，例如博客内容。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;可存储大小&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TINYTEXT&lt;/td&gt;
&lt;td&gt;0-255 字节&lt;/td&gt;
&lt;td&gt;一般文本字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TEXT&lt;/td&gt;
&lt;td&gt;0-65,535 字节&lt;/td&gt;
&lt;td&gt;长文本字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEDIUMTEXT&lt;/td&gt;
&lt;td&gt;0-16,772,150 字节&lt;/td&gt;
&lt;td&gt;较大文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LONGTEXT&lt;/td&gt;
&lt;td&gt;0-4,294,967,295 字节&lt;/td&gt;
&lt;td&gt;极大文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;BLOB 类型主要用于存储&lt;font color=&#39;cornflowerblue&#39;&gt;二进制大对象，例如图片、音视频等文件&lt;/font&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;可存储大小&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TINYBLOB&lt;/td&gt;
&lt;td&gt;0-255 字节&lt;/td&gt;
&lt;td&gt;短文本二进制字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BLOB&lt;/td&gt;
&lt;td&gt;0-65KB&lt;/td&gt;
&lt;td&gt;二进制字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEDIUMBLOB&lt;/td&gt;
&lt;td&gt;0-16MB&lt;/td&gt;
&lt;td&gt;二进制形式的长文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LONGBLOB&lt;/td&gt;
&lt;td&gt;0-4GB&lt;/td&gt;
&lt;td&gt;二进制形式的极大文本数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在日常开发中，很少使用 TEXT 类型，但偶尔会用到，而 BLOB 类型则基本不常用。&lt;font color=&#39;red&#39;&gt;如果预期长度范围可以通过 VARCHAR 来满足，建议避免使用 TEXT&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;数据库规范通常不推荐使用 BLOB 和 TEXT 类型，这两种类型具有一些缺点和限制，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;不能有默认值&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;在使用临时表时&lt;font color=&#39;red&#39;&gt;无法使用内存临时表，只能在磁盘上创建临时表&lt;/font&gt;（《高性能 MySQL》书中有提到）&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;检索效率较低&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;不能直接创建索引&lt;/font&gt;，需要指定前缀长度&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;会消耗大量的网络和 IO 带宽&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;可能导致表上的&lt;font color=&#39;red&#39;&gt; DML 操作变慢&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;datetime-和-timestamp-的区别是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#datetime-和-timestamp-的区别是什么&#34;&gt;#&lt;/a&gt; DATETIME 和 TIMESTAMP 的区别是什么？&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;DATETIME 类型没有时区信息，TIMESTAMP 和时区有关&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;TIMESTAMP 只需要使用 4 个字节的存储空间，但是 DATETIME 需要耗费 8 个字节的存储空间&lt;/font&gt;。但是，这样同样造成了一个问题，&lt;font color=&#39;red&#39;&gt;Timestamp 表示的时间范围更小&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DATETIME：1000-01-01 00:00:00 ~ 9999-12-31 23:59:59&lt;/li&gt;
&lt;li&gt;Timestamp：1970-01-01 00:00:01 ~ 2037-12-31 23:59:59&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;null-和-的区别是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#null-和-的区别是什么&#34;&gt;#&lt;/a&gt; NULL 和 &#39;&#39; 的区别是什么？&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;NULL&lt;/code&gt;  跟  &lt;code&gt;&#39;&#39;&lt;/code&gt; (空字符串) 是两个完全不一样的值，区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;NULL&lt;/code&gt;  代表一个不确定的值，但占用空间&lt;/strong&gt;。就算是两个  &lt;code&gt;NULL&lt;/code&gt; ，它俩也不一定相等。例如， &lt;code&gt;SELECT NULL=NULL&lt;/code&gt;  的结果为 false，但是在我们使用 &lt;code&gt;DISTINCT&lt;/code&gt; ， &lt;code&gt;GROUP BY&lt;/code&gt; ， &lt;code&gt;ORDER BY&lt;/code&gt;  时， &lt;code&gt;NULL&lt;/code&gt;  又被认为是相等的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;&#39;&#39;&lt;/code&gt;  是长度为 0 的字符串，不占用空间&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt; &lt;code&gt;NULL&lt;/code&gt;  会影响聚合函数的结果&lt;/font&gt;。例如， &lt;code&gt;SUM&lt;/code&gt; 、 &lt;code&gt;AVG&lt;/code&gt; 、 &lt;code&gt;MIN&lt;/code&gt; 、 &lt;code&gt;MAX&lt;/code&gt;  等聚合函数会忽略  &lt;code&gt;NULL&lt;/code&gt;  值。 &lt;code&gt;COUNT&lt;/code&gt;  的处理方式取决于参数的类型。如果参数是  &lt;code&gt;*&lt;/code&gt; ( &lt;code&gt;COUNT(*)&lt;/code&gt; )，则会统计所有的记录数，包括  &lt;code&gt;NULL&lt;/code&gt;  值；如果参数是某个字段名 ( &lt;code&gt;COUNT(列名)&lt;/code&gt; )，则会忽略  &lt;code&gt;NULL&lt;/code&gt;  值，只统计非空值的个数。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;查询  &lt;code&gt;NULL&lt;/code&gt;  值时，必须使用  &lt;code&gt;IS NULL&lt;/code&gt;  或  &lt;code&gt;IS NOT NULLl&lt;/code&gt;  来判断&lt;/font&gt;，而不能使用 =、!=、 &amp;lt;、&amp;gt; 之类的比较运算符。而 &lt;code&gt;&#39;&#39;&lt;/code&gt;  是可以使用这些比较运算符的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;因此，MySQL 不建议使用  &lt;code&gt;NULL&lt;/code&gt;  作为列默认值。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;boolean-类型如何表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#boolean-类型如何表示&#34;&gt;#&lt;/a&gt; Boolean 类型如何表示？&lt;/h4&gt;
&lt;p&gt;MySQL 中没有专门的布尔类型，而是&lt;strong&gt;用 TINYINT (1) 类型来表示布尔值&lt;/strong&gt;。TINYINT (1) 类型可以存储 0 或 1，分别对应 false 或 true。&lt;/p&gt;
&lt;h3 id=&#34;mysql基础架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql基础架构&#34;&gt;#&lt;/a&gt; MySQL 基础架构&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;配合 &lt;a href=&#34;&#34;&gt;SQL 语句在 MySQL 中的执行过程&lt;/a&gt; 这篇文章来理解 MySQL 基础架构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个 SQL 语句在 MySQL 中的执行流程，包括 SQL 的查询在 MySQL 内部会怎么流转，SQL 语句的更新是怎么完成的。&lt;/p&gt;
&lt;p&gt;在分析之前先看看 MySQL 的基础架构，知道了 MySQL 由那些组件组成，以及这些组件的作用是什么，可以帮助我们理解和解决这些问题。&lt;/p&gt;
&lt;h4 id=&#34;1-mysql-基础架构分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-mysql-基础架构分析&#34;&gt;#&lt;/a&gt; 1、MySQL 基础架构分析&lt;/h4&gt;
&lt;h5 id=&#34;11-架构概览&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-架构概览&#34;&gt;#&lt;/a&gt; 1.1、架构概览&lt;/h5&gt;
&lt;p&gt;下图是 MySQL 的一个简要架构图，可以很清晰地看到客户端的一条 SQL 语句在 MySQL 内部是如何执行的。&lt;/p&gt;
&lt;p&gt;从图中可以看出，MySQL 主要由下面几部分构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;连接器：&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;连接管理、身份认证和权限&lt;/font&gt;相关 (登录 MySQL 的时候)。&lt;/li&gt;
&lt;li&gt;** 查询缓存：** 执行查询语句的时候，会&lt;font color=&#39;red&#39;&gt;先查询缓存，命中则直接返回&lt;/font&gt;（&lt;font color=&#39;red&#39;&gt;MySQL 8.0 版本后移除&lt;/font&gt;，因为这个功能不太实用）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分析器：&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;对 SQL 语句进行词法分析、语法分析&lt;/font&gt;。说白了就是要先看 SQL 语句要干嘛，再检查 SQL 语句语法是否正确。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化器：&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;执行计划生产，索引选择&lt;/font&gt;。按照 MySQL 认为&lt;font color=&#39;red&#39;&gt;最优的方案&lt;/font&gt;去执行。&lt;/li&gt;
&lt;li&gt;** 执行器：** 执行语句，然后&lt;font color=&#39;red&#39;&gt;从存储引擎返回数据&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插件式存储引擎&lt;/strong&gt;：主要负责&lt;font color=&#39;red&#39;&gt;数据的存储和读取&lt;/font&gt;，采用的是 &lt;code&gt;插件式架构&lt;/code&gt; ，支持 InnoDB、MyISAM、Memory 等多种存储引擎。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/13526879-3037b144ed09eb88.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;MySQL 简要架构图&lt;/center&gt;
&lt;p&gt;MySQL 主要分为 Server 层和存储引擎层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Server 层&lt;/strong&gt;：主要包括&lt;font color=&#39;red&#39;&gt;连接器、查询缓存、分析器、优化器、执行器&lt;/font&gt;等，所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图，函数等，还有一个通用的日志模块 **&lt;font color=&#39;red&#39;&gt; binlog 日志模块&lt;/font&gt;**。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储引擎层&lt;/strong&gt;：主要负责&lt;font color=&#39;red&#39;&gt;数据的存储和读取&lt;/font&gt;，采用可以替换的插件式架构，支持 &lt;font color=&#39;red&#39;&gt;InnoDB、MyISAM、Memory&lt;/font&gt; 等多个存储引擎。其中 InnoDB 引擎有自有的日志模块 **&lt;font color=&#39;red&#39;&gt; redolog 日志模块&lt;/font&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5 版本开始就被当做默认存储引擎了&lt;/font&gt;**。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;12-server-层的组件介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-server-层的组件介绍&#34;&gt;#&lt;/a&gt; 1.2、Server 层的组件介绍&lt;/h5&gt;
&lt;h6 id=&#34;1连接器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1连接器&#34;&gt;#&lt;/a&gt; 1）连接器&lt;/h6&gt;
&lt;p&gt;连接器主要和 **&lt;font color=&#39;red&#39;&gt;身份认证和权限相关&lt;/font&gt;** 的功能相关，就好比一个级别很高的门卫一样。&lt;/p&gt;
&lt;p&gt;主要负责用户登录数据库，进行用户的身份认证，包括校验账户密码，权限等操作。如果用户账户密码已通过，连接器会到权限表中查询该用户的所有权限，之后在这个连接里的权限逻辑判断都&lt;font color=&#39;red&#39;&gt;仅依赖起始连接成功时读取到的权限数据&lt;/font&gt;。也就是说，&lt;font color=&#39;red&#39;&gt;后续只要这个连接不断开，即使管理员修改了该用户的权限，该用户也是不受影响的&lt;/font&gt;。&lt;/p&gt;
&lt;h6 id=&#34;2查询缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2查询缓存&#34;&gt;#&lt;/a&gt; 2）查询缓存&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;从 MySQL8.0 后移除&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查询缓存主要 **&lt;font color=&#39;red&#39;&gt;用来缓存所执行的 SELECT 语句以及该语句的结果集&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;若连接成功建立，&lt;font color=&#39;red&#39;&gt;执行查询语句的时候，会先查询缓存&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 会先校验这个 SQL 是否执行过，&lt;font color=&#39;red&#39;&gt;以 Key-Value 的形式缓存在内存中，Key 是查询语句，Value 是结果集&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;如果缓存 key 被命中，就会直接返回给客户端。&lt;/li&gt;
&lt;li&gt;如果缓存 key 没有命中，就会执行后续的操作，&lt;font color=&#39;red&#39;&gt;完成后也会把结果缓存起来，方便下一次调用&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;MySQL 查询不建议使用缓存，因为表更新会清空表上的所有查询缓存，导致查询缓存频繁失效&lt;/font&gt;&lt;/strong&gt;。假如你对一个表更新的话，这个表上的所有的查询缓存都会被清空。对于不经常更新的数据来说，使用缓存还是可以的。&lt;/p&gt;
&lt;p&gt;MySQL 8.0 版本后删除了缓存的功能，官方也是认为该功能在实际的应用场景比较少，所以干脆直接删掉了。&lt;/p&gt;
&lt;h6 id=&#34;3分析器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3分析器&#34;&gt;#&lt;/a&gt; 3）分析器&lt;/h6&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;MySQL 没有命中缓存，那么就会进入分析器&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;第一步，词法分析&lt;/font&gt;&lt;/strong&gt;：一条 SQL 语句有多个字符串组成，首先要&lt;font color=&#39;red&#39;&gt;提取关键字&lt;/font&gt;，比如 select，提出查询的表，提出字段名，提出查询条件等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;第二步，语法分析&lt;/font&gt;&lt;/strong&gt;：主要就是判断你输入的 SQL 是否正确，&lt;font color=&#39;red&#39;&gt;判断是否符合 MySQL 的语法&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;完成这 2 步之后，MySQL 就准备开始执行了，但是如何执行，怎么执行是最好的结果呢？这个时候就需要优化器上场了。&lt;/p&gt;
&lt;h6 id=&#34;4优化器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4优化器&#34;&gt;#&lt;/a&gt; 4）优化器&lt;/h6&gt;
&lt;p&gt;优化器的作用就是 **&lt;font color=&#39;red&#39;&gt;按照它认为的最优执行方案去执行&lt;/font&gt;**，比如多个索引的时候该&lt;font color=&#39;red&#39;&gt;如何选择索引&lt;/font&gt;，多表查询的时候&lt;font color=&#39;red&#39;&gt;如何选择关联顺序&lt;/font&gt;等。&lt;/p&gt;
&lt;p&gt;可以说，经过了优化器之后，这个语句具体该如何执行就已经定下来。&lt;/p&gt;
&lt;h6 id=&#34;5执行器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5执行器&#34;&gt;#&lt;/a&gt; 5）执行器&lt;/h6&gt;
&lt;p&gt;当选择了执行方案后，MySQL 就准备开始执行了。首先执行前会校验该用户有没有权限，如果没有权限，就会返回错误信息。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;如果有权限，就会去调用存储引擎的接口，返回执行结果&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;2-sql-执行过程分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-sql-执行过程分析&#34;&gt;#&lt;/a&gt; 2、SQL 执行过程分析&lt;/h4&gt;
&lt;h5 id=&#34;21-dql-查询语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-dql-查询语句&#34;&gt;#&lt;/a&gt; 2.1、DQL 查询语句&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;select&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;针对 select 语句：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; tb_student  A &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; A&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;18&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; A&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; 张三 &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;结合上面的说明，我们分析下这个语句的执行流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;检查该语句是否有权限&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;如果没有权限，直接返回错误信息。&lt;/li&gt;
&lt;li&gt;如果有权限，在 MySQL8.0 版本以前，会&lt;strong&gt;查询缓存&lt;/strong&gt;，以这条 SQL 语句为 key 在内存中查询是否有结果，有则直接返回，无则执行下一步。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过分析器对 SQL 语句进行词法分析、语法分析&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;提取关键元素&lt;/font&gt;，比如提取上面这个语句是查询 select，提取需要查询的表名为 tb_student，需要查询所有的列，查询条件是这个表的 id=&#39;1&#39;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;判断是否有语法错误&lt;/font&gt;，比如关键词是否正确等等，如果检查没问题就执行下一步。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化器确定执行方案&lt;/strong&gt;。上面的 SQL 语句，可以有两种执行方案：a. 先查询学生表中姓名为 “张三” 的学生，然后判断是否年龄是 18。b. 先找出学生中年龄 18 岁的学生，然后再查询姓名为 “张三” 的学生。那么&lt;font color=&#39;red&#39;&gt;优化器根据优化算法选择执行效率最好的一个方案（优化器认为，有时候不一定最好）&lt;/font&gt;。那么确认了执行计划后就准备开始执行了。&lt;/li&gt;
&lt;li&gt;执行语句之前，先进行权限校验，如果没有权限就会返回错误信息。&lt;strong&gt;如果有权限，执行器就会调用存储引擎接口，返回执行结果&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;22-dml-更新语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-dml-更新语句&#34;&gt;#&lt;/a&gt; 2.2、DML 更新语句&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;以 update 为例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;针对 update 语句：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;update&lt;/span&gt; tb_student A &lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt; A&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;19&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; A&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; 张三 &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;font color=&#39;red&#39;&gt;这条语句也基本上会沿着上一个查询的流程走，只不过&lt;strong&gt;执行更新的时候肯定要记录日志&lt;/strong&gt;，这就会引入日志模块了&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;MySQL 自带的日志模块是 &lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;binlog（归档日志）&lt;/font&gt;&lt;/strong&gt;，所有的存储引擎都可以使用。而常用的 InnoDB 引擎还自带了一个日志模块 &lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;redo log（重做日志）&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们就以 InnoDB 模式下来探讨这个语句的执行流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;先查询到这一条数据&lt;/font&gt;（根据 name = 张三），如果有缓存，也是会用到缓存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后拿到查询的语句，&lt;font color=&#39;red&#39;&gt;把 age 改为 19&lt;/font&gt;，然后&lt;font color=&#39;red&#39;&gt;调用存储引擎 API 接口，写入这一行数据&lt;/font&gt;。InnoDB 引擎把数据保存在内存中，同时 **&lt;font color=&#39;red&#39;&gt;InnoDB 引擎记录 redo log，此时 redo log 进入 prepare 状态&lt;/font&gt;**。然后告诉执行器，执行完成了，随时可以提交。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;执行器收到 InnoDB 引擎的通知后，记录 binlog&lt;/font&gt;&lt;/strong&gt;。然后 **&lt;font color=&#39;red&#39;&gt;执行器调用引擎接口，提交 redo log 为提交状态&lt;/font&gt;**。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;为什么要用两个日志模块，用一个日志模块不行吗？&lt;/p&gt;
&lt;p&gt;这是因为最开始 MySQL 并没有 InnoDB 引擎（InnoDB 引擎是其他公司以插件形式插入 MySQL 的），MySQL 自带的引擎是 MyISAM。但是我们知道&lt;font color=&#39;red&#39;&gt; redo log 是 InnoDB 引擎特有的，其他存储引擎都没有，这就导致会没有 crash-safe 的能力&lt;/font&gt;（crash-safe 的能力即使数据库发生异常重启，之前提交的记录都不会丢失），&lt;font color=&#39;red&#39;&gt;而 binlog 日志只能用来归档&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;并不是说只用一个日志模块不可以，只是 **&lt;font color=&#39;red&#39;&gt; InnoDB 引擎就是通过 redo log 来支持事务的&lt;/font&gt;**。那么，又会有同学问，我用两个日志模块，但是不要这么复杂行不行，为什么 redo log 要引入 prepare 预提交状态？这里我们用反证法来说明下为什么要这么做？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先写 redo log 直接提交，然后写 binlog：假设写完 redo log 后，机器挂了，binlog 日志没有被写入，那么机器重启后，这台机器会通过 redo log 恢复数据，但是这个时候 binlog 并没有记录该数据，后续进行机器备份的时候，就会丢失这一条数据，同时主从同步也会丢失这一条数据。&lt;/li&gt;
&lt;li&gt;先写 binlog，然后写 redo log：假设写完了 binlog，机器异常重启了，由于没有 redo log，本机是无法恢复这一条记录的，但是 binlog 又有记录，那么和上面同样的道理，就会产生数据不一致的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;redo log 两阶段提交的方式可以保证数据的一致性&lt;/font&gt;&lt;/strong&gt;。写完 binlog 后，然后再提交 redo log 就会防止出现上述的问题，从而保证了数据的一致性。那么问题来了，有没有一个极端的情况呢？&lt;font color=&#39;red&#39;&gt;假设 redo log 处于 prepare 状态，binlog 也已经写完了，这个时候发生了异常重启会怎么样呢？&lt;/font&gt; 这个就要依赖于 MySQL 的处理机制了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断 redo log 是否完整，如果判断是完整的，就立即提交。&lt;/li&gt;
&lt;li&gt;如果 redo log 只是 prepare，但不是 commit 状态，这个时候就会去判断 binlog 是否完整，如果完整就提交 redo log, 不完整就回滚事务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样就解决了数据一致性的问题。&lt;/p&gt;
&lt;h4 id=&#34;3-小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-小结&#34;&gt;#&lt;/a&gt; 3、小结&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 主要分为 &lt;font color=&#39;cornflowerblue&#39;&gt;Server 层&lt;/font&gt;和&lt;font color=&#39;cornflowerblue&#39;&gt;引擎层&lt;/font&gt;，Server 层主要包括&lt;font color=&#39;red&#39;&gt;连接器、查询缓存、分析器、优化器、执行器&lt;/font&gt;，同时还有一个&lt;font color=&#39;red&#39;&gt;归档日志模块（binlog）&lt;/font&gt;，这个日志模块所有执行引擎都可以共用，&lt;font color=&#39;red&#39;&gt;而重做日志模块（redolog）只有 InnoDB 有&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;Server 层中各组件的功能：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;连接器&lt;/strong&gt;：管理连接、权限验证；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查询缓存&lt;/strong&gt;：命中缓存则直接返回结果；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分析器&lt;/strong&gt;：对 SQL 进行词法分析、语法分析；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化器&lt;/strong&gt;：执行计划生成、选择索引；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行器&lt;/strong&gt;：操作引擎、返回结果；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储引擎&lt;/strong&gt;：存储数据、提供读写接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;引擎层是插件式的，目前主要包括，&lt;font color=&#39;red&#39;&gt;MyISAM、InnoDB、Memory&lt;/font&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;查询语句&lt;/font&gt;的执行流程如下：&lt;font color=&#39;red&#39;&gt;权限校验 ---&amp;gt; 查询缓存（如果命中，直接返回）---&amp;gt; 分析器 ---&amp;gt; 优化器 ---&amp;gt;&lt;strong&gt; 权限校验&lt;/strong&gt; ---&amp;gt; 执行器 ---&amp;gt; 引擎&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;更新语句&lt;/font&gt;执行流程如下：&lt;font color=&#39;red&#39;&gt;分析器 ----&amp;gt; 权限校验 ----&amp;gt; 执行器 ---&amp;gt; 引擎 ---&lt;strong&gt;redo log (prepare 状态)&lt;/strong&gt;---&amp;gt;&lt;strong&gt;binlog&lt;/strong&gt;---&amp;gt;&lt;strong&gt;redo log (commit 状态)&lt;/strong&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;笼统点的回答，&lt;strong&gt;一条 SQL 的执行过程&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;客户端请求 -&amp;gt;&lt;/li&gt;
&lt;li&gt;连接器（验证用户身份，给予权限） -&amp;gt;&lt;/li&gt;
&lt;li&gt;查询缓存（存在缓存则直接返回，不存在则执行后续操作）-&amp;gt;&lt;/li&gt;
&lt;li&gt;分析器（对 SQL 进行词法分析、语法分析） -&amp;gt;&lt;/li&gt;
&lt;li&gt;优化器（选择最优的 SQL 执行方案） -&amp;gt;&lt;/li&gt;
&lt;li&gt;执行器（先检查用户是否有执行权限，有的话才调用引擎接口，执行 SQL）-&amp;gt;&lt;/li&gt;
&lt;li&gt;从引擎层获取数据返回（如果开启查询缓存，则会缓存查询结果）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mysql存储引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql存储引擎&#34;&gt;#&lt;/a&gt; MySQL 存储引擎&lt;/h3&gt;
&lt;h4 id=&#34;mysql-体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-体系结构&#34;&gt;#&lt;/a&gt; MySQL 体系结构&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231125095453053.png&#34; alt=&#34;image-20231125095453053&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;连接层：负责客户端和连接服务，例如连接处理、授权认证、及相关的安全方案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务层：负责 SQL 接口，SQL 的解析和优化，并完成缓存的查询，部分内置函数的执行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有跨存储引擎的功能也在这一层实现，如过程、函数等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引擎层：负责 MySQL 中数据的存储和读取，根据需要选择合适的存储引擎，索引就是在这一层实现的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储层：负责将数据持久化地存储到文件系统中，并完成与存储引擎的交互。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;存储引擎介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储引擎介绍&#34;&gt;#&lt;/a&gt; 存储引擎介绍&lt;/h4&gt;
&lt;p&gt;存储引擎的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储引擎就是&lt;font color=&#39;red&#39;&gt;存储数据、&lt;strong&gt;建立索引&lt;/strong&gt;、更新 / 查询数据&lt;/font&gt;的实现方式。&lt;/li&gt;
&lt;li&gt;存储引擎&lt;font color=&#39;red&#39;&gt;是基于表的&lt;/font&gt;，而不是基于库的。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;默认的存储引擎是 InnoDB&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与存储引擎有关的 SQL 语句：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;建表时指定存储引擎：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; 表名&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询建表语句：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; 表名&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看当前数据库支持的存储引擎：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;show&lt;/span&gt; engines&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常用的存储引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用的存储引擎&#34;&gt;#&lt;/a&gt; &lt;mark&gt;常用的存储引擎&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;重点介绍三种存储引擎 InnoDB、MyISAM、Memory 的特点。&lt;/p&gt;
&lt;h5 id=&#34;innodb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#innodb&#34;&gt;#&lt;/a&gt; InnoDB&lt;/h5&gt;
&lt;p&gt;（1）介绍&lt;/p&gt;
&lt;p&gt;MySQL 5.5 版本开始，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;默认使用 InnoDB 作为存储引擎&lt;/font&gt;&lt;/strong&gt;。它&lt;font color=&#39;red&#39;&gt;擅长处理事务，具有崩溃恢复的特性&lt;/font&gt;，是一种兼顾&lt;font color=&#39;red&#39;&gt;高可靠性、高性能&lt;/font&gt;的通用存储引擎。&lt;/p&gt;
&lt;p&gt;（2）特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;支持事务&lt;/font&gt;&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;DML 操作遵循 ACID 模型&lt;/li&gt;
&lt;li&gt;实现了 SQL 标准定义了&lt;font color=&#39;red&#39;&gt;四个隔离级别&lt;/font&gt;，具有&lt;font color=&#39;red&#39;&gt;提交 (commit) 和回滚 (rollback) 事务&lt;/font&gt;的能力&lt;/li&gt;
&lt;li&gt;提供&lt;font color=&#39;red&#39;&gt;一组用来记录事务性活动的日志文件&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;InnoDB 默认使用的 REPEATABLE-READ（可重读）隔离级别是&lt;font color=&#39;red&#39;&gt;可以解决幻读问题&lt;/font&gt;发生的（基于 MVCC 和 Next-Key Lock）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;支持行级锁&lt;/font&gt;&lt;/strong&gt;：因此 InnoDB &lt;font color=&#39;red&#39;&gt;并发写的性能更高&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;支持外键&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;能维护数据的一致性和完整性&lt;/font&gt;（级联删除、级联更新），&lt;font color=&#39;red&#39;&gt;但对性能有一定的损耗&lt;/font&gt;。但阿里的《Java 开发手册》明令禁止使用外键！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（3）存储文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.sdi&lt;/code&gt; ：表结构&lt;/li&gt;
&lt;li&gt;&lt;mark&gt; &lt;code&gt;.ibd 表空间文件&lt;/code&gt; &lt;/mark&gt;：数据、索引。每张 InnoDB 表对应一个 .ibd 表空间文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231125113620280.png&#34; alt=&#34;image-20231125113620280&#34; /&gt;&lt;/p&gt;
&lt;p&gt;（4）逻辑存储结构&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231125111944812.png&#34; alt=&#34;image-20231125111944812&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表空间（Tablespace）&lt;/strong&gt;：即&lt;font color=&#39;red&#39;&gt; ibd 文件&lt;/font&gt;，由多个 Segment 组成&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;段（Segment）&lt;/strong&gt;：分为&lt;font color=&#39;red&#39;&gt;数据段、索引段、回滚段&lt;/font&gt;等，由 InnoDB 自身管理，由多个 Extent 组成&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;区（Extent）&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;固定大小为 1M，由 64 个连续的 Page 组成&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;页（Page）&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;固定大小为 16 KB&lt;/font&gt;，是 InnoDB 磁盘管理的最小单元&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行（Row）&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;存放行记录数据&lt;/font&gt;，由最后一次事务的 id、回滚指针、各个字段的值组成&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;myisam&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#myisam&#34;&gt;#&lt;/a&gt; MyISAM&lt;/h5&gt;
&lt;p&gt;（1）介绍&lt;/p&gt;
&lt;p&gt;MyISAM 是 MySQL &lt;font color=&#39;red&#39;&gt;早期的&lt;/font&gt;默认存储引擎。&lt;/p&gt;
&lt;p&gt;（2）特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持事务与外键，仅支持表级锁&lt;/li&gt;
&lt;li&gt;灵活的 AUTO_INCREMENT 字段处理&lt;/li&gt;
&lt;li&gt;可被转换为压缩、只读表来节省空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（3）存储文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.sdi&lt;/code&gt; ：表结构&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.MYD&lt;/code&gt; ：数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.MYI&lt;/code&gt; ：索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231125113606459.png&#34; alt=&#34;image-20231125113606459&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;memory&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#memory&#34;&gt;#&lt;/a&gt; Memory&lt;/h5&gt;
&lt;p&gt;（1）介绍&lt;/p&gt;
&lt;p&gt;Memory 引擎表的 **&lt;font color=&#39;red&#39;&gt;数据存储在内存中&lt;/font&gt;**，由于受到硬件问题、或断电问题的影响，只能将这些表作为&lt;font color=&#39;red&#39;&gt;临时表或缓存&lt;/font&gt;使用。&lt;/p&gt;
&lt;p&gt;（2）特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据存放在内存中&lt;/li&gt;
&lt;li&gt;默认采用 &lt;font color=&#39;red&#39;&gt;hash 索引&lt;/font&gt; 结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（3）文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.sdi&lt;/code&gt; ：表结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;特点对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点对比&#34;&gt;#&lt;/a&gt; &lt;mark&gt;特点对比&lt;/mark&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231125113958109.png&#34; alt=&#34;image-20231125113958109&#34; /&gt;&lt;/p&gt;
&lt;p&gt;MySQL 中常用的三种存储引擎分别是：InnoDB、MyISAM、MEMORY，区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;InnoDB&lt;/font&gt;：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;支持事务处理、行级锁、外键，拥有崩溃修复能力、并发控制&lt;/font&gt;&lt;/strong&gt;。如果需要&lt;font color=&#39;red&#39;&gt;对事务的完整性要求比较高&lt;/font&gt;（比如银行），&lt;font color=&#39;red&#39;&gt;要求实现并发控制&lt;/font&gt;（比如售票），那选择 InnoDB 有很大的优势。如果&lt;font color=&#39;red&#39;&gt;需要频繁的更新、删除操作&lt;/font&gt;的数据库，也可以选择 InnoDB，因为支持事务的提交（commit）和回滚（rollback）。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;MyISAM&lt;/font&gt;：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;插入数据快，空间和内存使用比较低&lt;/font&gt;&lt;/strong&gt;。如果表主要是用于&lt;font color=&#39;red&#39;&gt;插入新记录和读出记录&lt;/font&gt;，那么选择 MyISAM 能实现处理高效率。如果应用的&lt;font color=&#39;red&#39;&gt;完整性、并发性要求比较低&lt;/font&gt;，也可以使用。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;MEMORY&lt;/font&gt;：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;所有的数据都在内存中，数据的处理速度快，但是安全性不高&lt;/font&gt;&lt;/strong&gt;。如果&lt;font color=&#39;red&#39;&gt;需要很快的读写速度，对数据的安全性要求较低&lt;/font&gt;，可以选择 MEMOEY。它对表的大小有要求，&lt;font color=&#39;red&#39;&gt;不能建立太大的表&lt;/font&gt;。所以，这类数据库只使用在相对较小的数据库表。如果只是&lt;font color=&#39;red&#39;&gt;临时存放数据，数据量不大，并且不需要较高的数据安全性&lt;/font&gt;，可以选择将数据保存在内存中的 Memory 引擎，MySQL 中使用该引擎 **&lt;font color=&#39;red&#39;&gt;作为临时表，存放查询的中间结果&lt;/font&gt;**。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;存储引擎选择&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储引擎选择&#34;&gt;#&lt;/a&gt; 存储引擎选择&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB：适用于&lt;font color=&#39;red&#39;&gt;较多的数据更新操作&lt;/font&gt;，对&lt;font color=&#39;red&#39;&gt;事务、并发、数据完整性&lt;/font&gt;要求较高的核心数据。&lt;/li&gt;
&lt;li&gt;MyISAM：适用于&lt;font color=&#39;red&#39;&gt;大量的数据读操作&lt;/font&gt;，常被 MongoDB 取代。&lt;/li&gt;
&lt;li&gt;Memory：因为访问速度快，适用于&lt;font color=&#39;red&#39;&gt;临时表、缓存&lt;/font&gt;，但&lt;font color=&#39;red&#39;&gt;对表大小有限制&lt;/font&gt;（太大的表无法缓存到内存中），并且&lt;font color=&#39;red&#39;&gt;无法保障数据的安全性&lt;/font&gt;，常被 Redis 取代。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试题&#34;&gt;#&lt;/a&gt; 面试题&lt;/h4&gt;
&lt;h5 id=&#34;mysql-支持哪些存储引擎默认使用哪个&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-支持哪些存储引擎默认使用哪个&#34;&gt;#&lt;/a&gt; MySQL 支持哪些存储引擎？默认使用哪个？&lt;/h5&gt;
&lt;p&gt;MySQL 支持多种存储引擎，你可以通过  &lt;code&gt;show engines&lt;/code&gt;  命令来查看 MySQL 支持的所有存储引擎。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220510105408703.png&#34; alt=&#34;查看 MySQL 提供的所有存储引擎&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从上图我们可以查看出，&lt;strong&gt;MySQL 5.5.5 之后，默认的存储引擎是 InnoDB&lt;/strong&gt;。并且，&lt;strong&gt;只有 InnoDB 支持事务、行级锁、外键&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;MySQL 5.5.5 之前，MyISAM 是 MySQL 的默认存储引擎。5.5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。&lt;/p&gt;
&lt;h5 id=&#34;mysql-存储引擎架构了解吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-存储引擎架构了解吗&#34;&gt;#&lt;/a&gt; MySQL 存储引擎架构了解吗？&lt;/h5&gt;
&lt;p&gt;MySQL 存储引擎采用的是&lt;strong&gt;插件式架构，支持多种存储引擎&lt;/strong&gt;。我们甚至可以为不同的数据库表设置不同的存储引擎以适应不同场景的需要。&lt;strong&gt;存储引擎是基于表的，而不是数据库。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;myisam-和-innodb-有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#myisam-和-innodb-有什么区别&#34;&gt;#&lt;/a&gt; &lt;mark&gt;MyISAM 和 InnoDB 有什么区别？&lt;/mark&gt;&lt;/h5&gt;
&lt;p&gt;MySQL 5.5 之前，MyISAM 引擎是 MySQL 的默认存储引擎，可谓是风光一时。&lt;/p&gt;
&lt;p&gt;虽然，MyISAM 的性能还行，各种特性也还不错（比如全文索引、压缩、空间函数等）。但是，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;MyISAM 不支持事务、行级锁和外键，而且最大的缺陷就是崩溃后无法自动恢复数据&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;MySQL 5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231108152443561.png&#34; alt=&#34;image-20231108152443561&#34; /&gt;&lt;/p&gt;
&lt;p&gt;言归正传！咱们下面还是来简单对比一下两者：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 是否支持事务&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MyISAM 不支持事务，但&lt;font color=&#39;red&#39;&gt;每次查询都是原子的&lt;/font&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InnoDB 支持 ACID 的事务，实现了四种隔离级别。具有提交 ( &lt;code&gt;commit&lt;/code&gt; ) 和回滚 ( &lt;code&gt;rollback&lt;/code&gt; ) 事务的能力；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;并且 InnoDB 默认的 RR 隔离级别是可以解决幻读问题发生的（基于 MVCC 和 Next-Key Lock）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 MySQL 事务的详细介绍：&lt;a href=&#34;#==4%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB==&#34;&gt;4 种隔离级别&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 是否支持行级锁&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MyISAM 只支持表级锁，即每次操作都是对整个表加锁；&lt;/li&gt;
&lt;li&gt;InnoDB 不仅支持表级锁，&lt;font color=&#39;red&#39;&gt;还支持行级锁（默认），因此支持并发写&lt;/font&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. 是否支持外键&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MyISAM 不支持外键约束；&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;InnoDB 支持外键约束&lt;/font&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;外键对于维护数据一致性非常有帮助，但是&lt;font color=&#39;red&#39;&gt;外键对性能有一定的损耗&lt;/font&gt;。因此，通常情况下，我们是不建议在实际生产项目中使用外键的，在业务代码中进行约束即可！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 是否存储表的总行数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;MyISAM 存储表的总行数&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;InnoDB 不存储表的总行数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5. 存储文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 MyISAM 表有三个文件：表结构文件（.sdi)、数据文件（.MYD）、索引文件（.MYI）&lt;/li&gt;
&lt;li&gt;一个 InnoDB 表有两个文件：表结构文件（.sdi)、&lt;font color=&#39;red&#39;&gt;数据和索引文件（ &lt;code&gt;.ibd 表空间文件&lt;/code&gt; ）&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;6. 是否采用聚集索引&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;MyISAM 采用非聚集索引&lt;/font&gt;，索引文件的数据域存储的是指向数据文件的指针。辅索引与主索引基本一致，但是辅索引不用保证唯一性；&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;InnoDB 主键索采用聚集索引（索引的数域存数据文件本身），辅助索引的数域存储主键的值&lt;/font&gt;。因此从索引查找数据时，需要先通过辅助索引找到主键值，再访问聚集索引。因此最好使用自增主键，防止插入数据时乱序，导致页分裂，性能低下。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;7. 是否支持数据库异常崩溃后的安全恢复&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MyISAM 不支持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;InnoDB 支持数据库异常崩溃后的安全恢复&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 InnoDB 的数据库在异常崩溃后，数据库重新启动时会保证数据库恢复到崩溃前的状态。这个恢复的过程依赖于 InnoDB 的&lt;strong&gt;重做日志模块 &lt;code&gt;redo log&lt;/code&gt; &lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;8. 是否支持 MVCC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;MVCC 可以看作是行级锁的一个升级，可以有效减少加锁操作，提高性能&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MyISAM 不支持，它连行级锁都不支持&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;InnoDB 支持 MVCC&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;9. 索引实现不一样&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然 MyISAM 引擎和 InnoDB 引擎&lt;font color=&#39;red&#39;&gt;都是使用 B+Tree 作为索引结构&lt;/font&gt;，但是两者的实现方式不太一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MyISAM 中，B+Tree 叶节点的 data 域存放的是&lt;font color=&#39;gree&#39;&gt;数据记录的地址&lt;/font&gt;。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为 **&lt;font color=&#39;#B32015&#39;&gt;非聚集索引&lt;/font&gt;**。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InnoDB 中，&lt;font color=&#39;red&#39;&gt;其数据文件本身就是（主）索引文件&lt;/font&gt;，按 B+Tree 组织的一个索引结构，树的叶节点中 key 域是主键，data 域是&lt;font color=&#39;gree&#39;&gt;完整的数据记录&lt;/font&gt;，这被称为 **&lt;font color=&#39;#B32015&#39;&gt;聚集索引&lt;/font&gt;&lt;strong&gt;。而&lt;font color=&#39;red&#39;&gt;其余的索引都作为&lt;/strong&gt;辅助索引 **&lt;/font&gt;，树的叶节点中 key 域是非主键字段，data 域存放的是&lt;font color=&#39;gree&#39;&gt;主键&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在根据主索引搜索时，直接找到 key 所在的节点即可取出完整的数据记录；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而在根据辅助索引查找时，则需要先取出主键的值，然后再走一遍主索引，称为&lt;strong&gt;二次查询（回表）&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;10. 性能有差别&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MyISAM 的读写不能并发，&lt;font color=&#39;red&#39;&gt;它的处理能力跟核数没关系&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;InnoDB 的性能比 MyISAM 更强大&lt;/font&gt;，不管是在读写混合模式下还是只读模式下。且随着 CPU 核数的增加，InnoDB 的读写能力呈线性增长。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/innodb-myisam-performance-comparison.png&#34; alt=&#34;InnoDB 和 MyISAM 性能对比&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;InnoDB 支持事务处理，而 MyISAM 不支持&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;InnoDB 支持行级锁，而 MyISAM 只支持表级锁&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;InnoDB 支持外键，而 MyISAM 不支持&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;InnoDB 支持 MVCC&lt;/font&gt;，而 MyISAM 不支持。&lt;/li&gt;
&lt;li&gt;虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是&lt;font color=&#39;red&#39;&gt;两者的索引实现方式不太一样&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;InnoDB 支持数据库异常崩溃后的安全恢复&lt;/font&gt;，而 MyISAM 不支持。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;InnoDB 的性能比 MyISAM 更强大&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，再分享一张图片给你，这张图片详细对比了常见的几种 MySQL 存储引擎。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/comparison-of-common-mysql-storage-engines.png&#34; alt=&#34;常见的几种 MySQL 存储引擎对比&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;myisam-和-innodb-如何选择&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#myisam-和-innodb-如何选择&#34;&gt;#&lt;/a&gt; MyISAM 和 InnoDB 如何选择？&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;大多数情况使用的都是 InnoDB 存储引擎&lt;/strong&gt;。在某些读密集的情况下，使用 MyISAM 也是合适的。不过，前提是你的项目不介意&lt;font color=&#39;red&#39;&gt; MyISAM 不支持事务、崩溃恢复&lt;/font&gt;等缺点（可是～我们一般都会介意啊！）。&lt;/p&gt;
&lt;h3 id=&#34;innodb-引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#innodb-引擎&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟InnoDB 引擎&lt;/mark&gt;&lt;/h3&gt;
&lt;p&gt;从 MySQL 5.5 版本开始默认使用 InnoDB 作为存储引擎，它擅长处理事务，具有自动崩溃恢复的特性，在日常开发中使用非常广泛。&lt;/p&gt;
&lt;h4 id=&#34;逻辑存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑存储结构&#34;&gt;#&lt;/a&gt; 逻辑存储结构&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231125111944812.png&#34; alt=&#34;image-20231125111944812&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表空间（Tablespace）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;是 InnoDB 逻辑存储结构的最高层&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;每张表都有一个对应的表空间&lt;/font&gt;（.ibd 文件），前提是用户启用了参数 innodb_file_per_table（在 8.0 版本中默认开启）&lt;/li&gt;
&lt;li&gt;即&lt;font color=&#39;red&#39;&gt; ibd 文件&lt;/font&gt;，由多个 Segment 组成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;段（Segment）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;分为&lt;font color=&#39;red&#39;&gt;数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段（Rollback segment）&lt;/font&gt;等&lt;/li&gt;
&lt;li&gt;数据段即 B + 树的叶子节点，索引段即 B + 树的非叶子节点&lt;/li&gt;
&lt;li&gt;由 InnoDB 自身管理，由多个 Extent 组成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;区（Extent）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;是表空间的单元结构&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;固定大小为 1M，由 64 个连续的 Page 组成&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;页（Page）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;是 InnoDB 磁盘管理的最小单元&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;固定大小为 16 KB&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;为了保证页的连续性，InnoDB 一次性从磁盘申请 4~5 个区&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行（Row）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;InnoDB 的数据是按行存放的，Row 存放的就是&lt;font color=&#39;red&#39;&gt;行记录数据&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;组成情况：
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;Trx_id&lt;/font&gt;：最后一次事务的 id。每次对某行记录改动时，都会把对应的事务 id 赋值给 Trx_id&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;Roll_pointer&lt;/font&gt;：回滚指针。每次对某行记录改动时，都会把旧版本写入 undo 日志中，该列相当于一个指针，指向该记录修改前的信息&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;各个字段的值&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#架构&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟架构&lt;/mark&gt;&lt;/h4&gt;
&lt;h5 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h5&gt;
&lt;p&gt;下面是 InnoDB 架构图，左侧为内存结构，右侧为磁盘结构。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231125133202521.png&#34; alt=&#34;image-20231125133202521&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;内存结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存结构&#34;&gt;#&lt;/a&gt; 内存结构&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231125133305129.png&#34; alt=&#34;image-20231125133305129&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;buffer-pool缓冲池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#buffer-pool缓冲池&#34;&gt;#&lt;/a&gt; Buffer Pool（缓冲池)&lt;/h6&gt;
&lt;p&gt;简称 BP，&lt;font color=&#39;red&#39;&gt;是主内存中的一块区域&lt;/font&gt;，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;作用是缓存表数据与索引&lt;/font&gt;&lt;/strong&gt;。InnoDB 是基于磁盘文件存储的，为了弥补在物理硬盘与内存之间的 IO 访问速度差值，&lt;font color=&#39;red&#39;&gt;需要把经常使用的数据加载到 BP 中&lt;/font&gt;，避免每次访问都进行磁盘 IO。具体地，在执行增删改查时，&lt;font color=&#39;red&#39;&gt;先操作 BP 中的数据（若无则从磁盘加载并缓存），然后再以一定频率刷新到磁盘&lt;/font&gt;，从而减少磁盘 IO，加快处理速度。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;b&#39;&gt;Buffer Pool 的组成：&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;缓存页（Page）&lt;/font&gt;：用于缓存&lt;font color=&#39;red&#39;&gt;表数据与索引&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;控制块&lt;/font&gt;：用来描述缓存页，与缓存页一一对应。存储着&lt;font color=&#39;red&#39;&gt;对应缓存页的所属表空间、数据页编号、以及在 Buffer Pool 中的地址&lt;/font&gt;等信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;BP 以 Page 为单位，默认大小是 128 M&lt;/font&gt;，Page 默认大小是 16 K，而&lt;font color=&#39;red&#39;&gt;控制块的大小约为 Page 的 5%，大概是 800 byte&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：BP 大小为 128M 指的就是缓存页（Page）的大小。而控制块则一般占 5%，所以每次会多申请 6M 的内存空间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1680014940345-c4b81c48-94d1-46cd-97bd-fa4f242e91cf.jpeg&#34; alt=&#34;03.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在专用服务器上，通常将多达 80％ 的物理内存分配给 Buffer Pool。可以通过以下参数设置：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;show&lt;/span&gt; variables &lt;span class=&#34;token operator&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;innodb_buffer_pool_size&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;b&#39;&gt;如何判断一个页是否缓存在 BP 中？&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MySQL 中有一个哈希表数据结构，它的 k-v 结构是&lt;font color=&#39;red&#39;&gt;（表空间号 + 数据页号，缓冲页对应的控制块）&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;因此，当需要访问某个页的数据时，先从哈希表中根据 表空间号 + 数据页号 看看是否存在对应缓冲页的控制块。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果有，则直接使用；&lt;/li&gt;
&lt;li&gt;如果没有，就从&lt;font color=&#39;red&#39;&gt;free 链表&lt;/font&gt;中选出一个空闲的缓冲页，然后把磁盘中对应的页加载到该缓冲页的位置；&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1680015043156-2f7c1410-3f41-4d8f-892c-d8384a8cd752.jpeg&#34; alt=&#34;10.jpg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;b&#39;&gt;Page 分类&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Buffer Pool 以 Page 为单位&lt;/font&gt;，底层采用 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;链表&lt;/font&gt;&lt;/strong&gt; 来管理 Page。在 InnoDB 访问表记录和索引时会在 Page 中缓存，以后使用时，可以减少磁盘 IO 操作。&lt;/p&gt;
&lt;p&gt;根据状态，将 Page 分为三种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;free page&lt;/font&gt;：空闲 page，未被使用。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;clean page&lt;/font&gt;：被使用 page，但&lt;font color=&#39;red&#39;&gt;数据在刷盘后没有被修改过&lt;/font&gt;，与磁盘的数据保持一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;dirty page&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;脏页&lt;/font&gt;，被使用 page，但&lt;font color=&#39;red&#39;&gt;数据在刷盘后被修改过&lt;/font&gt;，与磁盘的数据产生了不一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1680015221485-20f5036b-94b6-4125-8cf9-304a2deaf4e7.jpeg&#34; alt=&#34;05.jpg&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;b&#39;&gt;Page 管理&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;InnoDB 通过三种链表结构来维护和管理上述三类 Page 对应的&lt;font color=&#39;red&#39;&gt;控制块&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;free list&lt;/font&gt;：**&lt;font color=&#39;red&#39;&gt;空闲&lt;/font&gt;** 缓冲区，管理 free page&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Buffer Pool 的初始化过程中，先向操作系统申请连续的内存空间，然后把它划分成若干个【控制块 &amp;amp; 缓冲页】的键值对&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;free list 把所有&lt;u&gt;空闲的缓冲页对应的控制块&lt;/u&gt;作为一个个的节点放到链表中&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;基节点&lt;/font&gt;: free list 中只有一个基节点，它不记录任何缓存页的信息（单独申请空间），只记录当前 free list 的头节点地址、尾节点地址，以及当前 free list 的节点个数&lt;/li&gt;
&lt;li&gt;从磁盘中将数据页进行缓存的流程：
&lt;ol&gt;
&lt;li&gt;从 free list 中取出一个空闲的控制块（对应缓冲页）&lt;/li&gt;
&lt;li&gt;根据数据页所在的表空间、页号之类的信息，填写该控制块的信息&lt;/li&gt;
&lt;li&gt;把该缓冲页对应的 free list 节点（即控制块）从链表中移除，表示该缓冲页已经被使用了&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1680015343358-c3d841dd-7c74-4b96-b01f-56109ffa94bc.jpeg&#34; alt=&#34;07.jpg&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;flush list&lt;/font&gt;：**&lt;font color=&#39;red&#39;&gt;需要刷盘&lt;/font&gt;** 的缓冲区，管理 dirty page，按修改时间排序&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：脏页既存在于 flush list，也在 LRU list 中，但是两种互不影响。&lt;font color=&#39;red&#39;&gt;LRU list 负责管理 page 的可用性和释放，而 flush list 负责管理脏页的刷盘操作&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB 为了提高处理效率，在每次修改缓冲页后，并不是立刻把修改刷新到磁盘上，而是在未来的某个时间点进行刷盘操作。&lt;/li&gt;
&lt;li&gt;所以需要使用 flush list 存储脏页，凡是&lt;font color=&#39;red&#39;&gt;&lt;u&gt;被修改过的缓冲页对应的控制块&lt;/u&gt;&lt;/font&gt;都会作为节点加入到 flush list 中。&lt;/li&gt;
&lt;li&gt;flush list 的结构与 free list 相似&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1680015501833-6f3d1fcb-2894-4f32-b551-fd4495b9788c.jpeg&#34; alt=&#34;08.jpg&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;lru list&lt;/font&gt;：**&lt;font color=&#39;red&#39;&gt;正在使用&lt;/font&gt;** 的缓冲区，管理 clean page 和 dirty page&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有点复杂，略了...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h6 id=&#34;change-buffer更改缓冲区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#change-buffer更改缓冲区&#34;&gt;#&lt;/a&gt; Change Buffer（更改缓冲区）&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;略了...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以在 Buffer Pool 中进行合并处理，减少磁盘 IO。&lt;/p&gt;
&lt;h6 id=&#34;adaptive-hash-index自适应hash索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adaptive-hash-index自适应hash索引&#34;&gt;#&lt;/a&gt; Adaptive Hash Index（自适应 hash 索引）&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;参数：adaptive_hash_index&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;InnoDB 会监控对表上各索引页的查询，&lt;font color=&#39;red&#39;&gt;如果观察到 hash 索引可以提升索引页的查询速度，则自动建立 hash 索引&lt;/font&gt;，无需人工参与，称之为自适应 hash 索引。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;hash 索引的等值匹配性能高于 B + 树的&lt;/font&gt;：因为 hash 索引一般只需要一次 IO 即可；而 B + 树，可能需要几次匹配&lt;/li&gt;
&lt;li&gt;但是，&lt;font color=&#39;red&#39;&gt;hash 索引又不适合做范围查询、模糊匹配等&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;log-buffer日志缓冲区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#log-buffer日志缓冲区&#34;&gt;#&lt;/a&gt; Log Buffer（日志缓冲区）&lt;/h6&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;用来保存要写入到磁盘中的日志数据（ &lt;code&gt;redo log&lt;/code&gt; 、 &lt;code&gt;undo log&lt;/code&gt; ），数据会定期刷新到磁盘中&lt;/font&gt;，默认大小为 16MB。如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘 I/O&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用来优化每次更新操作之后都要写入 redo log 而产生的磁盘 IO 问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log Buffer 空间满了后会自动写入磁盘。可以通过将 &lt;code&gt;innodb_log_buffer_size&lt;/code&gt;  参数调大，以减少磁盘 IO 频率&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1680016593449-c23ff9d8-4c0f-48d4-9a55-b66b0a922895.jpeg&#34; alt=&#34;14.jpg&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;磁盘结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘结构&#34;&gt;#&lt;/a&gt; 磁盘结构&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;实在是太抽象了，略了。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231125133316649.png&#34; alt=&#34;image-20231125133316649&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;system-tablespace系统表空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#system-tablespace系统表空间&#34;&gt;#&lt;/a&gt; System Tablespace (系统表空间)&lt;/h6&gt;
&lt;h6 id=&#34;file-per-table-tablespaces每个表的文件表空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#file-per-table-tablespaces每个表的文件表空间&#34;&gt;#&lt;/a&gt; File-Per-Table Tablespaces（每个表的文件表空间）&lt;/h6&gt;
&lt;h6 id=&#34;general-tablespaces通用表空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#general-tablespaces通用表空间&#34;&gt;#&lt;/a&gt; General Tablespaces（通用表空间）&lt;/h6&gt;
&lt;h6 id=&#34;undo-tablespaces撤销表空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#undo-tablespaces撤销表空间&#34;&gt;#&lt;/a&gt; Undo Tablespaces（撤销表空间）&lt;/h6&gt;
&lt;h6 id=&#34;temporary-tables临时表空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#temporary-tables临时表空间&#34;&gt;#&lt;/a&gt; Temporary Tables（临时表空间）&lt;/h6&gt;
&lt;h6 id=&#34;doublewrite-buffer-files双写缓冲区文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#doublewrite-buffer-files双写缓冲区文件&#34;&gt;#&lt;/a&gt; Doublewrite Buffer Files（双写缓冲区文件）&lt;/h6&gt;
&lt;h6 id=&#34;redo-log重做日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redo-log重做日志&#34;&gt;#&lt;/a&gt; Redo Log（重做日志）&lt;/h6&gt;
&lt;h5 id=&#34;后台线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后台线程&#34;&gt;#&lt;/a&gt; 后台线程&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231125133329251.png&#34; alt=&#34;image-20231125133329251&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;master-thread核心后台线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#master-thread核心后台线程&#34;&gt;#&lt;/a&gt; Master Thread（核心后台线程）&lt;/h6&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;负责调度其他线程&lt;/font&gt;，还&lt;font color=&#39;red&#39;&gt;负责将缓冲池中的数据异步刷新到磁盘中&lt;/font&gt;，保持数据的一致性，还包括&lt;font color=&#39;red&#39;&gt;脏页的刷新、合并插入缓存、undo 页的回收&lt;/font&gt;。&lt;/p&gt;
&lt;h6 id=&#34;io-threadio线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io-threadio线程&#34;&gt;#&lt;/a&gt; IO Thread（IO 线程）&lt;/h6&gt;
&lt;p&gt;在 InnoDB 存储引擎中大量使用了 AIO 来处理 IO 请求，这样可以极大地提高数据库的性能，而 IO Thread 主要&lt;font color=&#39;red&#39;&gt;负责这些 IO 请求的回调&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231125150451252.png&#34; alt=&#34;image-20231125150451252&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;purge-thread回收线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#purge-thread回收线程&#34;&gt;#&lt;/a&gt; Purge Thread（回收线程）&lt;/h6&gt;
&lt;p&gt;主要用于&lt;font color=&#39;red&#39;&gt;回收事务已经提交了的 undo log&lt;/font&gt;，在事务提交之后，undo log 可能不用了，就用它来回收。&lt;/p&gt;
&lt;h6 id=&#34;page-cleaner-thread脏页刷新线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#page-cleaner-thread脏页刷新线程&#34;&gt;#&lt;/a&gt; Page Cleaner Thread（脏页刷新线程）&lt;/h6&gt;
&lt;p&gt;协助 Master Thread &lt;font color=&#39;red&#39;&gt;刷新脏页&lt;/font&gt;到磁盘，可以减轻 Master Thread 的工作压力，减少阻塞。&lt;/p&gt;
&lt;h4 id=&#34;事务原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务原理&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟事务原理&lt;/mark&gt;&lt;/h4&gt;
&lt;h5 id=&#34;事务基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务基础&#34;&gt;#&lt;/a&gt; 事务基础&lt;/h5&gt;
&lt;p&gt;关于事务的基础知识，具体可见&lt;a href=&#34;#==MySQL%E4%BA%8B%E5%8A%A1==&#34;&gt; MySQL 事务&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;原子性&lt;/strong&gt;（ &lt;code&gt;Atomicity&lt;/code&gt; ）：事务是不可分割的最小操作单元，内部的所有操作要么全部成功，要么全部失败（要么全部 commit 成功，要么全部失败 rollback）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一致性&lt;/strong&gt;（ &lt;code&gt;Consistency&lt;/code&gt; ）：事务完成前后，数据库必须保持一致状态，即都是合理的数据状态。例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;隔离性&lt;/strong&gt;（ &lt;code&gt;Isolation&lt;/code&gt; ）：数据库提供的隔离机制，可以保证事务在不受外部并发操作影响的独立环境下运行。即并发访问数据库时，一个事务不会干扰其他事务的运行，该事务所做的修改在最终提交前，对其他事务是不可见的。各并发事务之间，数据库是独立的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;持久性&lt;/strong&gt;（ &lt;code&gt;Durability&lt;/code&gt; ）：事务一旦提交，它对数据库中数据的更改就是持久的。即使数据库发生故障，这种更改也不会丢失。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么实际上，&lt;font color=&#39;red&#39;&gt;InnoDB 引擎是如何保证事务的四大特性（ACID）的呢？&lt;/font&gt;而对于这四大特性，实际上分为两个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子性（A）、一致性（C）、持久性（D）：由 InnoDB 中的 &lt;font color=&#39;red&#39;&gt;redo log 日志和 undo log 日志&lt;/font&gt;来保证&lt;/li&gt;
&lt;li&gt;隔离性（I）：通过数据库的&lt;font color=&#39;red&#39;&gt;锁和 MVCC&lt;/font&gt;来保证的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231125152532382.png&#34; alt=&#34;image-20231125152532382&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;redo-log&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redo-log&#34;&gt;#&lt;/a&gt; redo log&lt;/h5&gt;
&lt;p&gt;redo log 是重做日志，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;记录事务提交时数据页的物理修改&lt;/font&gt;&lt;/strong&gt;。当刷新脏页到磁盘发生错误时，进行数据恢复，用来实现事务的持久性。由两部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;redo log buffer&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;在内存中&lt;/font&gt;的缓冲区&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;redo log file&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;在磁盘中&lt;/font&gt;的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1680016593449-c23ff9d8-4c0f-48d4-9a55-b66b0a922895.jpeg&#34; alt=&#34;14.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/github/javaguide/03.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;b&#39;&gt;如果没有 redo log，可能会存在什么问题？&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 InnoDB 中的内存结构中，主要的内存区域就是 Buffer Pool（缓冲池），在缓冲池中缓存了很多的数据页。&lt;/p&gt;
&lt;p&gt;当我们在一个事务中，执行多个增删改的操作时，InnoDB 会先操作缓冲池中的数据，如果缓冲区没有对应的数据，会通过后台线程将磁盘中的数据加载到缓冲区中，然后修改缓冲池中的数据，修改后的数据页我们称为&lt;font color=&#39;red&#39;&gt;脏页&lt;/font&gt;。而脏页则会在一定的时机，通过后台线程刷新到磁盘中，从而保证缓冲区与磁盘的数据一致。&lt;/p&gt;
&lt;p&gt;但缓冲区的脏页数据并不是实时刷新的，而是一段时间之后将缓冲区的数据刷新到磁盘中，&lt;font color=&#39;red&#39;&gt;假如将脏页刷盘的过程出错了，但提示给用户事务提交成功，而数据却没有持久化下来，这就出现问题了，&lt;strong&gt;没有保证事务的持久性&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231126165158628.png&#34; alt=&#34;image-20231126165158628&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;b&#39;&gt;redo log 是如何确保事务的持久性的？&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有了 redo log 之后，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;当对缓冲区的数据进行增删改之后，会首先将对缓冲页的变化记录在  &lt;code&gt;redo log buffer&lt;/code&gt;  中&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;在&lt;u&gt;每次&lt;/u&gt;事务提交时，会将内存中的  &lt;code&gt;redo log buffer&lt;/code&gt;  的数据刷新到磁盘文件  &lt;code&gt;redo log file&lt;/code&gt;  中&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;过一段时间之后，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;如果刷新缓冲区的脏页到磁盘时发生错误，此时就可以借助于 redo log 进行数据恢复，这样就保证了事务的持久性&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;而&lt;font color=&#39;red&#39;&gt;如果脏页成功刷新到磁盘，或者涉及到的数据已经落盘，此时 redo log 就可以删除了，所以存在的两个 redo log 文件是循环写的&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231126165234873.png&#34; alt=&#34;image-20231126165234873&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;b&#39;&gt;为什么每次提交事务，要刷新 redo log 到磁盘中，而不是直接将 buffer pool 中的脏页刷新到磁盘呢？&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为在业务操作中，我们&lt;font color=&#39;red&#39;&gt;操作数据一般都是随机读写磁盘的&lt;/font&gt;，而不是顺序读写磁盘。 而 redo log 在向磁盘文件中写入数据，&lt;font color=&#39;red&#39;&gt;日志文件都是顺序写的&lt;/font&gt;。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;顺序写的效率，要远大于随机写&lt;/font&gt;&lt;/strong&gt;。这种&lt;font color=&#39;red&#39;&gt;先写日志的方式&lt;/font&gt;，称之为 &lt;code&gt;WAL（Write-Ahead Logging）&lt;/code&gt; 。&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;undo-log&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#undo-log&#34;&gt;#&lt;/a&gt; undo log&lt;/h5&gt;
&lt;p&gt;undo log（回滚日志）是在执行 DML 语句的时候产生的便于数据回滚的日志，用于&lt;font color=&#39;red&#39;&gt;记录数据被修改前的信息&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;与 redo log 记录物理日志不一样，&lt;font color=&#39;red&#39;&gt;undo log 是逻辑日志，记录的是逻辑相反的操作信息&lt;/font&gt;。可以认为当 delete 一条记录时，undo log 中会记录一条对应的 insert 记录；反之亦然，当 update 一条记录时，它记录一条对应相反的 update 记录。&lt;font color=&#39;red&#39;&gt;当执行 rollback 时，就可以从 undo log 中的逻辑记录读取到相应的内容并进行回滚&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;undo log 主要有两个作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;提供事务回滚（保证事务的原子性）&lt;/font&gt;&lt;/strong&gt;：当事务回滚时将数据恢复到修改前的样子&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;MVCC（多版本并发控制）&lt;/font&gt;&lt;/strong&gt;：当读取记录时，若该记录被其他事务占用，或者当前版本对该事务不可见，则可以通过 undo log &lt;font color=&#39;red&#39;&gt;读取之前的版本数据&lt;/font&gt;，以此实现非锁定读&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;undo log 销毁：undo log 在事务执行时产生，事务提交时，并不会立即删除 undo log，因为这些日志可能还用于 MVCC。&lt;/p&gt;
&lt;p&gt;undo log 存储：undo log 采用段的方式进行管理和记录，存放在前面介绍的 rollback segment 回滚段中，内部包含 1024 个 undo log segment。&lt;/p&gt;
&lt;h5 id=&#34;innodb-如何实现事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#innodb-如何实现事务&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟InnoDB 如何实现事务&lt;/mark&gt;&lt;/h5&gt;
&lt;p&gt;InnoDB 通过 Buffer Pool、Log Buffer、Redo Log、Undo Log 来实现事务，以一条 update 语句为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;InnoDB 在收到一条 update 语句后，会先根据条件找到数据所在的页，并将该页缓存在  &lt;code&gt;Buffer Pool&lt;/code&gt;  中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;针对 update 语句生成  &lt;code&gt;Undo Log&lt;/code&gt;  日志，用于后续事务回滚&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;执行器&lt;/code&gt; 执行 update 语句，修改 Buffer Pool 中的数据，即内存中的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;针对 update 语句生成一个  &lt;code&gt;Redo Log&lt;/code&gt;  对象，并写入  &lt;code&gt;Log Buffer&lt;/code&gt;  中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果事务提交，那么将 Log Buffer 中的 Redo Log 对象持久化到磁盘中的  &lt;code&gt;Redo Log File&lt;/code&gt;  中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后续还有其他机制将 Buffer Pool 中所修改的数据页持久化到磁盘中（脏页刷盘）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果事务回滚，则利用 Undo Log 日志进行回滚&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1680016593449-c23ff9d8-4c0f-48d4-9a55-b66b0a922895.jpeg&#34; alt=&#34;14.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;对-mvcc-的实现方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对-mvcc-的实现方式&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟对 MVCC 的实现方式&lt;/mark&gt;&lt;/h4&gt;
&lt;h5 id=&#34;innodb-为什么要采用-mvcc快照读&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#innodb-为什么要采用-mvcc快照读&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟InnoDB 为什么要采用 MVCC 快照读 ？&lt;/mark&gt;&lt;/h5&gt;
&lt;p&gt;这是因为一个事务的操作有可能成功 commit，也有可能失败 rollback。在一个事务 commit 之前，被其他事务读到还没提交的变更记录，会产生数据不一样的现象（&lt;font color=&#39;red&#39;&gt;脏读&lt;/font&gt;），这种情况就是 InnoDB 最低的隔离级别 READ UNCOMMITTED，可以读到没有 commit 的数据。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;那么如果想要不产生脏读，容易想到的是采用锁的方式&lt;/font&gt;，当一个事务更改某行记录，就加上锁，其他并发事务等待该事务执行完毕才能读取到该行记录。但是这样做的话 **&lt;font color=&#39;red&#39;&gt;会产生大量的锁占用与等待，效率是非常低下的，因此 InnoDB 采用了 MVCC 的方式&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;简单的说，在 RU 隔离级别下，若 A 事务变更某行记录，InnoDB 会产生对应的 undo log，如果接下来 A 事务进行回滚，InnoDB 可以根据 undo log 将记录回滚到事务开始之前的状态。在 A 事务没有结束时，如果 B 事务来查询该行记录，B 事务会根据 A 事务变更后的记录值（在内存中）加上 undo log “计算” 出 A 事务开始前的该行记录值，从而读取到该行记录的一个快照，其中&lt;font color=&#39;red&#39;&gt;并不会产生锁与等待&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;如果是 RR 的隔离级别（默认隔离级别），B 事务进行过程中看到的始终会是 B 事务开始前的记录行快照信息，不管 B 事务进行过程中 A 事务有没有完成；&lt;/p&gt;
&lt;p&gt;如果是 RC 的隔离级别，B 事务进行过程中，可以看到 A 事务提交对记录行修改值（即如果 A 事务没有完成，B 查询到的是 A 事务开始前的记录值，如果 A 事务完成了，B 事务查询到的是 A 事务完成后的记录值），在这种情况下会产生不可重复读的现象，即同一次事务中多次查询看到的结果会不一样。&lt;/p&gt;
&lt;h5 id=&#34;基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本概念&#34;&gt;#&lt;/a&gt; 基本概念&lt;/h5&gt;
&lt;h6 id=&#34;快照读一致性u非锁定读u&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快照读一致性u非锁定读u&#34;&gt;#&lt;/a&gt; 快照读（一致性&lt;u&gt;非锁定读&lt;/u&gt;）&lt;/h6&gt;
&lt;p&gt;就是&lt;font color=&#39;red&#39;&gt;简单的  &lt;code&gt;SELECT&lt;/code&gt;  语句（不加锁）&lt;/font&gt;，是非阻塞读。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;快照即记录的历史版本&lt;/font&gt;，每行记录可能存在多个历史版本（多版本技术），读取的是记录数据的可见版本。&lt;/p&gt;
&lt;p&gt;快照读的情况下，如果读取的记录正在执行 UPDATE/DELETE 操作，&lt;font color=&#39;red&#39;&gt;读取操作不会因此去等待记录上 X 锁的释放，而是会去读取行的一个快照（历史数据）&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;只有在事务隔离级别 RC (读取已提交) 和 RR（可重读）下，InnoDB 才会使用快照读（一致性非锁定读）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;在 RC 级别下&lt;/font&gt;，快照读总是&lt;font color=&#39;red&#39;&gt;读取被锁定行的最新一份快照数据&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;在 RR 级别下&lt;/font&gt;，快照读总是 **&lt;font color=&#39;red&#39;&gt;读取本事务开始时的行数据版本（快照）&lt;/font&gt;**。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;在 SERIALIZABLE 级别下&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;快照读退化成当前读&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;快照读比较&lt;font color=&#39;red&#39;&gt;适合对数据一致性要求不是特别高，且追求极致性能的业务场景&lt;/font&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;对于快照读的实现，通常做法是加一个 **&lt;font color=&#39;red&#39;&gt;版本号或者时间戳字段&lt;/font&gt;**，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新数据时，&lt;font color=&#39;red&#39;&gt;版本号 + 1 或者更新时间戳&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;查询数据时，将当前可见的版本号与对应记录的版本号进行比对，&lt;font color=&#39;red&#39;&gt;如果记录的版本小于可见版本，则表示该记录可见&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 InnoDB 中，&lt;font color=&#39;cornflowerblue&#39;&gt;多版本控制（multi versioning）&lt;/font&gt;就是对快照读的实现。如果读取的行正在执行  &lt;code&gt;DELETE&lt;/code&gt;  或  &lt;code&gt;UPDATE&lt;/code&gt;  操作，这时读取操作不会去等待行上 X 锁的释放。相反地，InnoDB 会去读取行的一个快照数据，对于这种读取历史数据的方式，我们叫它快照读（snapshot read）。&lt;/p&gt;
&lt;h6 id=&#34;当前读一致性u锁定读u&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#当前读一致性u锁定读u&#34;&gt;#&lt;/a&gt; 当前读（一致性&lt;u&gt;锁定读&lt;/u&gt;）&lt;/h6&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;读取行记录时会添加 X 锁或 S 锁&lt;/font&gt;，以防其他并发事务修改当前记录，因此 **&lt;font color=&#39;red&#39;&gt;读取的是记录的最新版本&lt;/font&gt;**，是悲观锁的一种操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select ... lock in share mode&lt;/code&gt; ：对记录加  &lt;code&gt;S&lt;/code&gt;  锁，其它事务也可以加  &lt;code&gt;S&lt;/code&gt;  锁，但如果加  &lt;code&gt;X&lt;/code&gt;  锁则会被阻塞&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select ... for update&lt;/code&gt; 、 &lt;code&gt;insert&lt;/code&gt; 、 &lt;code&gt;update&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; ：对记录加  &lt;code&gt;X&lt;/code&gt;  锁，且其它事务不能加任何锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当前读的一些常见 SQL 语句类型如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;select ... for update&lt;/code&gt;  仅适用于 InnoDB，且必须在事务块 (BEGIN/COMMIT) 中才能生效。在进行事务操作时，通过 for update 语句，MySQL 会对查询结果集中每行数据都添加 **&lt;font color=&#39;#B32015&#39;&gt;排他锁&lt;/font&gt;**，&lt;font color=&#39;red&#39;&gt;其他线程对该记录的更新与删除操作都会阻塞&lt;/font&gt;。排他锁包含行锁、表锁。&lt;/p&gt;
&lt;p&gt;InnoDB 行锁是通过给索引上的索引项加锁来实现的，只有通过索引条件检索数据，InnoDB 才使用行级锁，否则，InnoDB 将使用表锁。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select ... for share&lt;/code&gt; ：我选择一些记录，这些记录可以 share，&lt;font color=&#39;red&#39;&gt;其他事务也可以读&lt;/font&gt;，但是如果你要修改，不好意思，我加了一个 s 锁，你是&lt;font color=&#39;red&#39;&gt;不可以修改&lt;/font&gt;的。这个语句的应用场景之一是 **&lt;font color=&#39;red&#39;&gt;用来读取到最新的数据&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select ... for update&lt;/code&gt; ：我选择一些记录，这些 select 的记录是我下一步要 update 的，你要读或者修改这些记录，不好意思，我加的是 x 锁，你&lt;font color=&#39;red&#39;&gt;读不了也改不了&lt;/font&gt;。只有我当前事务提交了，这些记录你才可以读到或者修改。这个语句的应用场景之一是 **&lt;font color=&#39;red&#39;&gt;为了防止更新丢失&lt;/font&gt;**。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 对读的记录加一个 S 锁（MySQL 5.7 和 MySQL 8.0）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;LOCK&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;IN&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SHARE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;MODE&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 对读的记录加一个 S 锁（MySQL 8.0）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;FOR&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SHARE&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 对读的记录加一个 X 锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;FOR&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;UPDATE&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 对修改的记录加一个 X 锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DELETE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr /&gt;
&lt;p&gt;在快照读下，即时读取的记录已被其它事务加上  &lt;code&gt;X&lt;/code&gt;  锁，这时记录也是可以被读取的，即读取的快照数据。上面说了，在 RR 隔离级别下 MVCC 防止了部分幻读。这里的 “部分” 是指在 &lt;code&gt;快照读&lt;/code&gt; 情况下，只能读取到第一次查询之前所插入的数据（根据 Read View 判断数据可见性，Read View 在第一次查询时生成）。&lt;/p&gt;
&lt;p&gt;但是！&lt;font color=&#39;red&#39;&gt;如果是 &lt;code&gt;当前读&lt;/code&gt; ，每次读取的都是最新数据，这时如果两次查询中间有其它事务插入数据，就会产生幻读&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;InnoDB 在实现 RR 隔离级别时，如果执行的是 &lt;code&gt;当前读&lt;/code&gt; ，则会对读取的记录使用  &lt;code&gt;临键锁（Next-key Lock）&lt;/code&gt; ，来防止其它并发事务在间隙间插入数据&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231127104552414.png&#34; alt=&#34;image-20231127104552414&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在测试中，即使是在默认的 RR 隔离级别下，事务 A 中依然可以读取到事务 B 最新提交的内容，因为在查询语句后面加上了  &lt;code&gt;lock in share mode&lt;/code&gt;  共享锁，此时是当前读操作。当然，当我们加排他锁的时候，也是当前读操作。&lt;/p&gt;
&lt;h6 id=&#34;mvcc多版本并发控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mvcc多版本并发控制&#34;&gt;#&lt;/a&gt; MVCC（多版本并发控制）&lt;/h6&gt;
&lt;p&gt;MVCC 的全称是  &lt;code&gt;Multi-Version Concurrency Control&lt;/code&gt; ，是一种并发控制机制，用于在多个并发事务同时读写数据库时保持数据的一致性和隔离性。&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;MVCC 在每个数据行上维护多个版本的数据，形成一条由 undo log 组成的版本链&lt;/font&gt;&lt;/strong&gt;，使得读写操作没有冲突。&lt;/p&gt;
&lt;p&gt;MVCC 解决的问题：&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;读 — 写冲突的无锁并发控制&lt;/font&gt;&lt;/strong&gt;。为事务分配单向增长的时间戳，为每个数据修改保存一个版本（与事务时间戳相关联）。读操作只读取该事务开始前的数据库快照。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;能解决并发读 - 写问题&lt;/font&gt;：可以做到读操作不阻塞写操作，同时写操作也不会阻塞读操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;能解决脏读、幻读、不可重复读&lt;/font&gt;等一致性问题，但&lt;font color=&#39;red&#39;&gt;不能解决写 - 写中的修改丢失问题&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;1、读操作（SELECT）：&lt;/p&gt;
&lt;p&gt;当一个事务执行读操作时，它会使用&lt;font color=&#39;red&#39;&gt;快照读取&lt;/font&gt;。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;在 InnoDB 默认的 RR 隔离级别下，快照读取是基于事务开始时数据库中的状态创建的&lt;/font&gt;&lt;/strong&gt;，因此事务不会读取到其他事务尚未提交的修改。具体工作情况如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 RR 级别下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;对于读取操作，事务会查找符合条件的数据行，并选择符合事务开始时间的数据版本进行读取。&lt;/li&gt;
&lt;li&gt;如果某个数据行有多个版本，事务会&lt;font color=&#39;red&#39;&gt;选择不晚于事务开始时间的最新版本&lt;/font&gt;，确保事务只读取在它开始之前已经存在的数据。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;事务读取的是快照数据，因此其他并发事务对数据行的修改不会影响当前事务的读取操作，当前事务对快照数据的修改也不会影响实际的数据行&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、写操作（INSERT、UPDATE、DELETE）：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;当一个事务执行写操作时，它会为要修改的数据行创建一个新的版本（快照数据），对其修改后再写入数据库&lt;/font&gt;&lt;/strong&gt;。具体工作情况如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于写操作，事务会为要修改的数据行创建一个新的版本，并将修改后的数据写入新版本。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;新版本的数据会带有当前事务的版本号&lt;/font&gt;，以便其他事务能够正确读取相应版本的数据。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;原始版本的数据仍然存在，供其他事务使用快照读取，这保证了其他事务不受当前事务的写操作影响&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、事务的提交和回滚（COMMIT、ROLLBACK）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一个事务提交时，它所做的修改将成为数据库的最新版本，并且对其他事务可见。&lt;/li&gt;
&lt;li&gt;当一个事务回滚时，它所做的修改将被撤销，对其他事务不可见。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、版本的回收：&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;为了防止数据库中的版本无限增长，MVCC 会定期进行版本的回收。回收机制会删除已经不再需要的旧版本数据，从而释放空间&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;MVCC 通过&lt;u&gt;创建数据的多个版本&lt;/u&gt;和使用&lt;u&gt;快照读取&lt;/u&gt;来实现并发控制&lt;/font&gt;&lt;/strong&gt;。&lt;font color=&#39;red&#39;&gt;读操作使用旧版本数据的快照，写操作创建新版本，并确保原始版本仍然可用&lt;/font&gt;。这样，不同的事务可以在一定程度上并发执行，而不会相互干扰，从而提高了数据库的并发性能和数据一致性。&lt;/p&gt;
&lt;h5 id=&#34;innodb-对-mvcc-的实现方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#innodb-对-mvcc-的实现方式&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟InnoDB 对 MVCC 的实现方式&lt;/mark&gt;&lt;/h5&gt;
&lt;p&gt;InnoDB 对 MVCC 的具体实现依赖于：&lt;strong&gt;隐藏字段、ReadView、undo log&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在内部实现中，InnoDB 通过数据行的  &lt;code&gt;DB_TRX_ID&lt;/code&gt;  和  &lt;code&gt;ReadView&lt;/code&gt;  来判断数据的可见性。&lt;/li&gt;
&lt;li&gt;如不可见，则通过数据行的  &lt;code&gt;DB_ROLL_PTR&lt;/code&gt;  找到  &lt;code&gt;undo log&lt;/code&gt;  中的历史版本。&lt;/li&gt;
&lt;li&gt;每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建  &lt;code&gt;ReadView&lt;/code&gt;  之前已经提交的修改和该事务本身做的修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这里看不懂没关系，先看下文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;隐藏字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隐藏字段&#34;&gt;#&lt;/a&gt; 隐藏字段&lt;/h6&gt;
&lt;p&gt;InnoDB 为每行记录添加了三个隐藏字段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前两个字段是肯定会添加的，是否添加最后一个字段 DB_ROW_ID，得看当前表有没有主键或者唯一非空索引，若有则不会添加该隐藏字段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DB_TRX_ID&lt;/code&gt; （6 字节）：&lt;font color=&#39;red&#39;&gt;插入这行记录或者最后一次修改该记录的事务 id&lt;/font&gt;；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;delete 操作在内部被视为更新（即逻辑删除），会在记录头 Record header 中的 deleted_flag 字段将其标记为已删除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DB_ROLL_PTR&lt;/code&gt; （7 字节）：&lt;font color=&#39;red&#39;&gt;回滚指针，指向该行对应的 undo log，即上一个版本（存于回滚段中）&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果该行记录未被更新，则为空；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DB_ROW_ID&lt;/code&gt; （6 字节）：&lt;font color=&#39;red&#39;&gt;当前行记录隐含的自增 ID&lt;/font&gt;，如果当前表没有设置主键且没有唯一非空索引时，InnoDB 会使用 DB_ROW_ID 来&lt;strong&gt;生成一个聚集索引&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/816762-20210616144139574-1740941399.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如上图，DB_ROW_ID 是数据库默认为该行记录生成的唯一隐式主键，DB_TRX_ID 是当前操作该记录的事务 ID，而 DB_ROLL_PTR 是一个回滚指针，用于配合 undo log，指向上一个旧版本。&lt;/p&gt;
&lt;h6 id=&#34;undo-log-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#undo-log-2&#34;&gt;#&lt;/a&gt; undo log&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;b&#39;&gt;undo log 介绍&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;undo log（回滚日志）是在执行 DML 语句的时候产生的便于数据回滚的日志，用于&lt;font color=&#39;red&#39;&gt;记录数据被修改前的信息&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;与 redo log 记录物理日志不同，&lt;font color=&#39;red&#39;&gt;undo log 是逻辑日志，记录的是逻辑相反的操作信息&lt;/font&gt;。因此当执行 rollback 时，就可以直接从 undo log 中的逻辑记录读取到相应的内容并进行回滚。&lt;/p&gt;
&lt;p&gt;undo log 主要有两个作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;提供事务回滚（保证事务的原子性）&lt;/font&gt;&lt;/strong&gt;：当事务回滚时将数据恢复到修改前的样子&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;MVCC（多版本并发控制）&lt;/font&gt;&lt;/strong&gt;：当读取记录时，若该记录被其他事务占用，或者当前版本对该事务不可见，则可以通过 undo log &lt;font color=&#39;red&#39;&gt;读取之前的版本数据&lt;/font&gt;，以此实现非锁定读&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 InnoDB 中 undo log 分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;insert undo log&lt;/code&gt; ：在&lt;font color=&#39;red&#39;&gt; insert 操作&lt;/font&gt;中产生的 undo log。因为 insert 操作的记录只对事务本身可见，只在回滚时需要，因此&lt;font color=&#39;red&#39;&gt; insert undo log 在事务提交后可以直接删除，不需要进行 purge 操作&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/317e91e1-1ee1-42ad-9412-9098d5c6a9ad-dc43aed3.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;（insert 时的数据初始状态）&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;update undo log&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;update 或 delete 操作&lt;/font&gt;中产生的 undo log。update undo log 不仅在回滚时需要，可能需要提供 MVCC 机制，因此不能在事务提交时就进行删除。&lt;font color=&#39;red&#39;&gt;事务提交时放入 undo log 链表，等待 purge 线程进行最后的删除&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/c52ff79f-10e6-46cb-b5d4-3c9cbcc1934a-b60a6e78.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;（数据第一次被修改时）&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/6a276e7a-b0da-4c7b-bdf7-c0c7b7b3b31c-2e496ea1.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;（数据第二次被修改时）&lt;/center&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;b&#39;&gt;版本链&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;不同事务或者相同事务对同一记录行的修改，会使该记录行的 undo log 成为一条链表，链首就是最新的记录，链尾就是最早的旧记录&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有一张表原始数据为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231128102126782.png&#34; alt=&#34;image-20231128102126782&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;DB_TRX_ID&lt;/code&gt; ：代表最近修改事务 ID，记录插入这条记录或最后一次修改该记录的事务 ID，是自增的。&lt;br /&gt;
 &lt;code&gt;DB_ROLL_PTR&lt;/code&gt; ：由于这条数据是刚刚才插入的，没有被更新过，所以该字段值为 null。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后，有四个并发事务同时在访问这张表。&lt;/p&gt;
&lt;p&gt;A. 第一步：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231128102320440.png&#34; alt=&#34;image-20231128102320440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当事务 2 执行第一条修改语句时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先记录 undo log 日志，记录数据变更之前的样子；&lt;/li&gt;
&lt;li&gt;然后更新记录，并且记录本次操作的事务 ID 与回滚指针。其中回滚指针用来指定如果发生回滚，回滚到哪一个版本；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231128102520925.png&#34; alt=&#34;image-20231128102520925&#34; /&gt;&lt;/p&gt;
&lt;p&gt;B. 第二步&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231128102822352.png&#34; alt=&#34;image-20231128102822352&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当事务 3 执行第一条修改语句时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先记录 undo log 日志，记录数据变更之前的样子；&lt;/li&gt;
&lt;li&gt;然后更新记录，并且记录本次操作的事务 ID 与回滚指针；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231128103013206.png&#34; alt=&#34;image-20231128103013206&#34; /&gt;&lt;/p&gt;
&lt;p&gt;C. 第三步&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231128103104640.png&#34; alt=&#34;image-20231128103104640&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当事务 4 执行第一条修改语句时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先记录 undo log 日志，记录数据变更之前的样子；&lt;/li&gt;
&lt;li&gt;然后更新记录，并且记录本次操作的事务 ID 与回滚指针；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231128103205546.png&#34; alt=&#34;image-20231128103205546&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;read-view&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#read-view&#34;&gt;#&lt;/a&gt; Read View&lt;/h6&gt;
&lt;p&gt;Read View 说白了就是&lt;font color=&#39;red&#39;&gt;事务进行快照读操作时产生的读视图&lt;/font&gt;。在该事务执行快照读的那一刻，会生成一个当前数据库系统的快照，该快照记录并维护了系统当前活跃事务的 ID（当每个事务开启时，都会被分配一个 ID, 这个 ID 是递增的，所以最新的事务，ID 值越大）。&lt;/p&gt;
&lt;p&gt;Read View 是用来做 **&lt;font color=&#39;red&#39;&gt;可见性判断&lt;/font&gt;&lt;strong&gt;的，里面保存了&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;当前对本事务不可见的其他活跃的（未提交的）事务&lt;/font&gt;**。当某个事务执行快照读的时候，会对该记录创建一个 Read View，把它比作条件&lt;font color=&#39;red&#39;&gt;用来判断当前事务能够看到哪个版本的数据&lt;/font&gt;，既可能是当前最新的数据，也有可能是该行记录在 undo log 里面的某个版本的数据。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ReadView&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;/* ... */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  trx_id_t m_low_limit_id&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;/* 表示目前出现过的最大的事务 ID + 1，大于等于这个 ID 的事务均不可见 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  trx_id_t m_up_limit_id&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;/* 表示活跃事务列表 m_ids 中最小的事务 ID，小于这个 ID 的事务均可见 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  trx_id_t m_creator_trx_id&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 创建该 Read View 的事务 ID */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  trx_id_t m_low_limit_no&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;/* 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  ids_t m_ids&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                  &lt;span class=&#34;token comment&#34;&gt;/* 创建 Read View 时的活跃事务列表 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  m_closed&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                     &lt;span class=&#34;token comment&#34;&gt;/* 标记 Read View 是否 close */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;主要有以下字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;m_ids&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;ReadView 创建时，其他活跃的（即未提交的）事务 ID 列表&lt;/font&gt;。创建 ReadView 时，将当前所有未提交的事务的 ID 记录下来，后续即使它们修改了行记录的值，对于当前事务也是不可见的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不包括当前事务自己和已提交的事务（正在内存中）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;m_low_limit_id&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;目前出现过的最大的事务 ID + 1&lt;/font&gt;，即下一个将被分配的事务 ID&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大于等于这个 ID 的数据版本均不可见&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;m_up_limit_id&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;活跃事务列表 m_ids 中最小的事务 ID&lt;/font&gt;，如果 m_ids 为空，则  &lt;code&gt;m_up_limit_id = m_low_limit_id&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小于这个 ID 的数据版本均可见&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;m_creator_trx_id&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;创建该 ReadView 的事务 ID&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/trans_visible-048192c5.png&#34; alt=&#34;trans_visible&#34; /&gt;&lt;/p&gt;
&lt;center&gt;事务可见性示意图&lt;/center&gt;
&lt;h6 id=&#34;数据可见性算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据可见性算法&#34;&gt;#&lt;/a&gt; 数据可见性算法&lt;/h6&gt;
&lt;p&gt;在 InnoDB 中，&lt;font color=&#39;red&#39;&gt;创建一个新事务后，执行每个 select 语句前，都会创建一个 Read View&lt;/font&gt;。&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;Read View 中保存了当前数据库系统中正处于活跃（即没有 commit）的事务的 ID 号&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;简单的说，保存的是系统中当前不应该被本事务看到的其他事务的 ID 列表（即 m_ids）。&lt;font color=&#39;red&#39;&gt;当用户在本事务中要读取某个记录行的时候，InnoDB 会将该记录行的  &lt;code&gt;DB_TRX_ID&lt;/code&gt;  与 Read View 中的一些变量及当前事务 ID 进行比较，判断是否满足可见性条件&lt;/font&gt;。具体的比较算法如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参与比较的对象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;DB_TRX_ID&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;表示插入这行记录或者最后一次修改该行记录的事务 id&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m_creator_trx_id&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;表示创建该 ReadView 的事务 ID&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m_up_limit_id&lt;/code&gt; ：ReadView 中的一个变量，&lt;font color=&#39;red&#39;&gt;表示活跃事务列表 m_ids 中最小的事务 ID&lt;/font&gt;。事务 ID 小于它的事务均已提交，因此小于这个 ID 的数据版本均可见&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m_low_limit_id&lt;/code&gt; ：ReadView 中的一个变量，表示下一个将被分配的事务 ID，即&lt;font color=&#39;red&#39;&gt;目前出现过的最大的事务 ID + 1&lt;/font&gt;。事务 ID 大于它的事务均未提交，因此大于等于这个 ID 的数据版本均不可见&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;changes_visible()&lt;/code&gt;  返回 true 代表可见， false 代表不可见。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231128104943951.png&#34; alt=&#34;image-20231128104943951&#34; /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;步骤&lt;/th&gt;
&lt;th&gt;条件&lt;/th&gt;
&lt;th&gt;是否可以访问该版本&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;DB_TRX_ID == m_creator_trx_id&lt;/td&gt;
&lt;td&gt;可见&lt;/td&gt;
&lt;td&gt;表明最新修改该行记录的事务（DB_TRX_ID）就是创建 ReadView 的当前事务！&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;DB_TRX_ID &amp;lt; m_up_limit_id&lt;/td&gt;
&lt;td&gt;可见&lt;/td&gt;
&lt;td&gt;表明最新修改该行记录的事务（DB_TRX_ID）在&lt;u&gt;当前事务&lt;/u&gt;创建  ReadView 之前就提交了，因此该行记录的值对当前事务是可见的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;DB_TRX_ID &amp;gt;= m_low_limit_id&lt;/td&gt;
&lt;td&gt;不可见&lt;/td&gt;
&lt;td&gt;表明最新修改该行的事务（DB_TRX_ID）在&lt;u&gt;当前事务&lt;/u&gt;创建 ReadView 之后才修改该行，所以该记录行的值对当前事务不可见。&lt;font color=&#39;red&#39;&gt;跳到步骤 5&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;m_ids 为空&lt;/td&gt;
&lt;td&gt;可见&lt;/td&gt;
&lt;td&gt;说明当前不存在活跃的事务，表明在当前事务创建 ReadView 之前，修改该行的事务就已经提交了，所以该记录行的值对当前事务是可见的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;m_up_limit_id &amp;lt;= DB_TRX_ID &amp;lt; m_low_limit_id&lt;/td&gt;
&lt;td&gt;1. 如果 DB_TRX_ID 在 m_ids 中，不可见；&lt;/br&gt;2. 如果 DB_TRX_ID 不在 m_ids 中，可见；&lt;/td&gt;
&lt;td&gt;表明最新修改该行的事务（DB_TRX_ID）在&lt;u&gt;当前事务&lt;/u&gt;创建 ReadView 的时候可能处于 “活动状态” 或者 “已提交状态”，因此就要对活跃事务列表 m_ids 进行查找，分为两种情况：&lt;/br&gt;1. 如果在活跃事务列表 m_ids 中能找到 DB_TRX_ID，表明：① 在当前事务创建 ReadView 前，该记录行的值被事务 ID 为 DB_TRX_ID 的事务修改了，但没有提交；或者 ② 在当前事务创建 ReadView 后，该记录行的值被事务 ID 为 DB_TRX_ID 的事务修改了。这些情况下，这个记录行的值对当前事务都是不可见的。&lt;font color=&#39;red&#39;&gt;跳到步骤 5&lt;/font&gt;&lt;/br&gt;2. 在活跃事务列表中找不到，则表明 “id 为 DB_TRX_ID 的事务” 在修改 “该记录行的值” 后，在 “当前事务” 创建 ReadView 前就已经提交了，所以记录行对当前事务可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;在该行记录的 DB_ROLL_PTR 指针所指向的 undo log 取出快照记录，用其中的 DB_TRX_ID &lt;font color=&#39;red&#39;&gt;跳到步骤 1&lt;/font&gt; 重新开始判断，直到找到满足的快照版本或返回空&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;rc-和-rr-下-mvcc-的差异&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rc-和-rr-下-mvcc-的差异&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟RC 和 RR 下 MVCC 的差异&lt;/mark&gt;&lt;/h5&gt;
&lt;p&gt;在事务隔离级别 RC 和 RR 下，虽然 InnoDB 都通过 MVCC 来读取快照数据（一致性非锁定读），但它们&lt;font color=&#39;red&#39;&gt;生成 ReadView 的时机不同&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RC：&lt;strong&gt;在事务中的&lt;font color=&#39;red&#39;&gt;每一次执行快照读时&lt;/font&gt;，都会生成并设置新的 Read View，所以会导致不可重复读&lt;/strong&gt;！&lt;/li&gt;
&lt;li&gt;RR：&lt;strong&gt;仅在事务中的&lt;font color=&#39;red&#39;&gt;第一次执行快照读时&lt;/font&gt;，生成一个 Read View（m_ids 列表），后续复用该 ReadView。&lt;font color=&#39;red&#39;&gt;因此在一个事务中，执行两次相同的 select 语句，查询到的结果是一样的&lt;/font&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;rc-下-readview-的生成情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rc-下-readview-的生成情况&#34;&gt;#&lt;/a&gt; RC 下 ReadView 的生成情况&lt;/h6&gt;
&lt;p&gt;具体示例略了...&lt;/p&gt;
&lt;h6 id=&#34;rr-下-readview-的生成情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rr-下-readview-的生成情况&#34;&gt;#&lt;/a&gt; RR 下 ReadView 的生成情况&lt;/h6&gt;
&lt;p&gt;具体示例略了...&lt;/p&gt;
&lt;h5 id=&#34;mvccnext-key-lock-防止幻读&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mvccnext-key-lock-防止幻读&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟MVCC➕Next-key Lock 防止幻读&lt;/mark&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;幻读：一个事务读取了几行数据，接着另一个并发事务&lt;font color=&#39;red&#39;&gt;插入&lt;/font&gt;了一些数据。第一个事务在随后的查询中就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;InnoDB 在 RR 级别下通过 MVCC 和 临键锁（Next-key Lock）来解决幻读问题&lt;/font&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;执行普通 select 时会以 MVCC &lt;u&gt;快照读&lt;/u&gt;的方式读取数据&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理所当然能防止 “幻读”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在快照读的情况下，RR 隔离级别只会在事务开启后的第一次查询时生成 Read View ，并复用直至事务提交。所以在生成 Read View 之后其它事务所做的更新、插入记录版本对当前事务并不可见，实现了可重复读和&lt;font color=&#39;red&#39;&gt;防止快照读下的 “幻读”&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;执行 select...for update/lock in share mode、insert、update、delete 等当前读&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;得益于临键锁（Next-key Lock）才能防止 “幻读”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在当前读下，读取的都是最新的数据，如果其它事务有插入新的记录，并且刚好在当前事务查询范围内，就会产生幻读！InnoDB 使用 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;临键锁（Next-key Lock）&lt;/font&gt;&lt;/strong&gt; 来防止幻读。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;当执行当前读时，会锁定读取到的记录，同时会锁定它们的间隙，防止其它并发事务在查询范围内插入数据&lt;/font&gt;&lt;/strong&gt;。只要我不让你插入，就不会发生幻读。&lt;/p&gt;
&lt;h3 id=&#34;mysql索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql索引&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟MySQL 索引&lt;/mark&gt;&lt;/h3&gt;
&lt;h4 id=&#34;索引原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引原理&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟索引原理&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;索引（Index）是&lt;font color=&#39;red&#39;&gt;一种帮助 MySQL 高效获取数据的有序数据结构&lt;/font&gt;，协助 MySQL 快速查询、更新表中数据。MySQL 支持多种类型的索引，包括 B-tree 索引、哈希索引、全文索引等。&lt;/p&gt;
&lt;p&gt;索引的基本原理如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把创建索引列的内容进行排序&lt;/li&gt;
&lt;li&gt;对排序的结果生成倒排表&lt;/li&gt;
&lt;li&gt;在倒排表内容上拼接上数据行地址&lt;/li&gt;
&lt;li&gt;查询数据时，先拿到倒排表内容，在取出数据行地址，从而拿到具体的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数据是以文件的形式存放在磁盘上面的，每一行数据都有它的磁盘地址，如果没有索引的话，我们要从千万行数据里面检索一条数据，只能依次遍历这张表的全部数据， 直到找到这条数据。&lt;/p&gt;
&lt;p&gt;但是有了索引之后，只需要在索引里面去检索这条数据就行了，因为它是特殊的专门用来快速检索的数据结构，我们找到数据存放的磁盘地址以后，就可以拿到数据了。&lt;/p&gt;
&lt;h4 id=&#34;索引介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引介绍&#34;&gt;#&lt;/a&gt; 索引介绍&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;索引是一种帮助存储引擎快速查询和检索数据的数据结构（有序）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;索引的底层数据结构存在很多种类型，常见的索引结构有：红黑树、B 树、B + 树、Hash。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;在 MySQL 中，Innodb 和 MyIsam，都使用 B + 树 作为索引结构&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;索引的优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引的优缺点&#34;&gt;#&lt;/a&gt; 索引的优缺点&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用索引可以大大&lt;font color=&#39;red&#39;&gt;加快数据的检索速度&lt;/font&gt;（大大减少检索的数据量），这也是创建索引的最主要的原因。&lt;/li&gt;
&lt;li&gt;通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;创建和维护索引需要耗费许多时间&lt;/font&gt;。当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低 SQL 执行效率。&lt;/li&gt;
&lt;li&gt;索引需要使用物理文件存储，也会耗费一定空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;索引的底层数据结构选型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引的底层数据结构选型&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟索引的底层数据结构选型&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;不同存储引擎对索引结构的支持情况：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231117203129938.png&#34; alt=&#34;image-20231117203129938&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;hash-表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hash-表&#34;&gt;#&lt;/a&gt; Hash 表&lt;/h5&gt;
&lt;p&gt;哈希索引使用哈希算法&lt;font color=&#39;red&#39;&gt;将索引列的值映射到哈希表中&lt;/font&gt;，然后通过哈希表的查找算法快速定位到目标数据。哈希索引的优点是查找速度非常快，但是它&lt;font color=&#39;red&#39;&gt;不支持范围查找，只适用于等值查找&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;哈希表是键值对的集合，通过键 (key) 即可快速取出对应的值 (value)，因此哈希表可以快速检索数据（接近 O（1））。&lt;/p&gt;
&lt;p&gt;通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hash &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;hashfunc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;index &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; hash &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; array_size&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/mysql20210513092328171.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;但是！哈希算法有个 &lt;strong&gt;Hash 冲突&lt;/strong&gt; 问题，也就是说多个不同的 key 最后得到的 index 相同。通常情况下，我们常用的解决办法是&lt;strong&gt;链地址法&lt;/strong&gt;。链地址法就&lt;font color=&#39;red&#39;&gt;是将哈希冲的突数据存放在链表中&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;比如 JDK1.8 之前  &lt;code&gt;HashMap&lt;/code&gt;  就是通过链地址法来解决哈希冲突的。不过，JDK1.8 以后  &lt;code&gt;HashMap&lt;/code&gt;  为了减少链表过长时搜索时间过长引入了红黑树。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/mysql20210513092224836.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;为了减少 Hash 冲突的发生，一个好的哈希函数应该 “均匀地” 将数据分布在整个可能的哈希值集合中。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;InnoDB 存储引擎不直接支持常规的哈希索引，但存在一种特殊的&lt;strong&gt;自适应哈希索引（Adaptive Hash Index）&lt;/strong&gt;，结合了 B+Tree 和哈希索引的特点，以便更好地适应实际应用中的数据访问模式和性能需求。自适应哈希索引的&lt;font color=&#39;red&#39;&gt;每个哈希桶实际上是一个小型的 B+Tree 结构&lt;/font&gt;。这个 B+Tree 结构可以存储多个键值对，而不仅仅是一个键。这有助于减少哈希冲突链的长度，提高了索引的效率。关于 Adaptive Hash Index 的详细介绍，可以查看 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvcmE0djFYUjVwelNXYy1xdEdPLWRCZw==&#34;&gt;MySQL 各种 “Buffer” 之 Adaptive Hash Index&lt;/span&gt; 这篇文章。&lt;/p&gt;
&lt;p&gt;既然哈希表这么快，为什么 MySQL 没有使用其作为索引的数据结构呢？主要是&lt;strong&gt;因为 Hash 索引不支持排序、范围查询&lt;/strong&gt;。假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。&lt;/p&gt;
&lt;p&gt;试想一种情况:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;FROM&lt;/span&gt; tb1 &lt;span class=&#34;token constant&#34;&gt;WHERE&lt;/span&gt; id &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在这种范围查询中，直接遍历比 500 小的叶子节点就够了。而 Hash 索引是根据 hash 算法来定位的，难不成还要把 1 - 499 的数据，每个都进行一次 hash 计算来定位吗？这就是 Hash 最大的缺点了。&lt;/p&gt;
&lt;h5 id=&#34;全文索引full-text&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全文索引full-text&#34;&gt;#&lt;/a&gt; 全文索引（Full-text）&lt;/h5&gt;
&lt;p&gt;全文索引是一种特殊的索引类型，它可以用于对文本数据进行全文检索。全文索引的基本原理是&lt;font color=&#39;red&#39;&gt;将文本数据分词，然后将每个词作为关键字建立索引&lt;/font&gt;。全文索引可以用于&lt;font color=&#39;red&#39;&gt;对文本数据进行模糊匹配、关键字搜索&lt;/font&gt;等操作。&lt;/p&gt;
&lt;h5 id=&#34;二叉查找树bst&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉查找树bst&#34;&gt;#&lt;/a&gt; 二叉查找树（BST）&lt;/h5&gt;
&lt;p&gt;二叉查找树（Binary Search Tree）是一种基于二叉树的数据结构，它具有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;左子树所有节点的值均小于根节点的值。&lt;/li&gt;
&lt;li&gt;右子树所有节点的值均大于根节点的值。&lt;/li&gt;
&lt;li&gt;左右子树也分别为二叉查找树。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二叉查找树的时间复杂度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当二叉查找树平衡时，也就是树的每个节点的左右子树深度相差不超过 1 的时候，查询的时间复杂度为 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(logn)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，具有比较高的效率。&lt;/li&gt;
&lt;li&gt;然而，当二叉查找树不平衡时，例如在最坏情况下（有序插入节点），树会退化成线性链表（也被称为&lt;font color=&#39;red&#39;&gt;斜树&lt;/font&gt;），相当于&lt;font color=&#39;red&#39;&gt;全表扫描&lt;/font&gt;，导致查询效率急剧下降，时间复杂退化为 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mtext&gt;（&lt;/mtext&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mtext&gt;）&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O（N）&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/oblique-tree.png&#34; alt=&#34;斜树&#34; /&gt;&lt;/p&gt;
&lt;center&gt;斜树&lt;/center&gt;
&lt;p&gt;也就是说，&lt;strong&gt;二叉查找树的性能非常依赖于它的平衡程度，这就导致其不适合作为 MySQL 底层索引的数据结构。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了解决这个问题，并提高查询效率，人们发明了多种在二叉查找树基础上的改进型数据结构，如平衡二叉树、B-Tree、B+Tree 等。&lt;/p&gt;
&lt;h5 id=&#34;avl-树自平衡的bst&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#avl-树自平衡的bst&#34;&gt;#&lt;/a&gt; AVL 树（自平衡的 BST）&lt;/h5&gt;
&lt;p&gt;AVL 树的特点是&lt;font color=&#39;red&#39;&gt;保证任何节点的左右子树高度之差不超过 1&lt;/font&gt;，因此也被称为高度平衡二叉树。&lt;font color=&#39;red&#39;&gt;它的查找、插入和删除在平均和最坏情况下的时间复杂度都是 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(logn)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/avl-tree.png&#34; alt=&#34;AVL 树&#34; /&gt;&lt;/p&gt;
&lt;p&gt;AVL 树采用了&lt;font color=&#39;red&#39;&gt;旋转操作&lt;/font&gt;来保持平衡。主要有四种旋转操作：LL 旋转、RR 旋转、LR 旋转和 RL 旋转。其中 LL 旋转和 RR 旋转分别用于处理左左和右右失衡，而 LR 旋转和 RL 旋转则用于处理左右和右左失衡。&lt;/p&gt;
&lt;p&gt;由于 AVL 树&lt;font color=&#39;red&#39;&gt;需要频繁地进行旋转操作来保持平衡&lt;/font&gt;，因此会有较大的计算开销进而降低了查询性能。并且， 在使用 AVL 树时，每个树节点仅存储一个数据，而每次进行磁盘 IO 时只能读取一个节点的数据，如果需要查询的数据分布在多个节点上，那么就需要进行多次磁盘 IO。 &lt;strong&gt;磁盘 IO 是一项耗时的操作，在设计数据库索引时，我们需要优先考虑如何最大限度地减少磁盘 IO 操作的次数。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际应用中，AVL 树使用的并不多。&lt;/p&gt;
&lt;h5 id=&#34;红黑树自平衡的bst&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#红黑树自平衡的bst&#34;&gt;#&lt;/a&gt; 红黑树（自平衡的 BST）&lt;/h5&gt;
&lt;p&gt;与 AVL 树一样，红黑树也是一种自平衡二叉查找树，通过在插入和删除节点时进行&lt;font color=&#39;red&#39;&gt;颜色变换、旋转操作&lt;/font&gt;，使得树始终保持平衡状态，它具有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个节点非红即黑；&lt;/li&gt;
&lt;li&gt;根节点总是黑色的；&lt;/li&gt;
&lt;li&gt;每个叶子节点都是黑色的空节点（NIL 节点）；&lt;/li&gt;
&lt;li&gt;如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；&lt;/li&gt;
&lt;li&gt;从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/red-black-tree.png&#34; alt=&#34;红黑树&#34; /&gt;&lt;/p&gt;
&lt;p&gt;和 AVL 树不同的是，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;红黑树并不追求严格的平衡，而是大致的平衡，因此红黑树的查询效率稍有下降&lt;/font&gt;&lt;/strong&gt;。因为红黑树的平衡性相对较弱，可能会导致树的高度较高，这可能会导致一些数据需要进行多次磁盘 IO 操作才能查询到，这也是 MySQL 没有选择红黑树的主要原因。&lt;/p&gt;
&lt;p&gt;也正因如此，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;红黑树的插入和删除操作效率大大提高了&lt;/font&gt;&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;，因为红黑树在插入和删除节点时只需进行 O (1) 次数的旋转和变色操作，即可保持基本平衡状态&lt;/font&gt;，而不需要像 AVL 树一样进行 O (logn) 次数的旋转操作。&lt;/p&gt;
&lt;p&gt;红黑树的应用还是比较广泛的，&lt;font color=&#39;red&#39;&gt;TreeMap、TreeSet 以及 JDK1.8 的 HashMap 底层都用到了红黑树&lt;/font&gt;。对于数据在内存中的这种情况来说，红黑树的表现是非常优异的。&lt;/p&gt;
&lt;h5 id=&#34;b树-b树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#b树-b树&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟B 树 &amp;amp; B + 树&lt;/mark&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;最常用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B 树全称为&lt;strong&gt;多路平衡查找树&lt;/strong&gt; ，B+ 树是 B 树的一种变体，其中 B 是  &lt;code&gt;Balanced&lt;/code&gt; （平衡）的意思。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为&lt;u&gt;索引结构&lt;/u&gt;&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;B-tree 索引可以在&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(log n)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的时间复杂度内查找数据，基本原理如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将索引列的值按照一定的顺序存储在 B-tree 中&lt;/li&gt;
&lt;li&gt;然后通过 B-tree 的查找算法快速定位到目标数据&lt;/li&gt;
&lt;li&gt;B-tree 索引的叶子节点存储了指向数据行的指针，因此可以通过 B-tree 索引快速定位到目标数据行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;B 树与 B + 树的区别&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;B 树的所有节点都存放&lt;u&gt;索引列值（key）&lt;/u&gt;和数据（data）&lt;/font&gt;&lt;/strong&gt;；而 **&lt;font color=&#39;red&#39;&gt; B+ 树只有叶子节点才同时存放 key 和 data，其他内节点只存放 key&lt;/font&gt;**。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这样 B+ 树中每个内节点可以存储更多 key 值，从而降低 B + 树的高度，提高检索效率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;B 树的叶子节点都是独立的&lt;/font&gt;；而 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;B+ 树的所有叶子节点构成一个&lt;u&gt;有序的双向链表&lt;/u&gt;&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因此 B+ 树可以按照 key 来有序遍历全部记录，且便于区间查找和搜索。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B 树的检索的过程相当于对范围内的每个节点的 key 做二分查找，可能还没有到达叶子节点，检索就结束了。而 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;B+ 树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 B 树中进行范围查询时，首先找到要查找的下限，然后对 B 树进行中序遍历，直到找到查找的上限；而 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;B+ 树的范围查询，只需要对有序的双向链表进行遍历即可&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/249993-20170525154141810-591706803.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;B树索引（3阶）&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/249993-20170531161139243-491884410.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;（B+树索引）&lt;/center&gt;
&lt;p&gt;综上，B + 树与 B 树相比，具备 **&lt;font color=&#39;red&#39;&gt;更高，更稳定的查询效率、更适用于范围查询&lt;/font&gt;** 这些优势。&lt;/p&gt;
&lt;h5 id=&#34;mysql-选择-b-树作为索引结构的原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-选择-b-树作为索引结构的原因&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟MySQL 选择 B+ 树作为索引结构的原因&lt;/mark&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;1、为什么不使用二叉查找树（BST）？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;二叉查找树可能因为失衡严重出现&lt;font color=&#39;red&#39;&gt;“斜树”，退化为线性链表，相当于全表扫描&lt;/font&gt;，高度太高了，查找效率不稳定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、为什么不使用平衡二叉树？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;平衡二叉树解决了二叉树高度太高，查找效率不稳定的问题。但是，平衡二叉树的&lt;font color=&#39;red&#39;&gt;每个节点只存储一个键值和数据，如果数据非常的多，二叉树的结点将会非常多，高度也会很高，查找效率降低&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、为什么不使用 B 树？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;B 树只适合随机检索&lt;/font&gt;&lt;/strong&gt;，而 B + 树同时支持随机检索和顺序 / 范围检索；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;B + 树的空间利用率更高&lt;/font&gt;&lt;/strong&gt;：因为 B + 树的内部节点（非叶子节点，也称索引节点）不存储数据，只存储索引值，相比较 B 树来说，B + 树一个节点可存储更多的索引值，使得整颗 B + 树变得更矮，减少 I/O 次数，磁盘读写代价更低，I/O 读写次数是影响索引检索效率的最大因素；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;B + 树查询效率更加稳定&lt;/font&gt;&lt;/strong&gt;：因为在 B + 树中，顺序检索比较明显，随机检索时，由于 B + 树所有的 data 域（结点中存储数据元素的部分）都在根节点，任何关键字的查找都必须走一条从根节点到叶节点的路，所有关键字的查找路径相同，导致每一个关键字的查询效率基本相同，时间复杂度固定为 O (log n)；而 B 树搜索有可能会在非叶子节点结束，越靠近根节点的记录查找时间越短，其性能等价于在关键字全集内做一次二分查找，查询时间复杂度不固定，与 key 在树中的位置有关，最好情况为 O (1)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;B + 树范围查询性能更优&lt;/font&gt;&lt;/strong&gt;：因为 B + 树的叶子节点使用了指针顺序（链表）从小到大地连接在一起，B + 树叶节点两两相连可大大增加区间访问性，只要遍历叶子节点就可以实现整棵树的遍历；而 B 树的叶子节点是相互独立的，每个节点 key（索引）和 data 在一起，则无法查找区间；&lt;/p&gt;
&lt;p&gt;根据空间局部性原理：如果一个存储器的某个位置被访问，那么将它附近的位置也会被访问。若访问节点 key 为 50，则 key 为 55、60、62 的节点将来也可能被访问，可利用磁盘预读原理提前将这些数据读入内存，减少了磁盘 IO 的次数。当然 B + 树也能够很好的完成范围查询，比如同时也会查询 key 值在 50-70 之间的节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;B + 树增删文件（节点）时效率更高&lt;/font&gt;&lt;/strong&gt;：因为 B + 树的叶子节点包含了所有关键字，并以有序的链表结构存储。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;索引分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引分类&#34;&gt;#&lt;/a&gt; 索引分类&lt;/h4&gt;
&lt;p&gt;按照&lt;font color=&#39;gree&#39;&gt;数据结构&lt;/font&gt;分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;B + 树索引&lt;/font&gt;&lt;/strong&gt;：MySQL 里&lt;font color=&#39;red&#39;&gt;默认的&lt;/font&gt;索引类型。&lt;font color=&#39;red&#39;&gt;只有叶子节点存储 value，非叶子节点只有指针和 key&lt;/font&gt;。存储引擎 MyISAM 和 InnoDB 实现索引都是使用 B+Tree，但二者实现方式不一样。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;hash 索引&lt;/font&gt;：类似键值对的形式，一次即可定位。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;R 树索引&lt;/font&gt;：一般不会使用，&lt;font color=&#39;red&#39;&gt;仅支持 geometry 数据类型&lt;/font&gt;，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;全文索引&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;对文本的内容进行分词，进行搜索&lt;/font&gt;。目前只有  &lt;code&gt;CHAR&lt;/code&gt; 、 &lt;code&gt;VARCHAR&lt;/code&gt;  ， &lt;code&gt;TEXT&lt;/code&gt;  列上可以创建全文索引。&lt;font color=&#39;red&#39;&gt;一般不会使用，效率较低&lt;/font&gt;，通常使用搜索引擎如 ElasticSearch 代替。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按照&lt;font color=&#39;gree&#39;&gt;底层存储方式&lt;/font&gt;划分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;聚集索引&lt;/font&gt;&lt;/strong&gt;：聚集索引的&lt;strong&gt;叶子节点存储的是&lt;u&gt;整行记录&lt;/u&gt;&lt;/strong&gt;。&lt;font color=&#39;red&#39;&gt;可以直接查找到数据，查询速度快。每个表只能有一个聚集索引&lt;/font&gt;。例如 &lt;font color=&#39;red&#39;&gt;InnoDB 引擎中的主键索引&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 MySQL 中，InnoDB 引擎表的  &lt;code&gt;.ibd&lt;/code&gt;  表空间文件包含了该表的索引和数据，因此该表的索引 (B + 树) 的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;非聚集索引&lt;/font&gt;&lt;/strong&gt;：非聚集索引的&lt;strong&gt;叶子节点存储的是&lt;u&gt;索引列的值、指向对应行记录的指针&lt;/u&gt;&lt;/strong&gt;。查询速度相对较慢。&lt;font color=&#39;red&#39;&gt;MyISAM 引擎，无论主键还是非主键，使用的都是非聚集索引&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按照&lt;font color=&#39;gree&#39;&gt;应用维度&lt;/font&gt;划分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;主键索引&lt;/font&gt;：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;普通索引&lt;/font&gt;：仅加速查询。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;唯一索引&lt;/font&gt;：加速查询 + 列值唯一（可以有 NULL）。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;覆盖索引&lt;/font&gt;：一个索引包含（或者说覆盖）所有需要查询的字段的值。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;联合索引&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;多列值组成一个索引&lt;/font&gt;，专门用于组合搜索，其效率大于索引合并。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;全文索引&lt;/font&gt;：对文本的内容进行分词，进行搜索。目前只有  &lt;code&gt;CHAR&lt;/code&gt; 、 &lt;code&gt;VARCHAR&lt;/code&gt;  ， &lt;code&gt;TEXT&lt;/code&gt;  列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MySQL 8.x 中实现的&lt;font color=&#39;gree&#39;&gt;索引新特性&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;隐藏索引&lt;/font&gt;：也称为不可见索引，不会被优化器使用，但是仍然需要维护，通常会软删除和灰度发布的场景中使用。主键不能设置为隐藏（包括显式设置或隐式设置）。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;降序索引&lt;/font&gt;：之前的版本就支持通过 desc 来指定索引为降序，但实际上创建的仍然是常规的升序索引。直到 MySQL 8.x 版本才开始真正支持降序索引。另外，在 MySQL 8.x 版本中，不再对 GROUP BY 语句进行隐式排序。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;函数索引&lt;/font&gt;：从 MySQL 8.0.13 版本开始支持在索引中使用函数或者表达式的值，也就是在索引中可以包含函数或者表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;主键索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主键索引&#34;&gt;#&lt;/a&gt; 主键索引&lt;/h5&gt;
&lt;p&gt;数据表的&lt;font color=&#39;red&#39;&gt;主键列&lt;/font&gt;使用的就是主键索引。&lt;/p&gt;
&lt;p&gt;一张数据表有只能有一个主键，并且主键不能为 null，不能重复。&lt;/p&gt;
&lt;p&gt;在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6 Byte 的自增主键。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/cluster-index.png&#34; alt=&#34;主键索引&#34; /&gt;&lt;/p&gt;
&lt;center&gt;主键索引&lt;/center&gt;
&lt;h5 id=&#34;二级索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二级索引&#34;&gt;#&lt;/a&gt; 二级索引&lt;/h5&gt;
&lt;p&gt;二级索引（Secondary Index）又称为辅助索引，是一种非聚集索引，因为&lt;strong&gt;二级索引的叶子节点仅仅存储&lt;u&gt;索引列的值、对应行记录的主键 key&lt;/u&gt;&lt;/strong&gt;。也就是说，&lt;font color=&#39;red&#39;&gt;通过二级索引，可以定位主键的位置，再根据主键索引查找行记录 data，这就是&lt;strong&gt;二次查询（回表）&lt;/strong&gt;，因此二级索引的查询速度较慢&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;唯一索引，普通索引，前缀索引、全文索引都属于二级索引：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;唯一索引 (Unique Key)&lt;/font&gt;：唯一索引也是一种约束。&lt;font color=&#39;red&#39;&gt;唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引&lt;/font&gt;。建立唯一索引的目的大部分时候都是&lt;font color=&#39;red&#39;&gt;为了该属性列的数据的唯一性，而不是为了查询效率&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;普通索引 (Index)&lt;/font&gt;：普通索引的唯一作用就是&lt;font color=&#39;red&#39;&gt;为了快速查询数据&lt;/font&gt;，一张表允许创建多个普通索引，并允许数据重复和 NULL。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;前缀索引 (Prefix)&lt;/font&gt;：前缀索引只适用于字符串类型的数据。前缀索引是&lt;font color=&#39;red&#39;&gt;对文本的前几个字符创建索引，相比普通索引建立的数据更小&lt;/font&gt;，因为只取前几个字符。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;全文索引 (Full Text)&lt;/font&gt;：全文索引主要是&lt;font color=&#39;red&#39;&gt;为了检索大文本数据中的关键字信息&lt;/font&gt;，是目前搜索引擎数据库使用的一种技术。Mysql 5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/no-cluster-index.png&#34; alt=&#34;二级索引&#34; /&gt;&lt;/p&gt;
&lt;center&gt;二级索引&lt;/center&gt;
&lt;h5 id=&#34;聚集索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#聚集索引&#34;&gt;#&lt;/a&gt; 聚集索引&lt;/h5&gt;
&lt;p&gt;聚集索引（Clustered Index）的&lt;strong&gt;叶子节点存储的是&lt;u&gt;整行记录&lt;/u&gt;&lt;/strong&gt;。&lt;font color=&#39;red&#39;&gt;可以直接查找到数据，查询速度快。每个表只能有一个聚集索引&lt;/font&gt;。例如 &lt;font color=&#39;red&#39;&gt;InnoDB 引擎中的主键索引&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;在 MySQL 中，&lt;font color=&#39;red&#39;&gt;InnoDB 引擎的表的  &lt;code&gt;.ibd&lt;/code&gt;  表空间文件就包含了该表的索引和数据&lt;/font&gt;，对于 InnoDB 引擎表来说，该表的索引 (B + 树) 的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查询速度非常快&lt;/strong&gt;：因为整个 B+ 树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。&lt;font color=&#39;red&#39;&gt;相比于非聚集索引， 聚集索引少了一次读取数据的 IO 操作&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对排序查找和范围查找优化&lt;/strong&gt;：对于主键的排序查找和范围查找速度非常快。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;依赖于有序的数据&lt;/strong&gt;：因为 B+ 树是多路平衡树，如果索引的数据不是有序的，那么就&lt;font color=&#39;red&#39;&gt;需要在插入时排序&lt;/font&gt;，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，&lt;font color=&#39;red&#39;&gt;插入或查找的速度肯定比较慢&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改更新的代价大&lt;/strong&gt;：如果索引列的数据被修改，那么对应的索引也将会被修改，而且聚集索引的叶子节点还存放着数据，修改代价肯定是较大的。所以对于主键索引来说，主键一般都是不可被修改的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;非聚集索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非聚集索引&#34;&gt;#&lt;/a&gt; 非聚集索引&lt;/h5&gt;
&lt;p&gt;非聚集索引（Non-Clustered Index）的&lt;strong&gt;叶子节点存储的是&lt;u&gt;索引列的值、指向对应行记录的指针&lt;/u&gt;&lt;/strong&gt;。查询速度相对较慢。二级索引 (辅助索引) 就属于非聚集索引。&lt;font color=&#39;red&#39;&gt;MyISAM 引擎，无论主键还是非主键，使用的都是非聚集索引&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;非聚集索引的叶子节点并不一定存放数据的指针，因为&lt;font color=&#39;red&#39;&gt;二级索引的叶子节点就存放的是主键，根据主键再回表查数据&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;更新代价比聚集索引要小&lt;/strong&gt;：因为非聚集索引的&lt;font color=&#39;red&#39;&gt;叶子节点是不存放数据的&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;依赖于有序的数据&lt;/strong&gt;：跟聚簇索引一样，非聚簇索引也依赖于有序的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;orange&#39;&gt;可能会二次查询 (回表查询)&lt;/font&gt;&lt;/strong&gt;: 这应该是非聚簇索引最大的缺点了。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;当查到非聚集索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;非聚集索引不一定回表查询。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;试想一种情况，用户准备使用 SQL 查询用户名，而用户名字段正好建立了索引。&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; name &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;guang19&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;那么这个&lt;font color=&#39;red&#39;&gt;索引的 key 本身就是要查询的字段&lt;/font&gt;，查到对应的 name 直接返回就行了，无需回表查询。&lt;/p&gt;
&lt;p&gt;即使是 MYISAM 也是这样，虽然 MYISAM 的主键索引确实需要回表，因为它的主键索引的叶子节点存放的是指针。但是！&lt;strong&gt;如果 SQL 查的就是主键呢？&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; id &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; id&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;主键索引本身的 key 就是主键，查到返回就行了。这种情况就称之为&lt;strong&gt;覆盖索引&lt;/strong&gt;了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是 MySQL 的 InnoDB、MyISAM 表的文件截图：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;InnoDB、MyISAM、Memory 这三种存储引擎的存储文件内容&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无论哪种引擎，&lt;font color=&#39;gree&#39;&gt;表的结构&lt;/font&gt;都存储在  &lt;code&gt;.sdi&lt;/code&gt;  文件中&lt;/li&gt;
&lt;li&gt;对于 InnoDB，表的索引和数据都存储在  &lt;code&gt;.ibd 表空间文件&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;对于 MyISAM，表的索引存储在  &lt;code&gt;.MYI&lt;/code&gt;  文件中，表的数据存储在  &lt;code&gt;.MYD&lt;/code&gt;  文件中&lt;/li&gt;
&lt;li&gt;对于 Memory，表的索引和数据都存储在 &lt;code&gt;内存&lt;/code&gt; 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/mysql20210420165311654.png&#34; alt=&#34;MySQL 表的文件&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;聚集索引和非聚集索引的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#聚集索引和非聚集索引的区别&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟聚集索引和非聚集索引的区别&lt;/mark&gt;&lt;/h5&gt;
&lt;p&gt;聚集索引：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据存储方式：表中的数据与索引按顺序存放在一块，&lt;font color=&#39;red&#39;&gt;找到索引也就找到了数据&lt;/font&gt;，即数据的物理存放顺序与索引顺序是一致的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;叶节点的 k-v：&lt;font color=&#39;red&#39;&gt;（主键，行记录）&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;唯一性：&lt;font color=&#39;red&#39;&gt;表中只能有一个聚集索引，通常是主键&lt;/font&gt;（因为主键要求其值在表中唯一且非空）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询性能：&lt;font color=&#39;red&#39;&gt;范围查询、排序查询的性能高&lt;/font&gt;，但&lt;font color=&#39;red&#39;&gt;插入速度严重依赖于插入顺序&lt;/font&gt;；&lt;font color=&#39;red&#39;&gt;更新主键的代价很高&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;按照主键顺序插入&lt;/font&gt;是最快的方式，否则将会出现&lt;font color=&#39;red&#39;&gt;页分裂&lt;/font&gt;，严重影响性能。因此，对于 InnoDB 表，我们一般都会定义一个&lt;font color=&#39;red&#39;&gt;自增的 ID 列为主键&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;更新主键会导致被更新的行移动。因此对于 InnoDB 表，&lt;font color=&#39;red&#39;&gt;一般定义主键为不可更新&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;非聚集索引：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据存储方式：&lt;font color=&#39;red&#39;&gt;索引和实际数据的物理存储是分离的&lt;/font&gt;，索引中存储了指向实际数据行的指针&lt;/li&gt;
&lt;li&gt;叶节点的 k-v：&lt;font color=&#39;red&#39;&gt;（索引列，指向行记录的指针）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;唯一性：&lt;font color=&#39;red&#39;&gt;表可以有多个非聚集索引，包括唯一索引&lt;/font&gt;。非聚集索引不要求索引列的值唯一&lt;/li&gt;
&lt;li&gt;查询性能：&lt;font color=&#39;red&#39;&gt;插入数据的速度快&lt;/font&gt;，但&lt;font color=&#39;red&#39;&gt;查询可能涉及回表，速度较慢&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119111458997.png&#34; alt=&#34;image-20231119111458997&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/mysql20210420165326946.png&#34; alt=&#34;聚簇索引和非聚簇索引&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;倒排索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#倒排索引&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟倒排索引&lt;/mark&gt;&lt;/h5&gt;
&lt;p&gt;先讲正排索引，意思就是我们的所有文档都有唯一一个文档 id，根据文档里的内容算出每个文档中关键字的内容和次数，类似于通过 key 去找 value 的形式，如果正牌索引，我们每次寻找关键字查询，就得搜索所有的文档去看是否有这个关键字，这样查询效率太慢了。&lt;/p&gt;
&lt;p&gt;于是有了倒排索引，是通过关键字去查文档，我们建立一个索引库，里面的 key 是关键字，value 是每个文档的 id，倒排在构建索引的时候较为耗时且维护成本较高，但是搜索耗时短，所以我们可以定时去更新索引库。&lt;/p&gt;
&lt;p&gt;正排索引和倒排索引是搜索引擎中的两种索引类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正排索引：每个文档都有一个唯一的文档 ID，&lt;font color=&#39;red&#39;&gt;按照文档 ID 等有序的方式将每个文档存储在索引中&lt;/font&gt;，通过文档 ID 进行检索。这种方式类似于数据库表的行，可以很方便地根据文档 ID 检索到具体的文档，但是&lt;font color=&#39;red&#39;&gt;不适合处理大规模文档库的情况&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;倒排索引：&lt;font color=&#39;red&#39;&gt;按照单词或关键字将文档进行索引&lt;/font&gt;，并记录包含该词汇的文档列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;倒排索引的优势在于查找包含某个项的文档，即用于搜索查询&lt;/font&gt;；相反，&lt;font color=&#39;red&#39;&gt;正排索引的优势是确定哪些项是否存在单个文档里&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;二者均是在 index-time 时创建，保存在 Lucene 文件中（序列化到磁盘）。&lt;/p&gt;
&lt;h5 id=&#34;覆盖索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#覆盖索引&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟覆盖索引&lt;/mark&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;我们都知道 InnoDB 中索引分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;聚集索引（主键索引）&lt;/font&gt;：（&lt;font color=&#39;gree&#39;&gt;主键&lt;/font&gt;，除主键外的完整行记录）&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;非聚集索引（辅助索引 / 普通索引）&lt;/font&gt;：（索引列的值，&lt;font color=&#39;gree&#39;&gt;主键&lt;/font&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想要搞清除什么是覆盖索引，首先得弄懂 **&lt;font color=&#39;#B32015&#39;&gt;回表查询&lt;/font&gt;**：当使用&lt;u&gt;普通索引（辅助索引）&lt;/u&gt;进行查询时，先得到行记录的主键值（&lt;font color=&#39;red&#39;&gt;但仍未得到所需的所有列数据&lt;/font&gt;），然后再根据主键值到&lt;u&gt;聚集索引（主键索引）&lt;/u&gt;中找到对应的完整行记录。&lt;/p&gt;
&lt;p&gt;由于&lt;font color=&#39;red&#39;&gt;回表导致多次扫描索引树，会降低查询效率&lt;/font&gt;。那么如何避免回表查询？&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;常用的方法是：将查询需要的字段添加到索引中，建立&lt;u&gt;联合索引&lt;/u&gt;&lt;/font&gt;。比如上面提到的查询语句，可以将 (NAME,CITY) 做成一个联合索引，这样在首次扫描索引树的时候就能从索引树本身获取到需要的所有信息，从而避免了回表。这里使用的方法就是&lt;strong&gt;覆盖索引&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;举个回表查询的例子，对于 InnoDB 表 EMPLOYEE，由三个字段（ID、NAME、CITY）组成，其中在 ID 上建立了主键索引（聚集索引），在 NAME 上建立了普通索引。&lt;/p&gt;
&lt;p&gt;现在需要进行一次如下的查询：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; NAME&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;CITY &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; EMPLOYEE &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; NAME&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Lee&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;首先通过普通索引去找到 NAME=&amp;quot;Lee&amp;quot; 对应的叶节点，获取到行记录的主键值（ID=8）。而该查询语句还需要获取 CITY 字段的值，于是 MySQL 要再根据该主键值（ID=8）通过主键索引查找，从而获得完整的数据。这个过程就是所谓的&lt;strong&gt;回表查询&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/4cfbd83c40884036b46e895d31a70726.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/28608822ef07481187c583b22bc3c80a.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果一个 **&lt;font color=&#39;#B32015&#39;&gt;索引包含了所有需要查询的字段&lt;/font&gt;**，就称之为覆盖索引（Covering Index）。在 InnoDB 中，如果不是主键索引，叶子节点存储的是索引列值 + 主键。最终还是要 “回表”，也就是要通过主键再查找一次，这样就会比较慢。&lt;font color=&#39;red&#39;&gt;而覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！因为所查询的字段都在当前索引的叶子节点上存在，可以直接作为结果返回了。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;** 覆盖索引，即需要查询的字段正好是索引的字段，那么直接根据该索引就可以查到数据了，而无需回表查询。** 因此，&lt;font color=&#39;red&#39;&gt;应该尽量使用覆盖索引，减少 &lt;code&gt;select *&lt;/code&gt; &lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引，那么直接根据这个索引就可以查到数据，也无需回表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/mysql20210420165341868.png&#34; alt=&#34;覆盖索引&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;联合索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#联合索引&#34;&gt;#&lt;/a&gt; 联合索引&lt;/h5&gt;
&lt;p&gt;使用表中的&lt;strong&gt;多个字段创建索引&lt;/strong&gt;，就是 联合索引，也叫 组合索引 或 复合索引。&lt;/p&gt;
&lt;p&gt;以  &lt;code&gt;score&lt;/code&gt;  和  &lt;code&gt;name&lt;/code&gt;  两个字段建立联合索引：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ALTER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;cus_order&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;ADD&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INDEX&lt;/span&gt; id_score_name&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;score&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;最左前缀匹配原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最左前缀匹配原则&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟最左前缀匹配原则&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;最左前缀法则：&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;查询条件中的各个列必须是联合索引中从最左边开始的连续子列。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;如果跳跃了&lt;u&gt;中间的某一列&lt;/u&gt;，那么联合索引将会&lt;u&gt;部分失效&lt;/u&gt;（后面的字段索引都失效）。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果跳跃了&lt;u&gt;最左列&lt;/u&gt;，那么联合索引将会&lt;u&gt;全部失效&lt;/u&gt;，转而进行全表扫描！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231117221133910.png&#34; alt=&#34;image-20231117221133910&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;strong&gt;联合索引的最左边字段必须在 SQL 的查询条件中存在，但是与 SQL 的查询条件中编写的字段先后顺序无关&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231117221449634.png&#34; alt=&#34;image-20231117221449634&#34; /&gt;&lt;/p&gt;
&lt;center&gt;因此对于这种情况，联合索引是全部生效的！&lt;/center&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，&lt;strong&gt;在使用联合索引时，可以将区分度高的字段放在最左边，这也可以过滤更多数据&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在联合索引的使用中，如果 SQL 出现范围查询（如  &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt;  ），那么范围查询右侧的列索引会失效！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231117221945853.png&#34; alt=&#34;image-20231117221945853&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但对于 &lt;strong&gt; &lt;code&gt;&amp;gt;=&lt;/code&gt; &lt;/strong&gt;、&lt;strong&gt; &lt;code&gt;&amp;lt;=&lt;/code&gt; &lt;/strong&gt;、&lt;strong&gt; &lt;code&gt;BETWEEN&lt;/code&gt; &lt;/strong&gt;、&lt;strong&gt; &lt;code&gt;like&lt;/code&gt; &lt;/strong&gt; 前缀匹配的范围查询，并不会停止匹配。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;索引下推&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引下推&#34;&gt;#&lt;/a&gt; 索引下推&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;索引下推（Index Condition Pushdown）&lt;/strong&gt; 是 &lt;strong&gt;MySQL 5.6&lt;/strong&gt; 版本中提供的一项索引优化功能，可以在非聚簇索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。&lt;/p&gt;
&lt;h4 id=&#34;索引失效&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引失效&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟索引失效&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;索引失效后导致使用全表扫描来查询数据&lt;/font&gt;&lt;/strong&gt;，这也是慢查询的主要原因之一，查询中导致索引失效的常见情况有这些：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/iaIdQfEric9Twmk46GNqLLRSboGCk9Pkk48jba0ibtuuic2ic9elp0r52TBmB0AbBKFK0sOZ9gf3GWPLicL34Chqrevw&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;MySQL 自身评估使用全表扫描的查询速度比使用索引的更快&lt;/font&gt;&lt;/strong&gt;：MySQL 在查询时，会评估全表扫描的查询效率与使用索引的效率，如果全表扫描更快，则放弃索引，走全表扫描。这种情况一般是  &lt;code&gt;SELECT *&lt;/code&gt;  语句。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231118133740655.png&#34; alt=&#34;image-20231118133740655&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;创建了联合索引，但查询条件未遵循&lt;u&gt;最左前缀匹配原则&lt;/u&gt;，或者涉及范围查询（如 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; ）&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;指路→&lt;a href=&#34;#==%E6%9C%80%E5%B7%A6%E5%89%8D%E7%BC%80%E5%8C%B9%E9%85%8D%E5%8E%9F%E5%88%99==&#34;&gt;最左前缀匹配原则&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231118133951572.png&#34; alt=&#34;image-20231118133951572&#34; /&gt;&lt;/p&gt;
&lt;center&gt;未遵循最左前缀匹配原则&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231117221945853.png&#34; alt=&#34;image-20231117221945853&#34; /&gt;&lt;/p&gt;
&lt;center&gt;涉及范围查询&lt;/center&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;查询条件中，对索引列进行了数学运算、函数等操作&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;因为索引保存的是索引字段的原始值&lt;/font&gt;，而不是表达式计算后的值 / 函数计算后的值，自然无法走索引了，只能通过把索引字段的取值都取出来，然后依次进行表达式计算 / 函数计算来进行条件判断，因此采用的就是&lt;font color=&#39;red&#39;&gt;全表扫描&lt;/font&gt;的方式。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231118133046959.png&#34; alt=&#34;image-20231118133046959&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;查询条件中，对索引列进行以 % 开头的 LIKE 模糊查询&lt;/font&gt;&lt;/strong&gt;：当我们使用左或者左右模糊匹配的时候，也就是 like % xx 或者 like % xx% 这两种方式都会造成索引失效。&lt;font color=&#39;red&#39;&gt;因为索引 B+ 树是按照「索引值」有序排列存储的，只能根据前缀进行比较&lt;/font&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231118133112182.png&#34; alt=&#34;image-20231118133112182&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;查询条件中，OR 前后存在非索引的列&lt;/font&gt;&lt;/strong&gt;：因为 OR 的含义就是两个只要满足一个即可，因此只有一个条件列是索引列是没有意义的，&lt;font color=&#39;red&#39;&gt;只要有一个条件列不是索引列，就会进行全表扫描&lt;/font&gt;。要想使用 OR，又想让索引生效，只能将 OR 条件中的每个列都加上索引。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231118133312921.png&#34; alt=&#34;image-20231118133312921&#34; /&gt;&lt;/p&gt;
&lt;center&gt;age没有索引，id、phone有索引&lt;/center&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;查询条件中，IN /NOT IN 的取值范围较大&lt;/font&gt;&lt;/strong&gt;：导致索引失效，走全表扫描；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;发生&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGF0YWJhc2UvbXlzcWwvaW5kZXgtaW52YWxpZGF0aW9uLWNhdXNlZC1ieS1pbXBsaWNpdC1jb252ZXJzaW9uLmh0bWw=&#34;&gt;隐式类型转换&lt;/span&gt;&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;当索引列是字符串类型时，若查询条件中数据不加单引号，虽然对于查询结果没什么影响，但是数据库会进行隐式类型转换，导致索引列失效&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231118132957838.png&#34; alt=&#34;image-20231118132957838&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;推荐阅读这篇文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbXdNRTNxdWtIQkZ1bDU3V1FMa09ZZw==&#34;&gt;美团暑期实习一面：MySQl 索引失效的场景有哪些？&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&#34;索引的正确使用建议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引的正确使用建议&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟索引的正确使用建议&lt;/mark&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;索引设计原则&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;避免索引失效&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#避免索引失效&#34;&gt;#&lt;/a&gt; 避免索引失效&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;上一节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;针对数据量大且查询频繁的表建立索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#针对数据量大且查询频繁的表建立索引&#34;&gt;#&lt;/a&gt; 针对数据量大，且查询频繁的表建立索引&lt;/h5&gt;
&lt;p&gt;基数较小的表，索引效果较差，没有必要在此列建立索引。&lt;/p&gt;
&lt;h5 id=&#34;选择合适的字段创建索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择合适的字段创建索引&#34;&gt;#&lt;/a&gt; 选择合适的字段创建索引&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不为 NULL 的字段&lt;/strong&gt;：索引字段的数据应该尽量不为 NULL，因为&lt;font color=&#39;red&#39;&gt;对于数据值为 NULL 的字段，数据库较难优化&lt;/font&gt;。如果字段频繁被查询，但又避免不了为 NULL，&lt;font color=&#39;red&#39;&gt;建议使用 0,1,true,false &lt;/font&gt;这样语义较为清晰的短值或短字符作为替代。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;被频繁查询的字段&lt;/strong&gt;：我们创建索引的字段应该是查询操作非常频繁的字段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;常作为查询条件（where）、排序（order by）、分组（group by）操作的字段&lt;/strong&gt;：被作为 WHERE 条件查询的字段，应该被考虑建立索引。索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;被经常频繁用于连接子句中的字段&lt;/strong&gt;：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，&lt;font color=&#39;red&#39;&gt;提高多表连接查询的效率&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;被频繁更新的字段应该慎重建立索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#被频繁更新的字段应该慎重建立索引&#34;&gt;#&lt;/a&gt; 被频繁更新的字段应该慎重建立索引&lt;/h5&gt;
&lt;p&gt;因为字段的更新会导致索引的更新，而维护索引的成本也是不小的。因此如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。&lt;/p&gt;
&lt;h5 id=&#34;限制每张表上的索引数量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#限制每张表上的索引数量&#34;&gt;#&lt;/a&gt; 限制每张表上的索引数量&lt;/h5&gt;
&lt;p&gt;索引需要额外的磁盘空间，并降低写操作的性能。&lt;font color=&#39;red&#39;&gt;在修改表内容的时候，索引会进行更新甚至重构，索引列越多，这个时间就会越长&lt;/font&gt;。所以只保持需要的索引有利于查询即可。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;建议单张表索引不超过 5 个！&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;索引可以增加查询效率，但同样也会降低插入和更新的效率&lt;/font&gt;，甚至有些情况下会降低查询效率。&lt;/p&gt;
&lt;h5 id=&#34;尽量考虑联合索引而不是单列索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尽量考虑联合索引而不是单列索引&#34;&gt;#&lt;/a&gt; 尽量考虑联合索引，而不是单列索引&lt;/h5&gt;
&lt;p&gt;因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+ 树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。&lt;font color=&#39;red&#39;&gt;如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升&lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;注意避免冗余索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意避免冗余索引&#34;&gt;#&lt;/a&gt; 注意避免冗余索引&lt;/h5&gt;
&lt;p&gt;冗余索引指的是索引的功能相同，能够命中索引 (a, b) 就肯定能命中索引 (a) ，那么索引 (a) 就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的。在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。&lt;/p&gt;
&lt;h5 id=&#34;针对字符串类型的字段使用前缀索引短索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#针对字符串类型的字段使用前缀索引短索引&#34;&gt;#&lt;/a&gt; 针对字符串类型的字段，使用前缀索引（短索引）&lt;/h5&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;前缀索引（短索引）仅限于字符串类型，只对字符串的一部分前缀建立索引，大大节约索引空间，提高索引效率&lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;删除长期未使用的索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除长期未使用的索引&#34;&gt;#&lt;/a&gt; 删除长期未使用的索引&lt;/h5&gt;
&lt;p&gt;不用的索引会造成不必要的性能损耗。MySQL 5.7 可以通过查询  &lt;code&gt;sys&lt;/code&gt;  库的  &lt;code&gt;schema_unused_indexes&lt;/code&gt;  视图来查询哪些索引从未被使用。&lt;/p&gt;
&lt;h5 id=&#34;不能有效区分数据的字段不适合做索引列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不能有效区分数据的字段不适合做索引列&#34;&gt;#&lt;/a&gt; 不能有效区分数据的字段不适合做索引列&lt;/h5&gt;
&lt;p&gt;如性别（男 / 女 / 未知），最多也就三种，区分度实在太低。&lt;/p&gt;
&lt;h5 id=&#34;利用-explain-命令分析-sql-是否走索引查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用-explain-命令分析-sql-是否走索引查询&#34;&gt;#&lt;/a&gt; 利用 EXPLAIN 命令分析 SQL 是否走索引查询&lt;/h5&gt;
&lt;p&gt;我们可以使用 &lt;strong&gt; &lt;code&gt;EXPLAIN&lt;/code&gt;  命令&lt;/strong&gt;来分析 SQL 的&lt;strong&gt;执行计划&lt;/strong&gt; ，这样就知道语句是否命中索引了。执行计划是指&lt;strong&gt;一条 SQL 语句在经过 MySQL 查询优化器的优化后，具体的执行方式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EXPLAIN&lt;/code&gt;  并不会真的去执行相关的语句，而是通过 &lt;strong&gt;查询优化器&lt;/strong&gt; 对语句进行分析，找出最优的查询方案，并显示对应的信息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EXPLAIN&lt;/code&gt;  的输出格式如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231118141340551.png&#34; alt=&#34;image-20231118141340551&#34; /&gt;&lt;/p&gt;
&lt;p&gt;各个字段的含义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;列名&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;含义&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;SELECT 查询的序列标识符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;select_type&lt;/td&gt;
&lt;td&gt;SELECT 关键字对应的查询类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;table&lt;/td&gt;
&lt;td&gt;用到的表名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;partitions&lt;/td&gt;
&lt;td&gt;匹配的分区，对于未分区的表，值为 NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;type&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;表的访问方法&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;possible_keys&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;可能用到的索引&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;key&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;实际用到的索引&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;key_len&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;所选索引的长度&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ref&lt;/td&gt;
&lt;td&gt;当使用索引等值查询时，与索引作比较的列或常量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rows&lt;/td&gt;
&lt;td&gt;预计要读取的行数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;filtered&lt;/td&gt;
&lt;td&gt;按表条件过滤后，留存的记录数的百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Extra&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;附加信息&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;篇幅问题，我这里只是简单介绍了一下 MySQL 执行计划，详细介绍请看：&lt;a href=&#34;&#34;&gt;MySQL 执行计划分析&lt;/a&gt;这篇文章。&lt;/p&gt;
&lt;h3 id=&#34;mysql执行计划&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql执行计划&#34;&gt;#&lt;/a&gt; MySQL 执行计划&lt;/h3&gt;
&lt;h4 id=&#34;各个字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#各个字段&#34;&gt;#&lt;/a&gt; 各个字段&lt;/h4&gt;
&lt;h5 id=&#34;id&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#id&#34;&gt;#&lt;/a&gt; id&lt;/h5&gt;
&lt;p&gt;SELECT 标识符，是查询中 SELECT 的序号，用来标识整个查询中 SELELCT 语句的顺序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;id 如果相同，从上往下依次执行&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;id 不同，&lt;font color=&#39;red&#39;&gt;id 值越大，执行优先级越高&lt;/font&gt;，如果行引用其他行的并集结果，则该值可以为 NULL。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;select_type&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#select_type&#34;&gt;#&lt;/a&gt; select_type&lt;/h5&gt;
&lt;p&gt;查询的类型，主要用于区分普通查询、联合查询、子查询等复杂的查询，常见的值有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SIMPLE&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;简单查询&lt;/font&gt;，不包含 UNION 或者子查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PRIMARY&lt;/strong&gt;：查询中如果包含子查询或其他部分，&lt;font color=&#39;red&#39;&gt;外层的 SELECT &lt;/font&gt;将被标记为 PRIMARY。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SUBQUERY&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;子查询中的第一个 SELECT&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UNION&lt;/strong&gt;：在 UNION 语句中，&lt;font color=&#39;red&#39;&gt;UNION 之后出现的 SELECT&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DERIVED&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;在 FROM 中出现的子查询&lt;/font&gt;将被标记为 DERIVED。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UNION RESULT&lt;/strong&gt;：UNION 查询的结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;table&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#table&#34;&gt;#&lt;/a&gt; table&lt;/h5&gt;
&lt;p&gt;查询用到的表名，每行都有对应的表名，表名除了正常的表之外，也可能是以下列出的值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;&amp;lt;unionM,N&amp;gt;&lt;/code&gt; &lt;/strong&gt; : 本行引用了 id 为 M 和 N 的行的 UNION 结果；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;&amp;lt;derivedN&amp;gt;&lt;/code&gt; &lt;/strong&gt; : 本行引用了 id 为 N 的表所产生的的派生表结果。派生表有可能产生自 FROM 语句中的子查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;&amp;lt;subqueryN&amp;gt;&lt;/code&gt; &lt;/strong&gt; : 本行引用了 id 为 N 的表所产生的的物化子查询结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;type重要&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#type重要&#34;&gt;#&lt;/a&gt; &lt;mark&gt;type（重要）&lt;/mark&gt;&lt;/h5&gt;
&lt;p&gt;查询执行的类型，描述了查询是如何执行的。所有值的顺序从最优到最差排序为：system &amp;gt; const &amp;gt; eq_ref &amp;gt; ref &amp;gt; fulltext &amp;gt; ref_or_null &amp;gt; index_merge &amp;gt; unique_subquery &amp;gt; index_subquery &amp;gt; range &amp;gt; index &amp;gt; ALL&lt;/p&gt;
&lt;p&gt;常见的几种类型具体含义如下（&lt;strong&gt;按照执行效率从低到高的顺序&lt;/strong&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;All（全表扫描）&lt;/font&gt;：最坏的情况，因为采用了&lt;font color=&#39;red&#39;&gt;全表扫描&lt;/font&gt;的方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;index（全索引扫描）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;查询遍历了整棵索引树&lt;/font&gt;，和 all 差不多，只不过扫描的是索引，而索引一般在内存中，速度更快。只不过 index &lt;font color=&#39;red&#39;&gt;对索引表进行全扫描&lt;/font&gt;。这样做的好处是不再需要对数据进行排序，但是开销依然很大。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以要尽量避免全表扫描和全索引扫描。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;range（对索引进行范围扫描）&lt;/font&gt;：一般在 where 子句中使用 &amp;lt;、&amp;gt;、in、between 等关键词，只检索给定范围的行，属于范围查找。执行计划中的 key 列表示哪个索引被使用了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;从这一级别开始，索引的作用会越来越明显，因此我们需要尽量让 SQL 查询可以使用到 range 这一级别及以上的 type 访问方式&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;ref（非唯一索引扫描）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;采用了非唯一索引，或者是唯一索引的非唯一性前缀&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;查询结果可能返回多条符合条件的行&lt;/font&gt;。因为虽然使用了索引，但&lt;font color=&#39;red&#39;&gt;该索引列的值并不唯一，有重复&lt;/font&gt;。这样即使使用索引快速查找到了第一条数据，仍然不能停止，要进行目标值附近的小范围扫描。但它的&lt;font color=&#39;red&#39;&gt;好处是它并不需要扫全表，因为索引是有序的，即便有重复值，也是在一个非常小的范围内扫描&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;eq_ref（唯一索引扫描）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;使用主键索引或唯一索引&lt;/font&gt;时产生的访问方式，&lt;font color=&#39;red&#39;&gt;通常使用在多表联查中&lt;/font&gt;。比如，对两张表进行联查，关联条件是两张表的 user_id 相等，且 user_id 是唯一索引，那么使用 EXPLAIN 进行执行计划查看的时候，type 就会显示 eq_ref。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;const&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;使用了主键或者唯一索引与常量值进行比较&lt;/font&gt;，表中最多只有一行匹配的记录，一次查询就可以找到。比如 select name from product where id=1。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要说明的是 const 类型和 eq_ref 都使用了主键或唯一索引，不过这两个类型有所区别，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;const 是与常量进行比较，查询效率会更快；而 eq_ref 通常用于多表联查中&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;system&lt;/font&gt;：如果表使用的引擎对于表行数统计是精确的（如：MyISAM），且表中只有一行记录的情况下，访问方法是 system ，是 const 的一种特例。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面这个不知道性能如何...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index_merge&lt;/strong&gt;：当查询条件使用了多个索引时，表示开启了 Index Merge 优化，此时执行计划中的 key 列列出了使用到的索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;possible_keys&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#possible_keys&#34;&gt;#&lt;/a&gt; possible_keys&lt;/h5&gt;
&lt;p&gt;possible_keys 列表示&lt;font color=&#39;red&#39;&gt; MySQL 执行查询时可能用到的索引&lt;/font&gt;。如果这一列为 NULL ，则表示没有可能用到的索引；这种情况下，需要检查 WHERE 语句中所使用的的列，看是否可以通过给这些列中某个或多个添加索引的方法来提高查询性能。&lt;/p&gt;
&lt;h5 id=&#34;key重要&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#key重要&#34;&gt;#&lt;/a&gt; key（重要）&lt;/h5&gt;
&lt;p&gt;key 列表示&lt;font color=&#39;red&#39;&gt; MySQL 实际使用到的索引&lt;/font&gt;。如果为 NULL，则表示未用到索引。&lt;/p&gt;
&lt;h5 id=&#34;key_len&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#key_len&#34;&gt;#&lt;/a&gt; key_len&lt;/h5&gt;
&lt;p&gt;key_len 列表示 MySQL 实际使用的索引的最大长度；当使用到联合索引时，有可能是多个列的长度和。在满足需求的前提下越短越好。如果 key 列显示 NULL ，则 key_len 列也显示 NULL 。&lt;/p&gt;
&lt;h5 id=&#34;rows&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rows&#34;&gt;#&lt;/a&gt; rows&lt;/h5&gt;
&lt;p&gt;rows 列表示根据表统计信息及选用情况，大致估算出找到所需的记录或所需读取的行数，数值越小越好。&lt;/p&gt;
&lt;h5 id=&#34;extra重要&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#extra重要&#34;&gt;#&lt;/a&gt; &lt;mark&gt;Extra（重要）&lt;/mark&gt;&lt;/h5&gt;
&lt;p&gt;这列包含了 MySQL 解析查询的额外信息，通过这些信息，可以更准确的理解 MySQL 到底是如何执行查询的。常见的值如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Using filesort&lt;/font&gt;&lt;/strong&gt;：在排序时使用了外部的索引排序，没有用到表内索引进行排序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Using temporary&lt;/font&gt;&lt;/strong&gt;：MySQL 需要创建临时表来存储查询的结果，常见于 ORDER BY 和 GROUP BY。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Using index&lt;/font&gt;&lt;/strong&gt;：表明查询使用了覆盖索引，不用回表，查询效率非常高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using index condition&lt;/strong&gt;：表示查询优化器选择使用了索引条件下推这个特性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using where&lt;/strong&gt;：表明查询使用了 WHERE 子句进行条件过滤。一般在没有使用到索引的时候会出现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using join buffer (Block Nested Loop)&lt;/strong&gt;：连表查询的方式，表示当被驱动表的没有使用索引的时候，MySQL 会先将驱动表读出来放到 join buffer 中，再遍历被驱动表与驱动表进行查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里提醒下，当 Extra 列包含 Using filesort 或 Using temporary 时，MySQL 的性能可能会存在问题，需要尽可能避免。&lt;/p&gt;
&lt;h4 id=&#34;explain的结果有哪些有哪些信息去告诉你怎么优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#explain的结果有哪些有哪些信息去告诉你怎么优化&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟explain 的结果有哪些？有哪些信息去告诉你怎么优化？&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231130210942311.png&#34; alt=&#34;image-20231130210942311&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对于执行计划，参数有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;possible_keys&lt;/code&gt; ：可能用到的索引；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;实际用的索引&lt;/font&gt;。如果这一项为 NULL，说明没有使用索引；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key_len&lt;/code&gt; ：索引的长度；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rows&lt;/code&gt; ：扫描的数据行数；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;数据扫描类型&lt;/font&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Extra&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;MySQL 解析查询的额外信息&lt;/font&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;type-字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#type-字段&#34;&gt;#&lt;/a&gt; type 字段&lt;/h5&gt;
&lt;p&gt;type 字段描述了&lt;font color=&#39;red&#39;&gt;找到所需数据时使用的扫描方式&lt;/font&gt;是什么，常见扫描类型的 **&lt;font color=&#39;#B32015&#39;&gt;执行效率从低到高的顺序为&lt;/font&gt;**：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;All（全表扫描）&lt;/font&gt;：最坏的情况，因为采用了&lt;font color=&#39;red&#39;&gt;全表扫描&lt;/font&gt;的方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;index（全索引扫描）&lt;/font&gt;： 和 all 差不多，只不过 index &lt;font color=&#39;red&#39;&gt;对索引表进行全扫描&lt;/font&gt;。这样做的好处是不再需要对数据进行排序，但是开销依然很大。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以要尽量避免全表扫描和全索引扫描。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;range（索引范围扫描）&lt;/font&gt;：一般在 where 子句中使用 &amp;lt;、&amp;gt;、in、between 等关键词，只检索给定范围的行，属于范围查找。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;从这一级别开始，索引的作用会越来越明显，因此我们需要尽量让 SQL 查询可以使用到 range 这一级别及以上的 type 访问方式&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;ref（非唯一索引扫描）&lt;/font&gt;：采用了非唯一索引，或者是唯一索引的非唯一性前缀，&lt;font color=&#39;red&#39;&gt;返回的数据可能是多条&lt;/font&gt;。因为虽然使用了索引，但&lt;font color=&#39;red&#39;&gt;该索引列的值并不唯一，有重复&lt;/font&gt;。这样即使使用索引快速查找到了第一条数据，仍然不能停止，要进行目标值附近的小范围扫描。但它的&lt;font color=&#39;red&#39;&gt;好处是它并不需要扫全表，因为索引是有序的，即便有重复值，也是在一个非常小的范围内扫描&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;eq_ref（唯一索引扫描）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;使用主键索引或唯一索引&lt;/font&gt;时产生的访问方式，&lt;font color=&#39;red&#39;&gt;通常使用在多表联查中&lt;/font&gt;。比如，对两张表进行联查，关联条件是两张表的 user_id 相等，且 user_id 是唯一索引，那么使用 EXPLAIN 进行执行计划查看的时候，type 就会显示 eq_ref。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;const（结果只有一条的主键或唯一索引扫描）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;使用了主键或者唯一索引与常量值进行比较&lt;/font&gt;，比如 select name from product where id=1。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要说明的是 const 类型和 eq_ref 都使用了主键或唯一索引，不过这两个类型有所区别，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;const 是与常量进行比较，查询效率会更快；而 eq_ref 通常用于多表联查中&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&#34;extra-字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#extra-字段&#34;&gt;#&lt;/a&gt; Extra 字段&lt;/h5&gt;
&lt;p&gt;这里说几个重要的参考指标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Using filesort&lt;/font&gt;：当查询语句中包含 group by 操作，而且无法利用索引完成排序操作的时候，这时&lt;font color=&#39;red&#39;&gt;不得不选择相应的排序算法进行，甚至可能会通过文件排序，效率是很低的&lt;/font&gt;，所以要避免这种问题的出现。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Using temporary&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;使用临时表保存中间结果&lt;/font&gt;，MySQL 在对查询结果排序时使用临时表，常见于排序 order by 和分组查询 group by。效率低，要避免这种问题的出现。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Using index&lt;/font&gt;：所需数据只需在索引即可全部获得，不须要再到表中取数据，也就是&lt;font color=&#39;red&#39;&gt;使用了覆盖索引，避免了回表操作&lt;/font&gt;，效率不错。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mysql查询缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql查询缓存&#34;&gt;#&lt;/a&gt; MySQL 查询缓存&lt;/h3&gt;
&lt;h4 id=&#34;介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍&lt;/h4&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;执行查询语句的时候，会先查询缓存&lt;/font&gt;。不过，&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;MySQL 8.0 版本后移除&lt;/font&gt;&lt;/strong&gt;，因为这个功能不太实用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;my.cnf&lt;/code&gt;  加入以下配置，重启 MySQL 开启查询缓存：&lt;/p&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;figcaption data-lang=&#34;.properties&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;query_cache_type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token value attr-value&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;query_cache_size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token value attr-value&#34;&gt;600000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;MySQL 执行以下命令也可以开启查询缓存：&lt;/p&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;figcaption data-lang=&#34;.properties&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;global  query_cache_type=1;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;global  query_cache_size=600000;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如上，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;开启查询缓存后，在同样的查询条件以及数据情况下，会直接在缓存中返回结果&lt;/font&gt;&lt;/strong&gt;。这里的查询条件包括查询本身、当前要查询的数据库、客户端协议版本号等一些可能影响结果的信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查询缓存不命中的情况：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;任何两个查询在任何字符上的不同&lt;/font&gt;都会导致缓存不命中。&lt;/li&gt;
&lt;li&gt;如果查询中包含任何&lt;font color=&#39;red&#39;&gt;用户自定义函数、存储函数、用户变量、临时表、MySQL 库中的系统表&lt;/font&gt;，其查询结果也不会被缓存。&lt;/li&gt;
&lt;li&gt;缓存建立之后，MySQL 的查询缓存系统会跟踪查询中涉及的每张表，&lt;font color=&#39;red&#39;&gt;如果这些表（数据或结构）发生变化，那么相关的所有缓存数据都将失效&lt;/font&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;** 缓存虽然能够提升数据库的查询性能，但是缓存同时也带来了额外的开销，每次查询后都要做一次缓存操作，失效后还要销毁。** 因此，开启查询缓存要谨慎，尤其对于写密集的应用来说更是如此。如果开启，要注意合理控制缓存空间大小，一般来说其大小设置为几十 MB 比较合适。&lt;/p&gt;
&lt;p&gt;此外，还可以通过  &lt;code&gt;sql_cache&lt;/code&gt;  和  &lt;code&gt;sql_no_cache&lt;/code&gt;  来控制某个查询语句是否需要缓存：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; sql_no_cache &lt;span class=&#34;token function&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; usr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h4&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;MySQL 中的查询缓存虽然能够提升数据库的查询性能，但是查询同时也带来了额外的开销，每次查询后都要做一次缓存操作，失效后还要销毁&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;查询缓存是一个适用较少情况的缓存机制。如果你的应用对数据库的更新很少，那么查询缓存将会作用显著。比较典型的如博客系统，一般博客&lt;font color=&#39;red&#39;&gt;更新相对较慢，数据表相对稳定不变，这时候查询缓存的作用会比较明显&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;简单总结一下查询缓存的&lt;font color=&#39;gree&#39;&gt;适用场景&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表数据修改不频繁、数据较静态&lt;/li&gt;
&lt;li&gt;查询（Select）重复度高&lt;/li&gt;
&lt;li&gt;查询结果集小于 1 MB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于一个更新频繁的系统来说，查询缓存缓存的作用是很微小的，在某些情况下开启查询缓存会带来性能的下降。&lt;/p&gt;
&lt;p&gt;简单总结一下查询缓存&lt;font color=&#39;gree&#39;&gt;不适用的场景&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表中的数据、表结构或者索引变动频繁&lt;/li&gt;
&lt;li&gt;重复的查询很少&lt;/li&gt;
&lt;li&gt;查询的结果集很大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;《高性能 MySQL》这样写到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根据我们的经验，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;在高并发压力环境中查询缓存会导致系统性能的下降，甚至僵死&lt;/font&gt;&lt;/strong&gt;。如果你一定要使用查询缓存，那么不要设置太大内存，而且只有在明确收益的时候才使用（数据库内容修改次数较少）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;确实是这样的！&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;实际项目中，更建议使用本地缓存（比如 Caffeine）或者分布式缓存（比如 Redis），性能更好，更通用一些。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;mysql三大日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql三大日志&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟MySQL 三大日志&lt;/mark&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;binlog、redo log、undo log&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟简介&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;MySQL&lt;/code&gt;  日志 主要包括错误日志、查询日志、事务日志、二进制日志几大类。其中，比较重要的还要属：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二进制日志： &lt;code&gt;binlog&lt;/code&gt; （归档日志）&lt;/li&gt;
&lt;li&gt;事务日志： &lt;code&gt;redo log&lt;/code&gt; （重做日志）、  &lt;code&gt;undo log&lt;/code&gt; （回滚日志）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面对这三种日志进行简介：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;binlog（二进制日志 / 归档日志）&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;是逻辑日志，记录了语句的原始逻辑&lt;/font&gt;。无论用哪种存储引擎，&lt;font color=&#39;red&#39;&gt;只要表发生了数据更新，都会产生 binlog 日志&lt;/font&gt;。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;主要用于主从复制（读写分离）&lt;/font&gt;&lt;/strong&gt;，在主从复制中，从库利用主库上的 binlog 进行重播，实现主从数据同步。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;redo log（重做日志）&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;是物理日志，记录了在某个数据页上做了什么修改&lt;/font&gt;。防止在发生故障的时间点，尚有脏页未写入磁盘，在重启 mysql 服务的时候，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;根据 redo log 进行重做，从而确保事务的持久性（D）&lt;/font&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;undo log（回滚日志）&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;是逻辑日志，记录的是逻辑相反的操作信息&lt;/font&gt;。可以 **&lt;font color=&#39;red&#39;&gt;用于回滚&lt;/font&gt;&lt;strong&gt;，当执行 rollback 时，就可以从 undo log 中的逻辑记录读取到相应的内容并进行回滚，以确保事务的原子性（A）。同时&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;可以提供 MVCC 下的读（即非锁定读 / 快照读）&lt;/font&gt;**。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/01.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;redo-log重做日志-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redo-log重做日志-2&#34;&gt;#&lt;/a&gt; redo log（重做日志）&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;redo log&lt;/code&gt; （重做日志）&lt;font color=&#39;red&#39;&gt;是 InnoDB 存储引擎独有的&lt;/font&gt;，它让 &lt;code&gt;MySQL&lt;/code&gt;  拥有了&lt;strong&gt;崩溃恢复能力&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如  &lt;code&gt;MySQL&lt;/code&gt;  实例挂了或宕机了，重启时， &lt;code&gt;InnoDB&lt;/code&gt;  存储引擎会使用 &lt;code&gt;redo log&lt;/code&gt;  恢复数据，保证数据的持久性与完整性。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/02.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;InnoDB 表的读写流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;MySQL 中数据以页为单位&lt;/font&gt;，你查询一条记录，会从硬盘把一页的数据加载出来，加载出来的数据叫&lt;strong&gt;数据页&lt;/strong&gt;，会放入到 &lt;strong&gt;缓冲池 Buffer Pool&lt;/strong&gt; 中。&lt;/li&gt;
&lt;li&gt;后续的查询都是先从 缓冲池 Buffer Pool 中找，没有命中再去硬盘加载，减少硬盘  &lt;code&gt;IO&lt;/code&gt;  开销，提升性能。更新表数据的时候，也是如此，发现缓冲池 Buffer Pool 里存在要更新的数据，就直接在缓冲池 Buffer Pool 里更新。&lt;/li&gt;
&lt;li&gt;然后会把 “在某个数据页上做了什么修改” 记录到 ** 重做日志缓存（ &lt;code&gt;redo log buffer&lt;/code&gt; ）** 里&lt;/li&gt;
&lt;li&gt;最后，清空 redo log buffer，并刷盘到 &lt;strong&gt;redo log file&lt;/strong&gt; 中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/03.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;刷盘时机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#刷盘时机&#34;&gt;#&lt;/a&gt; 刷盘时机&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;小贴士：&lt;font color=&#39;red&#39;&gt;每条 redo 记录由 “表空间号 + 数据页号 + 偏移量 + 修改数据长度 + 具体修改的数据” 组成&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;InnoDB 将 redo log buffer 刷到磁盘上有几种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事务提交&lt;/strong&gt;：当事务提交时，redo log buffer 里的 redo log 会被刷新到磁盘（可以通过 &lt;code&gt;innodb_flush_log_at_trx_commit&lt;/code&gt;  参数控制，后文会提到）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;log buffer 空间不足时&lt;/strong&gt;：当 log buffer 的容量被占满大约一半时，就需要把这些日志刷新到磁盘上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事务日志缓冲区（transaction log buffer）满时&lt;/strong&gt;：InnoDB 使用一个事务日志缓冲区来暂时存储事务的重做日志条目。当缓冲区满时，会触发日志的刷新，将日志写入磁盘。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定期执行 Checkpoint（检查点）操作时&lt;/strong&gt;：InnoDB 定期会执行检查点操作，将内存中的&lt;font color=&#39;red&#39;&gt;脏数据（已修改但尚未写入磁盘的数据）&lt;/font&gt;刷新到磁盘，并且会将相应的重做日志一同刷新，以确保数据的一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;后台线程会周期性刷盘&lt;/font&gt;&lt;/strong&gt;：InnoDB 启动了一个后台线程，负责周期性（每隔 1 秒）地把 redo log buffer 中的内容写到&lt;strong&gt;文件系统缓存（page cache）&lt;/strong&gt;，然后调用 &lt;strong&gt; &lt;code&gt;fsync&lt;/code&gt; &lt;/strong&gt; 刷盘。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/04.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;正常关闭服务器时&lt;/strong&gt;：MySQL 关闭的时候，redo log 都会刷入到磁盘里去。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总之，InnoDB 在多种情况下会刷新重做日志，以保证数据的持久性和一致性。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我们要注意设置正确的 **&lt;font color=&#39;red&#39;&gt;刷盘策略参数  &lt;code&gt;innodb_flush_log_at_trx_commit&lt;/code&gt; &lt;/font&gt;**。根据 MySQL 配置的刷盘策略的不同，MySQL 宕机之后可能会存在轻微的数据丢失问题。该参数的取值有 3 种，也就是共有 3 种刷盘策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;：设置为 0 的时候，表示&lt;font color=&#39;red&#39;&gt;每次事务提交时不进行刷盘操作&lt;/font&gt;，而是等待后台线程定期（1 秒）刷盘。这种方式性能最高，但是也最不安全，因为如果 MySQL 挂了或宕机了，可能会丢失最近 1 秒内的事务。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/06.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;：设置为 1 的时候，表示&lt;font color=&#39;red&#39;&gt;每次事务提交时都将进行刷盘操作&lt;/font&gt;。这种方式性能最低，但是也最安全，因为只要事务提交成功，redo log 记录就一定在磁盘里，不会有任何数据丢失。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/07.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;：设置为 2 的时候，表示&lt;font color=&#39;red&#39;&gt;每次事务提交时都只把 log buffer 里的 redo log 内容写入 page cache（文件系统缓存）&lt;/font&gt;。page cache 是专门用来缓存文件的，这里被缓存的文件就是 redo log 文件。这种方式的性能和安全性都介于前两者中间。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/09.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;日志文件组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志文件组&#34;&gt;#&lt;/a&gt; 日志文件组&lt;/h5&gt;
&lt;p&gt;硬盘上存储的  &lt;code&gt;redo log&lt;/code&gt;  是以一个&lt;strong&gt;日志文件组&lt;/strong&gt;的形式出现的，每个日志文件的大小都一样。&lt;/p&gt;
&lt;p&gt;比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么整个  &lt;code&gt;redo log&lt;/code&gt;  日志文件组可以记录 4G 的内容。&lt;/p&gt;
&lt;p&gt;它采用的是&lt;font color=&#39;red&#39;&gt;环形数组形式&lt;/font&gt;，从头开始写，写到末尾又回到头循环写，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/10.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在日志文件组中还有两个重要的属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;write pos&lt;/strong&gt; ：当前记录的写入位置，一边写一边后移&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;checkpoint&lt;/strong&gt;：当前要擦除的位置，也是往后推移&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每次刷盘  &lt;code&gt;redo log&lt;/code&gt;  记录到&lt;strong&gt;日志文件组&lt;/strong&gt;中， &lt;code&gt;write pos&lt;/code&gt;  位置就会后移更新。&lt;/p&gt;
&lt;p&gt;每次 MySQL 加载&lt;strong&gt;日志文件组&lt;/strong&gt;恢复数据时，会清空加载过的  &lt;code&gt;redo log&lt;/code&gt;  记录，并把  &lt;code&gt;checkpoint&lt;/code&gt;  后移更新。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;write pos&lt;/code&gt;  和  &lt;code&gt;checkpoint&lt;/code&gt;  之间的还空着的部分可以用来写入新的  &lt;code&gt;redo log&lt;/code&gt;  记录。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/11.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果  &lt;code&gt;write pos&lt;/code&gt;  追上  &lt;code&gt;checkpoint&lt;/code&gt;  ，表示&lt;strong&gt;日志文件组&lt;/strong&gt;满了，这时候不能再写入新的  &lt;code&gt;redo log&lt;/code&gt;  记录， &lt;code&gt;MySQL&lt;/code&gt;  得停下来，清空一些记录，把  &lt;code&gt;checkpoint&lt;/code&gt;  推进一下。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/12.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在 MySQL 8.0.30 之前，可以通过  &lt;code&gt;innodb_log_files_in_group&lt;/code&gt;  和  &lt;code&gt;innodb_log_file_size&lt;/code&gt;  配置日志文件组的文件数和文件大小。&lt;/p&gt;
&lt;p&gt;但在 MySQL 8.0.30 及之后的版本中，这两个变量已被废弃，即使被指定也是用来计算  &lt;code&gt;innodb_redo_log_capacity&lt;/code&gt;  的值。而&lt;font color=&#39;red&#39;&gt;日志文件组的文件数则固定为 32，文件大小则为  &lt;code&gt;innodb_redo_log_capacity / 32&lt;/code&gt; &lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小结&#34;&gt;#&lt;/a&gt; 小结&lt;/h5&gt;
&lt;p&gt;思考一个问题：&lt;strong&gt;只要每次把修改后的数据页直接刷盘不就好了，还有  &lt;code&gt;redo log&lt;/code&gt;  什么事？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它们不都是刷盘么？差别在哪里？&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Byte&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;bit&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;KB&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Byte&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;MB&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;KB&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;GB&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;MB&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;TB&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;GB&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;实际上，&lt;font color=&#39;red&#39;&gt;数据页大小是 &lt;code&gt;16KB&lt;/code&gt; ，刷盘比较耗时&lt;/font&gt;，可能就修改了数据页里的几  &lt;code&gt;Byte&lt;/code&gt;  数据，有必要把完整的数据页刷盘吗？&lt;/p&gt;
&lt;p&gt;而且数据页刷盘是随机写，因为一个数据页对应的位置可能在硬盘文件的随机位置，所以性能是很差。&lt;/p&gt;
&lt;p&gt;如果是写  &lt;code&gt;redo log&lt;/code&gt; ，一行记录可能就占几十  &lt;code&gt;Byte&lt;/code&gt; ，只包含表空间号、数据页号、磁盘文件偏移量、更新值，再加上是顺序写，所以刷盘速度很快。&lt;/p&gt;
&lt;p&gt;所以&lt;font color=&#39;red&#39;&gt;用  &lt;code&gt;redo log&lt;/code&gt;  形式记录修改内容，性能会远远超过刷数据页的方式，这也让数据库的并发能力更强&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实内存的数据页在一定时机也会刷盘，我们把这称为&lt;strong&gt;页合并&lt;/strong&gt;，讲  &lt;code&gt;Buffer Pool&lt;/code&gt;  的时候会对这块细说&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;binlog归档日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#binlog归档日志&#34;&gt;#&lt;/a&gt; binlog（归档日志）&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;redo log&lt;/code&gt;  它是物理日志，记录内容是 “在某个数据页上做了什么修改”，属于  &lt;code&gt;InnoDB&lt;/code&gt;  存储引擎。&lt;/p&gt;
&lt;p&gt;而 &lt;font color=&#39;red&#39;&gt; &lt;code&gt;binlog&lt;/code&gt;  是逻辑日志，记录内容是语句的原始逻辑，会记录所有涉及更新数据的逻辑操作，并且是顺序写。&lt;/font&gt;类似于 “给 ID=2 这一行的 c 字段加 1”，属于 &lt;code&gt;MySQL Server&lt;/code&gt;  层。&lt;/p&gt;
&lt;p&gt;不管用什么存储引擎，&lt;font color=&#39;red&#39;&gt;只要发生了表数据更新，都会产生  &lt;code&gt;binlog&lt;/code&gt;  日志&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;可以说 &lt;code&gt;MySQL&lt;/code&gt;  数据库的&lt;font color=&#39;red&#39;&gt;数据备份、主备、主主、主从&lt;/font&gt;都离不开 &lt;code&gt;binlog&lt;/code&gt; ，需要依靠 &lt;code&gt;binlog&lt;/code&gt;  来&lt;strong&gt;同步数据，保证数据一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/01-20220305234724956.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;记录格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#记录格式&#34;&gt;#&lt;/a&gt; 记录格式&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;binlog&lt;/code&gt;  日志有三种格式，可以通过 &lt;code&gt;binlog_format&lt;/code&gt;  参数指定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;statement&lt;/strong&gt;：记录的是 **&lt;font color=&#39;red&#39;&gt;SQL 语句原文&lt;/font&gt;**。比如执行一条 &lt;code&gt;update T set update_time=now() where id=1&lt;/code&gt; ，记录的内容如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/02-20220305234738688.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;同步数据时，会执行记录的 SQL 语句，但是有个问题， &lt;code&gt;update_time=now()&lt;/code&gt;  这里会获取当前系统时间，直接执行会导致与原库的数据不一致。为了解决这种问题，我们需要指定为 &lt;code&gt;row&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;row&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;防止数据不一致&lt;/font&gt;，记录的是 **&lt;font color=&#39;red&#39;&gt;包含具体操作数据的 SQL 语句&lt;/font&gt;**，需要通过工具 &lt;code&gt;mysqlbinlog&lt;/code&gt;  解析。这样就能保证同步数据的一致性，通常情况下都是指定为 &lt;code&gt;row&lt;/code&gt; ，这样可以&lt;font color=&#39;red&#39;&gt;为数据库的恢复与同步带来更好的可靠性&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/03-20220305234742460.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;但是这种格式，&lt;font color=&#39;red&#39;&gt;需要更大的容量来记录，比较占用空间&lt;/font&gt;，恢复与同步时会更消耗 IO 资源，影响执行速度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;mixed&lt;/strong&gt;：一种折中的方案，记录的是 **&lt;font color=&#39;red&#39;&gt;前两者的混合&lt;/font&gt;**。MySQL 会&lt;font color=&#39;red&#39;&gt;判断这条 SQL 语句是否可能引起数据不一致，如果是，就用 &lt;code&gt;row&lt;/code&gt;  格式，否则就用 &lt;code&gt;statement&lt;/code&gt;  格式&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;写入机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写入机制&#34;&gt;#&lt;/a&gt; 写入机制&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;binlog&lt;/code&gt;  的写入时机也非常简单，&lt;strong&gt;事务执行过程中，先把日志写到 &lt;code&gt;binlog cache&lt;/code&gt; ，事务提交的时候，再把 &lt;code&gt;binlog cache&lt;/code&gt;  写到 &lt;code&gt;binlog&lt;/code&gt;  文件中&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因为一个事务的 &lt;code&gt;binlog&lt;/code&gt;  不能被拆开，无论这个事务多大，也要确保一次性写入，所以系统会给每个线程分配一个块内存作为 &lt;code&gt;binlog cache&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;我们可以通过 &lt;code&gt;binlog_cache_size&lt;/code&gt;  参数控制单个线程 binlog cache 大小，如果存储内容超过了这个参数，就要暂存到磁盘（ &lt;code&gt;Swap&lt;/code&gt; ）。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;binlog&lt;/code&gt;  日志刷盘流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/04-20220305234747840.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;write：把 binlog 日志写入到文件系统的 page cache，并没有把数据持久化到磁盘，所以速度比较快&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fsync：将数据持久化到磁盘的操作&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;write 和 fsync 的时机，可以由 ** 参数 &lt;code&gt;sync_binlog&lt;/code&gt; ** 控制，默认是 1。&lt;/p&gt;
&lt;p&gt;为 0 的时候，表示每次提交事务都只 &lt;code&gt;write&lt;/code&gt; ，由系统自行判断什么时候执行 &lt;code&gt;fsync&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/05-20220305234754405.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;虽然性能得到提升，但是机器宕机， &lt;code&gt;page cache&lt;/code&gt;  里面的 binlog 会丢失。&lt;/p&gt;
&lt;p&gt;为了安全起见，可以设置为 &lt;code&gt;1&lt;/code&gt; ，表示每次提交事务都会执行 &lt;code&gt;fsync&lt;/code&gt; ，就如同 &lt;strong&gt;redo log 日志刷盘流程&lt;/strong&gt; 一样。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;还有一种折中方式，可以设置为 &lt;code&gt;N(N&amp;gt;1)&lt;/code&gt; ，表示每次提交事务都 &lt;code&gt;write&lt;/code&gt; ，但累积 &lt;code&gt;N&lt;/code&gt;  个事务后才 &lt;code&gt;fsync&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/06-20220305234801592.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在出现 &lt;code&gt;IO&lt;/code&gt;  瓶颈的场景里，将 &lt;code&gt;sync_binlog&lt;/code&gt;  设置成一个比较大的值，可以提升性能。&lt;/p&gt;
&lt;p&gt;同样的，如果机器宕机，会丢失最近 &lt;code&gt;N&lt;/code&gt;  个事务的 &lt;code&gt;binlog&lt;/code&gt;  日志。&lt;/p&gt;
&lt;h4 id=&#34;两阶段提交&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两阶段提交&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟两阶段提交&lt;/mark&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;解决 redo log 和 binlog 的一致性问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在执行更新语句过程，会记录  &lt;code&gt;redo log&lt;/code&gt;  与  &lt;code&gt;binlog&lt;/code&gt;  两块日志，以基本的事务为单位，&lt;font color=&#39;red&#39;&gt; &lt;code&gt;redo log&lt;/code&gt;  在事务执行过程中可以不断写入，而 &lt;code&gt;binlog&lt;/code&gt;  只有在提交事务时才写入&lt;/font&gt;，所以 &lt;code&gt;redo log&lt;/code&gt;  与 &lt;code&gt;binlog&lt;/code&gt;  的写入时机不一样。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/01-20220305234816065.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;为了解决两份日志之间的逻辑一致问题， &lt;code&gt;InnoDB&lt;/code&gt;  存储引擎使用 &lt;strong&gt;两阶段提交&lt;/strong&gt; 方案。原理很简单，&lt;font color=&#39;red&#39;&gt;将  &lt;code&gt;redo log&lt;/code&gt;  的写入拆成了两个步骤  &lt;code&gt;prepare&lt;/code&gt;  和  &lt;code&gt;commit&lt;/code&gt;  &lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/04-20220305234956774.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;使用两阶段提交后，写入  &lt;code&gt;binlog&lt;/code&gt;  时发生异常也不会有影响，因为 MySQL 根据  &lt;code&gt;redo log&lt;/code&gt;  日志恢复数据时，发现  &lt;code&gt;redo log&lt;/code&gt;  还处于  &lt;code&gt;prepare&lt;/code&gt;  阶段，并且没有对应  &lt;code&gt;binlog&lt;/code&gt;  日志，就会回滚该事务&lt;/font&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;再看一个场景， &lt;code&gt;redo log&lt;/code&gt;  设置  &lt;code&gt;commit&lt;/code&gt;  阶段发生异常，此时不会回滚事务。它会执行下图框住的逻辑，虽然 &lt;code&gt;redo log&lt;/code&gt;  是处于 &lt;code&gt;prepare&lt;/code&gt;  阶段，但是能通过事务 &lt;code&gt;id&lt;/code&gt;  找到对应的 &lt;code&gt;binlog&lt;/code&gt;  日志，所以 &lt;code&gt;MySQL&lt;/code&gt;  认为是完整的，就会提交事务恢复数据。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/06-20220305234907651.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这意味着一个事务到底有没有成功，看  &lt;code&gt;redo log&lt;/code&gt;  里面有没有 commit 记录，如果有 commit 记录，那么  &lt;code&gt;binlog&lt;/code&gt;  一定是持久化成功了，也就是说事务成功了。&lt;/p&gt;
&lt;h4 id=&#34;undo-log回滚日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#undo-log回滚日志&#34;&gt;#&lt;/a&gt; undo log（回滚日志）&lt;/h4&gt;
&lt;p&gt;我们知道如果想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行&lt;strong&gt;回滚&lt;/strong&gt;。在 MySQL 中，恢复机制是通过 ** 回滚日志（undo log）** 实现的。&lt;/p&gt;
&lt;p&gt;所有事务进行的修改都会先记录到这个回滚日志中，然后再执行相关的操作。如果执行过程中遇到异常的话，我们直接利用回滚日志中的信息将数据回滚到修改之前的样子即可！&lt;/p&gt;
&lt;p&gt;并且，回滚日志会先于数据持久化到磁盘上。这样就保证了即使遇到数据库突然宕机等情况，当用户再次启动数据库的时候，数据库还能够通过查询回滚日志来回滚将之前未完成的事务。&lt;/p&gt;
&lt;p&gt;另外， &lt;code&gt;MVCC&lt;/code&gt;  的实现依赖于：&lt;strong&gt;隐藏字段、Read View、undo log&lt;/strong&gt;。在内部实现中， &lt;code&gt;InnoDB&lt;/code&gt;  通过数据行的  &lt;code&gt;DB_TRX_ID&lt;/code&gt;  和  &lt;code&gt;Read View&lt;/code&gt;  来判断数据的可见性，如不可见，则通过数据行的  &lt;code&gt;DB_ROLL_PTR&lt;/code&gt;  找到  &lt;code&gt;undo log&lt;/code&gt;  中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建  &lt;code&gt;Read View&lt;/code&gt;  之前已经提交的修改和该事务本身做的修改。&lt;/p&gt;
&lt;h4 id=&#34;总结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-2&#34;&gt;#&lt;/a&gt; 总结&lt;/h4&gt;
&lt;p&gt;InnoDB 引擎使用 &lt;strong&gt;redo log (重做日志)&lt;/strong&gt; 保证事务的&lt;strong&gt;持久性&lt;/strong&gt;，使用 &lt;strong&gt;undo log (回滚日志)&lt;/strong&gt; 来保证事务的&lt;strong&gt;原子性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;MySQL 数据库的&lt;strong&gt;数据备份、主备、主主、主从&lt;/strong&gt;都离不开 &lt;code&gt;binlog&lt;/code&gt; ，需要依靠 &lt;code&gt;binlog&lt;/code&gt;  来同步数据，保证数据一致性。&lt;/p&gt;
&lt;h4 id=&#34;常见面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见面试题&#34;&gt;#&lt;/a&gt; 常见面试题&lt;/h4&gt;
&lt;h5 id=&#34;mysql-中常见的日志有哪些&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-中常见的日志有哪些&#34;&gt;#&lt;/a&gt; &lt;mark&gt;MySQL 中常见的日志有哪些？&lt;/mark&gt;&lt;/h5&gt;
&lt;p&gt;MySQL 中常见的日志有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;归档日志（binlog）&lt;/font&gt;&lt;/strong&gt;：记录了所有修改了数据库结构或数据内容的操作，以便在主从复制时将这些操作同步到从库。二进制日志是&lt;font color=&#39;red&#39;&gt;逻辑日志&lt;/font&gt;，记录的是对&lt;font color=&#39;red&#39;&gt;数据库结构或数据内容&lt;/font&gt;的修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;重做日志（redo log）&lt;/font&gt;&lt;/strong&gt;：redo log 是 MySQL 的一种日志，&lt;strong&gt;是 InnoDB 存储引擎独有的，它让 MySQL 拥有了崩溃恢复能力&lt;/strong&gt;。&lt;font color=&#39;red&#39;&gt;redo log 只记录该存储引擎中表的修改，而 binlog 是在数据库层面产生的，所有存储引擎对数据库进行修改都会产生 binlog&lt;/font&gt;。redo log 是&lt;font color=&#39;red&#39;&gt;物理日志&lt;/font&gt;，记录的是对&lt;font color=&#39;red&#39;&gt;数据页&lt;/font&gt;的修改，而不是对数据的修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;回滚日志（undo log）&lt;/font&gt;&lt;/strong&gt;：&lt;strong&gt;是 InnoDB 存储引擎独有的&lt;/strong&gt;，记录了所有修改了数据的操作，以便在事务回滚时撤销这些操作。回滚日志是&lt;font color=&#39;red&#39;&gt;逻辑日志&lt;/font&gt;，记录的是对&lt;font color=&#39;red&#39;&gt;数据&lt;/font&gt;的修改，而不是对数据页的修改。&lt;/li&gt;
&lt;li&gt;错误日志（errorlog）：记录了 MySQL 服务器启动、运行过程中出现的错误信息。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;慢查询日志（slow query log）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;记录了执行时间超过指定阈值的 DQL 语句&lt;/font&gt;，因此可以查看该日志来优化 DQL 语句。慢查询日志&lt;font color=&#39;red&#39;&gt;默认是不开启的&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;一般查询日志（general log）：记录了 MySQL 服务器接收到的所有 SQL 语句，包括执行时间、执行结果等信息。一般查询日志可以用于调试和安全审计。&lt;/li&gt;
&lt;li&gt;中继日志（relay log）：是 MySQL 主从复制结构中&lt;font color=&#39;red&#39;&gt;从节点上的日志，用于保存主节点传输过来的数据变更事件，然后将这些事件应用于从节点&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;慢查询日志有什么用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#慢查询日志有什么用&#34;&gt;#&lt;/a&gt; 慢查询日志有什么用？&lt;/h5&gt;
&lt;p&gt;用来&lt;font color=&#39;red&#39;&gt;记录在 MySQL 中响应时间超过阀值的语句&lt;/font&gt;，具体指运行时间超过 long_query_time 值的 SQL，则会被记录到慢查询日志中。long_query_time 的默认值为 10，意思是运行 10 秒以上的 SQL 语句。慢查询日志&lt;font color=&#39;red&#39;&gt;可以帮助开发人员找出哪些语句的执行效率低，以便进行优化&lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;mysql-如何优化一个慢查询语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-如何优化一个慢查询语句&#34;&gt;#&lt;/a&gt; &lt;mark&gt;MySQL 如何优化一个慢查询语句？&lt;/mark&gt;&lt;/h5&gt;
&lt;p&gt;指路→&lt;a href=&#34;#==%E6%85%A2%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96==&#34;&gt;慢查询语句优化&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;binlog-主要记录了什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#binlog-主要记录了什么&#34;&gt;#&lt;/a&gt; binlog 主要记录了什么？&lt;/h5&gt;
&lt;p&gt;binlog 是 MySQL 的二进制日志，主要&lt;font color=&#39;red&#39;&gt;记录了对 MySQL 数据库进行的所有更改操作，包括插入、更新和删除操作&lt;/font&gt;。binlog 可以用于数据恢复、数据同步和数据备份等方面 。&lt;/p&gt;
&lt;h5 id=&#34;介绍一下redo-log以及它如何保证事务的持久性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍一下redo-log以及它如何保证事务的持久性&#34;&gt;#&lt;/a&gt; 介绍一下 redo log，以及它如何保证事务的持久性？&lt;/h5&gt;
&lt;p&gt;redo log 是 MySQL 的一种日志，&lt;strong&gt;是 InnoDB 存储引擎独有的，它让 MySQL 拥有了崩溃恢复能力&lt;/strong&gt;。&lt;font color=&#39;red&#39;&gt;redo log 只记录该存储引擎中表的修改，而 binlog 是在数据库层面产生的，所有存储引擎对数据库进行修改都会产生 binlog&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;redo log 是 MySQL 数据库用于保证事务的持久性的机制之一。在执行一个事务时，&lt;font color=&#39;red&#39;&gt;MySQL 会将事务所做出的修改操作先写入 redo log 而不是直接保存到磁盘&lt;/font&gt;，也就是 &lt;code&gt;WAL（write ahead log)机制&lt;/code&gt; 。这是因为将数据直接写入磁盘的开销较大，而将修改操作写入 redo log 可以大幅减少磁盘 IO 的次数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WAL（write ahead log）机制的基本思想：&lt;/p&gt;
&lt;p&gt;在修改数据之前，先将修改操作记录到一个日志文件中，然后再将修改操作应用到数据库中。这样，即使在修改数据的过程中出现了故障，也可以通过日志文件来恢复数据 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当一个事务提交后，&lt;font color=&#39;red&#39;&gt;MySQL 会从 redo log 中读取相应的修改操作，并将其写入磁盘&lt;/font&gt;。&lt;font color=&#39;red&#39;&gt;只要 redo log 已经持久化（即已经写入磁盘），那么就可以保证故障发生后能够完成数据恢复&lt;/font&gt;。如果 MySQL 在执行修改操作时遇到了宕机等问题，在重启后会重新应用 redo log 里未被应用的操作，从而实现事务的持久性。&lt;/p&gt;
&lt;h5 id=&#34;数据页是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据页是什么&#34;&gt;#&lt;/a&gt; 数据页是什么？&lt;/h5&gt;
&lt;p&gt;数据页是 InnoDB 存储引擎中的一个重要概念，它&lt;strong&gt;是 InnoDB 存储引擎中的最小存储单位。InnoDB 存储引擎将表空间分为多个大小相等的数据页，每个数据页默认大小为 16KB&lt;/strong&gt;。在 InnoDB 存储引擎中，每个表都有一个独立的表空间，表空间由多个数据文件组成。当表中的数据发生变化时，InnoDB 存储引擎会将修改操作记录到 redo log 中，并将修改操作应用到内存中的数据页中。当内存中的数据页被修改后，InnoDB 存储引擎会将修改操作异步刷新到磁盘上的数据文件中，从而保证了数据的持久性。&lt;/p&gt;
&lt;h5 id=&#34;页修改之后为什么不直接刷盘呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页修改之后为什么不直接刷盘呢&#34;&gt;#&lt;/a&gt; 页修改之后为什么不直接刷盘呢？&lt;/h5&gt;
&lt;p&gt;在数据库中，将修改的数据直接刷盘（写入磁盘）可能会产生一些性能开销。这是因为在执行随机磁盘 IO 的过程中，磁盘的寻址时间和磁道切换时间等所需的开销较大，说明磁盘 IO 时需要耗费较长的时间。因此&lt;strong&gt;直接刷盘会导致大量的磁盘 I/O，降低系统的性能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了避免这种情况，InnoDB 存储引擎采用了一种称为 “ &lt;code&gt;脏页刷盘&lt;/code&gt; ” 的机制。&lt;font color=&#39;red&#39;&gt;在数据库缓存中，如果一个数据页上的数据已经被修改了，但还没有被同步写入磁盘，那么这个数据页就被称为 “ &lt;code&gt;脏页&lt;/code&gt; ”&lt;/font&gt;。 &lt;code&gt;脏页刷盘&lt;/code&gt; 机制是指 InnoDB 存储引擎在&lt;font color=&#39;red&#39;&gt;将内存中的数据页刷新到磁盘上&lt;/font&gt;时，会根据一定的策略来决定哪些数据页需要被刷新到磁盘上，哪些数据页可以暂时不刷新。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;当内存中的数据页被修改前，InnoDB 存储引擎会将修改操作记录到 redo log 中，并将修改操作应用到内存中的数据页中&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;当内存中的数据页被修改后，InnoDB 存储引擎会将修改操作异步刷新到磁盘上的数据文件中，从而保证了数据的持久性&lt;/font&gt;。在这个过程中，InnoDB 存储引擎会根据一定的策略来决定哪些数据页需要被刷新到磁盘上，哪些数据页可以暂时不刷新。这样可以避免大量的磁盘 I/O，提高系统的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;binlog-和-redolog-有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#binlog-和-redolog-有什么区别&#34;&gt;#&lt;/a&gt; binlog 和 redolog 有什么区别？&lt;/h5&gt;
&lt;p&gt;binlog 和 redolog 都是 MySQL 数据库中的日志文件，用于记录数据库的修改操作。它们的主要区别在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;binlog 是 MySQL 的归档日志，用于&lt;font color=&#39;red&#39;&gt;记录所有的修改操作，包括数据的增删改操作和表结构的变更操作等&lt;/font&gt;。binlog 的作用是&lt;font color=&#39;red&#39;&gt;用于数据恢复、主从复制和数据同步&lt;/font&gt;等场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;redolog 是 InnoDB 存储引擎的事务日志，用于&lt;font color=&#39;red&#39;&gt;记录事务的修改操作&lt;/font&gt;。redolog 的作用是&lt;font color=&#39;red&#39;&gt;用于保证事务的原子性、一致性和持久性&lt;/font&gt;。当一个事务提交时，会将该事务所做的所有修改操作先记录在 redo log 中并刷到磁盘上，然后再将这些修改操作同步到数据库的数据文件中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;区别:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;binlog 是整个&lt;font color=&#39;red&#39;&gt;数据库实例级别&lt;/font&gt;的，记录了对整个数据库实例进行的所有更改操作，而 redolog 是每个&lt;font color=&#39;red&#39;&gt;InnoDB 存储引擎实例级别&lt;/font&gt;的，只记录了在该存储引擎实例中发生的事务更改操作。&lt;/li&gt;
&lt;li&gt;binlog 是对&lt;font color=&#39;red&#39;&gt;数据库执行的语句级别&lt;/font&gt;的日志，redolog 是对&lt;font color=&#39;red&#39;&gt;事务级别&lt;/font&gt;的日志，记录了事务的具体操作信息。&lt;/li&gt;
&lt;li&gt;binlog 通常&lt;font color=&#39;red&#39;&gt;用于 JDBC 等客户端进行异地灾难恢复&lt;/font&gt;，而 redolog&lt;font color=&#39;red&#39;&gt;用于保证事务的 ACID 属性（原子性、一致性、隔离性和持久性）&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为&lt;font color=&#39;red&#39;&gt; binlog 记录了所有的修改操作，所以它比 redolog 更加全面，但也更加耗费磁盘空间&lt;/font&gt;。而 &lt;font color=&#39;red&#39;&gt;redolog 只记录了事务的修改操作，所以它比 binlog 更加高效，但也更加局限&lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;undo-log-如何保证事务的原子性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#undo-log-如何保证事务的原子性&#34;&gt;#&lt;/a&gt; undo log 如何保证事务的原子性？&lt;/h5&gt;
&lt;p&gt;undo log &lt;font color=&#39;red&#39;&gt;是 InnoDB 存储引擎的&lt;/font&gt;回滚日志，&lt;font color=&#39;red&#39;&gt;用于记录事务的回滚操作&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;当一个事务需要回滚时，InnoDB 存储引擎会根据 undo log 中的信息将数据页恢复到事务开始之前的状态。因此，undo log 可以保证事务的原子性。&lt;/p&gt;
&lt;p&gt;在 InnoDB 存储引擎中，每个事务都有一个对应的 undo log，用于记录该事务所做的修改操作。当事务提交时，InnoDB 存储引擎会将 undo log 中的信息删除，从而释放磁盘空间。如果事务回滚，则 InnoDB 存储引擎会根据 undo log 中的信息将数据页恢复到事务开始之前的状态。这样可以保证事务的原子性。&lt;/p&gt;
&lt;h3 id=&#34;mysql事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql事务&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟MySQL 事务&lt;/mark&gt;&lt;/h3&gt;
&lt;h4 id=&#34;事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务&#34;&gt;#&lt;/a&gt; 事务&lt;/h4&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;事务是一个完整的业务逻辑，内部的所有操作要么全部成功，要么全部失败&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;数据库事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库事务&#34;&gt;#&lt;/a&gt; 数据库事务&lt;/h4&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;对于数据库来说，事务是由批量的 DML 语句所构成的逻辑整体，要么全执行成功，要么全执行失败&lt;/font&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 开启一个事务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;START&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TRANSACTION&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 多条 SQL 语句&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;SQL1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;SQL2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## 提交事务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;COMMIT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230424112420132.png&#34; alt=&#34;image-20230424112420132&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;acid-特征&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#acid-特征&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟ACID 特征&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;关系型数据库（例如： &lt;code&gt;MySQL&lt;/code&gt; 、 &lt;code&gt;SQL Server&lt;/code&gt; 、 &lt;code&gt;Oracle&lt;/code&gt;  等）事务都有 &lt;strong&gt;ACID&lt;/strong&gt; 特性：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230424112518237.png&#34; alt=&#34;image-20230424112518237&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;原子性&lt;/strong&gt;（ &lt;code&gt;Atomicity&lt;/code&gt; ）：事务是不可分割的最小操作单元，内部的所有操作要么全部成功，要么全部失败；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;由 Undo Log 日志保证&lt;/font&gt;，记录了需要回滚的日志信息，事务回滚时撤销已经执行成功的 SQL 语句。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一致性&lt;/strong&gt;（ &lt;code&gt;Consistency&lt;/code&gt; ）：事务完成前后，数据库必须保持一致状态，即都是合理的数据状态。例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;由 A、I、D 共同保证&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;隔离性&lt;/strong&gt;（ &lt;code&gt;Isolation&lt;/code&gt; ）：数据库提供的隔离机制，可以保证事务在不受外部并发操作影响的独立环境下运行。即并发访问数据库时，一个事务所做的修改在最终提交前，对其他并发事务是不可见的。各并发事务之间，数据库是独立的；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;由 MVCC 保证&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;持久性&lt;/strong&gt;（ &lt;code&gt;Durability&lt;/code&gt; ）：事务一旦提交，它对数据库中数据的更改就是持久的。即使数据库发生故障，这种更改也不会丢失。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;由 内存 + Redo Log 保证&lt;/font&gt;，MySQL 修改数据同时在内存和 Redo Log 记录这次操作，宕机时可从 Redo Log 恢复数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;**A、I、D 是手段，C 才是目的！** 只有保证了事务的原子性、隔离性、持久性之后，一致性才能得到保障。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230424112548870.png&#34; alt=&#34;image-20230424112548870&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;4个一致性问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4个一致性问题&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟4 个一致性问题&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;多个事务并发运行，经常会操作相同的数据来完成各自的任务（例如多个客户端并发地访问同一个表），如果事务之间没有设置合理的隔离级别，可能会导致以下 4 种问题。&lt;/p&gt;
&lt;h5 id=&#34;脏读dirty-read&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#脏读dirty-read&#34;&gt;#&lt;/a&gt; 脏读（Dirty read）&lt;/h5&gt;
&lt;p&gt;一个事务读取并修改了数据，这个修改对其他并发事务来说是可见的，即使该事务还没有提交。这时另一个并发事务读取了这个还未提交的数据，但是第一个事务突然回滚，导致数据并没有被提交到数据库。那第二个事务读取到的就是脏数据，这也就是脏读的由来。&lt;/p&gt;
&lt;p&gt;例如：事务 1 读取某表中的数据 A=20，事务 1 修改 A=A-1，事务 2 读取到 A = 19, 事务 1 回滚导致对 A 的修改并为提交到数据库， A 的值还是 20。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230424112618536.png&#34; alt=&#34;脏读&#34; /&gt;&lt;/p&gt;
&lt;center&gt; 脏读（Dirty read）&lt;/center&gt;
&lt;h5 id=&#34;丢失修改lost-to-modify&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#丢失修改lost-to-modify&#34;&gt;#&lt;/a&gt; 丢失修改（Lost to modify）&lt;/h5&gt;
&lt;p&gt;在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。&lt;/p&gt;
&lt;p&gt;例如：事务 1 读取某表中的数据 A=20，事务 2 也读取 A=20，事务 1 先修改 A=A-1，事务 2 后来也修改 A=A-1，最终结果 A=19，事务 1 的修改被丢失。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230424112636565.png&#34; alt=&#34;image-20230424112636565&#34; /&gt;&lt;/p&gt;
&lt;center&gt;丢失修改（Lost to modify）&lt;/center&gt;
&lt;h5 id=&#34;不可重复读unrepeatable-read&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不可重复读unrepeatable-read&#34;&gt;#&lt;/a&gt; 不可重复读（Unrepeatable read）&lt;/h5&gt;
&lt;p&gt;在一个事务内多次读同一数据。在一个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。&lt;/p&gt;
&lt;p&gt;例如：事务 1 读取某表中的数据 A=20，事务 2 也读取 A=20，事务 1 修改 A=A-1，事务 2 再次读取 A =19，此时读取的结果和第一次读取的结果不同。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230424112650372.png&#34; alt=&#34;image-20230424112650372&#34; /&gt;&lt;/p&gt;
&lt;center&gt;不可重复读（Unrepeatable read）&lt;/center&gt;
&lt;h5 id=&#34;幻读phantom-read&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#幻读phantom-read&#34;&gt;#&lt;/a&gt; 幻读（Phantom read）&lt;/h5&gt;
&lt;p&gt;一个事务读取了几行数据，接着另一个并发事务&lt;font color=&#39;red&#39;&gt;插入&lt;/font&gt;了一些数据时。第一个事务在随后的查询中就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。&lt;/p&gt;
&lt;p&gt;例如：事务 2 读取某个范围的数据，事务 1 在这个范围插入了新的数据，事务 2 再次读取这个范围的数据发现相比于第一次读取的结果多了新的数据。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230424112700267.png&#34; alt=&#34;image-20230424112700267&#34; /&gt;&lt;/p&gt;
&lt;center&gt;幻读（Phantom read）&lt;/center&gt;
&lt;h4 id=&#34;不可重复读和幻读的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不可重复读和幻读的区别&#34;&gt;#&lt;/a&gt; 不可重复读和幻读的区别&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;不可重复读的重点是&lt;u&gt;字段值修改&lt;/u&gt;或&lt;u&gt;记录减少&lt;/u&gt;&lt;/font&gt;。比如多次读取一条记录，发现其中某些字段的值被修改了。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;幻读的重点在于&lt;u&gt;记录新增&lt;/u&gt;&lt;/font&gt;。比如多次执行同一条查询语句（DQL）时，发现查到的记录增加了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;幻读其实可以看作是不可重复读的一种特殊情况，区分二者的原因是二者的解决方案不一样。&lt;/p&gt;
&lt;p&gt;举个例子：执行  &lt;code&gt;delete&lt;/code&gt;  和  &lt;code&gt;update&lt;/code&gt;  操作的时候，可以直接对记录加锁，保证事务安全。而执行  &lt;code&gt;insert&lt;/code&gt;  操作的时候，由于记录锁（Record Lock）只能锁住已经存在的记录，为了避免插入新记录，需要依赖间隙锁（Gap Lock）。也就是说执行  &lt;code&gt;insert&lt;/code&gt;  操作的时候需要依赖 Next-Key Lock（Record Lock+Gap Lock） 进行加锁来保证不出现幻读。&lt;/p&gt;
&lt;h4 id=&#34;并发事务的控制方式隔离性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并发事务的控制方式隔离性&#34;&gt;#&lt;/a&gt; 并发事务的控制方式（隔离性）&lt;/h4&gt;
&lt;p&gt;MySQL 中并发事务的控制方式无非就两种：&lt;strong&gt;锁&lt;/strong&gt; 和 &lt;strong&gt;多版本并发控制（MVCC）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;锁可以看作是悲观控制的模式，多版本并发控制（MVCC，Multiversion concurrency control）可以看作是乐观控制的模式。&lt;/p&gt;
&lt;h5 id=&#34;锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#锁&#34;&gt;#&lt;/a&gt; 锁&lt;/h5&gt;
&lt;p&gt;通过锁来显示地控制共享资源，而不是通过调度手段。MySQL 中主要是通过&lt;strong&gt;读写锁&lt;/strong&gt;来实现并发控制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;共享锁（S 锁）&lt;/strong&gt;：又称&lt;font color=&#39;red&#39;&gt;读锁&lt;/font&gt;。事务在读取记录的时候获取共享锁，允许多个事务同时获取（锁兼容）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排他锁（X 锁）&lt;/strong&gt;：又称&lt;font color=&#39;red&#39;&gt;写锁 / 独占锁&lt;/font&gt;。事务在修改记录的时候获取排他锁，不允许多个事务同时获取。如果一个记录已经被加了排他锁，那其他事务不能再对这条记录加任何类型的锁（锁不兼容）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读写锁可以做到读读并行，但是&lt;font color=&#39;red&#39;&gt;无法做到读写并行、写写并行&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;另外，根据根据锁粒度的不同，又被分为&lt;strong&gt;表级锁 (table-level locking)&lt;strong&gt; 和&lt;/strong&gt;行级锁 (row-level locking)&lt;/strong&gt;。&lt;font color=&#39;red&#39;&gt;InnoDB 不光支持表级锁，还支持行级锁&lt;/font&gt;，默认为行级锁。行级锁的粒度更小，仅对相关的记录上锁即可（对一行或者多行记录加锁）。所以对于并发写入操作来说，InnoDB 的性能更高。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;不论是表级锁还是行级锁，都存在共享锁（Share Lock，S 锁）和排他锁（Exclusive Lock，X 锁）这两类&lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;多版本并发控制mvcc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多版本并发控制mvcc&#34;&gt;#&lt;/a&gt; 多版本并发控制（MVCC）&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;MVCC&lt;/strong&gt; 是多版本并发控制方法，即&lt;font color=&#39;red&#39;&gt;对一份数据会存储多个版本&lt;/font&gt;，通过事务的可见性来保证事务能看到自己应该看到的版本。&lt;font color=&#39;red&#39;&gt;通常会有一个全局的版本分配器来为每一行数据设置版本号，版本号是唯一的&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;MVCC 在 MySQL 中实现所依赖的手段主要是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;undo log&lt;/strong&gt;：记录某行数据的多个版本的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;read view&lt;/strong&gt; 和 &lt;strong&gt;隐藏字段&lt;/strong&gt;：判断当前版本数据的可见性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 InnoDB 对 MVCC 的具体实现可以看这篇文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGF0YWJhc2UvbXlzcWwvaW5ub2RiLWltcGxlbWVudGF0aW9uLW9mLW12Y2MuaHRtbA==&#34;&gt;InnoDB 存储引擎对 MVCC 的实现&lt;/span&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;4种隔离级别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4种隔离级别&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟4 种隔离级别&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;SQL 标准为事务定义了四种隔离级别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;READ-UNCOMMITTED（读未提交）&lt;/strong&gt;：最低的隔离级别，&lt;font color=&#39;red&#39;&gt;允许当前事务读取其他并发事务尚未提交的数据&lt;/font&gt;，存在脏读、不可重复读、幻读问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用户本来应该读取到 id=1 的用户 age 应该是 10，结果读取到了其他事务还没有提交的事务，结果读取 age=20，这就是脏读。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;READ-COMMITTED（读已提交）&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;允许当前事务读取其他并发事务已经提交的数据&lt;/font&gt;。可以避免脏读，但是存在不可重复读、幻读问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用户开启事务读取 id=1 的用户，查询到 age=16，再次读取发现结果 age=20，在同一个事务里同一个查询读取到不同的结果，叫做不可重复读。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;REPEATABLE-READ（可重复读）&lt;/strong&gt;：MySQL 的默认隔离级别，&lt;font color=&#39;red&#39;&gt;当前事务对同一数据的多次读取结果都是一样的&lt;/font&gt;（都是复用事务刚开始时的数据读取结果副本），除非数据被本身事务所修改。可以避免脏读和不可重复读，但幻读仍有可能发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SERIALIZABLE（串行化 / 序列化）&lt;/strong&gt;：最高的隔离级别，完全服从 ACID 的隔离级别。&lt;font color=&#39;red&#39;&gt;所有的事务依次串行执行&lt;/font&gt;，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231118212951118.png&#34; alt=&#34;image-20231118212951118&#34; /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;隔离级别&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;脏读&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;不可重复读&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;幻读&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;READ-UNCOMMITTED&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;READ-COMMITTED&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;REPEATABLE-READ&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√/×（InnoDB）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SERIALIZABLE&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;mysql-的隔离级别是基于锁和-mvcc-机制共同实现的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-的隔离级别是基于锁和-mvcc-机制共同实现的&#34;&gt;#&lt;/a&gt; MySQL 的隔离级别是基于锁和 MVCC 机制共同实现的&lt;/h4&gt;
&lt;p&gt;SERIALIZABLE 隔离级别是通过锁来实现的，READ-COMMITTED 和 REPEATABLE-READ 隔离级别是基于 MVCC 实现的。不过，SERIALIZABLE 之外的其他隔离级别可能也需要用到锁机制，就比如 REPEATABLE-READ 在当前读情况下需要使用加锁读来保证不会出现幻读。&lt;/p&gt;
&lt;h4 id=&#34;mysqlinnodb的默认隔离级别是-repeatable-read可重读&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysqlinnodb的默认隔离级别是-repeatable-read可重读&#34;&gt;#&lt;/a&gt; MySQL（InnoDB）的默认隔离级别是 REPEATABLE-READ（可重读）&lt;/h4&gt;
&lt;p&gt;MySQL（InnoDB）默认支持的隔离级别是 &lt;strong&gt;REPEATABLE-READ（可重读）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;可以通过 &lt;code&gt;SELECT @@tx_isolation;&lt;/code&gt;  命令来查看，MySQL 8.0 该命令改为 &lt;code&gt;SELECT @@transaction_isolation;&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mysql&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; @&lt;span class=&#34;token variable&#34;&gt;@tx_isolation&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;-----------------+&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; @&lt;span class=&#34;token variable&#34;&gt;@tx_isolation&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;-----------------+&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;REPEATABLE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;READ&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;-----------------+&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;关于 MySQL 事务隔离级别的详细介绍，可以看看我写的这篇文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGF0YWJhc2UvbXlzcWwvdHJhbnNhY3Rpb24taXNvbGF0aW9uLWxldmVsLmh0bWw=&#34;&gt;MySQL 事务隔离级别详解&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&#34;mysql-事务隔离级别与一致性问题的演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-事务隔离级别与一致性问题的演示&#34;&gt;#&lt;/a&gt; MySQL 事务隔离级别与一致性问题的演示&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/2019-31-1%25E8%2584%258F%25E8%25AF%25BB(%25E8%25AF%25BB%25E6%259C%25AA%25E6%258F%2590%25E4%25BA%25A4)%25E5%25AE%259E%25E4%25BE%258B.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;脏读（读未提交）&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/2019-31-2%25E8%25AF%25BB%25E5%25B7%25B2%25E6%258F%2590%25E4%25BA%25A4%25E5%25AE%259E%25E4%25BE%258B.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;避免脏读（读已提交）&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/2019-32-1%25E4%25B8%258D%25E5%258F%25AF%25E9%2587%258D%25E5%25A4%258D%25E8%25AF%25BB%25E5%25AE%259E%25E4%25BE%258B.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;不可重复读（读已提交）&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/2019-33-2%25E5%258F%25AF%25E9%2587%258D%25E5%25A4%258D%25E8%25AF%25BB.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;可重复读&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/phantom_read.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;幻读&lt;/center&gt;
&lt;p&gt;SQL 脚本 1 在第一次查询工资为 500 的记录时只有一条，SQL 脚本 2 插入了一条工资为 500 的记录，提交之后；SQL 脚本 1 在同一个事务中再次使用当前读查询发现出现了两条工资为 500 的记录这种就是幻读。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;幻读的解决方法：核心思想就是一个事务在操作某张表数据的时候，另外一个事务不允许新增或者删除这张表中的数据了&lt;/font&gt;。解决幻读的方式主要有以下几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将事务隔离级别调整为  &lt;code&gt;SERIALIZABLE&lt;/code&gt;  。&lt;/li&gt;
&lt;li&gt;在可重复读的事务级别下，给事务操作的这张表添加&lt;font color=&#39;red&#39;&gt;表锁&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;在可重复读的事务级别下，给事务操作的这张表添加  &lt;code&gt;Next-key Lock（Record Lock+Gap Lock）&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mysql锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql锁&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟MySQL 锁&lt;/mark&gt;&lt;/h3&gt;
&lt;h4 id=&#34;概述-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述-2&#34;&gt;#&lt;/a&gt; 概述&lt;/h4&gt;
&lt;p&gt;在数据库中，数据是一种供许多用户共享的资源，必须保证数据并发访问的一致性、有效性。&lt;/p&gt;
&lt;p&gt;MySQL 中的锁，按照锁的粒度分，分为以下三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;全局锁&lt;/font&gt;：锁定&lt;font color=&#39;red&#39;&gt;整个数据库&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;表级锁&lt;/font&gt;：每次操作锁住&lt;font color=&#39;red&#39;&gt;整张表&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表锁：&lt;/li&gt;
&lt;li&gt;元数据锁（meta data lock，MDL）：加锁过程是系统自动控制的&lt;/li&gt;
&lt;li&gt;意向锁：不与行级锁冲突，由 InnoDB 自动添加，无需用户干预。
&lt;ul&gt;
&lt;li&gt;意向共享锁（IS）&lt;/li&gt;
&lt;li&gt;意向排他锁（IX）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;行级锁&lt;/font&gt;：每次操作锁住对应的&lt;font color=&#39;red&#39;&gt;行数据&lt;/font&gt;，其&lt;font color=&#39;red&#39;&gt;实现依赖于索引&lt;/font&gt;，而不是记录。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行锁 / 记录锁（Record Lock）：存在于包括主键索引在内的唯一索引中，锁定&lt;font color=&#39;red&#39;&gt;单条索引记录&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;间隙锁（Gap Lock）：存在于非唯一索引中，锁定&lt;font color=&#39;red&#39;&gt;开区间&lt;/font&gt;范围内的一段间隔&lt;/li&gt;
&lt;li&gt;临键锁（Next-Key Lock）：存在于非唯一索引中，锁定&lt;font color=&#39;red&#39;&gt;左开右闭&lt;/font&gt;的索引区间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;全局锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局锁&#34;&gt;#&lt;/a&gt; 全局锁&lt;/h4&gt;
&lt;h5 id=&#34;介绍-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-2&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;p&gt;全局锁就是&lt;font color=&#39;red&#39;&gt;对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的 DML 的写语句，DDL 语句，已经更新操作的事务提交语句都将被阻塞&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;典型的使用场景是做&lt;font color=&#39;red&#39;&gt;全库的逻辑备份&lt;/font&gt;，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119154827391.png&#34; alt=&#34;image-20231119154827391&#34; /&gt;&lt;/p&gt;
&lt;center&gt;不加MySQL全局锁会导致备份数据的不一致&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119154907407.png&#34; alt=&#34;image-20231119154907407&#34; /&gt;&lt;/p&gt;
&lt;center&gt;加了MySQL全局锁后只能执行DQL语句，数据库处于只读状态，保证了数据的一致性和完整性&lt;/center&gt;
&lt;h5 id=&#34;语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语法&#34;&gt;#&lt;/a&gt; 语法&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加全局锁：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flush &lt;span class=&#34;token keyword&#34;&gt;tables&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据备份（退出 mysql，在 Windows 的 cmd 窗口中执行）：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mysqldump &lt;span class=&#34;token parameter variable&#34;&gt;-uroot&lt;/span&gt; –p1234 itcast &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; itcast.sql &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;释放锁：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;unlock&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;tables&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119155453030.png&#34; alt=&#34;image-20231119155453030&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点&#34;&gt;#&lt;/a&gt; 特点&lt;/h5&gt;
&lt;p&gt;数据库中加全局锁，是一个比较重的操作，存在以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在&lt;font color=&#39;gree&#39;&gt;主库&lt;/font&gt;上备份，那么&lt;font color=&#39;red&#39;&gt;在备份期间都不能执行更新，业务基本上就得停摆&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;如果在&lt;font color=&#39;gree&#39;&gt;从库&lt;/font&gt;上备份，那么&lt;font color=&#39;red&#39;&gt;在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导致主从延迟&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决上述问题，在 InnoDB 引擎中可以在备份时加上参数  &lt;code&gt;--single-transaction&lt;/code&gt;  参数来完成 **&lt;font color=&#39;#B32015&#39;&gt;不加锁的一致性数据备份&lt;/font&gt;**。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;快照读&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mysqldump --single-transaction &lt;span class=&#34;token parameter variable&#34;&gt;-uroot&lt;/span&gt; –p123456 itcast &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; itcast.sql&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;表级锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表级锁&#34;&gt;#&lt;/a&gt; 表级锁&lt;/h4&gt;
&lt;h5 id=&#34;介绍-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-3&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;p&gt;表级锁，即锁住整张表，MyISAM、InnoDB、BDB 等存储引擎都支持，主要分为以下三类：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;每类表级锁，都分为&lt;font color=&#39;cyan&#39;&gt;共享锁（S 锁 / 读锁）&lt;/font&gt;和&lt;font color=&#39;cyan&#39;&gt;排他锁（X 锁 / 写锁）&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;表锁&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;元数据锁&lt;/font&gt;（meta data lock，MDL）&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;意向锁&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;表锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表锁&#34;&gt;#&lt;/a&gt; 表锁&lt;/h5&gt;
&lt;p&gt;对于表锁，分为两类：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;结论:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读锁不会阻塞其他客户端的读，但是会阻塞写。&lt;/li&gt;
&lt;li&gt;写锁既会阻塞其他客户端的读，又会阻塞其他客户端的写。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cyan&#39;&gt;表锁共享锁（Shared）&lt;/font&gt;：又称&lt;font color=&#39;red&#39;&gt;读锁&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119161818290.png&#34; alt=&#34;image-20231119161818290&#34; /&gt;&lt;/p&gt;
&lt;center&gt;左侧为客户端一，对指定表加了读锁，只能读不能写。&lt;font color=&#39;red&#39;&gt;不会影响右侧客户端二的读，但是会阻塞右侧客户端的写&lt;/font&gt;&lt;/font&gt;。&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119161947749.png&#34; alt=&#34;image-20231119161947749&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cyan&#39;&gt;表锁排他锁（eXclusive）&lt;/font&gt;：又称&lt;font color=&#39;red&#39;&gt;写锁&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119162023867.png&#34; alt=&#34;image-20231119162023867&#34; /&gt;&lt;/p&gt;
&lt;center&gt;左侧为客户端一，对指定表加了写锁，可以读和写。&lt;font color=&#39;red&#39;&gt;但是会阻塞右侧客户端的读和写&lt;/font&gt;。&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119162246255.png&#34; alt=&#34;image-20231119162246255&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;加锁：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;tables&lt;/span&gt; 表名&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;write&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;释放锁：客户端断开连接，或者&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;unlock&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;tables&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;元数据锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#元数据锁&#34;&gt;#&lt;/a&gt; 元数据锁&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;全称为 meta data lock，简写 MDL，这里的元数据，大家可以简单理解为就是一张表的表结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;MDL 加锁过程是系统自动控制的&lt;/font&gt;&lt;/strong&gt;，无需显式使用，在访问一张表的时候会自动加上。&lt;/p&gt;
&lt;p&gt;MDL 锁&lt;font color=&#39;red&#39;&gt;主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作&lt;/font&gt;。&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;为了避免 DML 与 DDL 冲突，保证读写的正确性&lt;/font&gt;&lt;/strong&gt;。也就是说，某一张表涉及到未提交的事务时，是不能够修改这张表的表结构的。&lt;/p&gt;
&lt;p&gt;在 MySQL5.5 中引入了 MDL，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;当对一张表的数据进行增删改查（DML、DQL）的时候，加&lt;font color=&#39;cyan&#39;&gt; MDL 共享锁&lt;/font&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;当对表结构进行变更操作（DDL）的时候，加&lt;font color=&#39;cyan&#39;&gt; MDL 排他锁&lt;/font&gt;&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个例子，对于常见的 SQL 操作，所添加的 MDL 锁：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119172457594.png&#34; alt=&#34;image-20231119172457594&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;意向锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#意向锁&#34;&gt;#&lt;/a&gt; 意向锁&lt;/h5&gt;
&lt;h6 id=&#34;介绍-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-4&#34;&gt;#&lt;/a&gt; 介绍&lt;/h6&gt;
&lt;p&gt;为了避免 DML 在执行时，加的行锁与表锁的冲突，在 InnoDB 中引入了意向锁，&lt;font color=&#39;red&#39;&gt;使得表锁不用检查每行数据是否加锁&lt;/font&gt;，减少表锁的检查。&lt;/p&gt;
&lt;p&gt;意向锁的工作机制如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端在&lt;font color=&#39;red&#39;&gt;执行 DML 时，会对涉及的记录加行锁，同时对该表加上&lt;u&gt;意向锁&lt;/u&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;其他客户端在尝试对该表加表锁时，&lt;font color=&#39;red&#39;&gt;会根据该表上所加的&lt;u&gt;意向锁&lt;/u&gt;来判定是否可以成功加表锁，而不用逐行判断行锁情况了&lt;/font&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;意向锁之间不会互斥。并且一旦事务提交了，意向锁就自动释放了&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cyan&#39;&gt;意向共享锁 (IS)&lt;/font&gt;: 由语句 &lt;code&gt;select ... lock in share mode&lt;/code&gt;  添加。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与表锁共享锁 (read) 兼容，与表锁排他锁 (write) 互斥。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cyan&#39;&gt;意向排他锁 (IX)&lt;/font&gt;: 由 &lt;code&gt;insert&lt;/code&gt; 、 &lt;code&gt;update&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; 、 &lt;code&gt;select...for update&lt;/code&gt;  添加。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与表锁共享锁 (read) 及表锁排他锁 (write) 都互斥。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#演示&#34;&gt;#&lt;/a&gt; 演示&lt;/h6&gt;
&lt;p&gt;可以通过以下 SQL，查看意向锁及行锁的加锁情况：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; object_schema&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;object_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;index_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;lock_type&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;lock_mode&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;lock_data &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;performance_schema&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data_locks&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119185250184.png&#34; alt=&#34;image-20231119185250184&#34; /&gt;&lt;/p&gt;
&lt;center&gt;意向共享锁与表锁共享锁(read)是兼容的&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119185354166.png&#34; alt=&#34;image-20231119185354166&#34; /&gt;&lt;/p&gt;
&lt;center&gt;意向排他锁与表锁共享锁(read)、表锁排他锁(write)都是互斥的&lt;/center&gt;
&lt;h4 id=&#34;行级锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行级锁&#34;&gt;#&lt;/a&gt; 行级锁&lt;/h4&gt;
&lt;h5 id=&#34;介绍-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-5&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;p&gt;行级锁，每次操作&lt;font color=&#39;red&#39;&gt;锁住对应的行数据&lt;/font&gt;。锁定粒度最小，&lt;font color=&#39;red&#39;&gt;发生锁冲突的概率最低，并发度最高&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;只有 InnoDB 存储引擎支持行级锁&lt;/font&gt;&lt;/strong&gt;。InnoDB 的数据是基于索引组织的，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于行级锁，主要分为以下三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;行锁（Record Lock）&lt;/font&gt;：也称记录锁，&lt;font color=&#39;red&#39;&gt;锁定单个行记录&lt;/font&gt;，防止其他事务对此行进行 &lt;code&gt;update&lt;/code&gt;  和 &lt;code&gt;delete&lt;/code&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 RC、RR 隔离级别下都支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与表级锁类似，行锁也分为&lt;font color=&#39;cyan&#39;&gt;共享锁（S 锁 / 读锁）&lt;/font&gt;和&lt;font color=&#39;cyan&#39;&gt;排他锁（X 锁 / 写锁）&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119190445520.png&#34; alt=&#34;image-20231119190445520&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cyan&#39;&gt;行锁共享锁（S）&lt;/font&gt;：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cyan&#39;&gt;行锁排他锁（X）&lt;/font&gt;：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;两种行锁的兼容情况如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119192050128.png&#34; alt=&#34;image-20231119192050128&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对于常见的 SQL 语句，在执行时，所加的行锁如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119192231878.png&#34; alt=&#34;image-20231119192231878&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;间隙锁（Gap Lock）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;锁定索引记录的间隙（不含记录）&lt;/font&gt;，确保索引记录间隙不变，&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;防止其他事务在这个间隙进行 &lt;code&gt;insert&lt;/code&gt; ，产生幻读&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 RR 隔离级别下支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119191003502.png&#34; alt=&#34;image-20231119191003502&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;临键锁（Next-Key Lock）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;行锁和间隙锁组合，锁住记录的同时也锁住数据前面的所有间隙&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 RR 隔离级别下支持。还记得在 MySQL 事务的隔离级别中提到的下表吗？当时之所以说&lt;strong&gt; InnoDB 引擎中的 RR 隔离级别可以避免幻读现象&lt;/strong&gt;，就是因为 InnoDB 引擎支持行级锁中的临键锁（next-key）！&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119190721496.png&#34; alt=&#34;image-20231119190721496&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119191537038.png&#34; alt=&#34;image-20231119191537038&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;行锁演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行锁演示&#34;&gt;#&lt;/a&gt; 行锁演示&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动将临键锁（next-key）&lt;font color=&#39;red&#39;&gt;优化为行锁&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;InnoDB 的行锁是针对于索引加的锁，不通过索引条件检索数据，那么 InnoDB 将对表中的所有记录加锁，此时就会&lt;font color=&#39;red&#39;&gt;升级为表锁&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;可以通过以下 SQL，查看意向锁及行锁的加锁情况：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; object_schema&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;object_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;index_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;lock_type&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;lock_mode&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;lock_data &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;performance_schema&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data_locks&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119193115917.png&#34; alt=&#34;image-20231119193115917&#34; /&gt;&lt;/p&gt;
&lt;center&gt;普通的select语句，执行时，不会加锁。&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119193133442.png&#34; alt=&#34;image-20231119193133442&#34; /&gt;&lt;/p&gt;
&lt;center&gt;select...lock in share mode，加共享锁，共享锁与共享锁之间兼容。&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119193207569.png&#34; alt=&#34;image-20231119193207569&#34; /&gt;&lt;/p&gt;
&lt;center&gt;共享锁与排他锁之间互斥。&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119193242470.png&#34; alt=&#34;image-20231119193242470&#34; /&gt;&lt;/p&gt;
&lt;center&gt;排他锁之间互斥&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119193535207.png&#34; alt=&#34;image-20231119193535207&#34; /&gt;&lt;/p&gt;
&lt;center&gt;根据name字段进行更新时，由于name字段是没有索引的，此时行锁会升级为表锁（因为行锁是对索引项加的锁）&lt;/center&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119193708274.png&#34; alt=&#34;image-20231119193708274&#34; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;font color=&#39;red&#39;&gt;对name字段创建索引，再对其进行更新，可以避免行锁升级为表锁&lt;/font&gt;&lt;/center&gt;
&lt;h5 id=&#34;间隙锁临键锁演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#间隙锁临键锁演示&#34;&gt;#&lt;/a&gt; 间隙锁 &amp;amp; 临键锁演示&lt;/h5&gt;
&lt;p&gt;默认情况下，InnoDB 的事务隔离级别为 &lt;font color=&#39;red&#39;&gt;REPEATABLE-READ（可重复读）&lt;/font&gt;，InnoDB 使用 &lt;font color=&#39;cornflowerblue&#39;&gt;临键锁（next-key）&lt;/font&gt;进行搜索和索引扫描，以防出现幻读。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;索引上的等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119195154766.png&#34; alt=&#34;image-20231119195154766&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引上的等值查询（非唯一的普通索引），向右遍历时最后一个值不满足查询需求时，临键锁（next-key）退化为间隙锁&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119195335874.png&#34; alt=&#34;image-20231119195335874&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引上的范围查询 (唯一索引)-- 会访问到不满足条件的第一个值为止&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119195724781.png&#34; alt=&#34;image-20231119195724781&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;间隙锁唯一目的是防止其他事务插入间隙&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;间隙锁可以共存&lt;/strong&gt;，一个事务采用的间隙锁不会阻止另一个事务在同一间隙上采用间隙锁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;总结-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-3&#34;&gt;#&lt;/a&gt; 总结&lt;/h4&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119200231781.png&#34; alt=&#34;image-20231119200231781&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;h4 id=&#34;面试题-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试题-2&#34;&gt;#&lt;/a&gt; 面试题&lt;/h4&gt;
&lt;p&gt;锁是一种常见的并发事务的控制方式。&lt;/p&gt;
&lt;h5 id=&#34;表级锁和行级锁了解吗有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表级锁和行级锁了解吗有什么区别&#34;&gt;#&lt;/a&gt; 表级锁和行级锁了解吗？有什么区别？&lt;/h5&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;MyISAM 仅仅支持表级锁&lt;/font&gt;，在并发写的情况下性能非常差。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;InnoDB 不仅支持表级锁，还支持行级锁&lt;/font&gt;&lt;/strong&gt;，默认为行级锁。&lt;/p&gt;
&lt;p&gt;行级锁的粒度更小，仅对相关的记录上锁即可（一行或者多行记录），所以对于并发写操作来说，InnoDB 的性能更高。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;表级锁：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是 **&lt;font color=&#39;red&#39;&gt;针对非索引字段&lt;/font&gt;** 加的锁，对当前操作的整张表加锁&lt;/li&gt;
&lt;li&gt;优点：&lt;font color=&#39;red&#39;&gt;加锁快，资源消耗也比较少，不会出现死锁&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;缺点：&lt;font color=&#39;red&#39;&gt;触发锁冲突的概率最高，高并发下效率极低&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;MyISAM 和 InnoDB 引擎都支持表级锁&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;行级锁：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 中锁定粒度最小的一种锁，是 **&lt;font color=&#39;#B32015&#39;&gt;针对索引字段&lt;/font&gt;** 加的锁，只针对当前操作的行记录进行加锁。&lt;/li&gt;
&lt;li&gt;优点：&lt;font color=&#39;red&#39;&gt;能大大减少数据库操作的锁冲突&lt;/font&gt;。其加锁粒度最小，&lt;font color=&#39;red&#39;&gt;并发度高&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;缺点：&lt;font color=&#39;red&#39;&gt;加锁慢，加锁的开销大，会出现死锁&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;行级锁和存储引擎有关，仅有 InnoDB 引擎支持行级锁&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;行级锁的使用有什么注意事项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行级锁的使用有什么注意事项&#34;&gt;#&lt;/a&gt; 行级锁的使用有什么注意事项？&lt;/h5&gt;
&lt;p&gt;InnoDB 的行锁是针对索引字段加的锁，表级锁是针对非索引字段加的锁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;行级锁退化成表级锁&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;当我们执行  &lt;code&gt;UPDATE&lt;/code&gt; 、 &lt;code&gt;DELETE&lt;/code&gt;  语句时，如果  &lt;code&gt;WHERE&lt;/code&gt;  条件中字段没有命中唯一索引或者索引失效的话，就会导致扫描全表对表中的所有行记录进行加锁&lt;/font&gt;。这个在我们日常工作开发中经常会遇到，一定要多多注意！！！&lt;/p&gt;
&lt;p&gt;不过，很多时候&lt;font color=&#39;red&#39;&gt;即使用了索引也有可能会走全表扫描，这是因为 MySQL 优化器的原因，它认为全表扫描的效率比使用索引更高&lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;innodb-有哪几类行级锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#innodb-有哪几类行级锁&#34;&gt;#&lt;/a&gt; InnoDB 有哪几类行级锁？&lt;/h5&gt;
&lt;p&gt;InnoDB 行级锁是通过对索引数据页上的&lt;font color=&#39;red&#39;&gt;索引项&lt;/font&gt;加锁实现的，MySQL InnoDB 支持三种行锁定方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;记录锁（Record Lock）&lt;/font&gt;&lt;/strong&gt;：也被称为行锁，锁的是已经存在的单个行记录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;间隙锁（Gap Lock）&lt;/font&gt;&lt;/strong&gt;：锁定一个范围，不包括记录本身。&lt;font color=&#39;red&#39;&gt;为了避免插入新记录&lt;/font&gt;，需要依赖间隙锁。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;临键锁（Next-Key Lock）&lt;/font&gt;&lt;/strong&gt;：可以理解为&lt;font color=&#39;red&#39;&gt;行锁 + 间隙锁&lt;/font&gt; 的组合，锁定一个行记录，及其之前的所有间隙范围。主要目的是 **&lt;font color=&#39;red&#39;&gt;为了解决幻读问题&lt;/font&gt;**（MySQL 事务部分提到过）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;在 InnoDB 默认的隔离级别 REPEATABLE-READ（可重复读）下，行级锁默认使用的是&lt;u&gt;临键锁（Next-Key）&lt;/u&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但是，如果操作的索引是唯一索引或主键，InnoDB 会将临键锁（Next-Key）降级为&lt;u&gt;记录锁（Record Lock）&lt;/u&gt;，即仅锁住索引本身，而不是范围。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;共享锁和排他锁呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共享锁和排他锁呢&#34;&gt;#&lt;/a&gt; 共享锁和排他锁呢？&lt;/h5&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;不论是表级锁还是行级锁&lt;/font&gt;，都存在共享锁（Share Lock，S 锁）和排他锁（eXclusive Lock，X 锁）这两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;共享锁（S 锁）&lt;/strong&gt;：又称&lt;font color=&#39;red&#39;&gt;读锁&lt;/font&gt;，事务在读取记录的时候获取共享锁，允许多个事务同时获取（锁兼容）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排他锁（X 锁）&lt;/strong&gt;：又称&lt;font color=&#39;red&#39;&gt;写锁 / 独占锁&lt;/font&gt;，事务在修改记录的时候获取排他锁，不允许多个事务同时获取。如果一个记录已经被加了排他锁，那其他事务不能再对这条事务加任何类型的锁（锁不兼容）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;排他锁与任何的锁都不兼容，共享锁仅和共享锁兼容&lt;/font&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;S 锁&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;X 锁&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;S 锁&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;font color=&#39;red&#39;&gt;不冲突&lt;/font&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;冲突&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;X 锁&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;冲突&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;冲突&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;由于 MVCC（多版本并发控制）的存在，对于一般的  &lt;code&gt;SELECT&lt;/code&gt;  语句，InnoDB 不会加任何锁&lt;/font&gt;。不过，可以通过以下语句&lt;font color=&#39;red&#39;&gt;显式地加共享锁或排他锁&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享锁（MySQL 5.7 和 MySQL 8.0）： &lt;code&gt;SELECT ... LOCK IN SHARE MODE;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;共享锁（MySQL 8.0）： &lt;code&gt;SELECT ... FOR SHARE;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;排他锁： &lt;code&gt;SELECT ... FOR UPDATE;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;意向锁有什么作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#意向锁有什么作用&#34;&gt;#&lt;/a&gt; 意向锁有什么作用？&lt;/h5&gt;
&lt;p&gt;意向锁是一种表级锁，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;作用是快速判断是否可以对某个表使用表锁，而不用逐行检查是否有行级锁&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;意向锁之间不会互斥。并且一旦事务提交了，意向锁就自动释放了&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cyan&#39;&gt;意向共享锁 (IS 锁)&lt;/font&gt;: 事务有意向对表中的某些记录加共享锁（S 锁），加共享锁前必须先取得该表的 IS 锁。由语句 &lt;code&gt;select ... lock in share mode&lt;/code&gt;  添加。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与表锁共享锁 (read) 兼容，与表锁排他锁 (write) 互斥。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cyan&#39;&gt;意向排他锁 (IX 锁)&lt;/font&gt;: 事务有意向对表中的某些记录加排他锁（X 锁），加排他锁之前必须先取得该表的 IX 锁。由 &lt;code&gt;insert&lt;/code&gt; 、 &lt;code&gt;update&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; 、 &lt;code&gt;select...for update&lt;/code&gt;  添加。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与表锁共享锁 (read) 及表锁排他锁 (write) 都互斥。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;意向锁是由存储引擎自己维护的，用户无法手动操作意向锁。&lt;font color=&#39;red&#39;&gt;在为数据行加共享锁 / 排他锁之前，InooDB 会先获取该数据行所在数据表的对应意向锁&lt;/font&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;意向锁之间是互相兼容的&lt;/font&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;IS 锁&lt;/th&gt;
&lt;th&gt;IX 锁&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IS 锁&lt;/td&gt;
&lt;td&gt;兼容&lt;/td&gt;
&lt;td&gt;兼容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IX 锁&lt;/td&gt;
&lt;td&gt;兼容&lt;/td&gt;
&lt;td&gt;兼容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;意向锁与表级别的共享锁和排它锁的互斥情况如下：&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;意向锁不会与行级别的共享锁和排他锁互斥&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;IS 锁&lt;/th&gt;
&lt;th&gt;IX 锁&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;S 锁&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;兼容&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;互斥&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X 锁&lt;/td&gt;
&lt;td&gt;互斥&lt;/td&gt;
&lt;td&gt;互斥&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;快照读和当前读有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快照读和当前读有什么区别&#34;&gt;#&lt;/a&gt; 快照读和当前读有什么区别？&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;快照读&lt;/font&gt;&lt;/strong&gt;（&lt;font color=&#39;red&#39;&gt;一致性&lt;u&gt;非锁定读&lt;/u&gt;&lt;/font&gt;）就是&lt;font color=&#39;red&#39;&gt;简单的  &lt;code&gt;SELECT&lt;/code&gt;  语句&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;快照即记录的历史版本&lt;/font&gt;，每行记录可能存在多个历史版本（多版本技术）。&lt;/p&gt;
&lt;p&gt;快照读的情况下，如果读取的记录正在执行 UPDATE/DELETE 操作，&lt;font color=&#39;red&#39;&gt;读取操作不会因此去等待记录上 X 锁的释放，而是会去读取行的一个快照&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;只有在事务隔离级别 RC (读取已提交) 和 RR（可重读）下，InnoDB 才会使用快照读（一致性非锁定读）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;在 RC 级别下&lt;/font&gt;，对于快照数据，一致性非锁定读总是&lt;font color=&#39;red&#39;&gt;读取被锁定行的最新一份快照数据&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;在 RR 级别下&lt;/font&gt;，对于快照数据，一致性非锁定读总是 **&lt;font color=&#39;red&#39;&gt;读取本事务开始时的行数据版本&lt;/font&gt;**。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;快照读比较&lt;font color=&#39;red&#39;&gt;适合对数据一致性要求不是特别高，且追求极致性能的业务场景&lt;/font&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;当前读&lt;/font&gt;&lt;/strong&gt;（&lt;font color=&#39;red&#39;&gt;一致性&lt;u&gt;锁定读&lt;/u&gt;&lt;/font&gt;）就是&lt;font color=&#39;red&#39;&gt;给行记录加 X 锁或 S 锁&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;当前读的一些常见 SQL 语句类型如下：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 对读的记录加一个 X 锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;FOR&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;UPDATE&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 对读的记录加一个 S 锁（MySQL 5.7 和 MySQL 8.0）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;LOCK&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;IN&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SHARE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;MODE&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 对读的记录加一个 S 锁（MySQL 8.0）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;FOR&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SHARE&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 对修改的记录加一个 X 锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DELETE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;mysql性能优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql性能优化&#34;&gt;#&lt;/a&gt; MySQL 性能优化&lt;/h3&gt;
&lt;h4 id=&#34;能用-mysql-直接存储文件比如图片吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#能用-mysql-直接存储文件比如图片吗&#34;&gt;#&lt;/a&gt; 能用 MySQL 直接存储文件（比如图片）吗？&lt;/h4&gt;
&lt;p&gt;虽然可以直接将文件对应的二进制数据存储到 MySQL 中，不过还是建议不要在数据库中存储文件。因为会&lt;font color=&#39;red&#39;&gt;严重影响数据库性能，消耗过多存储空间&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;可以选择使用云服务厂商提供的开箱即用的 **&lt;font color=&#39;#B32015&#39;&gt;文件存储服务&lt;/font&gt;**，成熟稳定，价格也比较低。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/oss-search.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;也可以选择&lt;font color=&#39;red&#39;&gt;自建文件存储服务&lt;/font&gt;，实现起来也不难，基于 FastDFS、MinIO（推荐） 等开源项目就可以实现分布式文件服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;数据库只存储文件地址信息，文件本身由文件存储服务负责存储。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相关阅读：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuNTFjdG8uY29tL2FydGljbGUvNzE2OTc4Lmh0bWw=&#34;&gt;Spring Boot 整合 MinIO 实现分布式文件服务&lt;/span&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;mysql-如何存储-ip-地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-如何存储-ip-地址&#34;&gt;#&lt;/a&gt; MySQL 如何存储 IP 地址？&lt;/h4&gt;
&lt;p&gt;可以将 IP 地址 **&lt;font color=&#39;red&#39;&gt;转换成整形数据存储&lt;/font&gt;**，性能更好，占用空间也更小。&lt;/p&gt;
&lt;p&gt;MySQL 提供了两个（互逆的）方法来处理 ip 地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INET_ATON()&lt;/code&gt; ：把 ip 转为无符号整型（4-8 位）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INET_NTOA()&lt;/code&gt; ：把整型的 ip 转为地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;插入数据前，先用  &lt;code&gt;INET_ATON()&lt;/code&gt;  把 ip 地址转为整型。显示数据时，使用  &lt;code&gt;INET_NTOA()&lt;/code&gt;  把整型的 ip 地址转为地址显示即可。&lt;/p&gt;
&lt;h4 id=&#34;常见的-sql-优化手段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的-sql-优化手段&#34;&gt;#&lt;/a&gt; 常见的 SQL 优化手段&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;指路→&lt;a href=&#34;#==SQL%E4%BC%98%E5%8C%96==&#34;&gt;SQL 优化&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/javamianshizhibei-sql-optimization.png&#34; alt=&#34;常见的 SQL 优化手段&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;如何分析-sql-的性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何分析-sql-的性能&#34;&gt;#&lt;/a&gt; 如何分析 SQL 的性能？&lt;/h4&gt;
&lt;p&gt;可以使用  &lt;code&gt;EXPLAIN&lt;/code&gt;  命令来分析 SQL 的 &lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;执行计划&lt;/font&gt;&lt;/strong&gt; 。执行计划是指一条 SQL 语句在经过 MySQL 查询优化器的优化后的具体的执行方式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EXPLAIN&lt;/code&gt;  并不会真的去执行相关的语句，而是通过 &lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;查询优化器&lt;/font&gt;&lt;/strong&gt; 对语句进行分析，找出最优的查询方案，并显示对应的信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;指路→[利用 EXPLAIN 命令分析 SQL 是否走索引查询](# 利用 EXPLAIN 命令分析 SQL 是否走索引查询)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;读写分离-分库分表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读写分离-分库分表&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟读写分离、分库分表&lt;/mark&gt;&lt;/h4&gt;
&lt;h5 id=&#34;读写分离&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读写分离&#34;&gt;#&lt;/a&gt; 读写分离&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;解决的问题：&lt;font color=&#39;red&#39;&gt;数据库读并发&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;什么是读写分离&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是读写分离&#34;&gt;#&lt;/a&gt; 什么是读写分离？&lt;/h6&gt;
&lt;p&gt;见名思意，根据读写分离的名字，我们就可以知道：读写分离主要是为了 **&lt;font color=&#39;#B32015&#39;&gt;将对数据库的读写操作分散到不同的数据库节点上。&lt;/font&gt;** 这样的话，就能够&lt;font color=&#39;red&#39;&gt;小幅提升写性能，大幅提升读性能&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;我简单画了一张图来帮助不太清楚读写分离的小伙伴理解。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/read-and-write-separation.png&#34; alt=&#34;读写分离示意图&#34; /&gt;&lt;/p&gt;
&lt;center&gt;读写分离示意图&lt;/center&gt;
&lt;p&gt;一般情况下，我们都会选择 **&lt;font color=&#39;#B32015&#39;&gt;一主多从&lt;/font&gt;**，也就是&lt;font color=&#39;red&#39;&gt;一台主数据库负责写，其他的从数据库负责读&lt;/font&gt;。&lt;font color=&#39;red&#39;&gt;主库和从库之间会进行数据实时同步（&lt;strong&gt;主从复制&lt;/strong&gt;），以保证从库中数据的准确性&lt;/font&gt;。这样的架构实现起来比较简单，并且也符合系统的&lt;font color=&#39;red&#39;&gt;写少读多&lt;/font&gt;的特点。&lt;/p&gt;
&lt;h6 id=&#34;如何实现读写分离&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何实现读写分离&#34;&gt;#&lt;/a&gt; 如何实现读写分离？&lt;/h6&gt;
&lt;p&gt;不论是使用哪一种读写分离具体的实现方案，想要实现读写分离一般包含如下几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;部署多台数据库，选择其中的一台作为主数据库，其他的一台或者多台作为从数据库。&lt;/li&gt;
&lt;li&gt;保证主数据库和从数据库之间的数据是实时同步的（主从复制）。&lt;/li&gt;
&lt;li&gt;系统将写请求交给主数据库处理，读请求交给从数据库处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;落实到项目本身的话，常用的方式有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;代理方式&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/read-and-write-separation-proxy.png&#34; alt=&#34;代理方式实现读写分离&#34; /&gt;&lt;/p&gt;
&lt;center&gt;代理方式实现读写分离&lt;/center&gt;
&lt;p&gt;我们可以在应用和数据中间加了一个 **&lt;font color=&#39;red&#39;&gt;代理层&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;应用程序所有的数据请求都交给代理层处理，&lt;font color=&#39;red&#39;&gt;代理层负责分离读写请求，将它们路由到对应的数据库中&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;提供类似功能的中间件有 &lt;strong&gt;MySQL Router&lt;/strong&gt;（官方）、&lt;strong&gt;Atlas&lt;/strong&gt;（基于 MySQL Proxy）、&lt;strong&gt;MaxScale&lt;/strong&gt;、&lt;strong&gt;MyCat&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;第三方组件方式&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;推荐的方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这种方式中，我们可以通过引入第三方组件来帮助我们读写请求。&lt;/p&gt;
&lt;p&gt;这也是我比较&lt;font color=&#39;red&#39;&gt;推荐的一种方式&lt;/font&gt;。这种方式目前在各种互联网公司中用的最多的，相关的实际的案例也非常多。&lt;/p&gt;
&lt;p&gt;如果你要采用这种方式的话，推荐使用  &lt;code&gt;sharding-jdbc&lt;/code&gt;  ，直接引入 jar 包即可使用，非常方便。同时，也节省了很多运维的成本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你可以在 shardingsphere 官方找到 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaGFyZGluZ3NwaGVyZS5hcGFjaGUub3JnL2RvY3VtZW50L2xlZ2FjeS8zLngvZG9jdW1lbnQvY24vbWFudWFsL3NoYXJkaW5nLWpkYmMvdXNhZ2UvcmVhZC13cml0ZS1zcGxpdHRpbmcv&#34;&gt;sharding-jdbc 关于读写分离的操作&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;主从复制的原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主从复制的原理&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟主从复制的原理&lt;/mark&gt;&lt;/h6&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;MySQL  &lt;code&gt;binlog&lt;/code&gt; （二进制日志文件）主要记录了 MySQL 数据库中数据的所有变化（数据库执行的所有 DDL 和 DML 语句）&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;binlog 主要有两个作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;主从复制&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;数据恢复&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;可以根据主库的 MySQL binlog 日志就能够将主库的数据同步复制到从库中&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231129103209731.png&#34; alt=&#34;image-20231129103209731&#34; /&gt;&lt;/p&gt;
&lt;center&gt;MySQL主从复制&lt;/center&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;master 将数据库中数据的变化写入到  &lt;code&gt;binlog&lt;/code&gt;  中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;slave 连接 master&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;slave 会创建一个  &lt;code&gt;I/O 线程&lt;/code&gt;  向 master 请求更新的 binlog&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;master 会创建一个  &lt;code&gt;binlog dump 线程&lt;/code&gt;  来发送 binlog，由 slave 中的 I/O 线程负责接收&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;slave 的 I/O 线程将接收的 binlog 写入到  &lt;code&gt;relay log&lt;/code&gt; （中继日志）中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;slave 的  &lt;code&gt;SQL 线程&lt;/code&gt;  读取 relay log 同步数据本地（也就是再执行一遍 SQL ）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;扩展：阿里开源的一个叫做 canal 的工具可以帮助我们同步 MySQL 数据到其他数据源（例如 Elasticsearch/MySQL）。其原理就是模拟 MySQL 主从复制的过程，解析 binlog 将数据同步到其他的数据源。&lt;/p&gt;
&lt;p&gt;另外，像咱们常用的分布式缓存组件 Redis 也是通过主从复制实现的读写分离。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小结一下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;MySQL 主从复制依赖于 binlog。另外，常见的一些同步 MySQL 数据到其他数据源的工具（比如 canal）的底层一般也是依赖 binlog 。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;如何避免主从同步延迟&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何避免主从同步延迟&#34;&gt;#&lt;/a&gt; 如何避免主从同步延迟？&lt;/h6&gt;
&lt;p&gt;读写分离对于提升数据库的并发非常有效，但也同时引来一个问题：主库和从库的数据存在延迟，比如你写完主库之后，主库的数据同步到从库是需要时间的，这个时间差就导致了主库和从库的数据不一致性问题。这也就是我们经常说的 **&lt;font color=&#39;#B32015&#39;&gt;主从同步延迟&lt;/font&gt;** 。&lt;/p&gt;
&lt;p&gt;如果我们的业务场景无法容忍主从同步延迟的话，应该&lt;u&gt;如何避免&lt;/u&gt;呢？&lt;/p&gt;
&lt;p&gt;这里提供两种方案：&lt;/p&gt;
&lt;p&gt;（1）&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;强制将读请求路由到 master 处理&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用最多的一种方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;既然 slave 的数据过期了，那就直接从 master 读取呗！这种方案虽然会增加 master 的压力，但是实现起来比较简单，也是我了解到的 **&lt;font color=&#39;red&#39;&gt;使用最多的一种方式&lt;/font&gt;**。&lt;/p&gt;
&lt;p&gt;比如  &lt;code&gt;Sharding-JDBC&lt;/code&gt;  就是采用的这种方案。通过使用 Sharding-JDBC 的  &lt;code&gt;HintManager&lt;/code&gt;  分片键值管理器，我们可以强制使用 master。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;HintManager&lt;/span&gt; hintManager &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HintManager&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hintManager&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setMasterRouteOnly&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 继续 JDBC 操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;对于这种方案，&lt;font color=&#39;red&#39;&gt;可以将那些必须获取最新数据的读请求都交给 master 处理&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;（2）&lt;font color=&#39;cornflowerblue&#39;&gt;延迟读取&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没办法完全避免主从延迟，只能说可以减少出现延迟的概率而已，实际项目中一般不会使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有一些朋友肯定会想既然主从同步存在延迟，那我就在延迟之后读取啊，比如主从同步延迟 0.5s, 那我就 1s 之后再读取数据。这样多方便啊！&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;方便是方便，但是也很扯淡&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;不过，如果你是这样设计业务流程就会好很多：对于一些对数据比较敏感的场景，&lt;font color=&#39;red&#39;&gt;可以在完成写请求之后，避免立即进行请求操作&lt;/font&gt;。比如你支付成功之后，跳转到一个支付成功的页面，当你点击返回之后才返回自己的账户。&lt;/p&gt;
&lt;h6 id=&#34;主从同步延迟的原因如何尽量减少延迟&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主从同步延迟的原因如何尽量减少延迟&#34;&gt;#&lt;/a&gt; 主从同步延迟的原因？如何尽量减少延迟？&lt;/h6&gt;
&lt;p&gt;MySQL 主从同步延迟指的是&lt;font color=&#39;red&#39;&gt;从库的数据落后于主库的数据&lt;/font&gt;。这种情况可能有以下&lt;font color=&#39;gree&#39;&gt;2 个原因&lt;/font&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从库 I/O 线程接收 binlog 的速度跟不上主库写入 binlog 的速度，导致从库 relay log 的数据滞后于主库 binlog 的数据；&lt;/li&gt;
&lt;li&gt;从库 SQL 线程执行 relay log 的速度跟不上从库 I/O 线程接收 binlog 的速度，导致从库的数据滞后于从库 relay log 的数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;与主从同步有关的&lt;font color=&#39;gree&#39;&gt;3 个时间点&lt;/font&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主库执行完一个事务，写入 binlog，将这个时刻记为 T1；&lt;/li&gt;
&lt;li&gt;从库 I/O 线程接收到 binlog 并写入 relay log 的时刻记为 T2；&lt;/li&gt;
&lt;li&gt;从库 SQL 线程读取 relay log 同步数据本地的时刻记为 T3。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231129113009937.png&#34; alt=&#34;image-20231129113009937&#34; /&gt;&lt;/p&gt;
&lt;p&gt;结合我们上面讲到的主从复制原理，可以得出&lt;font color=&#39;gree&#39;&gt;2 个结论&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T2 和 T1 的差值反映了&lt;font color=&#39;red&#39;&gt;从库 I/O 线程的性能和网络传输的效率&lt;/font&gt;，这个差值越小说明从库 I/O 线程的性能和网络传输效率越高。&lt;/li&gt;
&lt;li&gt;T3 和 T2 的差值反映了&lt;font color=&#39;red&#39;&gt;从库 SQL 线程执行的速度&lt;/font&gt;，这个差值越小，说明从库 SQL 线程执行速度越快。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里列举主从同步延迟的&lt;font color=&#39;gree&#39;&gt;几种常见情况&lt;/font&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;从库机器性能比主库差&lt;/strong&gt;：从库接收 binlog 并写入 relay log 以及执行 SQL 语句的速度会比较慢（也就是 T2-T1 和 T3-T2 的值会较大），进而导致延迟。解决方法是&lt;font color=&#39;red&#39;&gt;选择与主库一样规格或更高规格的机器作为从库，或者对从库进行性能优化&lt;/font&gt;，比如调整参数、增加缓存、使用 SSD 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;从库处理的读请求过多&lt;/strong&gt;：从库需要执行主库的所有写操作，同时还要响应读请求，如果读请求过多，会占用从库的 CPU、内存、网络等资源，影响从库的复制效率（也就是 T2-T1 和 T3-T2 的值会较大，和前一种情况类似）。解决方法是&lt;font color=&#39;red&#39;&gt;引入缓存（推荐）、使用一主多从的架构，将读请求分散到不同的从库，或者使用其他系统来提供查询的能力&lt;/font&gt;，比如将 binlog 接入到 Hadoop、Elasticsearch 等系统中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大事务&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;运行时间比较长，长时间未提交的事务&lt;/font&gt;就可以称为大事务。由于大事务执行时间长，并且从库上的大事务会比主库上的大事务花费更多的时间和资源，因此非常容易造成主从延迟。解决办法是&lt;font color=&#39;red&#39;&gt;避免大批量修改数据，尽量分批进行&lt;/font&gt;。类似的情况还有执行时间较长的慢 SQL，实际项目&lt;font color=&#39;red&#39;&gt;遇到慢 SQL 应该进行优化&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;从库太多&lt;/strong&gt;：主库需要将 binlog 同步到所有的从库，如果从库数量太多，会增加同步的时间和开销（也就是 T2-T1 的值会比较大，但这里是因为主库同步压力大导致的）。解决方案是&lt;font color=&#39;red&#39;&gt;减少从库的数量，或者将从库分为不同的层级，让上层的从库再同步给下层的从库，减少主库的压力&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络延迟&lt;/strong&gt;：如果主从之间的网络传输速度慢，或者出现丢包、抖动等问题，那么就会影响 binlog 的传输效率，导致从库延迟。解决方法是&lt;font color=&#39;red&#39;&gt;优化网络环境&lt;/font&gt;，比如提升带宽、降低延迟、增加稳定性等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单线程复制&lt;/strong&gt;：MySQL5.5 及之前，只支持单线程复制。为了优化复制性能，MySQL 5.6 引入了 &lt;strong&gt;多线程复制&lt;/strong&gt;，MySQL 5.7 还进一步完善了多线程复制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复制模式&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;MySQL 默认的复制是异步的，必然会存在延迟问题&lt;/font&gt;。全同步复制不存在延迟问题，但性能太差了。&lt;font color=&#39;red&#39;&gt;半同步复制是一种折中方案，相对于异步复制，半同步复制提高了数据的安全性，减少了主从延迟（还是有一定程度的延迟）&lt;/font&gt;。MySQL 5.5 开始，MySQL 以插件的形式支持 &lt;strong&gt;semi-sync 半同步复制&lt;/strong&gt;。并且，MySQL 5.7 引入了 &lt;strong&gt;增强半同步复制&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vaW50cm8vMTAwMDIwODAxP2NvZGU9aWVZOEhlUlNsRHNGYnVSdGdnYkJRR3hkVGgtMWpNQVNxRUllcXpIQUtySSUzRA==&#34;&gt;《MySQL 实战 45 讲》&lt;/span&gt;这个专栏中的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vYXJ0aWNsZS83NzYzNg==&#34;&gt;读写分离有哪些坑？&lt;/span&gt;这篇文章也有对主从延迟解决方案这一话题进行探讨，感兴趣的可以阅读学习一下。&lt;/p&gt;
&lt;h5 id=&#34;分库分表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分库分表&#34;&gt;#&lt;/a&gt; 分库分表&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;解决的问题：&lt;font color=&#39;red&#39;&gt;数据库存储&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;读写分离主要应对的是数据库读并发，没有解决数据库存储问题。试想一下：** 如果 MySQL 一张表的数据量过大怎么办？** 换言之，&lt;strong&gt;我们该如何解决 MySQL 的存储压力呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答案之一就是 **&lt;font color=&#39;#B32015&#39;&gt;分库分表&lt;/font&gt;**。&lt;/p&gt;
&lt;h6 id=&#34;分库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分库&#34;&gt;#&lt;/a&gt; 分库&lt;/h6&gt;
&lt;p&gt;分库就是&lt;font color=&#39;red&#39;&gt;将数据库中的数据分散到不同的数据库上&lt;/font&gt;，可以分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;垂直分库&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就是把单一数据库 **&lt;font color=&#39;red&#39;&gt;按照业务进行划分&lt;/font&gt;**，不同的业务使用不同的数据库，进而将一个数据库的压力分担到多个数据库。&lt;/p&gt;
&lt;p&gt;举个例子：说你将数据库中的用户表、订单表和商品表分别单独拆分为用户数据库、订单数据库和商品数据库。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231129114419366.png&#34; alt=&#34;image-20231129114419366&#34; /&gt;&lt;/p&gt;
&lt;center&gt;垂直分库&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;水平分库&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就是把同一个表 **&lt;font color=&#39;red&#39;&gt;按一定规则拆分&lt;/font&gt;** 到不同的数据库中，每个库可以位于不同的服务器上，这样就实现了水平扩展，解决了单表的存储和性能瓶颈的问题。&lt;/p&gt;
&lt;p&gt;举个例子：订单表数据量太大，你对订单表进行了水平切分（水平分表），然后将切分后的 2 张订单表分别放在两个不同的数据库。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/horizontal-slicing-database-53fbc43a.png&#34; alt=&#34;水平分库&#34; /&gt;&lt;/p&gt;
&lt;center&gt;水平分库&lt;/center&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;分表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分表&#34;&gt;#&lt;/a&gt; 分表&lt;/h6&gt;
&lt;p&gt;分表就是&lt;font color=&#39;red&#39;&gt;对单表的数据进行拆分&lt;/font&gt;，也可以分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;垂直分表&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是 **&lt;font color=&#39;red&#39;&gt;对列的拆分&lt;/font&gt;**，把一张列比较多的表拆分为多张表。&lt;/p&gt;
&lt;p&gt;举个例子：我们可以将用户信息表中的一些列单独抽出来作为一个表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;水平分表&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是 **&lt;font color=&#39;red&#39;&gt;对行的拆分&lt;/font&gt;**，把一张行比较多的表拆分为多张表，可以解决单一表数据量过大的问题。&lt;/p&gt;
&lt;p&gt;举个例子：我们可以将用户信息表拆分成多个用户信息表。&lt;/p&gt;
&lt;p&gt;水平拆分只能解决单表数据量大的问题，为了提升性能，我们通常会选择将拆分后的多张表放在不同的数据库中。也就是说，&lt;font color=&#39;red&#39;&gt;水平分表通常和水平分库同时出现&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/two-forms-of-sub-table-3475ce44.png&#34; alt=&#34;分表&#34; /&gt;&lt;/p&gt;
&lt;center&gt;分表&lt;/center&gt;
&lt;h6 id=&#34;什么情况下需要分库分表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么情况下需要分库分表&#34;&gt;#&lt;/a&gt; 什么情况下需要分库分表？&lt;/h6&gt;
&lt;p&gt;遇到下面几种场景可以考虑分库分表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单表的数据达到千万级别以上，数据库读写速度比较缓慢&lt;/li&gt;
&lt;li&gt;数据库中的数据占用的空间越来越大，备份时间越来越长&lt;/li&gt;
&lt;li&gt;应用的并发量太大&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;常见的分片算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的分片算法&#34;&gt;#&lt;/a&gt; 常见的分片算法&lt;/h6&gt;
&lt;p&gt;分片算法主要 **&lt;font color=&#39;red&#39;&gt;解决了数据被水平分片之后，数据究竟该存放在哪个表的问题&lt;/font&gt;**。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;哈希分片&lt;/font&gt;&lt;/strong&gt;：求指定 key（比如 id） 的哈希，然后根据哈希值确定数据应被放置在哪个表中。哈希分片比较&lt;font color=&#39;red&#39;&gt;适合随机读写的场景，不太适合经常需要范围查询的场景&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;范围分片&lt;/font&gt;&lt;/strong&gt;：按照特性的范围区间（比如时间区间、ID 区间）来分配数据，比如 将 id 为 1~299999 的记录分到第一个库， 300000~599999 的分到第二个库。范围分片&lt;font color=&#39;red&#39;&gt;适合需要经常进行范围查找的场景，不太适合随机读写的场景（数据未被分散，容易出现热点数据的问题）&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;地理位置分片&lt;/font&gt;&lt;/strong&gt;：很多 NewSQL 数据库都支持地理位置分片算法，也就是&lt;font color=&#39;red&#39;&gt;根据地理位置（如城市、地域）来分配数据&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;融合算法&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;灵活组合多种分片算法&lt;/font&gt;，比如将哈希分片和范围分片组合。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;分库分表会带来什么问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分库分表会带来什么问题&#34;&gt;#&lt;/a&gt; 分库分表会带来什么问题？&lt;/h6&gt;
&lt;p&gt;记住，你在公司做的任何技术决策，不光是要考虑这个技术能不能满足我们的要求，是否适合当前业务场景，还要重点考虑其带来的成本。&lt;/p&gt;
&lt;p&gt;引入分库分表之后，会给系统带来什么挑战呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;join 操作&lt;/font&gt;&lt;/strong&gt;：同一个数据库中的表分布在了不同的数据库中，导致无法使用 join 操作。这样就导致我们需要手动进行数据的封装，比如你在一个数据库中查询到一个数据之后，再根据这个数据去另外一个数据库中找对应的数据。不过，很多大厂的资深 DBA 都是建议&lt;font color=&#39;red&#39;&gt;尽量不要使用 join 操作&lt;/font&gt;。因为 join 的效率低，并且会对分库分表造成影响。对于需要用到 join 操作的地方，&lt;font color=&#39;red&#39;&gt;可以采用多次查询业务层进行数据组装的方法&lt;/font&gt;。不过，这种方法需要考虑业务上多次查询的事务性的容忍度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;事务问题&lt;/font&gt;&lt;/strong&gt;：同一个数据库中的表分布在了不同的数据库中，如果单个操作涉及到多个数据库，那么数据库自带的事务就无法满足我们的要求了。这个时候，我们就&lt;font color=&#39;red&#39;&gt;需要引入分布式事务&lt;/font&gt;了。关于分布式事务常见解决方案总结，网站上也有对应的总结：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGlzdHJpYnV0ZWQtc3lzdGVtL2Rpc3RyaWJ1dGVkLXRyYW5zYWN0aW9uLmh0bWw=&#34;&gt;https://javaguide.cn/distributed-system/distributed-transaction.html&lt;/span&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;分布式 ID&lt;/font&gt;&lt;/strong&gt;：分库之后，数据遍布在不同服务器上的数据库，数据库的&lt;font color=&#39;red&#39;&gt;自增主键已经没办法满足生成的主键唯一了&lt;/font&gt;。我们如何为不同的数据节点生成全局唯一主键呢？这个时候，我们就需要为我们的系统&lt;font color=&#39;red&#39;&gt;引入分布式 ID &lt;/font&gt;了。关于分布式 ID 的详细介绍 &amp;amp; 实现方案总结，网站上也有对应的总结：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGlzdHJpYnV0ZWQtc3lzdGVtL2Rpc3RyaWJ1dGVkLWlkLmh0bWw=&#34;&gt;https://javaguide.cn/distributed-system/distributed-id.html&lt;/span&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;跨库聚合查询问题&lt;/font&gt;&lt;/strong&gt;：分库分表会导致常规聚合查询操作，如 group by，order by 等变得异常复杂。这是因为这些操作需要在多个分片上进行数据汇总和排序，而不是在单个数据库上进行。为了实现这些操作，&lt;font color=&#39;red&#39;&gt;需要编写复杂的业务代码，或者使用中间件来协调分片间的通信和数据传输&lt;/font&gt;。这样会增加开发和维护的成本，以及影响查询的性能和可扩展性。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，&lt;font color=&#39;red&#39;&gt;引入分库分表之后，一般需要 DBA 的参与，同时还需要更多的数据库服务器&lt;/font&gt;，这些都属于成本。&lt;/p&gt;
&lt;h6 id=&#34;分库分表有没有什么比较推荐的方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分库分表有没有什么比较推荐的方案&#34;&gt;#&lt;/a&gt; 分库分表有没有什么比较推荐的方案？&lt;/h6&gt;
&lt;p&gt;Apache  &lt;code&gt;ShardingSphere&lt;/code&gt;  是一款分布式的数据库生态系统，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;可以将任意数据库转换为分布式数据库，并通过数据分片、弹性伸缩、加密等能力对原有数据库进行增强&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;ShardingSphere 项目（包括 Sharding-JDBC、Sharding-Proxy 和 Sharding-Sidecar）是当当捐入 Apache 的，目前主要由京东数科的一些巨佬维护。&lt;/p&gt;
&lt;p&gt;**ShardingSphere 绝对可以说是当前分库分表的首选！**ShardingSphere 的功能完善，&lt;font color=&#39;red&#39;&gt;除了支持读写分离和分库分表，还提供分布式事务、数据库治理、影子库、数据加密和脱敏等功能&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;ShardingSphere 提供的功能如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/shardingsphere-features.png&#34; alt=&#34;ShardingSphere 提供的功能&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ShardingSphere 的优势如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;极致性能：驱动程序端历经长年打磨，效率接近原生 JDBC，性能极致。&lt;/li&gt;
&lt;li&gt;生态兼容：代理端支持任何通过 MySQL/PostgreSQL 协议的应用访问，驱动程序端可对接任意实现 JDBC 规范的数据库。&lt;/li&gt;
&lt;li&gt;业务零侵入：面对数据库替换场景，ShardingSphere 可满足业务无需改造，实现平滑业务迁移。&lt;/li&gt;
&lt;li&gt;运维低成本：在保留原技术栈不变前提下，对 DBA 学习、管理成本低，交互友好。&lt;/li&gt;
&lt;li&gt;安全稳定：基于成熟数据库底座之上提供增量能力，兼顾安全性及稳定性。&lt;/li&gt;
&lt;li&gt;弹性扩展：具备计算、存储平滑在线扩展能力，可满足业务多变的需求。&lt;/li&gt;
&lt;li&gt;开放生态：通过多层次（内核、功能、生态）插件化能力，为用户提供可定制满足自身特殊需求的独有系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，ShardingSphere 的生态体系完善，社区活跃，文档完善，更新和发布比较频繁。&lt;/p&gt;
&lt;p&gt;艿艿之前写了一篇分库分表的实战文章，各位朋友可以看看：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvQTJNWU9GVDdTUC03a0dPb244cUphdw==&#34;&gt;《芋道 Spring Boot 分库分表入门》&lt;/span&gt; 。&lt;/p&gt;
&lt;h6 id=&#34;分库分表后数据怎么迁移呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分库分表后数据怎么迁移呢&#34;&gt;#&lt;/a&gt; 分库分表后，数据怎么迁移呢？&lt;/h6&gt;
&lt;p&gt;分库分表之后，我们&lt;font color=&#39;red&#39;&gt;如何将老库（单库单表）的数据迁移到新库（分库分表后的数据库系统）呢？&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;比较简单同时也是&lt;font color=&#39;red&#39;&gt;非常常用&lt;/font&gt;的方案就是 **&lt;font color=&#39;cornflowerblue&#39;&gt;停机迁移&lt;/font&gt;**，写个脚本将老库的数据写到新库中。比如你在凌晨 2 点，系统使用的人数非常少的时候，挂一个公告说系统要维护升级预计 1 小时。然后，你写一个脚本将老库的数据都同步到新库中。&lt;/p&gt;
&lt;p&gt;如果你&lt;font color=&#39;red&#39;&gt;不想停机迁移数据的话&lt;/font&gt;，也可以考虑 **&lt;font color=&#39;cornflowerblue&#39;&gt;双写方案&lt;/font&gt;**。双写方案是针对那种不能停机迁移的场景，实现起来要稍微麻烦一些。具体原理是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们&lt;font color=&#39;red&#39;&gt;对老库的更新操作（增删改），同时也要写入新库（双写）&lt;/font&gt;。如果操作的数据不存在于新库的话，需要插入到新库中。这样就能保证，咱们新库里的数据是最新的。&lt;/li&gt;
&lt;li&gt;在迁移过程，双写只会让被更新操作过的老库中的数据同步到新库，我们&lt;font color=&#39;red&#39;&gt;还需要自己写脚本将老库中的数据和新库的数据做比对&lt;/font&gt;。如果新库中没有，那咱们就把数据插入到新库。如果新库有，旧库没有，就把新库对应的数据删除（冗余数据清理）。&lt;/li&gt;
&lt;li&gt;重复上一步的操作，&lt;font color=&#39;red&#39;&gt;直到老库和新库的数据一致为止&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想要在项目中实施双写还是比较麻烦的，很容易会出现问题。我们&lt;font color=&#39;red&#39;&gt;可以借助上面提到的数据库同步工具 Canal 做增量数据迁移&lt;/font&gt;（还是依赖 binlog，开发和维护成本较低）。&lt;/p&gt;
&lt;h5 id=&#34;总结-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-4&#34;&gt;#&lt;/a&gt; 总结&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上&lt;/font&gt;。这样的话，就能够小幅提升写性能，大幅提升读性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;读写分离基于主从复制，而 MySQL 主从复制依赖于  &lt;code&gt;binlog&lt;/code&gt; &lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分库就是将数据库中的数据分散到不同的数据库上。分表就是对单表的数据进行拆分，可以是垂直拆分，也可以是水平拆分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入分库分表之后，需要系统解决事务、分布式 id、无法 join 操作问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;ShardingSphere 绝对可以说是当前分库分表的首选&lt;/font&gt;！ShardingSphere 的功能完善，除了支持读写分离和分库分表，还提供分布式事务、数据库治理等功能。另外，ShardingSphere 的生态体系完善，社区活跃，文档完善，更新和发布比较频繁。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql-高性能优化规范建议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-高性能优化规范建议&#34;&gt;#&lt;/a&gt; MySQL 高性能优化规范建议&lt;/h2&gt;
&lt;h3 id=&#34;命名规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命名规范&#34;&gt;#&lt;/a&gt; 命名规范&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;所有数据库对象名称必须使用&lt;font color=&#39;red&#39;&gt;小写字母&lt;/font&gt;并用&lt;font color=&#39;red&#39;&gt;下划线分割&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有数据库对象名称&lt;font color=&#39;red&#39;&gt;禁止使用 MySQL 保留关键字&lt;/font&gt;（如果表名中包含关键字查询时，需要将其用单引号括起来）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库对象的命名要能做到&lt;font color=&#39;red&#39;&gt;见名识意，并且最后不要超过 32 个字符&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;临时库表必须以  &lt;code&gt;tmp_&lt;/code&gt;  为前缀并以日期为后缀&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;备份表必须以  &lt;code&gt;bak_&lt;/code&gt;  为前缀并以日期 (时间戳) 为后缀&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有存储相同数据的列名和列类型必须一致（一般作为关联列，&lt;font color=&#39;red&#39;&gt;如果查询时关联列类型不一致会自动进行数据类型隐式转换，造成列上的索引失效&lt;/font&gt;，导致查询效率降低）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本设计规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本设计规范&#34;&gt;#&lt;/a&gt; 基本设计规范&lt;/h3&gt;
&lt;h4 id=&#34;所有表必须使用-innodb-存储引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#所有表必须使用-innodb-存储引擎&#34;&gt;#&lt;/a&gt; 所有表必须使用 InnoDB 存储引擎&lt;/h4&gt;
&lt;p&gt;没有特殊要求（即 InnoDB 无法满足的功能如：列存储，存储空间数据等）的情况下，所有表必须使用 InnoDB 存储引擎（MySQL5.5 之前默认使用 MyISAM，5.6 以后默认的为 InnoDB）。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;InnoDB 支持事务、行级锁、外键约束，有更好的恢复性，高并发下性能更好&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;数据库和表的字符集统一使用-utf8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库和表的字符集统一使用-utf8&#34;&gt;#&lt;/a&gt; 数据库和表的字符集统一使用 UTF8&lt;/h4&gt;
&lt;p&gt;兼容性更好，统一字符集可以避免由于字符集转换产生的乱码，&lt;font color=&#39;red&#39;&gt;不同的字符集进行比较前需要进行转换会造成索引失效&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;如果数据库中有存储 emoji 表情的需要，字符集需要采用 utf8mb4 字符集。&lt;/p&gt;
&lt;h4 id=&#34;所有表和字段都需要添加注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#所有表和字段都需要添加注释&#34;&gt;#&lt;/a&gt; 所有表和字段都需要添加注释&lt;/h4&gt;
&lt;p&gt;使用 comment 从句添加表和列的备注，从一开始就进行&lt;font color=&#39;red&#39;&gt;数据字典的维护&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;尽量控制单表数据量的大小建议控制在-500-万以内&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尽量控制单表数据量的大小建议控制在-500-万以内&#34;&gt;#&lt;/a&gt; 尽量控制单表数据量的大小，建议控制在 500 万以内&lt;/h4&gt;
&lt;p&gt;500 万并不是 MySQL 数据库的限制，过大会造成修改表结构，备份，恢复都会有很大的问题。&lt;/p&gt;
&lt;p&gt;可以用&lt;font color=&#39;red&#39;&gt;历史数据归档（应用于日志数据）&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;分库分表（应用于业务数据）&lt;/font&gt;等手段来控制数据量大小。&lt;/p&gt;
&lt;h4 id=&#34;谨慎使用-mysql-分区表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#谨慎使用-mysql-分区表&#34;&gt;#&lt;/a&gt; 谨慎使用 MySQL 分区表&lt;/h4&gt;
&lt;p&gt;分区表在物理上表现为多个文件，在逻辑上表现为一个表；&lt;/p&gt;
&lt;p&gt;谨慎选择分区键，&lt;font color=&#39;red&#39;&gt;跨分区查询效率可能更低&lt;/font&gt;；&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;建议采用物理分表&lt;/font&gt;的方式管理大数据。&lt;/p&gt;
&lt;h4 id=&#34;经常一起使用的列放到一个表中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#经常一起使用的列放到一个表中&#34;&gt;#&lt;/a&gt; 经常一起使用的列放到一个表中&lt;/h4&gt;
&lt;p&gt;避免更多的关联操作。&lt;/p&gt;
&lt;h4 id=&#34;禁止在表中建立预留字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁止在表中建立预留字段&#34;&gt;#&lt;/a&gt; 禁止在表中建立预留字段&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;预留字段的命名&lt;font color=&#39;red&#39;&gt;很难做到见名识义&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;预留字段&lt;font color=&#39;red&#39;&gt;无法确认存储的数据类型&lt;/font&gt;，所以无法选择合适的类型。&lt;/li&gt;
&lt;li&gt;对预留字段类型的修改，会对表进行锁定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;禁止在数据库中存储文件比如图片这类大的二进制数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁止在数据库中存储文件比如图片这类大的二进制数据&#34;&gt;#&lt;/a&gt; 禁止在数据库中存储文件（比如图片）这类大的二进制数据&lt;/h4&gt;
&lt;p&gt;在数据库中存储文件&lt;font color=&#39;red&#39;&gt;会严重影响数据库性能，消耗过多存储空间&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;这类大的二进制数据文件（比如图片）&lt;font color=&#39;red&#39;&gt;通常存储于文件服务器，数据库只存储文件地址信息&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;不要被数据库范式所束缚&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不要被数据库范式所束缚&#34;&gt;#&lt;/a&gt; 不要被数据库范式所束缚&lt;/h4&gt;
&lt;p&gt;一般来说，设计关系数据库时需要满足第三范式，但&lt;font color=&#39;red&#39;&gt;为了满足第三范式，我们可能会拆分出多张表&lt;/font&gt;。而在进行查询时需要对多张表进行关联查询，&lt;font color=&#39;red&#39;&gt;有时为了提高查询效率，会降低范式的要求，在表中保存一定的冗余信息，也叫做反范式&lt;/font&gt;。但要注意反范式一定要适度。&lt;/p&gt;
&lt;h4 id=&#34;禁止在线上做数据库压力测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁止在线上做数据库压力测试&#34;&gt;#&lt;/a&gt; 禁止在线上做数据库压力测试&lt;/h4&gt;
&lt;h4 id=&#34;禁止从开发环境-测试环境直接连接生产环境数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁止从开发环境-测试环境直接连接生产环境数据库&#34;&gt;#&lt;/a&gt; 禁止从开发环境、测试环境直接连接生产环境数据库&lt;/h4&gt;
&lt;p&gt;安全隐患极大，要对生产环境抱有敬畏之心！&lt;/p&gt;
&lt;h3 id=&#34;字段设计规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字段设计规范&#34;&gt;#&lt;/a&gt; 字段设计规范&lt;/h3&gt;
&lt;h4 id=&#34;优先选择符合存储需要的最小的数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优先选择符合存储需要的最小的数据类型&#34;&gt;#&lt;/a&gt; 优先选择符合存储需要的最小的数据类型&lt;/h4&gt;
&lt;p&gt;存储字节越小，占用也就空间越小，性能也越好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a. 某些字符串可以转换成数字类型存储，比如可以将 IP 地址转换成整型数据。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数字是连续的，性能更好，占用空间也更小。&lt;/p&gt;
&lt;p&gt;MySQL 提供了两个方法来处理 ip 地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INET_ATON()&lt;/code&gt; ：把 ip 转为无符号整型 (4-8 位)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INET_NTOA()&lt;/code&gt;  : 把整型的 ip 转为地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;插入数据前，先用  &lt;code&gt;INET_ATON()&lt;/code&gt;  把 ip 地址转为整型，显示数据时，使用  &lt;code&gt;INET_NTOA()&lt;/code&gt;  把整型的 ip 地址转为地址显示即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b. 对于非负型的数据 (如自增 ID、整型 IP、年龄) 来说，要优先使用无符号整型来存储。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;无符号相对于有符号可以多出一倍的存储空间&lt;/font&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;SIGNED &lt;span class=&#34;token keyword&#34;&gt;INT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2147483648&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2147483647&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UNSIGNED&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INT&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4294967295&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;c. 小数值类型（比如年龄、状态表示如 0/1）优先使用 TINYINT 类型。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;避免使用-text-blob-数据类型最常见的-text-类型可以存储-64k-的数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#避免使用-text-blob-数据类型最常见的-text-类型可以存储-64k-的数据&#34;&gt;#&lt;/a&gt; 避免使用 TEXT、BLOB 数据类型，最常见的 TEXT 类型可以存储 64k 的数据&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;a. 建议把 BLOB 或是 TEXT 列分离到单独的扩展表中。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MySQL &lt;font color=&#39;red&#39;&gt;内存临时表不支持 TEXT、BLOB 这样的大数据类型&lt;/font&gt;，如果查询中包含这样的数据，在排序等操作时，就不能使用内存临时表，&lt;font color=&#39;red&#39;&gt;必须使用磁盘临时表进行&lt;/font&gt;。而且对于这种数据，MySQL 还是要进行二次查询，会使 sql 性能变得很差，但是不是说一定不能使用这样的数据类型。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;如果一定要使用，建议把 BLOB 或是 TEXT 列分离到单独的扩展表中&lt;/font&gt;，查询时一定不要使用  &lt;code&gt;select *&lt;/code&gt;  而只需要取出必要的列，不需要 TEXT 列的数据时不要对该列进行查询。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、TEXT 或 BLOB 类型只能使用前缀索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为 MySQL 对索引字段长度是有限制的，所以 TEXT 类型只能使用前缀索引，并且 TEXT 列上是不能有默认值的。&lt;/p&gt;
&lt;h4 id=&#34;避免使用-enum-类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#避免使用-enum-类型&#34;&gt;#&lt;/a&gt; 避免使用 ENUM 类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;修改 ENUM 值需要使用 ALTER 语句&lt;/font&gt;；&lt;/li&gt;
&lt;li&gt;ENUM 类型的 &lt;font color=&#39;red&#39;&gt;ORDER BY 操作效率低&lt;/font&gt;，需要额外操作；&lt;/li&gt;
&lt;li&gt;ENUM 数据类型存在一些限制，比如建议不要使用数值作为 ENUM 的枚举值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关阅读：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQwNDQyMjI1NS9hbnN3ZXIvMTY2MTY5ODQ5OQ==&#34;&gt;是否推荐使用 MySQL 的 enum 类型？ - 架构文摘 - 知乎&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;尽可能把所有列定义为-not-null&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尽可能把所有列定义为-not-null&#34;&gt;#&lt;/a&gt; 尽可能把所有列定义为 NOT NULL&lt;/h4&gt;
&lt;p&gt;除非有特别的原因使用 NULL 值，应该总是让字段保持 NOT NULL。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;索引 NULL 列需要额外的空间来保存，所以要占用更多的空间；&lt;/li&gt;
&lt;li&gt;进行比较和计算时要对 NULL 值做特别的处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关阅读：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vcGVuc291cmNlLmFjdGlvbnNreS5jb20vMjAxOTA3MTAtbXlzcWwv&#34;&gt;技术分享 | MySQL 默认值选型（是空，还是 NULL）&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;一定不要用字符串存储日期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一定不要用字符串存储日期&#34;&gt;#&lt;/a&gt; 一定不要用字符串存储日期&lt;/h4&gt;
&lt;p&gt;对于日期类型来说，一定不要用字符串存储日期。&lt;font color=&#39;red&#39;&gt;可以考虑 DATETIME、TIMESTAMP、数值型时间戳&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;这三种方式都有各自的优势，根据实际场景选择最合适的才是王道。下面再对这三种方式做一个简单的对比，以供大家实际开发中选择正确的存放时间的数据类型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;存储空间&lt;/th&gt;
&lt;th&gt;日期格式&lt;/th&gt;
&lt;th&gt;日期范围&lt;/th&gt;
&lt;th&gt;是否带时区信息&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DATETIME&lt;/td&gt;
&lt;td&gt;5~8 字节&lt;/td&gt;
&lt;td&gt;YYYY-MM-DD hh:mm:ss[.fraction]&lt;/td&gt;
&lt;td&gt;1000-01-01 00:00:00[.000000] ～ 9999-12-31 23:59:59[.999999]&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TIMESTAMP&lt;/td&gt;
&lt;td&gt;4~7 字节&lt;/td&gt;
&lt;td&gt;YYYY-MM-DD hh:mm:ss[.fraction]&lt;/td&gt;
&lt;td&gt;1970-01-01 00:00:01[.000000] ～ 2038-01-19 03:14:07[.999999]&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数值型时间戳&lt;/td&gt;
&lt;td&gt;4 字节&lt;/td&gt;
&lt;td&gt;全数字如 1578707612&lt;/td&gt;
&lt;td&gt;1970-01-01 00:00:01 之后的时间&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;MySQL 时间类型选择的详细介绍请看这篇：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGF0YWJhc2UvbXlzcWwvc29tZS10aG91Z2h0cy1vbi1kYXRhYmFzZS1zdG9yYWdlLXRpbWUuaHRtbA==&#34;&gt;MySQL 时间类型数据存储建议&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&#34;财务相关的金额类数据必须使用-decimal-类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#财务相关的金额类数据必须使用-decimal-类型&#34;&gt;#&lt;/a&gt; 财务相关的金额类数据必须使用 decimal 类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非精准浮点&lt;/strong&gt;：float、double&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;精准浮点&lt;/font&gt;&lt;/strong&gt;：decimal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;decimal 类型为精准浮点数，&lt;font color=&#39;red&#39;&gt;在计算时不会丢失精度&lt;/font&gt;。占用空间由定义的宽度决定，每 4 个字节可以存储 9 位数字，并且小数点要占用一个字节。并且，&lt;font color=&#39;red&#39;&gt;decimal 可用于存储比 bigint 更大的整型数据&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;不过，由于 decimal &lt;font color=&#39;red&#39;&gt;需要额外的空间和计算开销&lt;/font&gt;，应该尽量只在需要对数据进行精确计算时才使用 decimal 。&lt;/p&gt;
&lt;h4 id=&#34;单表不要包含过多字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单表不要包含过多字段&#34;&gt;#&lt;/a&gt; 单表不要包含过多字段&lt;/h4&gt;
&lt;p&gt;如果一个表包含过多字段的话，可以考虑将其&lt;font color=&#39;red&#39;&gt;垂直分表&lt;/font&gt;，必要时增加中间表进行关联。&lt;/p&gt;
&lt;h3 id=&#34;索引设计规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引设计规范&#34;&gt;#&lt;/a&gt; 索引设计规范&lt;/h3&gt;
&lt;h4 id=&#34;限制每张表上的索引数量建议单张表索引不超过-5-个&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#限制每张表上的索引数量建议单张表索引不超过-5-个&#34;&gt;#&lt;/a&gt; 限制每张表上的索引数量，建议单张表索引不超过 5 个&lt;/h4&gt;
&lt;p&gt;索引并不是越多越好！索引可以提高效率同样可以降低效率。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;索引可以增加查询效率，但同样也会降低插入和更新的效率&lt;/font&gt;，甚至有些情况下会降低查询效率。&lt;/p&gt;
&lt;p&gt;因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加&lt;font color=&#39;red&#39;&gt; MySQL 优化器生成执行计划的时间&lt;/font&gt;，同样会降低查询性能。&lt;/p&gt;
&lt;h4 id=&#34;禁止使用全文索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁止使用全文索引&#34;&gt;#&lt;/a&gt; 禁止使用全文索引&lt;/h4&gt;
&lt;p&gt;全文索引不适用于 OLTP（联机事务处理）场景。&lt;/p&gt;
&lt;h4 id=&#34;禁止给表中的每一列都建立单独的索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁止给表中的每一列都建立单独的索引&#34;&gt;#&lt;/a&gt; 禁止给表中的每一列都建立单独的索引&lt;/h4&gt;
&lt;p&gt;5.6 版本之前，一个 sql 只能使用到一个表中的一个索引；5.6 以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好。&lt;/p&gt;
&lt;h4 id=&#34;每个-innodb-表必须有个主键&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#每个-innodb-表必须有个主键&#34;&gt;#&lt;/a&gt; 每个 InnoDB 表必须有个主键&lt;/h4&gt;
&lt;p&gt;InnoDB 是一种索引组织表：&lt;font color=&#39;red&#39;&gt;数据存储的逻辑顺序和索引的顺序是相同的&lt;/font&gt;。每个表都可以有多个索引，但是表的存储顺序只能有一种。&lt;/p&gt;
&lt;p&gt;InnoDB 是 **&lt;font color=&#39;red&#39;&gt;按照主键索引的顺序来组织表&lt;/font&gt;** 的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要使用更新频繁的列作为主键，不使用多列主键（相当于联合索引）&lt;/li&gt;
&lt;li&gt;不要使用 UUID,MD5,HASH, 字符串列作为主键（无法保证数据的顺序增长）&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;主键建议使用自增 ID 值&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常见索引列建议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见索引列建议&#34;&gt;#&lt;/a&gt; 常见索引列建议&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;出现在 WHERE 子句中的列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;包含在 ORDER BY、GROUP BY、DISTINCT 中的字段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;通常将上述两种情况的字段建立&lt;u&gt;联合索引&lt;/u&gt;，效果更好&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多表 join 的&lt;font color=&#39;red&#39;&gt;关联列&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;如何选择联合索引中的列顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何选择联合索引中的列顺序&#34;&gt;#&lt;/a&gt; 如何选择联合索引中的列顺序&lt;/h4&gt;
&lt;p&gt;建立索引的目的是：希望通过索引进行数据查找，减少随机 IO，增加查询性能，&lt;font color=&#39;red&#39;&gt;索引能过滤出越少的数据，则从磁盘中读入的数据也就越少&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;区分度最高的列&lt;/font&gt;放在联合索引的最左侧&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;区分度 = 列中不同值的数量 / 列的总行数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量把&lt;font color=&#39;red&#39;&gt;字段长度小的列&lt;/font&gt;放在联合索引的最左侧&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为字段长度越小，一页能存储的数据量越大，IO 性能也就越好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;使用最频繁的列&lt;/font&gt;放到联合索引的左侧&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这样可以比较少的建立一些索引&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;避免建立冗余索引-重复索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#避免建立冗余索引-重复索引&#34;&gt;#&lt;/a&gt; 避免建立冗余索引、重复索引&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;增加了查询优化器生成执行计划的时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;重复索引示例：primary key (id)、index (id)、unique index (id)&lt;/li&gt;
&lt;li&gt;冗余索引示例：index (a,b,c)、index (a,b)、index (a)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对于频繁的查询优先考虑覆盖索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对于频繁的查询优先考虑覆盖索引&#34;&gt;#&lt;/a&gt; 对于频繁的查询，优先考虑覆盖索引&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;覆盖索引：&lt;font color=&#39;red&#39;&gt;包含了所有查询字段&lt;/font&gt; (where,select,order by,group by 包含的字段) 的索引。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;覆盖索引的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;避免二次查询（回表）&lt;/font&gt;&lt;/strong&gt;：InnoDB 是以聚集索引的顺序来存储的，对于 InnoDB 来说，二级索引在叶子节点中所保存的是行的主键信息。&lt;font color=&#39;red&#39;&gt;如果是用二级索引查询数据的话，在查找到相应的主键后，还要通过聚集索引进行二次查询才能获取我们真实所需要的数据&lt;/font&gt;。而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询，减少了 IO 操作，提升了查询效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以把随机 IO 变成顺序 IO 加快查询效率:&lt;/strong&gt; 由于覆盖索引是按键值的顺序存储的，对于 IO 密集型的范围查找来说，对比随机从磁盘读取每一行的数据 IO 要少的多。因此利用覆盖索引在访问时也可以把磁盘的随机读取的 IO 转变成索引查找的顺序 IO。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;索引-set-规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引-set-规范&#34;&gt;#&lt;/a&gt; 索引 SET 规范&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;尽量避免使用外键约束&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不建议使用外键约束（foreign key），但&lt;font color=&#39;red&#39;&gt;一定要在表与表之间的关联键上建立索引&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;外键可用于保证数据的参照完整性，但&lt;font color=&#39;red&#39;&gt;建议在业务端实现外键约束&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;外键会影响父表和子表的写操作&lt;/font&gt;，从而降低性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sql-开发规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-开发规范&#34;&gt;#&lt;/a&gt; SQL 开发规范&lt;/h3&gt;
&lt;h4 id=&#34;尽量不在数据库做运算复杂运算需移到业务应用里完成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尽量不在数据库做运算复杂运算需移到业务应用里完成&#34;&gt;#&lt;/a&gt; 尽量不在数据库做运算，复杂运算需移到业务应用里完成&lt;/h4&gt;
&lt;p&gt;避免数据库的负担过重，影响数据库的性能和稳定性。数据库的主要作用是存储和管理数据，而不是处理数据。&lt;/p&gt;
&lt;h4 id=&#34;优化对性能影响较大的-sql-语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优化对性能影响较大的-sql-语句&#34;&gt;#&lt;/a&gt; 优化对性能影响较大的 SQL 语句&lt;/h4&gt;
&lt;p&gt;要找到最需要优化的 SQL 语句。要么是&lt;font color=&#39;red&#39;&gt;使用最频繁&lt;/font&gt;的语句，要么是&lt;font color=&#39;red&#39;&gt;优化后提高最明显&lt;/font&gt;的语句，可以通过查询 MySQL 的 **&lt;font color=&#39;red&#39;&gt;慢查询日志&lt;/font&gt;** 来发现需要进行优化的 SQL 语句。&lt;/p&gt;
&lt;h4 id=&#34;充分利用表上已经存在的索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#充分利用表上已经存在的索引&#34;&gt;#&lt;/a&gt; 充分利用表上已经存在的索引&lt;/h4&gt;
&lt;p&gt;避免使用双 % 号的查询条件。如： &lt;code&gt;a like &#39;%123%&#39;&lt;/code&gt; ，（如果无前置 %, 只有后置 %，是可以用到列上的索引的）&lt;/p&gt;
&lt;p&gt;一个 SQL 只能利用到复合索引中的一列进行范围查询。如：有 a,b,c 列的联合索引，在查询条件中有 a 列的范围查询，则在 b,c 列上的索引将不会被用到。&lt;/p&gt;
&lt;p&gt;在定义联合索引时，如果 a 列要用到范围查找的话，就要把 a 列放到联合索引的右侧，使用 left join 或 not exists 来优化 not in 操作，因为 not in 也通常会使用索引失效。&lt;/p&gt;
&lt;h4 id=&#34;禁止使用-select-查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁止使用-select-查询&#34;&gt;#&lt;/a&gt; 禁止使用 SELECT * 查询&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SELECT *&lt;/code&gt;  会消耗更多的 CPU&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SELECT *&lt;/code&gt;  无用字段增加网络带宽资源消耗，增加数据传输时间，尤其是大字段（如 varchar、blob、text）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SELECT *&lt;/code&gt;  &lt;font color=&#39;red&#39;&gt;无法使用 MySQL 优化器覆盖索引的优化&lt;/font&gt;（基于 MySQL 优化器的 “覆盖索引” 策略又是速度极快，效率极高，业界极为推荐的查询优化方式）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SELECT &amp;lt;字段列表&amp;gt;&lt;/code&gt;  可减少表结构变更带来的影响&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;禁止使用不含字段列表的-insert-语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁止使用不含字段列表的-insert-语句&#34;&gt;#&lt;/a&gt; 禁止使用不含字段列表的 INSERT 语句&lt;/h4&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; t &lt;span class=&#34;token keyword&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;应使用：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;c2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;c3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;建议使用预编译语句进行数据库操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建议使用预编译语句进行数据库操作&#34;&gt;#&lt;/a&gt; 建议使用预编译语句进行数据库操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;预编译语句可以重复使用这些计划，&lt;font color=&#39;red&#39;&gt;减少 SQL 编译所需要的时间&lt;/font&gt;，还可以&lt;font color=&#39;red&#39;&gt;解决动态 SQL 所带来的 SQL 注入的问题&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;只传参数&lt;/font&gt;，比传递 SQL 语句更高效&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相同语句可以&lt;font color=&#39;red&#39;&gt;一次解析，多次使用&lt;/font&gt;，提高处理效率&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;避免数据类型的隐式转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#避免数据类型的隐式转换&#34;&gt;#&lt;/a&gt; 避免数据类型的隐式转换&lt;/h4&gt;
&lt;p&gt;隐式转换&lt;font color=&#39;red&#39;&gt;会导致索引失效&lt;/font&gt;如:&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;phone &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; customer &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;111&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;详细解读可以看：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGF0YWJhc2UvbXlzcWwvaW5kZXgtaW52YWxpZGF0aW9uLWNhdXNlZC1ieS1pbXBsaWNpdC1jb252ZXJzaW9uLmh0bWw=&#34;&gt;MySQL 中的隐式转换造成的索引失效&lt;/span&gt; 这篇文章。&lt;/p&gt;
&lt;h4 id=&#34;避免使用子查询可以把子查询优化为-join-操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#避免使用子查询可以把子查询优化为-join-操作&#34;&gt;#&lt;/a&gt; 避免使用子查询，可以把子查询优化为 join 操作&lt;/h4&gt;
&lt;p&gt;通常子查询在 in 子句中，且子查询中为简单 SQL (不包含 union、group by、order by、limit 从句) 时，才可以把子查询转化为关联查询进行优化。&lt;/p&gt;
&lt;p&gt;子查询性能差的原因：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;子查询的结果集通常被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引&lt;/font&gt;&lt;/strong&gt;，所以查询性能会受到一定的影响。特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。&lt;/p&gt;
&lt;h4 id=&#34;避免使用-join-关联太多的表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#避免使用-join-关联太多的表&#34;&gt;#&lt;/a&gt; 避免使用 JOIN 关联太多的表&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于 MySQL 来说，是存在&lt;font color=&#39;red&#39;&gt;关联缓存&lt;/font&gt;的，缓存的大小可以由  &lt;code&gt;join_buffer_size&lt;/code&gt;  参数进行设置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 MySQL 中，对于同一个 SQL，多关联（join）一个表，就会多分配一个关联缓存，如果在&lt;font color=&#39;red&#39;&gt;一个 SQL 中关联的表越多，所占用的内存也就越大&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果程序中大量的使用了多表关联的操作，同时 join_buffer_size 设置的也不合理的情况下，就&lt;font color=&#39;red&#39;&gt;容易造成服务器内存溢出&lt;/font&gt;的情况，就会影响到服务器数据库性能的稳定性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同时对于关联操作来说，会产生临时表操作，影响查询效率，&lt;font color=&#39;red&#39;&gt;MySQL 最多允许关联 61 个表，建议不超过 5 个&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;减少同数据库的交互次数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#减少同数据库的交互次数&#34;&gt;#&lt;/a&gt; 减少同数据库的交互次数&lt;/h4&gt;
&lt;p&gt;数据库更适合处理批量操作，&lt;font color=&#39;red&#39;&gt;合并多个相同的操作到一起&lt;/font&gt;，可以提高处理效率。&lt;/p&gt;
&lt;h4 id=&#34;对应同一列进行-or-判断时使用-in-代替-or&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对应同一列进行-or-判断时使用-in-代替-or&#34;&gt;#&lt;/a&gt; 对应同一列进行 or 判断时，使用 in 代替 or&lt;/h4&gt;
&lt;p&gt;in 的值不要超过 500 个，in 操作可以更有效的利用索引，or 大多数情况下很少能利用到索引。&lt;/p&gt;
&lt;h4 id=&#34;禁止使用-order-by-rand-进行随机排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁止使用-order-by-rand-进行随机排序&#34;&gt;#&lt;/a&gt; 禁止使用 order by rand () 进行随机排序&lt;/h4&gt;
&lt;p&gt;order by rand () 会把表中所有符合条件的数据装载到内存中，然后在内存中对所有数据根据随机生成的值进行排序，并且可能会对每一行都生成一个随机值，如果满足条件的数据集非常大，就会消耗大量的 CPU 和 IO 及内存资源。&lt;/p&gt;
&lt;p&gt;推荐在程序中获取一个随机值，然后从数据库中获取数据的方式。&lt;/p&gt;
&lt;h4 id=&#34;where-从句中禁止对列进行函数转换和计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#where-从句中禁止对列进行函数转换和计算&#34;&gt;#&lt;/a&gt; WHERE 从句中禁止对列进行函数转换和计算&lt;/h4&gt;
&lt;p&gt;对列进行函数转换或计算时&lt;font color=&#39;red&#39;&gt;会导致索引失效&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;不推荐：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;create_time&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;20190101&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;推荐：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; create_time &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;20190101&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; create_time &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;20190102&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;在明显不会有重复值时使用-union-all-而不是-union&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在明显不会有重复值时使用-union-all-而不是-union&#34;&gt;#&lt;/a&gt; 在明显不会有重复值时，使用 UNION ALL 而不是 UNION&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;UNION：把两个结果集的所有数据&lt;font color=&#39;red&#39;&gt;放到临时表中，再进行去重操作&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;UNION ALL：&lt;font color=&#39;red&#39;&gt;不会再对结果集进行去重操作&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;拆分复杂的大-sql-为多个小-sql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拆分复杂的大-sql-为多个小-sql&#34;&gt;#&lt;/a&gt; 拆分复杂的大 SQL 为多个小 SQL&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;大 SQL 逻辑上比较复杂，需要占用大量 CPU 进行计算的 SQL&lt;/li&gt;
&lt;li&gt;MySQL 中，一个 SQL 只能使用一个 CPU 进行计算&lt;/li&gt;
&lt;li&gt;SQL 拆分后可以通过&lt;font color=&#39;red&#39;&gt;并行执行&lt;/font&gt;来提高处理效率&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;程序连接不同的数据库使用不同的账号禁止跨库查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序连接不同的数据库使用不同的账号禁止跨库查询&#34;&gt;#&lt;/a&gt; 程序连接不同的数据库使用不同的账号，禁止跨库查询&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;为数据库迁移和分库分表留出余地&lt;/li&gt;
&lt;li&gt;降低业务耦合度&lt;/li&gt;
&lt;li&gt;避免权限过大而产生的安全风险&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;操作行为规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作行为规范&#34;&gt;#&lt;/a&gt; 操作行为规范&lt;/h3&gt;
&lt;h4 id=&#34;超-100-万行的批量写-updatedeleteinsert-操作要分批多次进行操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#超-100-万行的批量写-updatedeleteinsert-操作要分批多次进行操作&#34;&gt;#&lt;/a&gt; 超 100 万行的批量写 (UPDATE,DELETE,INSERT) 操作，要分批多次进行操作&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;大批量操作可能会造成严重的主从延迟&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主从环境中，大批量操作可能会造成严重的主从延迟，大批量的写操作一般都需要执行一定长的时间，而只有当主库上执行完成后，才会在其他从库上执行，所以会造成主库与从库长时间的延迟情况&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;binlog 日志为 row 格式时会产生大量的日志&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大批量写操作会产生大量日志，特别是对于 row 格式二进制数据而言，由于&lt;font color=&#39;red&#39;&gt;在 row 格式中会记录每一行数据的修改&lt;/font&gt;，我们一次修改的数据越多，产生的日志量也就会越多，日志的传输和恢复所需要的时间也就越长，这也是造成主从延迟的一个原因&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;避免产生大事务操作&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大批量修改数据，一定是在一个事务中进行的，这就&lt;font color=&#39;red&#39;&gt;会造成表中大批量数据进行锁定，从而导致大量的阻塞&lt;/font&gt;，阻塞会对 MySQL 的性能产生非常大的影响。&lt;/p&gt;
&lt;p&gt;特别是&lt;font color=&#39;red&#39;&gt;长时间的阻塞会占满所有数据库的可用连接&lt;/font&gt;，这会使生产环境中的其他应用无法连接到数据库，因此一定要注意大批量写操作要进行分批&lt;/p&gt;
&lt;h4 id=&#34;对于大表使用-pt-online-schema-change-修改表结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对于大表使用-pt-online-schema-change-修改表结构&#34;&gt;#&lt;/a&gt; 对于大表使用 pt-online-schema-change 修改表结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;避免大表修改产生的主从延迟&lt;/li&gt;
&lt;li&gt;避免在对表字段进行修改时进行锁表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;对大表数据结构的修改一定要谨慎，会造成严重的锁表操作&lt;/font&gt;，尤其是生产环境，是不能容忍的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pt-online-schema-change&lt;/code&gt; &lt;font color=&#39;red&#39;&gt; 首先会建立一个与原表结构相同的新表，并且在新表上进行表结构的修改，然后再把原表中的数据复制到新表中，并在原表中增加一些触发器。把原表中新增的数据也复制到新表中，在所有数据复制完成之后，把新表命名成原表，并把原来的表删除掉。&lt;/font&gt;把原来一个 DDL 操作，分解成多个小的批次进行。&lt;/p&gt;
&lt;h4 id=&#34;禁止为程序使用的账号赋予-super-权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁止为程序使用的账号赋予-super-权限&#34;&gt;#&lt;/a&gt; 禁止为程序使用的账号赋予 super 权限&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;当达到最大连接数限制时，还运行 1 个有 super 权限的用户连接&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;super 权限只能留给 DBA 处理问题的账号使用&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对于程序连接数据库账号遵循权限最小原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对于程序连接数据库账号遵循权限最小原则&#34;&gt;#&lt;/a&gt; 对于程序连接数据库账号，遵循权限最小原则&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;程序使用数据库账号只能在一个 DB 下使用，不准跨库&lt;/li&gt;
&lt;li&gt;程序使用的账号原则上不准有 drop 权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql&#34;&gt;#&lt;/a&gt; SQL&lt;/h2&gt;
&lt;h3 id=&#34;sql语法基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql语法基础&#34;&gt;#&lt;/a&gt; SQL 语法基础&lt;/h3&gt;
&lt;h4 id=&#34;基本概念-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本概念-2&#34;&gt;#&lt;/a&gt; 基本概念&lt;/h4&gt;
&lt;h5 id=&#34;数据库术语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库术语&#34;&gt;#&lt;/a&gt; 数据库术语&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;数据库（database）&lt;/code&gt;  - 保存有组织的数据的容器（通常是一个文件或一组文件）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;数据表（table）&lt;/code&gt;  - 某种特定类型数据的结构化清单。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;模式（schema）&lt;/code&gt;  - &lt;font color=&#39;red&#39;&gt;关于数据库和表的布局及特性的信息&lt;/font&gt;。模式&lt;font color=&#39;red&#39;&gt;定义了数据在表中如何存储&lt;/font&gt;，包含存储什么样的数据，数据如何分解，各部分信息如何命名等信息。数据库和表都有模式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;列（column）&lt;/code&gt;  - 表中的一个字段。所有表都是由一个或多个列组成的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;行（row）&lt;/code&gt;  - 表中的一个记录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;主键（primary key）&lt;/code&gt;  - 一列（或一组列），其值能够唯一标识表中每一行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;sql-语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-语法&#34;&gt;#&lt;/a&gt; SQL 语法&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;SQL（Structured Query Language)&lt;/code&gt; ，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。&lt;/p&gt;
&lt;h6 id=&#34;sql-语法结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-语法结构&#34;&gt;#&lt;/a&gt; SQL 语法结构&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/cb684d4c75fc430e92aaee226069c7da%7Etplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;SQL 语法结构包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;子句&lt;/code&gt; &lt;/strong&gt; - 是语句和查询的组成成分。（在某些情况下，这些都是可选的。）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;表达式&lt;/code&gt; &lt;/strong&gt; - 可以产生任何标量值，或由列和行的数据库表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;谓词&lt;/code&gt; &lt;/strong&gt; - 给需要评估的 SQL 三值逻辑（3VL）（true/false/unknown）或布尔真值指定条件，并限制语句和查询的效果，或改变程序流程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;查询&lt;/code&gt; &lt;/strong&gt; - 基于特定条件检索数据。这是 SQL 的一个重要组成部分。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;语句&lt;/code&gt; &lt;/strong&gt; - 可以持久地影响纲要和数据，也可以控制数据库事务、程序流程、连接、会话或诊断。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;sql-语法要点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-语法要点&#34;&gt;#&lt;/a&gt; SQL 语法要点&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SQL 语句不区分大小写&lt;/strong&gt;，但是数据库表名、列名和值是否区分，依赖于具体的 DBMS 以及配置。例如： &lt;code&gt;SELECT&lt;/code&gt;  与  &lt;code&gt;select&lt;/code&gt;  、 &lt;code&gt;Select&lt;/code&gt;  是相同的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多条 SQL 语句必须以分号（ &lt;code&gt;;&lt;/code&gt; ）分隔&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;处理 SQL 语句时，&lt;strong&gt;所有空格都被忽略&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SQL 语句可以写成一行，也可以分写为多行。&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 一行 SQL 语句&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SET&lt;/span&gt; username&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;robot&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; password&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;robot&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 多行 SQL 语句&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SET&lt;/span&gt; username&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;robot&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; password&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;robot&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;SQL 支持三种注释：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## 注释 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 注释 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 注释 3 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;sql-分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-分类&#34;&gt;#&lt;/a&gt; SQL 分类&lt;/h5&gt;
&lt;h6 id=&#34;数据定义语言ddl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据定义语言ddl&#34;&gt;#&lt;/a&gt; 数据定义语言（DDL）&lt;/h6&gt;
&lt;p&gt;数据定义语言（Data Definition Language，DDL）是 SQL 语言集中负责数据结构定义与数据库对象定义的语言。&lt;/p&gt;
&lt;p&gt;DDL 的主要功能是&lt;strong&gt;定义数据库对象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;DDL 的核心指令是  &lt;code&gt;CREATE&lt;/code&gt; 、 &lt;code&gt;ALTER&lt;/code&gt; 、 &lt;code&gt;DROP&lt;/code&gt; 。&lt;/p&gt;
&lt;h6 id=&#34;数据操纵语言dml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据操纵语言dml&#34;&gt;#&lt;/a&gt; 数据操纵语言（DML）&lt;/h6&gt;
&lt;p&gt;数据操纵语言（Data Manipulation Language, DML）是用于数据库操作，对数据库其中的对象和数据运行访问工作的编程语句。&lt;/p&gt;
&lt;p&gt;DML 的主要功能是 访问数据，因此其语法都是以&lt;strong&gt;读写数据库&lt;/strong&gt;为主。&lt;/p&gt;
&lt;p&gt;DML 的核心指令是  &lt;code&gt;INSERT&lt;/code&gt; 、 &lt;code&gt;DELETE&lt;/code&gt; 、 &lt;code&gt;UPDATE&lt;/code&gt; 、 &lt;code&gt;SELECT&lt;/code&gt; 。这四个指令合称 CRUD (Create, Read, Update, Delete)，即增删改查。&lt;/p&gt;
&lt;h6 id=&#34;事务控制语言tcl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务控制语言tcl&#34;&gt;#&lt;/a&gt; 事务控制语言（TCL）&lt;/h6&gt;
&lt;p&gt;事务控制语言 (Transaction Control Language, TCL) 用于&lt;strong&gt;管理数据库中的事务&lt;/strong&gt;。这些用于管理由 DML 语句所做的更改。它还允许将语句分组为逻辑事务。&lt;/p&gt;
&lt;p&gt;TCL 的核心指令是  &lt;code&gt;COMMIT&lt;/code&gt; 、 &lt;code&gt;ROLLBACK&lt;/code&gt; 。&lt;/p&gt;
&lt;h6 id=&#34;数据控制语言dcl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据控制语言dcl&#34;&gt;#&lt;/a&gt; 数据控制语言（DCL）&lt;/h6&gt;
&lt;p&gt;数据控制语言 (Data Control Language, DCL) 是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。&lt;/p&gt;
&lt;p&gt;DCL 的核心指令是  &lt;code&gt;GRANT&lt;/code&gt; 、 &lt;code&gt;REVOKE&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;DCL 以&lt;strong&gt;控制用户的访问权限&lt;/strong&gt;为主，因此其指令作法并不复杂，可利用 DCL 控制的权限有： &lt;code&gt;CONNECT&lt;/code&gt; 、 &lt;code&gt;SELECT&lt;/code&gt; 、 &lt;code&gt;INSERT&lt;/code&gt; 、 &lt;code&gt;UPDATE&lt;/code&gt; 、 &lt;code&gt;DELETE&lt;/code&gt; 、 &lt;code&gt;EXECUTE&lt;/code&gt; 、 &lt;code&gt;USAGE&lt;/code&gt; 、 &lt;code&gt;REFERENCES&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;根据不同的 DBMS 以及不同的安全性实体，其支持的权限控制也有所不同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们先来介绍 DML 语句用法。 DML 的主要功能是读写数据库实现增删改查。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;增删改查&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增删改查&#34;&gt;#&lt;/a&gt; 增删改查&lt;/h4&gt;
&lt;p&gt;增删改查，又称为 CRUD，数据库基本操作中的基本操作。&lt;/p&gt;
&lt;h5 id=&#34;插入数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插入数据&#34;&gt;#&lt;/a&gt; 插入数据&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;INSERT INTO&lt;/code&gt;  语句用于向表中插入新记录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插入完整的行&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 插入一行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;VALUES&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xxxx@163.com&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 插入多行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;VALUES&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xxxx@163.com&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;user1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;user1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xxxx@163.com&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;user2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;user2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xxxx@163.com&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;插入行的一部分&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; password&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; email&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;VALUES&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;admin&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;admin&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xxxx@163.com&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;插入查询出来的数据&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; account&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;更新数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更新数据&#34;&gt;#&lt;/a&gt; 更新数据&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;UPDATE&lt;/code&gt;  语句用于更新表中的记录。&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SET&lt;/span&gt; username&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;robot&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; password&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;robot&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;删除数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除数据&#34;&gt;#&lt;/a&gt; 删除数据&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt;  语句用于删除表中的记录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TRUNCATE TABLE&lt;/code&gt;  可以清空表，也就是删除所有行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;删除表中的指定数据&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DELETE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;robot&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;清空表中的数据&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;TRUNCATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;查询数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查询数据&#34;&gt;#&lt;/a&gt; 查询数据&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;SELECT&lt;/code&gt;  语句用于从数据库中查询数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DISTINCT&lt;/code&gt;  用于返回唯一不同的值。它&lt;font color=&#39;red&#39;&gt;作用于所有列&lt;/font&gt;，也就是说所有列的值都相同才算相同。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LIMIT&lt;/code&gt;  限制返回的行数。可以有两个参数，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;第一个参数为起始行从 0 开始&lt;/font&gt;&lt;/strong&gt;；&lt;font color=&#39;red&#39;&gt;第二个参数为返回的总行数&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ASC&lt;/code&gt;  ：升序（默认）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DESC&lt;/code&gt;  ：降序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;查询单列&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; prod_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; products&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;查询多列&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; prod_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; prod_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; prod_price&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; products&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;查询所有列&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; products&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;查询不同的值&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DISTINCT&lt;/span&gt; vend_id &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; products&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;限制查询结果&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 返回前 5 行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; mytable &lt;span class=&#34;token keyword&#34;&gt;LIMIT&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; mytable &lt;span class=&#34;token keyword&#34;&gt;LIMIT&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 返回第 3 ~ 5 行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; mytable &lt;span class=&#34;token keyword&#34;&gt;LIMIT&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#排序&#34;&gt;#&lt;/a&gt; 排序&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;order by&lt;/code&gt;  用于对结果集按照一个列或者多个列进行排序。 &lt;code&gt;默认升序&lt;/code&gt; 对记录进行排序，如果需要按照降序对记录进行排序，可以使用  &lt;code&gt;desc&lt;/code&gt;  关键字。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;order by&lt;/code&gt;  对多列排序的时候，先排序的列放前面，后排序的列放后面。并且，&lt;font color=&#39;red&#39;&gt;不同的列可以有不同的排序规则&lt;/font&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; products&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; prod_price &lt;span class=&#34;token keyword&#34;&gt;DESC&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; prod_name &lt;span class=&#34;token keyword&#34;&gt;ASC&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;分组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分组&#34;&gt;#&lt;/a&gt; 分组&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;group by&lt;/code&gt; &lt;/strong&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;group by&lt;/code&gt;  子句将记录分组到汇总行中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group by&lt;/code&gt;  为每个组返回一个记录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group by&lt;/code&gt;  通常还涉及聚合 &lt;code&gt;count&lt;/code&gt; ， &lt;code&gt;max&lt;/code&gt; ， &lt;code&gt;sum&lt;/code&gt; ， &lt;code&gt;avg&lt;/code&gt;  等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group by&lt;/code&gt;  可以按一列或多列进行分组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group by&lt;/code&gt;  按分组字段进行排序后， &lt;code&gt;order by&lt;/code&gt;  可以以汇总字段来进行排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;分组&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; cust_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cust_address&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;AS&lt;/span&gt; addr_num&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; Customers &lt;span class=&#34;token keyword&#34;&gt;GROUP&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; cust_name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;分组后排序&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; cust_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cust_address&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;AS&lt;/span&gt; addr_num&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; Customers &lt;span class=&#34;token keyword&#34;&gt;GROUP&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; cust_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; cust_name &lt;span class=&#34;token keyword&#34;&gt;DESC&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt; &lt;code&gt;having&lt;/code&gt; &lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;having&lt;/code&gt;  &lt;font color=&#39;red&#39;&gt;用于对汇总的  &lt;code&gt;group by&lt;/code&gt;  结果进行过滤&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;having&lt;/code&gt;  一般都是和  &lt;code&gt;group by&lt;/code&gt;  连用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;where&lt;/code&gt;  和  &lt;code&gt;having&lt;/code&gt;  可以在相同的查询中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用 WHERE 和 HAVING 过滤数据&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; cust_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;AS&lt;/span&gt; num&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; Customers&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; cust_email &lt;span class=&#34;token operator&#34;&gt;IS&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;NULL&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;GROUP&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; cust_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;HAVING&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;COUNT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt; &lt;code&gt;having&lt;/code&gt;  vs  &lt;code&gt;where&lt;/code&gt; &lt;/strong&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;where&lt;/code&gt; ：
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;过滤指定的&lt;u&gt;行&lt;/u&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;后面不能加聚合函数&lt;/font&gt;（分组函数）&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;在 &lt;code&gt;group by&lt;/code&gt;  前使用&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;having&lt;/code&gt; ：
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;过滤&lt;u&gt;分组&lt;/u&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;一般都是和  &lt;code&gt;group by&lt;/code&gt;  连用，&lt;font color=&#39;red&#39;&gt;不能单独使用&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;在  &lt;code&gt;group by&lt;/code&gt;  之后使用&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;子查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子查询&#34;&gt;#&lt;/a&gt; 子查询&lt;/h4&gt;
&lt;p&gt;子查询是嵌套在较大查询中的 SQL 查询，也称内部查询或内部选择，包含子查询的语句也称为外部查询或外部选择。简单来说，子查询就是指&lt;font color=&#39;red&#39;&gt;将一个  &lt;code&gt;select&lt;/code&gt;  查询（子查询）的结果作为另一个 SQL 语句（主查询）的&lt;u&gt;数据来源&lt;/u&gt;或者&lt;u&gt;判断条件&lt;/u&gt;&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;子查询可以嵌入  &lt;code&gt;SELECT&lt;/code&gt; 、 &lt;code&gt;INSERT&lt;/code&gt; 、 &lt;code&gt;UPDATE&lt;/code&gt;  和  &lt;code&gt;DELETE&lt;/code&gt;  语句中，也可以和  &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;IN&lt;/code&gt; 、 &lt;code&gt;BETWEEN&lt;/code&gt; 、 &lt;code&gt;EXISTS&lt;/code&gt;  等运算符一起使用。&lt;/p&gt;
&lt;p&gt;子查询常用在  &lt;code&gt;WHERE&lt;/code&gt;  子句和  &lt;code&gt;FROM&lt;/code&gt;  子句后边：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当用于 &lt;strong&gt; &lt;code&gt;WHERE&lt;/code&gt; &lt;/strong&gt; 子句后边时，根据不同的运算符，子查询可以返回单行单列、多行单列、单行多列数据。子查询就是要&lt;font color=&#39;red&#39;&gt;返回能够作为  &lt;code&gt;WHERE&lt;/code&gt;  子句查询条件的值&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用于  &lt;code&gt;WHERE&lt;/code&gt;  子句的子查询的基本语法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; column_name &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column_name &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt;   table1 &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; table2 &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt;  column_name operator&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; column_name &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column_name &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; table1 &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; table2 &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;子查询需要放在括号 &lt;code&gt;( )&lt;/code&gt;  内。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator&lt;/code&gt;  表示用于 where 子句的运算符。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当用于 &lt;strong&gt; &lt;code&gt;FROM&lt;/code&gt; &lt;/strong&gt; 子句后边时，一般返回多行多列数据，相当于&lt;font color=&#39;red&#39;&gt;返回一张临时表&lt;/font&gt;，这样才符合  &lt;code&gt;FROM&lt;/code&gt;  后面是表的规则。这种做法能够实现&lt;font color=&#39;red&#39;&gt;多表联合查询&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用于  &lt;code&gt;FROM&lt;/code&gt;  子句的子查询的基本语法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; column_name &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column_name &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; column_name &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column_name &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; table1 &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; table2 &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; temp_table_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt;  condition&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;用于  &lt;code&gt;FROM&lt;/code&gt;  的子查询返回的结果相当于一张临时表，所以&lt;strong&gt;需要使用  &lt;code&gt;AS&lt;/code&gt;  关键字为该临时表起一个名字&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：MYSQL 数据库从 4.1 版本才开始支持子查询，早期版本是不支持的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;子查询的子查询&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; cust_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; cust_contact&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; customers&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; cust_id &lt;span class=&#34;token operator&#34;&gt;IN&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; cust_id&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; orders&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  &lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; order_num &lt;span class=&#34;token operator&#34;&gt;IN&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; order_num&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                      &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; orderitems&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                      &lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; prod_id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;RGAN01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;内部查询首先在其父查询之前执行，以便可以将内部查询的结果传递给外部查询。执行过程可以参考下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/c439da1f5d4e4b00bdfa4316b933d764%7Etplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;where&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#where&#34;&gt;#&lt;/a&gt; WHERE&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WHERE&lt;/code&gt;  子句用于过滤记录，即缩小访问数据的范围。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WHERE&lt;/code&gt;  后跟一个返回  &lt;code&gt;true&lt;/code&gt;  或  &lt;code&gt;false&lt;/code&gt;  的条件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WHERE&lt;/code&gt;  可以与  &lt;code&gt;SELECT&lt;/code&gt; ， &lt;code&gt;UPDATE&lt;/code&gt;  和  &lt;code&gt;DELETE&lt;/code&gt;  一起使用。&lt;/li&gt;
&lt;li&gt;可以在  &lt;code&gt;WHERE&lt;/code&gt;  子句中使用的操作符。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;等于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;gt;&lt;/td&gt;
&lt;td&gt;不等于。注释：在 SQL 的一些版本中，该操作符可被写成！=&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;大于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;小于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;大于等于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;小于等于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BETWEEN&lt;/td&gt;
&lt;td&gt;在某个范围内&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LIKE&lt;/td&gt;
&lt;td&gt;搜索某种模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IN&lt;/td&gt;
&lt;td&gt;指定针对某个列的多个可能值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;SELECT&lt;/code&gt;  语句中的  &lt;code&gt;WHERE&lt;/code&gt;  子句&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; Customers&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; cust_name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Kids Place&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt; &lt;code&gt;UPDATE&lt;/code&gt;  语句中的  &lt;code&gt;WHERE&lt;/code&gt;  子句&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UPDATE&lt;/span&gt; Customers&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SET&lt;/span&gt; cust_name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Jack Jones&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; cust_name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Kids Place&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt; &lt;code&gt;DELETE&lt;/code&gt;  语句中的  &lt;code&gt;WHERE&lt;/code&gt;  子句&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DELETE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; Customers&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; cust_name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Kids Place&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;in-和-between&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#in-和-between&#34;&gt;#&lt;/a&gt; IN 和 BETWEEN&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IN&lt;/code&gt;  操作符在  &lt;code&gt;WHERE&lt;/code&gt;  子句中使用，作用是&lt;font color=&#39;red&#39;&gt;在指定的几个特定值中任选一个值&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BETWEEN&lt;/code&gt;  操作符在  &lt;code&gt;WHERE&lt;/code&gt;  子句中使用，作用是&lt;font color=&#39;red&#39;&gt;选取介于某个范围内的值&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;IN 示例&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; products&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; vend_id &lt;span class=&#34;token operator&#34;&gt;IN&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;DLL01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;BRS01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;BETWEEN 示例&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; products&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; prod_price &lt;span class=&#34;token operator&#34;&gt;BETWEEN&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;and-or-not&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#and-or-not&#34;&gt;#&lt;/a&gt; AND、OR、NOT&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AND&lt;/code&gt; 、 &lt;code&gt;OR&lt;/code&gt; 、 &lt;code&gt;NOT&lt;/code&gt;  是用于对过滤条件的逻辑处理指令。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt; &lt;code&gt;AND&lt;/code&gt;  优先级高于  &lt;code&gt;OR&lt;/code&gt; &lt;/font&gt;，为了明确处理顺序，可以使用  &lt;code&gt;()&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AND&lt;/code&gt;  操作符表示左右条件都要满足。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OR&lt;/code&gt;  操作符表示左右条件满足任意一个即可。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NOT&lt;/code&gt;  操作符用于否定一个条件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;AND 示例&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; prod_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; prod_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; prod_price&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; products&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; vend_id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;DLL01&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;AND&lt;/span&gt; prod_price &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;OR 示例&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; prod_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; prod_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; prod_price&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; products&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; vend_id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;DLL01&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;OR&lt;/span&gt; vend_id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;BRS01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;NOT 示例&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; products&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; prod_price &lt;span class=&#34;token operator&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;BETWEEN&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;like&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#like&#34;&gt;#&lt;/a&gt; LIKE&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LIKE&lt;/code&gt;  操作符在  &lt;code&gt;WHERE&lt;/code&gt;  子句中使用，作用是&lt;font color=&#39;red&#39;&gt;确定字符串是否匹配模式&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;只有字段是文本值时才使用  &lt;code&gt;LIKE&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LIKE&lt;/code&gt;  支持两个通配符匹配选项： &lt;code&gt;%&lt;/code&gt;  和  &lt;code&gt;_&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;不要滥用通配符，通配符位于开头处匹配会非常慢。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;  表示任何字符&lt;font color=&#39;red&#39;&gt;出现任意次数&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt;  表示任何字符&lt;font color=&#39;red&#39;&gt;出现一次&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;% 示例&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; prod_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; prod_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; prod_price&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; products&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; prod_name &lt;span class=&#34;token operator&#34;&gt;LIKE&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;%bean bag%&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;_ 示例&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; prod_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; prod_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; prod_price&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; products&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; prod_name &lt;span class=&#34;token operator&#34;&gt;LIKE&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__ inch teddy bear&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接&#34;&gt;#&lt;/a&gt; 连接&lt;/h4&gt;
&lt;h5 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;JOIN&lt;/code&gt;  是 “连接” 的意思，顾名思义，SQL JOIN 子句用于将两个或者多个表联合起来进行查询。&lt;/p&gt;
&lt;p&gt;连接表时&lt;font color=&#39;red&#39;&gt;需要在每个表中选择一个字段，并对这些字段的值进行比较，值相同的两条记录将合并为一条&lt;/font&gt;。&lt;strong&gt;连接表的本质就是将不同表的记录合并起来，形成一张新表。当然，这张新表只是临时的，它仅存在于本次查询期间&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&#34;语法-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语法-2&#34;&gt;#&lt;/a&gt; 语法&lt;/h5&gt;
&lt;p&gt;使用  &lt;code&gt;JOIN&lt;/code&gt;  连接两个表的基本语法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; table1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;column1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; table2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;column2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; table1 &lt;span class=&#34;token keyword&#34;&gt;join&lt;/span&gt; table2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;on&lt;/span&gt; table1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;common_column1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; table2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;common_column2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;table1.common_column1 = table2.common_column2&lt;/code&gt;  是&lt;font color=&#39;red&#39;&gt;连接条件&lt;/font&gt;，只有满足此条件的记录才会合并为一行。您可以使用多个运算符来连接表，例如 =、&amp;gt;、&amp;lt;、&amp;lt;&amp;gt;、&amp;lt;=、&amp;gt;=、!=、 &lt;code&gt;between&lt;/code&gt; 、 &lt;code&gt;like&lt;/code&gt;  或者  &lt;code&gt;not&lt;/code&gt; ，但是最常见的是使用 =。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;当两个表中有同名的字段时，为了帮助数据库引擎区分是哪个表的字段，在书写同名字段名时需要加上表名&lt;/font&gt;。当然，如果书写的字段名在两个表中是唯一的，也可以不使用以上格式，只写字段名即可。&lt;/p&gt;
&lt;p&gt;另外，&lt;font color=&#39;red&#39;&gt;如果两张表的关联字段名相同，也可以使用  &lt;code&gt;USING&lt;/code&gt;  子句来代替  &lt;code&gt;ON&lt;/code&gt; &lt;/font&gt;，举个例子：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# join....on&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cust_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; o&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;order_num&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Customers c &lt;span class=&#34;token keyword&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;join&lt;/span&gt; Orders o&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;on&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cust_id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; o&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cust_id&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cust_name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 如果两张表的关联字段名相同，也可以使用 USING 子句：join....using ()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cust_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; o&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;order_num&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Customers c &lt;span class=&#34;token keyword&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;join&lt;/span&gt; Orders o&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cust_id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cust_name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt; &lt;code&gt;ON&lt;/code&gt;  和  &lt;code&gt;WHERE&lt;/code&gt;  的区别&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接表时，SQL 会根据连接条件生成一张新的临时表。&lt;font color=&#39;red&#39;&gt; &lt;code&gt;ON&lt;/code&gt;  是连接条件&lt;/font&gt;，它决定临时表的生成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WHERE&lt;/code&gt;  是在临时表生成以后，再对临时表中的数据进行过滤，生成最终的结果集，这个时候已经没有 JOIN-ON 了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以总结来说就是：&lt;strong&gt;&lt;font color=&#39;#B32015&#39;&gt;SQL 先根据 ON 生成一张临时表，然后再根据 WHERE 对临时表进行筛选&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&#34;分类-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类-2&#34;&gt;#&lt;/a&gt; 分类&lt;/h5&gt;
&lt;p&gt;SQL 允许在  &lt;code&gt;JOIN&lt;/code&gt;  左边加上一些修饰性的关键词，从而形成不同类型的连接，如下表所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;连接类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(INNER) JOIN&lt;/code&gt; ：内连接&lt;/td&gt;
&lt;td&gt;（&lt;strong&gt;默认连接方式&lt;/strong&gt;）只有当&lt;font color=&#39;red&#39;&gt;两个表都存在满足条件&lt;/font&gt;的记录时才会返回行。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LEFT (OUTER) JOIN&lt;/code&gt; ：左 (外) 连接&lt;/td&gt;
&lt;td&gt;以左表为基础，将左表中的所有记录与右表进行连接。即使右表中没有与左表匹配的记录，左连接仍然会 **&lt;font color=&#39;red&#39;&gt;返回左表中的所有记录，而右表中未匹配的对应列值则为 NULL&lt;/font&gt;**.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RIGHT (OUTER) JOIN&lt;/code&gt; ：右 (外) 连接&lt;/td&gt;
&lt;td&gt;以右表为基础，将右表中的所有记录与左表进行连接。即使左表中没有与右表匹配的记录，右连接仍然会 **&lt;font color=&#39;red&#39;&gt;返回右表中的所有记录，而左表中未匹配的对应列值则为 NULL&lt;/font&gt;**。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FULL (OUTER) JOIN&lt;/code&gt; ：全 (外) 连接&lt;/td&gt;
&lt;td&gt;只要&lt;font color=&#39;red&#39;&gt;其中有一个表存在满足条件&lt;/font&gt;的记录，就返回行。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SELF JOIN&lt;/code&gt; ：自连接&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;将一个表连接到自身&lt;/font&gt;，就像该表是两个表一样。为了区分两个表，在 SQL 语句中需要至少重命名一个表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CROSS JOIN&lt;/code&gt; ：交叉连接&lt;/td&gt;
&lt;td&gt;从两个或者多个连接表中返回记录集的&lt;font color=&#39;red&#39;&gt;笛卡尔积&lt;/font&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下图展示了 LEFT JOIN、RIGHT JOIN、INNER JOIN、OUTER JOIN 相关的 7 种用法。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/701670942f0f45d3a3a2187cd04a12ad~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对于  &lt;code&gt;(INNER) JOIN&lt;/code&gt;  来说，还有一种隐式的写法，称为 “&lt;strong&gt;隐式内连接&lt;/strong&gt;”，也就是没有  &lt;code&gt;(INNER) JOIN&lt;/code&gt;  关键字，使用  &lt;code&gt;WHERE&lt;/code&gt;  语句实现内连接的功能&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 隐式内连接&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cust_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; o&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;order_num&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Customers c&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Orders o&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cust_id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; o&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cust_id&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cust_name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 显式内连接&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cust_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; o&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;order_num&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Customers c &lt;span class=&#34;token keyword&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;join&lt;/span&gt; Orders o&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cust_id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cust_name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;组合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组合&#34;&gt;#&lt;/a&gt; 组合&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;UNION&lt;/code&gt;  运算符&lt;font color=&#39;red&#39;&gt;将两个或更多查询的结果组合起来，并生成一个结果集&lt;/font&gt;，其中包含来自  &lt;code&gt;UNION&lt;/code&gt;  中参与查询的提取行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UNION&lt;/code&gt;  基本规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有查询的&lt;font color=&#39;red&#39;&gt;列数和列顺序必须相同&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;每个查询中涉及表的&lt;font color=&#39;red&#39;&gt;列的数据类型必须相同或兼容&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;通常&lt;font color=&#39;red&#39;&gt;返回的列名取自第一个查询&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认地， &lt;code&gt;UNION&lt;/code&gt;  操作符选取不同的值。如果允许重复的值，请使用  &lt;code&gt;UNION ALL&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; column_name&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; table1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;ALL&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; column_name&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; table2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;UNION&lt;/code&gt;  结果集中的列名总是等于  &lt;code&gt;UNION&lt;/code&gt;  中第一个  &lt;code&gt;SELECT&lt;/code&gt;  语句中的列名。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JOIN&lt;/code&gt;  vs  &lt;code&gt;UNION&lt;/code&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JOIN&lt;/code&gt;  中连接表的列可能不同，但在  &lt;code&gt;UNION&lt;/code&gt;  中，所有查询的列数和列顺序必须相同。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNION&lt;/code&gt;  将查询之后的行放在一起（&lt;font color=&#39;red&#39;&gt;垂直放置&lt;/font&gt;），但  &lt;code&gt;JOIN&lt;/code&gt;  将查询之后的列放在一起（水平放置），即它构成一个笛卡尔积。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数&#34;&gt;#&lt;/a&gt; 函数&lt;/h4&gt;
&lt;p&gt;不同数据库的函数往往各不相同，因此不可移植。本节主要&lt;font color=&#39;red&#39;&gt;以 MysSQL 的函数为例&lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;文本处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文本处理&#34;&gt;#&lt;/a&gt; 文本处理&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LEFT()&lt;/code&gt; 、 &lt;code&gt;RIGHT()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左边或者右边的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LOWER()&lt;/code&gt; 、 &lt;code&gt;UPPER()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;转换为小写或者大写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LTRIM()&lt;/code&gt; 、 &lt;code&gt;RTRIM()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;去除左边或者右边的空格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LENGTH()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SOUNDEX()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;转换为语音值&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其中， &lt;strong&gt; &lt;code&gt;SOUNDEX()&lt;/code&gt; &lt;/strong&gt; 可以将一个字符串转换为描述其语音表示的字母数字模式。&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; mytable&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; SOUNDEX&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;col1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; SOUNDEX&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;apple&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;日期和时间处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日期和时间处理&#34;&gt;#&lt;/a&gt; 日期和时间处理&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;日期格式： &lt;code&gt;YYYY-MM-DD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;时间格式： &lt;code&gt;HH:MM:SS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函 数&lt;/th&gt;
&lt;th&gt;说 明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;AddDate()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;增加一个日期（天、周等）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;AddTime()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;增加一个时间（时、分等）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CurDate()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回当前日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CurTime()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回当前时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Date()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回日期时间的日期部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DateDiff()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算两个日期之差&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Date_Add()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;高度灵活的日期运算函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Date_Format()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个格式化的日期或时间串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Day()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个日期的天数部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DayOfWeek()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对于一个日期，返回对应的星期几&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Hour()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个时间的小时部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Minute()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个时间的分钟部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Month()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个日期的月份部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Now()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回当前日期和时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Second()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个时间的秒部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Time()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个日期时间的时间部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Year()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个日期的年份部分&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;数值处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数值处理&#34;&gt;#&lt;/a&gt; 数值处理&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SIN()&lt;/td&gt;
&lt;td&gt;正弦&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;COS()&lt;/td&gt;
&lt;td&gt;余弦&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TAN()&lt;/td&gt;
&lt;td&gt;正切&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ABS()&lt;/td&gt;
&lt;td&gt;绝对值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SQRT()&lt;/td&gt;
&lt;td&gt;平方根&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOD()&lt;/td&gt;
&lt;td&gt;余数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EXP()&lt;/td&gt;
&lt;td&gt;指数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PI()&lt;/td&gt;
&lt;td&gt;圆周率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RAND()&lt;/td&gt;
&lt;td&gt;随机数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;汇总&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#汇总&#34;&gt;#&lt;/a&gt; 汇总&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函 数&lt;/th&gt;
&lt;th&gt;说 明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;AVG()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回某列的平均值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;COUNT()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回某列的行数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MAX()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回某列的最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MIN()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回某列的最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SUM()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回某列值之和&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;AVG()&lt;/code&gt;  会忽略 NULL 行。&lt;/p&gt;
&lt;p&gt;使用  &lt;code&gt;DISTINCT&lt;/code&gt;  可以让汇总函数值汇总不同的值。&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;AVG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;DISTINCT&lt;/span&gt; col1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;AS&lt;/span&gt; avg_col&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; mytable&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;接下来，我们来介绍 DDL 语句用法。DDL 的主要功能是定义数据库对象（如：数据库、数据表、视图、索引等）&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;数据定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据定义&#34;&gt;#&lt;/a&gt; &lt;mark&gt;数据定义&lt;/mark&gt;&lt;/h4&gt;
&lt;h5 id=&#34;数据库database&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库database&#34;&gt;#&lt;/a&gt; 数据库（DATABASE）&lt;/h5&gt;
&lt;h6 id=&#34;创建数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建数据库&#34;&gt;#&lt;/a&gt; 创建数据库&lt;/h6&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DATABASE&lt;/span&gt; test&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h6 id=&#34;删除数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除数据库&#34;&gt;#&lt;/a&gt; 删除数据库&lt;/h6&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DATABASE&lt;/span&gt; test&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h6 id=&#34;选择数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择数据库&#34;&gt;#&lt;/a&gt; 选择数据库&lt;/h6&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;USE&lt;/span&gt; test&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;数据表table&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据表table&#34;&gt;#&lt;/a&gt; 数据表（TABLE）&lt;/h5&gt;
&lt;h6 id=&#34;创建数据表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建数据表&#34;&gt;#&lt;/a&gt; 创建数据表&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;普通创建&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  id &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;COMMENT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  username &lt;span class=&#34;token keyword&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;default&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;COMMENT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;用户名&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  password &lt;span class=&#34;token keyword&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;default&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;COMMENT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;密码&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  email &lt;span class=&#34;token keyword&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;default&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;COMMENT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;邮箱&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;用户表&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;根据已有的表创建新表&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; vip_user &lt;span class=&#34;token keyword&#34;&gt;AS&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h6 id=&#34;删除数据表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除数据表&#34;&gt;#&lt;/a&gt; 删除数据表&lt;/h6&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h6 id=&#34;修改数据表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改数据表&#34;&gt;#&lt;/a&gt; 修改数据表&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;添加列&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ALTER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ADD&lt;/span&gt; age &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;删除列&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ALTER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;COLUMN&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;修改列&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ALTER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;user&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;MODIFY&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;COLUMN&lt;/span&gt; age &lt;span class=&#34;token keyword&#34;&gt;tinyint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;添加主键&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ALTER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ADD&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;PRIMARY&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;KEY&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;删除主键&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ALTER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;PRIMARY&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;视图view&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视图view&#34;&gt;#&lt;/a&gt; 视图（VIEW）&lt;/h5&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视图是基于 SQL 语句的结果集的可视化的表。&lt;/li&gt;
&lt;li&gt;视图是&lt;strong&gt;虚拟的表，本身不包含数据&lt;/strong&gt;，也就不能对其进行索引操作。对视图的操作和对普通表的操作一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简化复杂的 SQL 操作，比如复杂的联结；&lt;/li&gt;
&lt;li&gt;只使用实际表的一部分数据；&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;通过只给用户访问视图的权限，保证数据的安全性&lt;/font&gt;；&lt;/li&gt;
&lt;li&gt;更改数据格式和表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/ec4c975296ea4a7097879dac7c353878%7Etplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;mysql视图&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;创建视图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建视图&#34;&gt;#&lt;/a&gt; 创建视图&lt;/h6&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;VIEW&lt;/span&gt; top_10_user_view &lt;span class=&#34;token keyword&#34;&gt;AS&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; username&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; id &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h6 id=&#34;删除视图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除视图&#34;&gt;#&lt;/a&gt; 删除视图&lt;/h6&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;VIEW&lt;/span&gt; top_10_user_view&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;索引index&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引index&#34;&gt;#&lt;/a&gt; 索引（INDEX）&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;索引的作用就&lt;font color=&#39;red&#39;&gt;相当于书的目录&lt;/font&gt;。打个比方：我们在查字典的时候，如果没有目录，那我们就只能一页一页的去找我们需要查的那个字，速度很慢。如果有目录了，我们只需要先去目录里查找字的位置，然后直接翻到那一页就行了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用索引可以大大&lt;font color=&#39;red&#39;&gt;加快数据的检索速度&lt;/font&gt;（大大减少检索的数据量）, 这也是创建索引的最主要的原因。&lt;/li&gt;
&lt;li&gt;通过创建&lt;font color=&#39;red&#39;&gt;唯一性索引，可以保证数据库表中每一行数据的唯一性&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建索引和维护索引需要耗费许多时间。当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低 SQL 执行效率。&lt;/li&gt;
&lt;li&gt;索引需要使用物理文件存储，也会耗费一定空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，&lt;strong&gt;使用索引一定能提高查询性能吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大多数情况下，索引查询都是比全表扫描要快的。但是&lt;font color=&#39;red&#39;&gt;如果数据库的数据量不大，那么使用索引也不一定能够带来很大提升&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;关于索引的详细介绍，请看我写的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGF0YWJhc2UvbXlzcWwvbXlzcWwtaW5kZXguaHRtbA==&#34;&gt;MySQL 索引详解 open in new window&lt;/span&gt; 这篇文章。&lt;/p&gt;
&lt;h6 id=&#34;创建索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建索引&#34;&gt;#&lt;/a&gt; 创建索引&lt;/h6&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INDEX&lt;/span&gt; user_index&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h6 id=&#34;添加索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加索引&#34;&gt;#&lt;/a&gt; 添加索引&lt;/h6&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ALTER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;ADD&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INDEX&lt;/span&gt; user_index&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h6 id=&#34;创建唯一索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建唯一索引&#34;&gt;#&lt;/a&gt; 创建唯一索引&lt;/h6&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;UNIQUE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INDEX&lt;/span&gt; user_index&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h6 id=&#34;删除索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除索引&#34;&gt;#&lt;/a&gt; 删除索引&lt;/h6&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ALTER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INDEX&lt;/span&gt; user_index&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;约束&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#约束&#34;&gt;#&lt;/a&gt; 约束&lt;/h5&gt;
&lt;p&gt;SQL 约束&lt;strong&gt;用于规定表中的数据规则&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果存在违反约束的数据行为，行为会被约束终止。&lt;/p&gt;
&lt;p&gt;约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。&lt;/p&gt;
&lt;p&gt;约束类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NOT NULL&lt;/code&gt;  - 指示某列不能存储 NULL 值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNIQUE&lt;/code&gt;  - 保证某列的每行必须有唯一的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PRIMARY KEY&lt;/code&gt;  - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FOREIGN KEY&lt;/code&gt;  - 保证一个表中的数据匹配另一个表中的值的参照完整性。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CHECK&lt;/code&gt;  - 保证列中的值符合指定的条件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEFAULT&lt;/code&gt;  - 规定没有给列赋值时的默认值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建表时使用约束条件：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; Users &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  Id &lt;span class=&#34;token keyword&#34;&gt;INT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;UNSIGNED&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;AUTO_INCREMENT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;COMMENT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;自增Id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  Username &lt;span class=&#34;token keyword&#34;&gt;VARCHAR&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;UNIQUE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;default&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;COMMENT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;用户名&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  Password &lt;span class=&#34;token keyword&#34;&gt;VARCHAR&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;default&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;COMMENT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;密码&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  Email &lt;span class=&#34;token keyword&#34;&gt;VARCHAR&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;default&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;COMMENT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;邮箱地址&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  Enabled &lt;span class=&#34;token keyword&#34;&gt;TINYINT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;COMMENT&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;是否有效&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;PRIMARY&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;KEY&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;InnoDB&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;utf8mb4 &lt;span class=&#34;token keyword&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;用户表&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;接下来，我们来介绍 TCL 语句用法。TCL 的主要功能是管理数据库中的事务。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;事务处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务处理&#34;&gt;#&lt;/a&gt; 事务处理&lt;/h4&gt;
&lt;p&gt;不能回退  &lt;code&gt;SELECT&lt;/code&gt;  语句，回退  &lt;code&gt;SELECT&lt;/code&gt;  语句也没意义；也不能回退  &lt;code&gt;CREATE&lt;/code&gt;  和  &lt;code&gt;DROP&lt;/code&gt;  语句。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL 默认是隐式提交&lt;/strong&gt;，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现  &lt;code&gt;START TRANSACTION&lt;/code&gt;  语句时，会关闭隐式提交；当  &lt;code&gt;COMMIT&lt;/code&gt;  或  &lt;code&gt;ROLLBACK&lt;/code&gt;  语句执行后，事务会自动关闭，重新恢复隐式提交。&lt;/p&gt;
&lt;p&gt;通过  &lt;code&gt;set autocommit=0&lt;/code&gt;  可以取消自动提交，直到  &lt;code&gt;set autocommit=1&lt;/code&gt;  才会提交；&lt;font color=&#39;red&#39;&gt; &lt;code&gt;autocommit&lt;/code&gt;  标记是针对每个连接而不是针对服务器的&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;START TRANSACTION&lt;/code&gt;  - 指令用于&lt;font color=&#39;red&#39;&gt;标记事务的起始点&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SAVEPOINT&lt;/code&gt;  - 指令用于&lt;font color=&#39;red&#39;&gt;创建保留点&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ROLLBACK TO&lt;/code&gt;  - 指令用于&lt;font color=&#39;red&#39;&gt;回滚到指定的保留点&lt;/font&gt;；如果没有设置保留点，则回退到  &lt;code&gt;START TRANSACTION&lt;/code&gt;  语句处。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COMMIT&lt;/code&gt;  - &lt;font color=&#39;red&#39;&gt;提交事务&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 开始事务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;START&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TRANSACTION&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 插入操作 A&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;user&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;VALUES&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xxxx@163.com&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 创建保留点 updateA&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SAVEPOINT&lt;/span&gt; updateA&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 插入操作 B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;user&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;VALUES&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xxxx@163.com&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 回滚到保留点 updateA&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ROLLBACK&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TO&lt;/span&gt; updateA&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 提交事务，只有操作 A 生效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;COMMIT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;接下来，我们来介绍 DCL 语句用法。DCL 的主要功能是控制用户的访问权限。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;权限控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#权限控制&#34;&gt;#&lt;/a&gt; 权限控制&lt;/h4&gt;
&lt;p&gt;要授予用户帐户权限，可以用 &lt;code&gt;GRANT&lt;/code&gt;  命令。有撤销用户的权限，可以用 &lt;code&gt;REVOKE&lt;/code&gt;  命令。这里以 MySQl 为例，介绍权限控制实际应用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GRANT&lt;/code&gt;  授予权限语法：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;GRANT&lt;/span&gt; privilege&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;privilege&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;ON&lt;/span&gt; privilege_level&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;TO&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;IDENTIFIED &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; password&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;REQUIRE&lt;/span&gt; tsl_option&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;WITH&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;GRANT_OPTION &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; resource_option&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;简单解释一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;GRANT&lt;/code&gt;  关键字后指定一个或多个权限。如果授予用户多个权限，则每个权限由逗号分隔。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ON privilege_level&lt;/code&gt;  确定权限应用级别。MySQL 支持 global（ &lt;code&gt;*.*&lt;/code&gt; ），database（ &lt;code&gt;database.*&lt;/code&gt; ），table（ &lt;code&gt;database.table&lt;/code&gt; ）和列级别。如果使用列权限级别，则必须在每个权限之后指定一个或逗号分隔列的列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt;  是要授予权限的用户。如果用户已存在，则 &lt;code&gt;GRANT&lt;/code&gt;  语句将修改其权限。否则， &lt;code&gt;GRANT&lt;/code&gt;  语句将创建一个新用户。可选子句 &lt;code&gt;IDENTIFIED BY&lt;/code&gt;  允许您为用户设置新的密码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REQUIRE tsl_option&lt;/code&gt;  指定用户是否必须通过 SSL，X059 等安全连接连接到数据库服务器。&lt;/li&gt;
&lt;li&gt;可选  &lt;code&gt;WITH GRANT OPTION&lt;/code&gt;  子句允许您授予其他用户或从其他用户中删除您拥有的权限。此外，您可以使用 &lt;code&gt;WITH&lt;/code&gt;  子句分配 MySQL 数据库服务器的资源，例如，设置用户每小时可以使用的连接数或语句数。这在 MySQL 共享托管等共享环境中非常有用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;REVOKE&lt;/code&gt;  撤销权限语法：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;REVOKE&lt;/span&gt;   privilege_type &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;column_list&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; priv_type &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;column_list&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;object_type&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; privilege_level&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;简单解释一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在  &lt;code&gt;REVOKE&lt;/code&gt;  关键字后面指定要从用户撤消的权限列表。您需要用逗号分隔权限。&lt;/li&gt;
&lt;li&gt;指定在  &lt;code&gt;ON&lt;/code&gt;  子句中撤销特权的特权级别。&lt;/li&gt;
&lt;li&gt;指定要撤消  &lt;code&gt;FROM&lt;/code&gt;  子句中的权限的用户帐户。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;GRANT&lt;/code&gt;  和  &lt;code&gt;REVOKE&lt;/code&gt;  可在几个层次上控制访问权限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整个服务器，使用  &lt;code&gt;GRANT ALL&lt;/code&gt;  和  &lt;code&gt;REVOKE ALL&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;整个数据库，使用  &lt;code&gt;ON database.*&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;特定的表，使用  &lt;code&gt;ON database.table&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;特定的列；&lt;/li&gt;
&lt;li&gt;特定的存储过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新创建的账户没有任何权限。账户用  &lt;code&gt;username@host&lt;/code&gt;  的形式定义， &lt;code&gt;username@%&lt;/code&gt;  使用的是默认主机名。MySQL 的账户信息保存在 mysql 这个数据库中。&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;USE&lt;/span&gt; mysql&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;下表说明了可用于 &lt;code&gt;GRANT&lt;/code&gt;  和 &lt;code&gt;REVOKE&lt;/code&gt;  语句的所有允许权限：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;特权&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;级别&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;全局&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;数据库&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;表&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;列&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;程序&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;代理&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ALL [PRIVILEGES]&lt;/td&gt;
&lt;td&gt;授予除 GRANT OPTION 之外的指定访问级别的所有权限&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ALTER&lt;/td&gt;
&lt;td&gt;允许用户使用 ALTER TABLE 语句&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ALTER ROUTINE&lt;/td&gt;
&lt;td&gt;允许用户更改或删除存储的例程&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CREATE&lt;/td&gt;
&lt;td&gt;允许用户创建数据库和表&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CREATE ROUTINE&lt;/td&gt;
&lt;td&gt;允许用户创建存储的例程&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CREATE TABLESPACE&lt;/td&gt;
&lt;td&gt;允许用户创建，更改或删除表空间和日志文件组&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CREATE TEMPORARY TABLES&lt;/td&gt;
&lt;td&gt;允许用户使用 CREATE TEMPORARY TABLE 创建临时表&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CREATE USER&lt;/td&gt;
&lt;td&gt;允许用户使用 CREATE USER，DROP USER，RENAME USER 和 REVOKE ALL PRIVILEGES 语句。&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CREATE VIEW&lt;/td&gt;
&lt;td&gt;允许用户创建或修改视图。&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;允许用户使用 DELETE&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DROP&lt;/td&gt;
&lt;td&gt;允许用户删除数据库，表和视图&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EVENT&lt;/td&gt;
&lt;td&gt;启用事件计划程序的事件使用。&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EXECUTE&lt;/td&gt;
&lt;td&gt;允许用户执行存储的例程&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FILE&lt;/td&gt;
&lt;td&gt;允许用户读取数据库目录中的任何文件。&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GRANT OPTION&lt;/td&gt;
&lt;td&gt;允许用户拥有授予或撤消其他帐户权限的权限。&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INDEX&lt;/td&gt;
&lt;td&gt;允许用户创建或删除索引。&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INSERT&lt;/td&gt;
&lt;td&gt;允许用户使用 INSERT 语句&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LOCK TABLES&lt;/td&gt;
&lt;td&gt;允许用户对具有 SELECT 权限的表使用 LOCK TABLES&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PROCESS&lt;/td&gt;
&lt;td&gt;允许用户使用 SHOW PROCESSLIST 语句查看所有进程。&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PROXY&lt;/td&gt;
&lt;td&gt;启用用户代理。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REFERENCES&lt;/td&gt;
&lt;td&gt;允许用户创建外键&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RELOAD&lt;/td&gt;
&lt;td&gt;允许用户使用 FLUSH 操作&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REPLICATION CLIENT&lt;/td&gt;
&lt;td&gt;允许用户查询以查看主服务器或从属服务器的位置&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REPLICATION SLAVE&lt;/td&gt;
&lt;td&gt;允许用户使用复制从属从主服务器读取二进制日志事件。&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SELECT&lt;/td&gt;
&lt;td&gt;允许用户使用 SELECT 语句&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SHOW DATABASES&lt;/td&gt;
&lt;td&gt;允许用户显示所有数据库&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SHOW VIEW&lt;/td&gt;
&lt;td&gt;允许用户使用 SHOW CREATE VIEW 语句&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SHUTDOWN&lt;/td&gt;
&lt;td&gt;允许用户使用 mysqladmin shutdown 命令&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUPER&lt;/td&gt;
&lt;td&gt;允许用户使用其他管理操作，例如 CHANGE MASTER TO，KILL，PURGE BINARY LOGS，SET GLOBAL 和 mysqladmin 命令&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TRIGGER&lt;/td&gt;
&lt;td&gt;允许用户使用 TRIGGER 操作。&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UPDATE&lt;/td&gt;
&lt;td&gt;允许用户使用 UPDATE 语句&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;USAGE&lt;/td&gt;
&lt;td&gt;相当于 “没有特权”&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;创建账户&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建账户&#34;&gt;#&lt;/a&gt; 创建账户&lt;/h5&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;USER&lt;/span&gt; myuser IDENTIFIED &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;mypassword&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;修改账户名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改账户名&#34;&gt;#&lt;/a&gt; 修改账户名&lt;/h5&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;newuser&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;myuser&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;FLUSH &lt;span class=&#34;token keyword&#34;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;删除账户&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除账户&#34;&gt;#&lt;/a&gt; 删除账户&lt;/h5&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;USER&lt;/span&gt; myuser&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;查看权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看权限&#34;&gt;#&lt;/a&gt; 查看权限&lt;/h5&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SHOW&lt;/span&gt; GRANTS &lt;span class=&#34;token keyword&#34;&gt;FOR&lt;/span&gt; myuser&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;授予权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#授予权限&#34;&gt;#&lt;/a&gt; 授予权限&lt;/h5&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;GRANT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TO&lt;/span&gt; myuser&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;删除权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除权限&#34;&gt;#&lt;/a&gt; 删除权限&lt;/h5&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;REVOKE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; myuser&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;更改密码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更改密码&#34;&gt;#&lt;/a&gt; 更改密码&lt;/h5&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SET&lt;/span&gt; PASSWORD &lt;span class=&#34;token keyword&#34;&gt;FOR&lt;/span&gt; myuser &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;mypass&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;存储过程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储过程-2&#34;&gt;#&lt;/a&gt; 存储过程&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60afdc9c9a594f079727ec64a2e698a3~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;mysql存储过程&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使用存储过程的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码封装，保证了一定的安全性；&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;代码复用&lt;/font&gt;；&lt;/li&gt;
&lt;li&gt;由于是&lt;font color=&#39;red&#39;&gt;预先编译&lt;/font&gt;，因此具有很高的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建存储过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令行中创建存储过程需要自定义分隔符，因为命令行是以  &lt;code&gt;;&lt;/code&gt;  为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。&lt;/li&gt;
&lt;li&gt;包含  &lt;code&gt;in&lt;/code&gt; 、 &lt;code&gt;out&lt;/code&gt;  和  &lt;code&gt;inout&lt;/code&gt;  三种参数。&lt;/li&gt;
&lt;li&gt;给变量赋值都需要用  &lt;code&gt;select into&lt;/code&gt;  语句。&lt;/li&gt;
&lt;li&gt;每次只能给一个变量赋值，不支持集合的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是：&lt;strong&gt;阿里巴巴《Java 开发手册》强制禁止使用存储过程。因为存储过程难以调试和扩展，更没有移植性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93a5e011ade4450ebfa5d82057532a49~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;至于到底要不要在项目中使用，还是要看项目实际需求，权衡好利弊即可！&lt;/p&gt;
&lt;h5 id=&#34;创建存储过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建存储过程&#34;&gt;#&lt;/a&gt; 创建存储过程&lt;/h5&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;IF&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;EXISTS&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;proc_adder&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DELIMITER&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DEFINER&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;root&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;@`localhost`&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;proc_adder&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;IN&lt;/span&gt; a &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;IN&lt;/span&gt; b &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;OUT&lt;/span&gt; sum &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;BEGIN&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;DECLARE&lt;/span&gt; c &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt; sum  &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;END&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DELIMITER&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;使用存储过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用存储过程&#34;&gt;#&lt;/a&gt; 使用存储过程&lt;/h5&gt;
&lt;figure class=&#34;highlight less&#34;&gt;&lt;figcaption data-lang=&#34;less&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;set &lt;span class=&#34;token variable&#34;&gt;@b&lt;/span&gt;=5&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;call proc_&lt;span class=&#34;token function&#34;&gt;adder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;@b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;@s&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;select &lt;span class=&#34;token variable&#34;&gt;@s&lt;/span&gt; as sum&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;游标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#游标&#34;&gt;#&lt;/a&gt; 游标&lt;/h4&gt;
&lt;p&gt;游标（cursor）是&lt;strong&gt;一个存储在 DBMS 服务器上的数据库查询，它不是一条  &lt;code&gt;SELECT&lt;/code&gt;  语句，而是被该语句检索出来的结果集&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在存储过程中使用游标可以对一个结果集进行移动遍历。&lt;/p&gt;
&lt;p&gt;游标主要用于交互式应用，其中用户需要滚动屏幕上的数据，并对数据进行浏览或做出更改。&lt;/p&gt;
&lt;p&gt;使用游标的几个明确步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在使用游标前，必须&lt;font color=&#39;red&#39;&gt;声明 (定义)&lt;/font&gt;它。这个过程实际上没有检索数据， 它只是定义要使用的  &lt;code&gt;SELECT&lt;/code&gt;  语句和游标选项。&lt;/li&gt;
&lt;li&gt;一旦声明，就必须&lt;font color=&#39;red&#39;&gt;打开游标以供使用&lt;/font&gt;。这个过程用前面定义的 SELECT 语句把数据实际检索出来。&lt;/li&gt;
&lt;li&gt;对于填有数据的游标，根据需要&lt;font color=&#39;red&#39;&gt;取出 (检索) 各行&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;在结束游标使用时，必须&lt;font color=&#39;red&#39;&gt;关闭游标&lt;/font&gt;，可能的话，&lt;font color=&#39;red&#39;&gt;释放游标&lt;/font&gt;(有赖于具体的 DBMS)。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DELIMITER&lt;/span&gt; $&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt;  &lt;span class=&#34;token keyword&#34;&gt;PROCEDURE&lt;/span&gt; getTotal&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;BEGIN&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;DECLARE&lt;/span&gt; total &lt;span class=&#34;token keyword&#34;&gt;INT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;-- 创建接收游标数据的变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;DECLARE&lt;/span&gt; sid &lt;span class=&#34;token keyword&#34;&gt;INT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;DECLARE&lt;/span&gt; sname &lt;span class=&#34;token keyword&#34;&gt;VARCHAR&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;-- 创建总数变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;DECLARE&lt;/span&gt; sage &lt;span class=&#34;token keyword&#34;&gt;INT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;-- 创建结束标志变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;DECLARE&lt;/span&gt; done &lt;span class=&#34;token keyword&#34;&gt;INT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;-- 创建游标&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;DECLARE&lt;/span&gt; cur &lt;span class=&#34;token keyword&#34;&gt;CURSOR&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FOR&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;age &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; cursor_table &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; age&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;-- 指定游标循环结束时的返回值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;DECLARE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;CONTINUE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;HANDLER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FOR&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;NOT&lt;/span&gt; FOUND &lt;span class=&#34;token keyword&#34;&gt;SET&lt;/span&gt; done &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;SET&lt;/span&gt; total &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;OPEN&lt;/span&gt; cur&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;FETCH&lt;/span&gt; cur &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; sid&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sname&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sage&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;WHILE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;NOT&lt;/span&gt; done&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;DO&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;SET&lt;/span&gt; total &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; total &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;FETCH&lt;/span&gt; cur &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; sid&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sname&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sage&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;END&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;WHILE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;CLOSE&lt;/span&gt; cur&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; total&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;END&lt;/span&gt; $&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DELIMITER&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 调用存储过程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;call&lt;/span&gt; getTotal&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;触发器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#触发器&#34;&gt;#&lt;/a&gt; 触发器&lt;/h4&gt;
&lt;p&gt;触发器是一种与表操作有关的数据库对象，&lt;font color=&#39;red&#39;&gt;当触发器所在表上出现指定事件时，将调用该对象&lt;/font&gt;，即表的操作事件触发表上的触发器的执行。&lt;/p&gt;
&lt;p&gt;触发器&lt;font color=&#39;red&#39;&gt;可以用来进行审计跟踪，把修改记录到另外一张表中&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;使用触发器的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL 触发器提供了另一种检查数据完整性的方法。&lt;/li&gt;
&lt;li&gt;SQL 触发器可以捕获数据库层中业务逻辑中的错误。&lt;/li&gt;
&lt;li&gt;SQL 触发器提供了另一种运行计划任务的方法。通过使用 SQL 触发器，您不必等待运行计划任务，因为在对表中的数据进行更改之前或之后会自动调用触发器。&lt;/li&gt;
&lt;li&gt;SQL 触发器对于审计表中数据的更改非常有用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用触发器的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL 触发器只能提供扩展验证，并且不能替换所有验证。必须在应用程序层中完成一些简单的验证。例如，您可以使用 JavaScript 在客户端验证用户的输入，或者使用服务器端脚本语言（如 JSP，PHP，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0FTUC5ORVQ=&#34;&gt;ASP.NET&lt;/span&gt;，Perl）在服务器端验证用户的输入。&lt;/li&gt;
&lt;li&gt;从客户端应用程序调用和执行 SQL 触发器是不可见的，因此很难弄清楚数据库层中发生了什么。&lt;/li&gt;
&lt;li&gt;SQL 触发器可能会增加数据库服务器的开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;MySQL 不允许在触发器中使用 CALL 语句 ，也就是不能调用存储过程&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在 MySQL 中，分号  &lt;code&gt;;&lt;/code&gt;  是语句结束的标识符，遇到分号表示该段语句已经结束，MySQL 可以开始执行了。因此，解释器遇到触发器执行动作中的分号后就开始执行，然后会报错，因为没有找到和 BEGIN 匹配的 END。&lt;/p&gt;
&lt;p&gt;这时就会用到  &lt;code&gt;DELIMITER&lt;/code&gt;  命令（DELIMITER 是定界符，分隔符的意思）。它是一条命令，不需要语句结束标识，语法为： &lt;code&gt;DELIMITER new_delemiter&lt;/code&gt; 。 &lt;code&gt;new_delemiter&lt;/code&gt;  可以设为 1 个或多个长度的符号，默认的是分号  &lt;code&gt;;&lt;/code&gt; ，我们可以把它修改为其他符号，如  &lt;code&gt;$&lt;/code&gt;  -  &lt;code&gt;DELIMITER $&lt;/code&gt;  。在这之后的语句，以分号结束，解释器不会有什么反应，只有遇到了  &lt;code&gt;$&lt;/code&gt; ，才认为是语句结束。注意，使用完之后，我们还应该记得把它给修改回来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 MySQL 5.7.2 版之前，可以为每个表定义最多六个触发器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BEFORE INSERT&lt;/code&gt;  - 在将数据插入表格之前激活。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AFTER INSERT&lt;/code&gt;  - 将数据插入表格后激活。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BEFORE UPDATE&lt;/code&gt;  - 在更新表中的数据之前激活。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AFTER UPDATE&lt;/code&gt;  - 更新表中的数据后激活。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BEFORE DELETE&lt;/code&gt;  - 在从表中删除数据之前激活。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AFTER DELETE&lt;/code&gt;  - 从表中删除数据后激活。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，从 MySQL 版本 5.7.2 + 开始，可以为同一触发事件和操作时间定义多个触发器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;NEW&lt;/code&gt;  和  &lt;code&gt;OLD&lt;/code&gt; &lt;/strong&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 中定义了  &lt;code&gt;NEW&lt;/code&gt;  和  &lt;code&gt;OLD&lt;/code&gt;  关键字，用来&lt;strong&gt;表示触发器的所在表中，触发了触发器的那一行数据&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在  &lt;code&gt;INSERT&lt;/code&gt;  型触发器中， &lt;code&gt;NEW&lt;/code&gt;  用来表示将要（ &lt;code&gt;BEFORE&lt;/code&gt; ）或已经（ &lt;code&gt;AFTER&lt;/code&gt; ）插入的新数据；&lt;/li&gt;
&lt;li&gt;在  &lt;code&gt;UPDATE&lt;/code&gt;  型触发器中， &lt;code&gt;OLD&lt;/code&gt;  用来表示将要或已经被修改的原数据， &lt;code&gt;NEW&lt;/code&gt;  用来表示将要或已经修改为的新数据；&lt;/li&gt;
&lt;li&gt;在  &lt;code&gt;DELETE&lt;/code&gt;  型触发器中， &lt;code&gt;OLD&lt;/code&gt;  用来表示将要或已经被删除的原数据；&lt;/li&gt;
&lt;li&gt;使用方法：  &lt;code&gt;NEW.columnName&lt;/code&gt;  （columnName 为相应数据表某一列名）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;创建触发器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建触发器&#34;&gt;#&lt;/a&gt; 创建触发器&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：为了理解触发器的要点，有必要先了解一下创建触发器的指令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;CREATE TRIGGER&lt;/code&gt;  指令用于创建触发器。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TRIGGER&lt;/span&gt; trigger_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;trigger_time&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;trigger_event&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ON&lt;/span&gt; table_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FOR EACH ROW&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;BEGIN&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  trigger_statements&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;END&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;trigger_name&lt;/code&gt;  ：触发器名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trigger_time&lt;/code&gt;  : 触发器的触发时机。取值为  &lt;code&gt;BEFORE&lt;/code&gt;  或  &lt;code&gt;AFTER&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trigger_event&lt;/code&gt;  : 触发器的监听事件。取值为  &lt;code&gt;INSERT&lt;/code&gt; 、 &lt;code&gt;UPDATE&lt;/code&gt;  或  &lt;code&gt;DELETE&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;table_name&lt;/code&gt;  : 触发器的监听目标。指定在哪张表上建立触发器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FOR EACH ROW&lt;/code&gt; : 行级监视，Mysql 固定写法，其他 DBMS 不同。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trigger_statements&lt;/code&gt; : 触发器执行动作。是一条或多条 SQL 语句的列表，列表内的每条语句都必须用分号  &lt;code&gt;;&lt;/code&gt;  来结尾。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当触发器的触发条件满足时，将会执行  &lt;code&gt;BEGIN&lt;/code&gt;  和  &lt;code&gt;END&lt;/code&gt;  之间的触发器执行动作。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DELIMITER&lt;/span&gt; $&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TRIGGER&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;trigger_insert_user&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;AFTER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;user&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FOR EACH ROW&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;BEGIN&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;user_history&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;user_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; operate_type&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; operate_time&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;VALUES&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;NEW&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;add a user&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token function&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;END&lt;/span&gt; $&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DELIMITER&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;查看触发器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看触发器&#34;&gt;#&lt;/a&gt; 查看触发器&lt;/h5&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SHOW&lt;/span&gt; TRIGGERS&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;删除触发器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除触发器&#34;&gt;#&lt;/a&gt; 删除触发器&lt;/h5&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TRIGGER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;IF&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;EXISTS&lt;/span&gt; trigger_insert_user&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;sql优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql优化&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟SQL 优化&lt;/mark&gt;&lt;/h3&gt;
&lt;h4 id=&#34;慢查询语句优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#慢查询语句优化&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟慢查询语句优化&lt;/mark&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;尽量覆盖索引&lt;/font&gt;，避免 select *，减少回表&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;避免索引失效&lt;/font&gt;，例如：联合索引需要满足最左前缀匹配原则、不要使用左模糊匹配、表达式运算、函数计算、隐式类型转换等...&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;分页查询优化&lt;/font&gt;：该方案适用于主键自增的表，可以把 Limit 查询转换成某个位置的查询。select * from tb_sku where id&amp;gt;20000 limit 10;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;将字段多的表分解成多个表&lt;/font&gt;：有些字段使用频率高，有些低，数据量大时，会由于使用频率低的存在而变慢，可以考虑分开&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;对于经常联合查询的表，可以考虑建立中间表&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;优化器使用 MRR【Multi-Range Read】&lt;/font&gt;：将 ID 或键值读到 buffer 排序，通过&lt;font color=&#39;red&#39;&gt;把「随机磁盘读」，转化为「顺序磁盘读」，减少磁盘 IO&lt;/font&gt;，从而提高了索引查询的性能&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;读写分离（主库写，从库读）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;检查&lt;font color=&#39;red&#39;&gt;所查字段是否冗余&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;检查&lt;font color=&#39;red&#39;&gt;表中数据是否过多&lt;/font&gt;，是否应该进行分库分表了&lt;/li&gt;
&lt;li&gt;检查&lt;font color=&#39;red&#39;&gt;数据库实例所在机器的性能是否太低&lt;/font&gt;，是否可以适当增加资源&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;插入数据-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插入数据-2&#34;&gt;#&lt;/a&gt; 插入数据&lt;/h4&gt;
&lt;h5 id=&#34;insert&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#insert&#34;&gt;#&lt;/a&gt; insert&lt;/h5&gt;
&lt;p&gt;如果我们需要一次性往数据库表中插入多条记录，&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; tb_test &lt;span class=&#34;token keyword&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;tom&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; tb_test &lt;span class=&#34;token keyword&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;cat&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; tb_test &lt;span class=&#34;token keyword&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;jerry&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以从以下三个方面进行优化：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;批量插入&lt;/font&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;Insert&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; tb_test &lt;span class=&#34;token keyword&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Cat&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Jerry&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;手动控制事务&lt;/font&gt;：避免事务的频繁开启与提交&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; tb_test &lt;span class=&#34;token keyword&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Cat&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Jerry&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; tb_test &lt;span class=&#34;token keyword&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Cat&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Jerry&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; tb_test &lt;span class=&#34;token keyword&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Cat&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Jerry&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;主键顺序插入&lt;/font&gt;：性能要高于乱序插入&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;主键乱序插入 : &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;88&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;89&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;主键顺序插入 : &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;88&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;89&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;批量插入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#批量插入&#34;&gt;#&lt;/a&gt; 批量插入&lt;/h5&gt;
&lt;p&gt;如果一次性需要插入大批量数据 (比如：几百万的记录)，使用 insert 语句插入性能较低，此时可以使用 MySQL 数据库提供的 &lt;font color=&#39;red&#39;&gt; &lt;code&gt;load&lt;/code&gt;  指令&lt;/font&gt;进行插入。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 load 时，主键顺序插入性能高于乱序插入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 客户端连接服务端时，加上参数 -–local-infile&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mysql –&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;infile&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;u root &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;p&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 设置全局参数 local_infile 为 1，开启从本地加载文件导入数据的开关&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;global&lt;/span&gt; local_infile &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 执行 load 指令将准备好的数据，加载到表结构中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;load&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;infile&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/root/sql1.log&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; tb_user &lt;span class=&#34;token keyword&#34;&gt;fields&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;terminated&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;lines&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;terminated&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;\n&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;主键优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主键优化&#34;&gt;#&lt;/a&gt; &lt;mark&gt;🌟主键优化&lt;/mark&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;想知道为什么主键顺序插入的效率比主键乱序插入的更高，首先得明白主键是如何设计的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;innodb表数据的组织方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#innodb表数据的组织方式&#34;&gt;#&lt;/a&gt; InnoDB 表数据的组织方式&lt;/h5&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;在 InnoDB 存储引擎中，表数据都是根据&lt;u&gt;主键顺序&lt;/u&gt;组织存放的&lt;/font&gt;，这种存储方式的表称为&lt;strong&gt;索引组织表 (index organized table IOT)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;行数据，都是存储在聚集索引的叶子节点上的&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119103453582.png&#34; alt=&#34;image-20231119103453582&#34; /&gt;&lt;/p&gt;
&lt;p&gt;之前也讲解过 InnoDB 的逻辑结构图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119103710336.png&#34; alt=&#34;image-20231119103710336&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;在 InnoDB 引擎中，row 数据是记录在逻辑结构 page 页中的&lt;/font&gt;，而每一个页的大小是固定的，默认 16K。也就意味着，一个页中所存储的行也是有限的，&lt;font color=&#39;red&#39;&gt;如果插入的 row 数据在该页存储不下，将会存储到下一个页中，页与页之间会通过指针连接&lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;页分裂&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页分裂&#34;&gt;#&lt;/a&gt; 页分裂&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;主键乱序插入时会产生的操作，比较耗费性能！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;页可以为空，也可以填充一半，也可以填充 100%。每个页包含了 2-N 行数据 (如果一行数据过大，会行溢出)，&lt;font color=&#39;red&#39;&gt;页内的行数据根据主键排列&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119104317288.png&#34; alt=&#34;image-20231119104317288&#34; /&gt;&lt;/p&gt;
&lt;center&gt;按照主键顺序插入&lt;/center&gt;
&lt;p&gt;&lt;strong&gt;页分裂&lt;/strong&gt;：当行数据是&lt;font color=&#39;red&#39;&gt;按照主键乱序插入&lt;/font&gt;时，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;由于索引结构的叶子节点需要维护有序&lt;/font&gt;&lt;/strong&gt;，在插入某行数据时，如果&lt;font color=&#39;red&#39;&gt;当前所有页都满了&lt;/font&gt;，会导致&lt;font color=&#39;red&#39;&gt;某页需要将后一半数据移动到一个新开辟的页中&lt;/font&gt;，然后&lt;font color=&#39;red&#39;&gt;再插入行数据&lt;/font&gt;，最后需要&lt;font color=&#39;red&#39;&gt;重新设置页之间的指针&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;因此，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;页分裂是一种比较耗费性能的操作，所以尽量按照主键顺序插入！&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119105153488.png&#34; alt=&#34;image-20231119105153488&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119105216568.png&#34; alt=&#34;image-20231119105216568&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119105221673.png&#34; alt=&#34;image-20231119105221673&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119105227518.png&#34; alt=&#34;image-20231119105227518&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119105234837.png&#34; alt=&#34;image-20231119105234837&#34; /&gt;&lt;/p&gt;
&lt;center&gt;按照主键乱序插入&lt;/center&gt;
&lt;h5 id=&#34;页合并&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页合并&#34;&gt;#&lt;/a&gt; 页合并&lt;/h5&gt;
&lt;p&gt;当删除一条行记录时，并非物理删除，而是将其标记（flaged）为&lt;font color=&#39;red&#39;&gt;逻辑删除&lt;/font&gt;，并且它的空间变得允许被其他行记录声明使用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119110526526.png&#34; alt=&#34;image-20231119110526526&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;当页中删除的记录达到 MERGE_THRESHOLD（默认为页的 50%），InnoDB 会开始寻找最靠近的页看看是否可以将两个页合并，以优化空间使用&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或者创建索引时指定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119110615283.png&#34; alt=&#34;image-20231119110615283&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119110628033.png&#34; alt=&#34;image-20231119110628033&#34; /&gt;&lt;/p&gt;
&lt;p&gt;删除数据，并将页合并之后，再次插入新的数据 21，则直接插入 3# 页。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119110703491.png&#34; alt=&#34;image-20231119110703491&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;主键使用原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主键使用原则&#34;&gt;#&lt;/a&gt; 主键使用原则&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;尽量降低主键的长度&lt;/strong&gt;：对于一张表，只有一个主键索引，可以有多个二级索引。而二级索引的叶子节点中存放的就是主键，因此&lt;font color=&#39;red&#39;&gt;如果主键的长度较长，会导致二级索引占用大量磁盘空间，查询时也会耗费较多的磁盘 IO&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119111458997.png&#34; alt=&#34;image-20231119111458997&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;尽量按照主键顺序插入数据&lt;/strong&gt;：能够避免按照主键乱序插入数据时的页分裂操作，提高插入性能！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;尽量选择使用 AUTO_INCREMENT 自增主键&lt;/strong&gt;：不要使用 UUID 做主键，或者其他自然主键，如身份证号。因为它们都是&lt;font color=&#39;red&#39;&gt;无序&lt;/font&gt;的，导致乱序插入，存在页分裂现象。而且它们的&lt;font color=&#39;red&#39;&gt;长度较长&lt;/font&gt;，构建索引需要的空间较大，在查询时会耗费大量的磁盘 IO。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;尽量避免对主键的修改&lt;/strong&gt;：修改主键，还需要修改对应的主键索引、二级索引，代价较大！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;order-by-优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#order-by-优化&#34;&gt;#&lt;/a&gt; order by 优化&lt;/h4&gt;
&lt;p&gt;MySQL 有两种排序方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Using filesort&lt;/code&gt; ：通过表的索引或全表扫描读取满足条件的数据行，然后&lt;font color=&#39;red&#39;&gt;在 sort buffer（排序缓冲区）中完成排序操作&lt;/font&gt;，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Using index&lt;/code&gt; ：&lt;font color=&#39;red&#39;&gt;通过有序索引顺序扫描直接返回有序数据&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;不需要额外排序，操作效率高&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此在优化排序操作时，&lt;font color=&#39;red&#39;&gt;尽量优化为 Using index&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;经过测试（黑马 MySQL - 进阶篇），总结一下 order by 优化原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;根据排序字段建立合适的索引&lt;/strong&gt;：这样才会 Using index 排序&lt;/li&gt;
&lt;li&gt;多字段排序时，也遵循&lt;strong&gt;联合索引的最左前缀匹配法则&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;尽量使用覆盖索引&lt;/strong&gt;：避免 select * ；&lt;/li&gt;
&lt;li&gt;多字段排序，一个升序一个降序，此时需要注意&lt;strong&gt;联合索引在创建时的规则（ASC/DESC）&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;如果不可避免的出现 filesort，大数据量排序时，可以&lt;strong&gt;适当增大排序缓冲区大小 sort_buffer_size&lt;/strong&gt; (默认 256k)，否则会在磁盘空间中排序，效率低！&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;group-by-优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#group-by-优化&#34;&gt;#&lt;/a&gt; group by 优化&lt;/h4&gt;
&lt;p&gt;在分组操作中，需要通过以下两点进行优化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以&lt;strong&gt;通过索引来提高效率&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;联合索引的使用，也需要&lt;strong&gt;遵循最左前缀法则&lt;/strong&gt;的&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;limit-优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#limit-优化&#34;&gt;#&lt;/a&gt; limit 优化&lt;/h4&gt;
&lt;p&gt;在数据量比较大时，进行 limit 分页查询存在问题：越往后，分页查询效率越低。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119121326947.png&#34; alt=&#34;image-20231119121326947&#34; /&gt;&lt;/p&gt;
&lt;p&gt;优化思路：&lt;strong&gt;覆盖索引 + 子查询&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;explain&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; tb_sku t &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; id &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; tb_sku &lt;span class=&#34;token keyword&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt; id &lt;span class=&#34;token keyword&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2000000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; a &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;count-优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#count-优化&#34;&gt;#&lt;/a&gt; count 优化&lt;/h4&gt;
&lt;p&gt;如果数据量很大，在执行 count 操作时，是非常耗时的。&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; tb_user &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;下面对比一下 MyISAM、InnoDB 是如何执行 count 操作的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;MyISAM 引擎&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;把表的总行数存在了磁盘上&lt;/font&gt;，因此执行 count (*) 的时候会直接返回这个数，效率很高。但是如果是带条件的 count，MyISAM 也慢。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;InnoDB 引擎&lt;/font&gt;：执行 count (*) 的时候，需要&lt;font color=&#39;red&#39;&gt;把数据一行一行地从引擎里面读出来，然后累积计数&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;InnoDB 对 count 的优化思路：&lt;font color=&#39;red&#39;&gt;自己维护计数&lt;/font&gt;（可以借助于 redis 进行，但是如果是带条件的 count 又比较麻烦了）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;count () 是一个聚合函数，对于返回的结果集，一行行地判断，如果 count 函数的参数不是 NULL，累计值就加 1，否则不加，最后返回累计值。&lt;/p&gt;
&lt;p&gt;count 用法：count（*）、count（主键）、count（字段）、count（数字）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;按照效率排序的话，count (字段) &amp;lt; count (主键 id) &amp;lt; count (1) ≈ count (*)，所以&lt;strong&gt;尽量使用 count (*)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231119131552752.png&#34; alt=&#34;image-20231119131552752&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;update-优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#update-优化&#34;&gt;#&lt;/a&gt; update 优化&lt;/h4&gt;
&lt;p&gt;执行 Update 语句时，条件一定要根据索引字段进行更新，否则会出现行锁升级为表锁，导致并发性能降低！&lt;/p&gt;
&lt;p&gt;InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。&lt;/p&gt;
&lt;h4 id=&#34;一些优化原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一些优化原则&#34;&gt;#&lt;/a&gt; 一些优化原则&lt;/h4&gt;
&lt;h5 id=&#34;尽量使用覆盖索引避免-select&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尽量使用覆盖索引避免-select&#34;&gt;#&lt;/a&gt; 尽量使用覆盖索引，避免 select *&lt;/h5&gt;
&lt;p&gt;** 覆盖索引，即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。** 因此，&lt;font color=&#39;red&#39;&gt;应该尽量使用覆盖索引，减少 &lt;code&gt;select *&lt;/code&gt; &lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;分页优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分页优化&#34;&gt;#&lt;/a&gt; 分页优化&lt;/h5&gt;
&lt;h5 id=&#34;尽量避免多表做join&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尽量避免多表做join&#34;&gt;#&lt;/a&gt; 尽量避免多表做 join&lt;/h5&gt;
&lt;h5 id=&#34;建议不要使用外键与级联&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建议不要使用外键与级联&#34;&gt;#&lt;/a&gt; 建议不要使用外键与级联&lt;/h5&gt;
&lt;h5 id=&#34;选择合适的字段类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择合适的字段类型&#34;&gt;#&lt;/a&gt; 选择合适的字段类型&lt;/h5&gt;
&lt;h5 id=&#34;尽量用-union-all-代替-union&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尽量用-union-all-代替-union&#34;&gt;#&lt;/a&gt; 尽量用 UNION ALL 代替 UNION&lt;/h5&gt;
&lt;h5 id=&#34;批量操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#批量操作&#34;&gt;#&lt;/a&gt; 批量操作&lt;/h5&gt;
&lt;h5 id=&#34;show-profle-分析-sql-执行性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#show-profle-分析-sql-执行性能&#34;&gt;#&lt;/a&gt; Show Profle 分析 SQL 执行性能&lt;/h5&gt;
&lt;h5 id=&#34;正确使用索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正确使用索引&#34;&gt;#&lt;/a&gt; 正确使用索引&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;指路→&lt;a href=&#34;#%E7%B4%A2%E5%BC%95%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%BB%BA%E8%AE%AE&#34;&gt;索引的正确使用建议&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;sql常见面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql常见面试题&#34;&gt;#&lt;/a&gt; SQL 常见面试题&lt;/h3&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/photography/%E6%97%A5%E8%90%BD%E6%94%B6%E9%9B%86%E8%AE%A1%E5%88%92/</guid>
            <title>日落收集计划</title>
            <link>http://example.com/photography/%E6%97%A5%E8%90%BD%E6%94%B6%E9%9B%86%E8%AE%A1%E5%88%92/</link>
            <category term="摄影" scheme="http://example.com/categories/photography/" />
            <pubDate>Wed, 15 Nov 2023 00:39:51 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6553a0abc458853aef3aa4f3.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://pic.imgdb.cn/item/6553a403c458853aef45fdc7.jpg&#34; alt=&#34;落日窗花&#34; title=&#34;落日窗花&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/photography/%E8%88%B9%E5%A4%AB%E8%9C%80%E9%BB%8D/</guid>
            <title>船夫蜀黍</title>
            <link>http://example.com/photography/%E8%88%B9%E5%A4%AB%E8%9C%80%E9%BB%8D/</link>
            <category term="摄影" scheme="http://example.com/categories/photography/" />
            <pubDate>Wed, 15 Nov 2023 00:37:21 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6553a275c458853aef40b302.jpg&#34; alt=&#34;上船！&#34; title=&#34;上船！&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://pic.imgdb.cn/item/6553a275c458853aef40b256.jpg&#34; alt=&#34;看啥呢&#34; title=&#34;看啥呢&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/photography/%E4%B8%80%E4%BA%9B%E8%93%9D%E8%89%B2/</guid>
            <title>一些蓝色</title>
            <link>http://example.com/photography/%E4%B8%80%E4%BA%9B%E8%93%9D%E8%89%B2/</link>
            <category term="摄影" scheme="http://example.com/categories/photography/" />
            <pubDate>Wed, 15 Nov 2023 00:30:42 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6553a0aac458853aef3aa386.jpg&#34; alt=&#34;1号蓝嘉宾&#34; title=&#34;1号蓝嘉宾&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://pic.imgdb.cn/item/6553a0abc458853aef3aa631.jpg&#34; alt=&#34;2号蓝嘉宾&#34; title=&#34;2号蓝嘉宾&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6553a0abc458853aef3aa4aa.jpg&#34; alt=&#34;3号蓝嘉宾&#34; title=&#34;3号蓝嘉宾&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/photography/%E8%93%9D%E4%B8%8E%E9%BB%84/</guid>
            <title>蓝与黄</title>
            <link>http://example.com/photography/%E8%93%9D%E4%B8%8E%E9%BB%84/</link>
            <category term="摄影" scheme="http://example.com/categories/photography/" />
            <pubDate>Wed, 15 Nov 2023 00:20:56 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/65539e35c458853aef322d09.jpg&#34; alt=&#34;一直在用的头像&#34; title=&#34;一直在用的头像hh&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://pic.imgdb.cn/item/65539e33c458853aef3224f3.jpg&#34; alt=&#34;老电影的最后一幕&#34; title=&#34;老电影的最后一幕&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/photography/%E6%9C%9D%E9%98%B3%E5%85%AC%E5%9B%AD/</guid>
            <title>朝阳公园</title>
            <link>http://example.com/photography/%E6%9C%9D%E9%98%B3%E5%85%AC%E5%9B%AD/</link>
            <category term="摄影" scheme="http://example.com/categories/photography/" />
            <pubDate>Sun, 12 Nov 2023 16:06:56 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6554c7d9c458853aefd85660.jpg&#34; alt=&#34;&amp;quot;婚纱照&amp;quot;&#34; title=&#34;婚纱照&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6554c7d9c458853aefd857b8.jpg&#34; alt=&#34;&amp;quot;鸽子&amp;quot;&#34; title=&#34;鸽子&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6554c7d9c458853aefd85a3b.jpg&#34; alt=&#34;灯塔？喇叭？&#34; title=&#34;灯塔？喇叭？&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://pic.imgdb.cn/item/6554c7dac458853aefd85b87.jpg&#34; alt=&#34;旋转跳跃~&#34; title=&#34;旋转跳跃~&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6554c873c458853aefdaf78e.jpg&#34; alt=&#34;&amp;quot;我不停歇~&amp;quot;&#34; title=&#34;我不停歇~&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6554c872c458853aefdaf5dd.jpg&#34; alt=&#34;&amp;quot;波光粼粼粼粼粼&amp;quot;&#34; title=&#34;波光粼粼粼粼粼&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6554c8c4c458853aefdc3eb4.png&#34; alt=&#34;1681754285877.png&#34; height=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6554c8c4c458853aefdc402e.jpg&#34; alt=&#34;&amp;quot;野蛮生长&amp;quot;&#34; title=&#34;野蛮生长&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6554c873c458853aefdafa16.jpg&#34; alt=&#34;&amp;quot;光影出版社&amp;quot;&#34; title=&#34;光影出版社&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6554c873c458853aefdaf8ee.jpg&#34; alt=&#34;&amp;quot;&amp;quot;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6554c7d8c458853aefd854e9.jpg&#34; alt=&#34;&amp;quot;售票亭&amp;quot;&#34; title=&#34;售票亭&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6554c8c3c458853aefdc3a13.jpg&#34; alt=&#34;&amp;quot;麦门!&amp;quot;&#34; title=&#34;麦门!&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/photography/%E8%AF%BE%E4%B8%8A%E6%91%B8%E9%B1%BC/</guid>
            <title>课上摸鱼</title>
            <link>http://example.com/photography/%E8%AF%BE%E4%B8%8A%E6%91%B8%E9%B1%BC/</link>
            <category term="摄影" scheme="http://example.com/categories/photography/" />
            <pubDate>Sun, 12 Nov 2023 11:50:08 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;https://store.heytapimage.com/cdo-portal/feedback/202311/14/d14ad5b8a21733d0ad00c6f42a36a476.jpeg&#34; alt=&#34;无聊的嵌入式&#34; title=&#34;无聊的嵌入式&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://store.heytapimage.com/cdo-portal/feedback/202311/14/898b619d3706f71c0881abb448891fa3.jpeg&#34; alt=&#34;早自习&#34; title=&#34;早自习&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/java/juc/JUC%E7%AC%94%E8%AE%B0/</guid>
            <title>JUC 笔记</title>
            <link>http://example.com/java/juc/JUC%E7%AC%94%E8%AE%B0/</link>
            <category term="Java" scheme="http://example.com/categories/java/" />
            <category term="JUC" scheme="http://example.com/categories/java/juc/" />
            <pubDate>Sun, 12 Nov 2023 11:12:33 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;java-并发概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java-并发概述&#34;&gt;#&lt;/a&gt; Java 并发概述&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;什么是进程和线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是进程和线程&#34;&gt;#&lt;/a&gt; 什么是进程和线程？&lt;/h2&gt;
&lt;h3 id=&#34;何为进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#何为进程&#34;&gt;#&lt;/a&gt; 何为进程？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;进程是程序的一次执行过程，是系统进行资源分配的基本单位&lt;/strong&gt;。系统运行一个程序即是一个进程从创建，运行到消亡的过程。&lt;/p&gt;
&lt;p&gt;在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称&lt;font color=&#39;red&#39;&gt;主线程&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;如下图所示，在 Windows 中通过查看任务管理器的方式，我们就可以清楚看到 Windows 当前运行的进程（ &lt;code&gt;.exe&lt;/code&gt;  文件的运行）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231008000329935.png&#34; alt=&#34;进程示例图片-Windows&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;何为线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#何为线程&#34;&gt;#&lt;/a&gt; 何为线程？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;线程属于进程中的一个实体，是一个基本的 CPU 执行单元，是系统独立调度的基本单位&lt;/strong&gt;。一个进程在其执行的过程中可以产生多个线程。与进程不同的是，&lt;font color=&#39;red&#39;&gt;同类的多个线程共享进程的&lt;strong&gt;堆&lt;/strong&gt;和&lt;strong&gt;方法区&lt;/strong&gt;资源，但每个线程有自己的&lt;strong&gt;程序计数器&lt;/strong&gt;、&lt;strong&gt;虚拟机栈&lt;/strong&gt;和&lt;strong&gt;本地方法栈&lt;/strong&gt;&lt;/font&gt;。所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为&lt;font color=&#39;red&#39;&gt;轻量级进程&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;Java 程序天生就是多线程程序，我们可以通过 JMX 来看看一个普通的 Java 程序有哪些线程，代码如下。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MultiThread&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token comment&#34;&gt;// 获取 Java 线程管理 MXBean&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token class-name&#34;&gt;ThreadMXBean&lt;/span&gt; threadMXBean &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ManagementFactory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getThreadMXBean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token comment&#34;&gt;// 不需要获取同步的 monitor 和 synchronizer 信息，仅获取线程和线程堆栈信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;ThreadInfo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; threadInfos &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; threadMXBean&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;dumpAllThreads&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token comment&#34;&gt;// 遍历线程信息，仅打印线程 ID 和线程名称信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ThreadInfo&lt;/span&gt; threadInfo &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; threadInfos&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;[&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; threadInfo&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getThreadId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;] &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; threadInfo&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getThreadName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上述程序输出如下（输出内容可能不同，不用太纠结下面每个线程的作用，只用知道 main 线程执行 main 方法即可）：&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;[5] Attach Listener //添加事件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;[4] Signal Dispatcher // 分发处理给 JVM 信号的线程&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;[3] Finalizer //调用对象 finalize 方法的线程&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;[2] Reference Handler //清除 reference 线程&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;[1] main //main 线程,程序入口&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;从上面的输出内容可以看出：&lt;strong&gt;一个 Java 程序（进程）的运行是 main 线程和多个其他线程同时运行&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;进程和线程的关系区别优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程和线程的关系区别优缺点&#34;&gt;#&lt;/a&gt; 进程和线程的关系，区别，优缺点？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;调度&lt;/strong&gt;：线程是调度的基本单位（PC，状态码，通用寄存器，线程栈及栈指针）；进程是拥有资源的基本单位（打开文件，堆，静态区，代码段等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并发性&lt;/strong&gt;：一个进程内多个线程可以并发（最好和 CPU 核数相等）；多个进程可以并发。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥有资源&lt;/strong&gt;：线程不拥有系统资源，但一个进程的多个线程可以共享隶属进程的资源；进程是拥有资源的独立单位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统开销&lt;/strong&gt;：线程创建销毁只需要处理 PC 值，状态码，通用寄存器值，线程栈及栈指针即可；进程创建和销毁需要重新分配及销毁 task_struct 结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;图解进程与线程的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图解进程与线程的关系&#34;&gt;#&lt;/a&gt; 图解进程与线程的关系&lt;/h3&gt;
&lt;p&gt;下图是 Java 8 后的的内存结构（运行时数据区），通过下图我们从 JVM 的角度来说一下线程和进程之间的关系。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/github/javaguide/java/jvm/java-runtime-data-areas-jdk1.8.png&#34; alt=&#34;Java 运行时数据区域（JDK1.8 之后）&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231008002249305.png&#34; alt=&#34;image-20231008002249305&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从上图可以看出：一个进程中可以有多个线程，多个线程共享进程的&lt;strong&gt;堆&lt;/strong&gt;和&lt;strong&gt;方法区 (JDK1.8 之后的元空间)&lt;strong&gt; 资源，但是每个线程有自己的&lt;/strong&gt;程序计数器&lt;/strong&gt;、&lt;strong&gt;虚拟机栈&lt;/strong&gt; 和 &lt;strong&gt;本地方法栈&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;进程与线程的对比总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;线程是进程划分成的更小的运行单位&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;线程和进程最大的不同在于，&lt;strong&gt;各进程基本上是独立的，而各线程则不一定&lt;/strong&gt;，因为同一进程中的线程极有可能会相互影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程执行开销小，上下文切换的成本低&lt;/strong&gt;，但不利于资源的管理和保护；而进程正相反。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么程序计数器的私有的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么程序计数器的私有的&#34;&gt;#&lt;/a&gt; 为什么程序计数器的私有的？&lt;/h3&gt;
&lt;p&gt;程序计数器主要有下面两个作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。&lt;/li&gt;
&lt;li&gt;在多线程的情况下，程序计数器用于&lt;font color=&#39;red&#39;&gt;记录当前线程执行的位置&lt;/font&gt;，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意的是，如果执行的是 native 方法，那么程序计数器记录的是 undefined 地址，&lt;font color=&#39;red&#39;&gt;只有执行的是 Java 代码时，程序计数器记录的才是下一条指令的地址&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;所以，程序计数器私有主要是&lt;strong&gt;为了线程切换后能恢复到正确的执行位置&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;为什么虚拟机栈和本地方法栈是私有的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么虚拟机栈和本地方法栈是私有的&#34;&gt;#&lt;/a&gt; 为什么虚拟机栈和本地方法栈是私有的？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;** 虚拟机栈：** 每个 Java 方法在执行之前会创建一个栈帧用于&lt;font color=&#39;red&#39;&gt;存储调用方法的局部变量表、操作数栈、常量池引用等信息&lt;/font&gt;。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231008001952766.png&#34; alt=&#34;image-20231008001952766&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 本地方法栈：** 和虚拟机栈所发挥的作用非常相似，区别是：** 虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。** 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，&lt;strong&gt;为了保证线程中的局部变量不被别的线程访问到&lt;/strong&gt;，虚拟机栈和本地方法栈是线程私有的。&lt;/p&gt;
&lt;h3 id=&#34;为什么堆和方法区是共享的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么堆和方法区是共享的&#34;&gt;#&lt;/a&gt; 为什么堆和方法区是共享的？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;堆&lt;/strong&gt;：是进程中最大的一块内存，主要用于&lt;strong&gt;存放新创建的对象&lt;/strong&gt; (几乎所有对象都在这里分配内存)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法区&lt;/strong&gt;：主要用于&lt;strong&gt;存放已被加载的类信息、常量等数据&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;并发和并行的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并发和并行的区别&#34;&gt;#&lt;/a&gt; 并发和并行的区别？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;并发&lt;/strong&gt;：两个及两个以上的作业在同一 &lt;strong&gt;时间段&lt;/strong&gt; 内执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并行&lt;/strong&gt;：两个及两个以上的作业在同一 &lt;strong&gt;时刻&lt;/strong&gt; 执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最关键的点是：是否是 &lt;strong&gt;同时&lt;/strong&gt; 执行。&lt;/p&gt;
&lt;h2 id=&#34;同步和异步的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步和异步的区别&#34;&gt;#&lt;/a&gt; 同步和异步的区别？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同步&lt;/strong&gt;：发出一个调用之后，在没有得到结果之前，该调用就&lt;strong&gt;不可以返回，一直等待&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步&lt;/strong&gt;：调用在发出之后，不用等待返回结果，该调用&lt;strong&gt;直接返回&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么要使用多线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么要使用多线程&#34;&gt;#&lt;/a&gt; 为什么要使用多线程？&lt;/h2&gt;
&lt;p&gt;先从总体上来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;从计算机底层来说：&lt;/strong&gt; 线程可以比作是轻量级的进程，是程序执行的最小单位，&lt;font color=&#39;red&#39;&gt;线程间的切换和调度的成本远远小于进程&lt;/font&gt;。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;从当代互联网发展趋势来说：&lt;/strong&gt; 现在的系统动不动就要求百万级甚至千万级的并发量，而&lt;font color=&#39;red&#39;&gt;多线程并发编程正是开发高并发系统的基础&lt;/font&gt;，利用好多线程机制可以大大提高系统整体的并发能力以及性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再深入到计算机底层来探讨：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单核时代&lt;/strong&gt;：在单核时代多线程主要是&lt;font color=&#39;red&#39;&gt;为了提高单进程利用 CPU 和 IO 系统的效率&lt;/font&gt;。 假设只运行了一个 Java 进程的情况，当我们请求 IO 的时候，如果 Java 进程中只有一个线程，此线程被 IO 阻塞则整个进程被阻塞。CPU 和 IO 设备只有一个在运行，那么可以简单地说系统整体效率只有 50%。当使用多线程的时候，一个线程被 IO 阻塞，其他线程还可以继续使用 CPU。从而提高了 Java 进程利用系统资源的整体效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多核时代&lt;/strong&gt;：多核时代多线程主要是&lt;font color=&#39;red&#39;&gt;为了提高进程利用多核 CPU 的能力&lt;/font&gt;。举个例子：假如我们要计算一个复杂的任务，我们只用一个线程的话，不论系统有几个 CPU 核心，都只会有一个 CPU 核心被利用到。而创建多个线程，这些线程可以被映射到底层多个 CPU 上执行，在任务中的多个线程没有资源竞争的情况下，任务执行的效率会有显著性的提高，约等于（单核时执行时间 / CPU 核心数）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多线程会带来什么问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多线程会带来什么问题&#34;&gt;#&lt;/a&gt; 多线程会带来什么问题？&lt;/h2&gt;
&lt;p&gt;并发编程的目的就是为了能提高程序的执行效率，提高程序运行速度。但是并发编程并不总是能提高程序运行速度的，而且并发编程可能会遇到很多问题，比如：&lt;font color=&#39;red&#39;&gt;内存泄漏、死锁、线程不安全&lt;/font&gt;等。&lt;/p&gt;
&lt;h2 id=&#34;如何理解线程安全和不安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何理解线程安全和不安全&#34;&gt;#&lt;/a&gt; 如何理解线程安全和不安全？&lt;/h2&gt;
&lt;p&gt;线程安全和不安全是在多线程环境下对于同一份数据的访问&lt;font color=&#39;red&#39;&gt;是否能保证共享资源的正确性和一致性&lt;/font&gt;的描述。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程安全：在多线程环境下，对于同一份数据，不管有多少个线程同时访问，都能保证这份数据的正确性和一致性。&lt;/li&gt;
&lt;li&gt;线程不安全：在多线程环境下，对于同一份数据，多个线程同时访问时可能会导致数据混乱、错误或者丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;单核-cpu-上运行多个线程效率一定会高吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单核-cpu-上运行多个线程效率一定会高吗&#34;&gt;#&lt;/a&gt; 单核 CPU 上运行多个线程效率一定会高吗？&lt;/h2&gt;
&lt;p&gt;单核 CPU 同时运行多个线程的效率是否会高，&lt;font color=&#39;red&#39;&gt;取决于线程的类型和任务的性质&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;一般来说，有两种类型的线程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;CPU 密集型&lt;/font&gt;：主要进行计算和逻辑处理，需要占用大量的 CPU 资源。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;IO 密集型&lt;/font&gt;：主要进行输入输出操作，如读写文件、网络通信等，需要等待 IO 设备的响应，而不占用太多的 CPU 资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;在单核 CPU 上，同一时刻只能有一个线程在运行，其他线程需要等待 CPU 的时间片分配&lt;/font&gt;。如果线程是 CPU 密集型的，那么多个线程同时运行会导致频繁的线程切换，增加了系统的开销，降低了效率。如果线程是 IO 密集型的，那么多个线程同时运行可以利用 CPU 在等待 IO 时的空闲时间，提高了效率。&lt;/p&gt;
&lt;p&gt;因此，&lt;strong&gt;对于单核 CPU 来说，如果任务是 CPU 密集型的，那么多线程会影响效率；如果任务是 IO 密集型的，那么多线程会提高效率&lt;/strong&gt;。当然，这里的 “多” 也要适度，不能超过系统能够承受的上限。&lt;/p&gt;
&lt;h1 id=&#34;线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程&#34;&gt;#&lt;/a&gt; 线程&lt;/h1&gt;
&lt;h2 id=&#34;线程的创建方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程的创建方式&#34;&gt;#&lt;/a&gt; 线程的创建方式&lt;/h2&gt;
&lt;h3 id=&#34;继承-thread-类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#继承-thread-类&#34;&gt;#&lt;/a&gt; 继承 Thread 类&lt;/h3&gt;
&lt;p&gt;Thread 创建线程方式：创建线程类，匿名内部类方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;start () 方法底层其实是给 CPU 注册当前线程，并且触发 run () 方法执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;线程的启动必须调用 start () 方法，如果线程直接调用 run () 方法，相当于变成了普通类的执行，此时主线程将只有执行该线程&lt;/li&gt;
&lt;li&gt;建议线程先创建子线程，主线程的任务放在之后，否则主线程（main）永远是先执行完&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thread 构造器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public Thread()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public Thread(String name)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadDemo&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MyThread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       	&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;main线程&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//main 线程输出放在上面 就变成有先后顺序了，因为是 main 线程驱动的子线程运行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MyThread&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;子线程输出：&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;继承 Thread 类的优缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：编码简单&lt;/li&gt;
&lt;li&gt;缺点：线程类已经继承了 Thread 类，&lt;font color=&#39;red&#39;&gt;无法继承其他类了&lt;/font&gt;，功能不能通过继承拓展（单继承的局限性）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实现-runnable-接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现-runnable-接口&#34;&gt;#&lt;/a&gt; 实现 Runnable 接口&lt;/h3&gt;
&lt;p&gt;Runnable 创建线程方式：创建线程类，匿名内部类方式&lt;/p&gt;
&lt;p&gt;Thread 的构造器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public Thread(Runnable target)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public Thread(Runnable target, String name)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadDemo&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MyRunnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; t1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1号线程&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		t1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; t2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//Thread-0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MyRunnable&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;-&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Thread 类本身也是实现了 Runnable 接口&lt;/strong&gt;，Thread 类中持有 Runnable 的属性，执行线程 run 方法底层是调用 Runnable#run：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          	&lt;span class=&#34;token comment&#34;&gt;// 底层调用的是 Runnable 的 run 方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Runnable 方式的优缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点：代码复杂一点。&lt;/li&gt;
&lt;li&gt;优点：
&lt;ol&gt;
&lt;li&gt;线程任务类只是实现了 Runnable 接口，可以继续继承其他类，&lt;font color=&#39;red&#39;&gt;避免了单继承的局限性&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;同一个线程任务对象可以被包装成多个线程对象&lt;/li&gt;
&lt;li&gt;适合多个线程去共享同一个资源&lt;/li&gt;
&lt;li&gt;实现解耦操作，线程任务代码可以被多个线程共享，&lt;font color=&#39;red&#39;&gt;线程任务代码和线程独立&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;线程池可以放入实现 Runnable 或 Callable 线程任务对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实现-callable-接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现-callable-接口&#34;&gt;#&lt;/a&gt; 实现 Callable 接口&lt;/h3&gt;
&lt;p&gt;实现 Callable 接口：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义一个线程任务类实现 Callable 接口，声明线程执行的结果类型&lt;/li&gt;
&lt;li&gt;重写线程任务类的 call 方法，这个方法可以直接返回执行的结果&lt;/li&gt;
&lt;li&gt;创建一个 Callable 的线程任务对象&lt;/li&gt;
&lt;li&gt;把 Callable 的线程任务对象&lt;strong&gt;包装成一个 FutureTask 对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;把 FutureTask 对象包装成 Thread 对象&lt;/li&gt;
&lt;li&gt;调用线程的 start () 方法启动线程&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadDemo&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Callable&lt;/span&gt; call &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MyCallable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;FutureTask&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; task &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FutureTask&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;call&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;task&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; task&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 获取 call 方法返回的结果（正常 / 异常结果）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;  &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MyCallable&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Callable&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 重写线程任务类方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;-&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Hello World&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;public FutureTask(Callable&amp;lt;V&amp;gt; callable)&lt;/code&gt; ：未来任务对象，在线程执行完后得到线程的执行结果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FutureTask 就是 Runnable 对象，因为 &lt;strong&gt;Thread 类只能执行 Runnable 实例的任务对象&lt;/strong&gt;，所以把 Callable 包装成未来任务对象&lt;/li&gt;
&lt;li&gt;线程池部分详解了 FutureTask 的源码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;public V get()&lt;/code&gt; ：同步等待 task 执行完毕的结果，如果在线程中获取另一个线程执行结果，会阻塞等待，用于线程同步&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get () 线程会阻塞等待任务执行完成&lt;/li&gt;
&lt;li&gt;run () 执行完后会把结果设置到 FutureTask 的一个成员变量，get () 线程可以获取到该变量的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：同 Runnable，并且&lt;font color=&#39;red&#39;&gt;能得到线程执行的结果&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;缺点：编码复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;runnable-和-callable-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#runnable-和-callable-的区别&#34;&gt;#&lt;/a&gt; Runnable 和 Callable 的区别？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;接口类型：Runnable 是一个接口类型，而 Callable 是一个&lt;font color=&#39;red&#39;&gt;通用接口类型&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;返回值：Runnable 接口的 run () 方法没有返回值，它只能执行某个任务。Callable 接口的&lt;font color=&#39;red&#39;&gt; call () 方法可以返回一个结果&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;异常处理：Runnable 接口的 run () 方法不能抛出任何已检查异常，而 Callable 接口的&lt;font color=&#39;red&#39;&gt; call () 方法可以抛出异常&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;使用方式：Runnable 接口通常用于创建多线程任务，它不能直接返回结果或抛出异常。Callable 接口通常用于创建线程任务，它可以返回结果或抛出异常。&lt;/li&gt;
&lt;li&gt;多线程执行返回的结果：Runnable 接口无法直接获取执行结果，而&lt;font color=&#39;red&#39;&gt; Callable 接口通过 Future 接口的 get () 方法可以获取线程执行的结果&lt;/font&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;thread-类的常用-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#thread-类的常用-api&#34;&gt;#&lt;/a&gt; Thread 类的常用 API&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;public void  &lt;code&gt;start()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;启动一个新线程，Java 虚拟机调用此线程的 run () 方法&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public void  &lt;code&gt;run()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;线程启动后，调用该方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public void  &lt;code&gt;setName(String name)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;给当前线程取名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public void  &lt;code&gt;getName()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;获取当前线程的名字。线程存在默认名称：子线程是 Thread - 索引，主线程是 main&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public final int  &lt;code&gt;getPriority()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回此线程的优先级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public final void  &lt;code&gt;setPriority(int priority)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;更改此线程的优先级，常用 1 5 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public void  &lt;code&gt;interrupt()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;中断这个线程，异常处理机制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public boolean  &lt;code&gt;isInterrupted()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断当前线程是否被打断，不清除打断标记&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public final void  &lt;code&gt;join()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等待这个线程结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public final void  &lt;code&gt;join(long millis)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等待这个线程死亡 millis 毫秒，0 意味着永远等待&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public final native boolean  &lt;code&gt;isAlive()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;线程是否存活（还没有运行完毕）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public final void  &lt;code&gt;setDaemon(boolean on)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将此线程标记为守护线程或用户线程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public &lt;strong&gt;static&lt;/strong&gt; boolean  &lt;code&gt;interrupted()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断当前线程是否被打断，清除打断标记&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public &lt;strong&gt;static&lt;/strong&gt; Thread  &lt;code&gt;currentThread()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;获取当前线程对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public &lt;strong&gt;static&lt;/strong&gt; void  &lt;code&gt;sleep(long time)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;让当前线程休眠 time 毫秒，同时让出 CPU 时间片。&lt;strong&gt;Thread.sleep(0)&lt;/strong&gt; : 让操作系统立刻重新进行一次 CPU 竞争&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public &lt;strong&gt;static&lt;/strong&gt; native void  &lt;code&gt;yield()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提示线程调度器&lt;strong&gt;让出当前线程对 CPU 的使用&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;start-与-run&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#start-与-run&#34;&gt;#&lt;/a&gt; start () 与 run ()&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;直接调用  &lt;code&gt;start()&lt;/code&gt;  方法的话，可启动新的线程（进入 Runnable 状态），通过新线程间接执行  &lt;code&gt;run()&lt;/code&gt;  方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接调用  &lt;code&gt;run()&lt;/code&gt;  方法的话，是在 main 线程下作为普通方法执行，不会启动新线程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;run () 方法中的异常不能抛出，只能 try/catch&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为父类中没有抛出任何异常，子类不能比父类抛出更多的异常&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常不能跨线程传播回 main () 中&lt;/strong&gt;，因此必须在本地进行处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sleep-与-yield&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sleep-与-yield&#34;&gt;#&lt;/a&gt; sleep () 与 yield ()&lt;/h3&gt;
&lt;p&gt;sleep：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用 sleep 会让当前线程从  &lt;code&gt;Running&lt;/code&gt;  进入  &lt;code&gt;Timed Waiting&lt;/code&gt;  状态（计时等待）&lt;/li&gt;
&lt;li&gt;sleep () 方法的过程中，&lt;strong&gt;线程不会释放对象锁&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;其它线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出 InterruptedException&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;睡眠结束后的线程未必会立刻得到执行，需要抢占 CPU&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;yield：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用 yield 会让提示线程调度器&lt;font color=&#39;red&#39;&gt;让出当前线程对 CPU 的使用&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;具体的实现依赖于操作系统的任务调度器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;会放弃 CPU 资源，但不会释放锁资源&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sleep-与-wait&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sleep-与-wait&#34;&gt;#&lt;/a&gt; sleep () 与 wait ()&lt;/h3&gt;
&lt;p&gt;共同点：两者都可以暂停线程的执行。&lt;/p&gt;
&lt;p&gt;区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;sleep()&lt;/code&gt;  方法没有释放锁，而  &lt;code&gt;wait()&lt;/code&gt;  方法释放了锁&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt; &lt;code&gt;wait()&lt;/code&gt;  通常被用于线程间交互 / 通信， &lt;code&gt;sleep()&lt;/code&gt;  通常被用于暂停执行&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait()&lt;/code&gt;  方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的  &lt;code&gt;notify()&lt;/code&gt;  或者  &lt;code&gt;notifyAll()&lt;/code&gt;  方法。 &lt;code&gt;sleep()&lt;/code&gt;  方法执行完成后，线程会自动苏醒，或者也可以使用  &lt;code&gt;wait(long timeout)&lt;/code&gt;  超时后线程会自动苏醒。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt; &lt;code&gt;sleep()&lt;/code&gt;  是  &lt;code&gt;Thread&lt;/code&gt;  类的静态本地方法， &lt;code&gt;wait()&lt;/code&gt;  则是  &lt;code&gt;Object&lt;/code&gt;  类的本地方法&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;说说线程的生命周期和状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说说线程的生命周期和状态&#34;&gt;#&lt;/a&gt; 说说线程的生命周期和状态？&lt;/h2&gt;
&lt;p&gt;在  &lt;code&gt;java.lang.Thread.State&lt;/code&gt;  这个枚举类中给出了 Java 线程的六种线程状态：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;线程状态&lt;/th&gt;
&lt;th&gt;导致状态发生条件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;NEW（初始）&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;线程刚被创建，但还没有调用  &lt;code&gt;start()&lt;/code&gt;  。只有线程对象，没有线程特征。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;RUNNABLE（运行）&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;线程调用了  &lt;code&gt;start()&lt;/code&gt;  ，可能正在运行，也可能在等待运行，这取决于操作系统处理器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;BLOCKED（锁阻塞）&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;需要等待锁释放。当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入 Blocked 状态；当该线程持有锁时，该线程将变成 Runnable 状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;WAITING（无限等待）&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;表示该线程需要等待其他线程做出一些特定动作（通知或中断）。一个线程在等待另一个线程时，该线程进入 Waiting 状态，进入这个状态后不能自动唤醒，必须等待另一个线程调用 notify 或者 notifyAll 方法才能唤醒。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;TIME_WAITING（计时等待）&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;可以在指定的时间后自行返回，而不是像 WAITING 那样一直等待。有几个方法有超时参数，调用将进入 Timed Waiting 状态，这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有 Thread.sleep 、Object.wait&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;TERMINATED（终止）&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;表示该线程已经运行完毕。run 方法正常退出而死亡，或者因为没有捕获的异常终止了 run 方法而死亡。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Java 线程状态转移图：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图源：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVU9yWHFsX0xoT0Q4ZGhUcV9FUEkwdw==&#34;&gt;挑错 |《Java 并发编程的艺术》中关于线程状态的三处错误&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/github/javaguide/java/concurrent/640.png&#34; alt=&#34;Java 线程状态变迁图&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由上图可以看出：线程创建之后它将处于 &lt;strong&gt;NEW（新建）&lt;/strong&gt; 状态，调用  &lt;code&gt;start()&lt;/code&gt;  方法后开始运行，线程这时候处于 &lt;strong&gt;READY（可运行）&lt;/strong&gt; 状态。可运行状态的线程获得了 CPU 时间片（timeslice）后就处于 &lt;strong&gt;RUNNING（运行）&lt;/strong&gt; 状态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当线程执行  &lt;code&gt;wait()&lt;/code&gt;  方法之后，线程进入 &lt;strong&gt;WAITING（无限等待）&lt;/strong&gt; 状态，需要依靠其他线程的通知才能够返回到 RUNNABLE 状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TIMED_WAITING (计时等待)&lt;/strong&gt; 状态相当于在 WAITING 状态的基础上增加了超时限制，比如通过  &lt;code&gt;sleep（long millis）&lt;/code&gt; 方法或  &lt;code&gt;wait（long millis）&lt;/code&gt; 方法可以将线程置于 TIMED_WAITING 状态。当超时时间结束后，线程将会返回到 RUNNABLE 状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当线程进入  &lt;code&gt;synchronized&lt;/code&gt;  方法 / 块或者调用  &lt;code&gt;wait&lt;/code&gt;  后（被  &lt;code&gt;notify&lt;/code&gt; ）重新进入  &lt;code&gt;synchronized&lt;/code&gt;  方法 / 块，但是锁被其它线程占有，这个时候线程就会进入 &lt;strong&gt;BLOCKED（锁阻塞）&lt;/strong&gt; 状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程在执行完了  &lt;code&gt;run()&lt;/code&gt;  方法之后将会进入到 &lt;strong&gt;TERMINATED（终止）&lt;/strong&gt; 状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220524203355448.png&#34; alt=&#34;image-20220524203355448&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;什么是线程上下文切换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是线程上下文切换&#34;&gt;#&lt;/a&gt; 什么是线程上下文切换？&lt;/h2&gt;
&lt;p&gt;线程在执行过程中会有自己的运行条件和状态（也称上下文），在上下文切换过程中，需要保存和恢复的资源包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;寄存器&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;程序计数器（PC）&lt;/font&gt;：保存当前任务执行的下一条指令的地址，以便在切换回来时继续执行。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;栈指针（SP）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;内存管理单元（MMU）&lt;/font&gt;：保存当前任务的页表、段表等内存管理信息，以便在切换回来时继续使用该任务的内存映射。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;文件描述符表&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;环境变量&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当出现如下情况的时候，线程会从占用 CPU 状态中退出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主动让出 CPU，比如调用了  &lt;code&gt;sleep()&lt;/code&gt; ,  &lt;code&gt;wait()&lt;/code&gt;  等。&lt;/li&gt;
&lt;li&gt;时间片用完，因为操作系统要防止一个线程或者进程长时间占用 CPU 导致其他线程或者进程饿死。&lt;/li&gt;
&lt;li&gt;调用了阻塞类型的系统中断，比如请求 IO，线程被阻塞。&lt;/li&gt;
&lt;li&gt;被终止或结束运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这其中前三种都会发生线程切换，线程切换意味着&lt;strong&gt;需要保存当前线程的上下文，留待线程下次占用 CPU 时恢复现场。并加载下一个将要占用 CPU 的线程上下文&lt;/strong&gt;。这就是所谓的上下文切换。&lt;/p&gt;
&lt;p&gt;上下文切换是现代操作系统的基本功能，因其每次需要保存信息恢复信息，这将会占用 CPU，内存等系统资源进行处理，也就意味着效率会有一定损耗，&lt;font color=&#39;red&#39;&gt;如果频繁切换就会造成整体效率低下&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&#34;什么是线程死锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是线程死锁&#34;&gt;#&lt;/a&gt; 什么是线程死锁？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b3AuaW50ZXJ2aWV3Z3VpZGUuY24vaXNzdWUvMzAz&#34;&gt;说说你了解的死锁？包括死锁产生原因、必要条件、处理方法、死锁恢复以及死锁预防等（死锁相关问题大总结，超全！）&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线程死锁描述的是这样一种情况：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。&lt;/p&gt;
&lt;p&gt;如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以&lt;strong&gt;这两个线程就会互相等待，而进入死锁状态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/github/javaguide/java/2019-4%E6%AD%BB%E9%94%811.png&#34; alt=&#34;线程死锁示意图 &#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;死锁产生的原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁产生的原因&#34;&gt;#&lt;/a&gt; 死锁产生的原因&lt;/h3&gt;
&lt;p&gt;理论上认为死锁产生有以下四个必要条件，缺一不可：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;互斥&lt;/strong&gt;：该资源任意一个时刻只由一个线程占用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求并保持&lt;/strong&gt;：一个线程因请求资源而阻塞时，对已获得的资源保持不放。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不剥夺&lt;/strong&gt;：线程已获得的资源在未使用完之前，不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循环等待&lt;/strong&gt;：若干线程之间形成一种头尾相接的循环等待资源关系。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;如何预防-避免死锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何预防-避免死锁&#34;&gt;#&lt;/a&gt; 如何预防、避免死锁？&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;如何预防死锁？&lt;/font&gt;破坏死锁的产生的必要条件即可：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;破坏请求并保持条件：&lt;strong&gt;一次性申请所有的资源&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;破坏不剥夺条件：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以&lt;strong&gt;主动释放自身占有的资源&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;破坏循环等待条件：靠&lt;strong&gt;按序申请资源&lt;/strong&gt;来预防。按某一顺序申请资源，释放资源则反序释放。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;如何避免死锁？&lt;/font&gt;避免死锁就是&lt;strong&gt;在资源分配时，借助于算法（比如银行家算法）对资源分配进行计算评估，使其进入安全状态&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;安全状态&lt;/strong&gt;：指的是系统能够按照某种线程推进顺序（P1、P2、P3.....Pn）来为每个线程分配所需资源，直到&lt;font color=&#39;red&#39;&gt;满足每个线程对资源的最大需求，使每个线程都可顺利完成&lt;/font&gt;。称  &lt;code&gt;&amp;lt;P1、P2、P3.....Pn&amp;gt;&lt;/code&gt;  序列为安全序列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;为什么-wait-定义在-object-类中而不是-thread-类中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么-wait-定义在-object-类中而不是-thread-类中&#34;&gt;#&lt;/a&gt; 为什么 wait () 定义在 Object 类中，而不是 Thread 类中？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;wait()&lt;/code&gt;  是让获得对象锁的线程实现等待，会自动释放当前线程占有的对象锁&lt;/strong&gt;。每个对象（ &lt;code&gt;Object&lt;/code&gt; ）都拥有对象锁，既然要释放当前线程占有的对象锁，并让其进入 WAITING 状态，自然是要操作对应的对象（ &lt;code&gt;Object&lt;/code&gt; ）而非当前的线程（ &lt;code&gt;Thread&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;类似的问题：为什么  &lt;code&gt;sleep()&lt;/code&gt;  方法定义在  &lt;code&gt;Thread&lt;/code&gt;  中？&lt;/p&gt;
&lt;p&gt;因为 &lt;strong&gt; &lt;code&gt;sleep()&lt;/code&gt;  是让当前线程暂停执行，不涉及到对象类，也不需要获得对象锁&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;可以直接调用-thread-类的-run-吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可以直接调用-thread-类的-run-吗&#34;&gt;#&lt;/a&gt; 可以直接调用 Thread 类的 run () 吗？&lt;/h2&gt;
&lt;p&gt;new 一个  &lt;code&gt;Thread&lt;/code&gt; ，线程进入了新建状态。调用  &lt;code&gt;start()&lt;/code&gt;  方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。&lt;font color=&#39;red&#39;&gt;  &lt;code&gt;start()&lt;/code&gt;  会执行线程的相应准备工作，然后自动执行  &lt;code&gt;run()&lt;/code&gt;  方法的内容&lt;/font&gt;，这是真正的多线程工作。但是，&lt;font color=&#39;red&#39;&gt;直接执行  &lt;code&gt;run()&lt;/code&gt;  方法，会把  &lt;code&gt;run()&lt;/code&gt;  方法当成一个 main 线程下的普通方法去执行，并不会在某个线程中执行它&lt;/font&gt;，所以这并不是多线程工作。&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;直接调用  &lt;code&gt;start()&lt;/code&gt;  方法的话，可启动新的线程（进入 Runnable 状态），通过新线程间接执行  &lt;code&gt;run()&lt;/code&gt;  方法。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;直接调用  &lt;code&gt;run()&lt;/code&gt;  方法的话，是在 main 线程下作为普通方法执行，不会启动新线程。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;同步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步&#34;&gt;#&lt;/a&gt; 同步&lt;/h1&gt;
&lt;h2 id=&#34;临界区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#临界区&#34;&gt;#&lt;/a&gt; 临界区&lt;/h2&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;临界资源&lt;/font&gt;：一次仅允许一个进程使用的资源成为临界资源&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;临界区&lt;/font&gt;：访问临界资源的代码块&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;竞态条件&lt;/font&gt;：多个线程在临界区内执行，由于代码的执行序列不同而导致结果无法预测，称之为发生了竞态条件&lt;/p&gt;
&lt;p&gt;一个程序运行多个线程是没有问题，多个线程读共享资源也没有问题，&lt;font color=&#39;red&#39;&gt;在多个线程对共享资源读写操作时发生指令交错，就会出现问题&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;为了避免临界区的竞态条件发生（解决线程安全问题）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阻塞式的解决方案：synchronized，lock&lt;/li&gt;
&lt;li&gt;非阻塞式的解决方案：原子变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;管程（monitor）&lt;/font&gt;：也称监视器，指的是&lt;font color=&#39;red&#39;&gt;管理共享变量以及对共享变量的操作过程，让它们支持并发&lt;/font&gt;。翻译为 Java 就是 **&lt;font color=&#39;red&#39;&gt;管理类的成员变量和成员方法，让这个类是线程安全的&lt;/font&gt;**。实现了&lt;font color=&#39;red&#39;&gt;同一时刻，只有一个线程在执行管程的某个子程序&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;synchronized：对象锁，保证了临界区内代码的原子性&lt;/strong&gt;，采用互斥的方式让同一时刻至多只有一个线程能持有对象锁，其它线程获取这个对象锁时会阻塞，保证拥有锁的线程可以安全的执行临界区内的代码，不用担心线程上下文切换。&lt;/p&gt;
&lt;p&gt;互斥和同步都可以采用 synchronized 关键字来完成，区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;互斥&lt;/font&gt;：同一时刻只能有一个线程执行临界区代码&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;同步&lt;/font&gt;：是由于线程执行的先后、顺序不同，需要一个线程等待其它线程运行到某个点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;性能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程安全：性能差&lt;/li&gt;
&lt;li&gt;线程不安全：性能好，假如开发中不会存在多线程安全问题，建议使用线程不安全的设计类&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;以下内容，参考《&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1KVk0tbnE2aHUyMmUubWQ=&#34;&gt;JVM 笔记.md&lt;/span&gt;》的第五章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;乐观锁和悲观锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#乐观锁和悲观锁&#34;&gt;#&lt;/a&gt; 乐观锁和悲观锁&lt;/h2&gt;
&lt;h3 id=&#34;数据库悲观锁和乐观锁的原理和应用场景分别有什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库悲观锁和乐观锁的原理和应用场景分别有什么&#34;&gt;#&lt;/a&gt; 数据库悲观锁和乐观锁的原理和应用场景分别有什么？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;悲观锁&lt;/font&gt;：&lt;strong&gt;先获取锁，再进行业务操作&lt;/strong&gt;。例如  &lt;code&gt;synchronized&lt;/code&gt;  和  &lt;code&gt;ReentrantLock&lt;/code&gt; 。一般就是利用类似 SELECT … FOR UPDATE 这样的语句，对数据加锁，避免其他事务意外修改数据。&lt;br /&gt;
当数据库执行 SELECT … FOR UPDATE 时会获取被 select 中的数据行的行锁， select for update 获取的行锁会在当前事务结束时自动释放，因此必须在事务中使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;乐观锁&lt;/font&gt;：&lt;strong&gt;先进行业务操作，只在最后实际更新数据时检查数据是否被更新过&lt;/strong&gt;。Java 并发包中的 AtomicFieldUpdater 类似，也是利用 CAS 机制，并不会对数据加锁，而是通过对比数据的时间戳或者版本号，来实现乐观锁需要的版本判断。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;synchronized-关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#synchronized-关键字&#34;&gt;#&lt;/a&gt; synchronized 关键字&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;独占锁&lt;/strong&gt;（悲观锁）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;为什么把-jdk-16-之前的-synchronized-称为重量级锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么把-jdk-16-之前的-synchronized-称为重量级锁&#34;&gt;#&lt;/a&gt; 为什么把 JDK 1.6 之前的 synchronized 称为重量级锁？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;JDK 1.6 之前的 synchronized 是重量级锁主要是因为：其实现方式会导致性能上的较大损耗。&lt;/li&gt;
&lt;li&gt;在 JDK 1.6 之前，synchronized 关键字&lt;strong&gt;使用的是对象级别的锁&lt;/strong&gt;，即每个对象都有一个相关的锁。&lt;strong&gt;在获取和释放锁的过程中需要进行用户态和内核态的切换，这个切换的代价比较高，消耗的时间比较多&lt;/strong&gt;，因此被称为重量级锁。&lt;/li&gt;
&lt;li&gt;在 JDK 1.6 之前的 synchronized &lt;strong&gt;在获取锁时使用的是互斥量（Mutex）来实现，这是一种悲观锁，即当某个线程获取了锁之后，其他的线程将被阻塞，直到该线程释放锁&lt;/strong&gt;。这种阻塞和唤醒线程的操作需要操作系统层面的支持，因此会有较高的开销。&lt;/li&gt;
&lt;li&gt;另外，JDK 1.6 之前的 synchronized 的实现没有进行优化，每一次锁的获取和释放都需要进行同步操作，无法做到细粒度的控制，导致锁的粒度较大，同一时间只能一个线程访问被锁定的代码块，效率较低。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，JDK 1.6 之前的 synchronized 被称为重量级锁，主要是因为它在性能和资源消耗方面存在一些不足之处。不过随着 JDK 的不断更新，synchronized 的实现方式得到了改善，JDK 1.6 之后引入了偏向锁、轻量级锁等优化措施，使得 synchronized 的性能也得到了提升。&lt;/p&gt;
&lt;h3 id=&#34;synchronized-锁升级过程偏向锁-轻量级锁-重量级锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#synchronized-锁升级过程偏向锁-轻量级锁-重量级锁&#34;&gt;#&lt;/a&gt; synchronized 锁升级过程（偏向锁、轻量级锁、重量级锁）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;偏向锁&lt;/font&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;在锁对象初始化时，对象头中的 Mark Word 会记录当前线程 ID，表示该锁对象偏向于该线程。&lt;/li&gt;
&lt;li&gt;当另一个线程也尝试获取这个锁对象时，会检查该对象头的 Mark Word，
&lt;ul&gt;
&lt;li&gt;如果记录的线程 ID 是自己，表示可以直接获取锁。&lt;/li&gt;
&lt;li&gt;如果记录的线程 ID 不是自己，会&lt;strong&gt;撤销偏向锁，升级为轻量级锁&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;轻量级锁&lt;/font&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;当多个线程尝试获取锁对象时，JVM 会为参与竞争的各个线程的栈帧中各自分配 ** 锁记录（ &lt;code&gt;Lock Record&lt;/code&gt; ）** 空间，并将锁对象的 Mark Word 拷贝到其中，称为  &lt;code&gt;Displaced Mark Word&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;然后，一个线程使用 CAS 操作尝试将对象头的 Mark Word 替换为指向自己线程栈帧中的锁记录的指针。
&lt;ul&gt;
&lt;li&gt;如果 CAS 成功，表示获取锁成功。&lt;/li&gt;
&lt;li&gt;如果 CAS 失败，那么当前线程也不会阻塞，而是通过&lt;strong&gt;自旋&lt;/strong&gt;的方式不断尝试获取锁，当达到一定次数仍未获得锁时，会进一步&lt;strong&gt;膨胀为重量级锁&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;重量级锁&lt;/font&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;当一个线程尝试获取对象锁时，发现对象已经是轻量级锁状态，但是锁的拥有者不是自己时，此时线程会进入&lt;strong&gt; BLOCKED（锁阻塞）状态&lt;/strong&gt;，开始&lt;strong&gt;锁膨胀&lt;/strong&gt;流程。&lt;/li&gt;
&lt;li&gt;升级为重量级锁时，虚拟机会在操作系统层面申请一个 ** 互斥量（Mutex）** 来保护整个对象。&lt;/li&gt;
&lt;li&gt;获取重量级锁失败的线程将会进入阻塞状态，只有当拥有锁的线程释放锁后，其他线程才有机会获取锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是，锁的升级过程中是逐级升级的，即从&lt;strong&gt;偏向锁 -&amp;gt; 轻量级锁 -&amp;gt; 重量级锁&lt;/strong&gt;。而且&lt;strong&gt;锁只能升级，不能降级&lt;/strong&gt;。这是为了防止频繁锁的请求和释放造成的性能损耗。&lt;/p&gt;
&lt;h1 id=&#34;内存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存&#34;&gt;#&lt;/a&gt; 内存&lt;/h1&gt;
&lt;h2 id=&#34;java-内存模型jmm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java-内存模型jmm&#34;&gt;#&lt;/a&gt; Java 内存模型（JMM）&lt;/h2&gt;
&lt;h2 id=&#34;volatile-关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#volatile-关键字&#34;&gt;#&lt;/a&gt; volatile 关键字&lt;/h2&gt;
&lt;h3 id=&#34;volatile实现什么能力怎么实现的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#volatile实现什么能力怎么实现的&#34;&gt;#&lt;/a&gt; volatile 实现什么能力，怎么实现的？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;能保证变量的可见性&lt;/strong&gt;：如果我们将变量声明为  &lt;code&gt;volatile&lt;/code&gt; ，表明这个变量是共享且不稳定的，&lt;font color=&#39;red&#39;&gt;每次读写都强制发生在主内存中&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;禁止指令重排&lt;/strong&gt;：当一个变量被  &lt;code&gt;volatile&lt;/code&gt;  修饰时，编译器和处理器会禁止对其进行指令重排，从而保证程序的正确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;happens-before-原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#happens-before-原则&#34;&gt;#&lt;/a&gt; happens-before 原则&lt;/h2&gt;
&lt;h1 id=&#34;无锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无锁&#34;&gt;#&lt;/a&gt; 无锁&lt;/h1&gt;
&lt;h2 id=&#34;cas&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cas&#34;&gt;#&lt;/a&gt; CAS&lt;/h2&gt;
&lt;h2 id=&#34;atomic-原子类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#atomic-原子类&#34;&gt;#&lt;/a&gt; Atomic 原子类&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Atomic 原子类是  &lt;code&gt;Java.util.concurrent&lt;/code&gt;  包中的一个类，用于提供&lt;u&gt;线程安全&lt;/u&gt;的&lt;u&gt;原子操作&lt;/u&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atomic 原子类可以保证在多线程环境下对变量的原子操作，即操作过程不会被其他线程中断，从而避免了竞态条件的发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atomic 原子类&lt;font color=&#39;red&#39;&gt;提供了一系列的方法，可以对变量进行读取、写入、比较并设置等操作&lt;/font&gt;，如 get、set、compareAndSet 等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atomic 原子类&lt;font color=&#39;red&#39;&gt;支持不同的数据类型&lt;/font&gt;，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;基本类型&lt;/font&gt;的原子类： &lt;code&gt;AtomicInteger&lt;/code&gt; （整型）、 &lt;code&gt;AtomicLong&lt;/code&gt; （长整型）、 &lt;code&gt;AtomicBoolean&lt;/code&gt; （布尔型）&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;数组类型&lt;/font&gt;的原子类： &lt;code&gt;AtomicIntegerArray&lt;/code&gt; （整型数组）、 &lt;code&gt;AtomicLongArray&lt;/code&gt; （长整型数组）、 &lt;code&gt;AtomicReferenceArray&lt;/code&gt; （引用类型数组）&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;引用类型&lt;/font&gt;的原子类： &lt;code&gt;AtomicReference&lt;/code&gt; （引用类型）、 &lt;code&gt;AtomicStampedReference&lt;/code&gt; （原子更新带有版本号的引用类型）、 &lt;code&gt;AtomicMarkableReference&lt;/code&gt; （原子更新带有标记的引用类型）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atomic 原子类的内部实现&lt;strong&gt;基于 CAS（Compare-and-Swap）算法&lt;/strong&gt;，该算法&lt;font color=&#39;red&#39;&gt;通过比较内存中的值与期望值是否一致来判断是否更新&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atomic 原子类的使用场景包括计数器、线程安全的累加器、标志位的设置等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atomic 原子类 **&lt;font color=&#39;red&#39;&gt;在高并发场景下可以提高性能，避免了使用锁造成的线程等待和上下文切换的开销&lt;/font&gt;**。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;threadlocal-类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#threadlocal-类&#34;&gt;#&lt;/a&gt; ThreadLocal 类&lt;/h2&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1-af0577dc.png&#34; alt=&#34;img&#34;  /&gt;
&lt;h3 id=&#34;有什么用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有什么用&#34;&gt;#&lt;/a&gt; 有什么用？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;ThreadLocal&lt;/code&gt;  类可以让每个线程拥有自己单独的变量副本，分配在堆内的 TLAB 中，使得每个线程中的变量相互独立，从而保证线程安全。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/68747470733a2f2f7365617a65616e2e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f696d672f4a6176612f4a564d2d4a617661382545352538362538352545352541442539382545372542422539332545362539452538342545352539422542452e706e67&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt; &lt;code&gt;ThreadLocal&lt;/code&gt;  变量是 private static 类型的，访问这个变量的每个线程都会在 TLAB 中存储这个变量的本地副本，所以是线程安全的&lt;/font&gt;。他们可以使用  &lt;code&gt;get()&lt;/code&gt;  和  &lt;code&gt;set()&lt;/code&gt;  方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。&lt;/p&gt;
&lt;h3 id=&#34;如何使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何使用&#34;&gt;#&lt;/a&gt; 如何使用？&lt;/h3&gt;
&lt;p&gt;下面简单演示一下如何在项目中实际使用  &lt;code&gt;ThreadLocal&lt;/code&gt;  。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SimpleDateFormat&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Random&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadLocalExample&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token comment&#34;&gt;// SimpleDateFormat 不是线程安全的，所以每个线程都要有自己独立的副本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadLocal&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; formatter &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadLocal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;withInitial&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;yyyyMMdd HHmm&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ThreadLocalExample&lt;/span&gt; obj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadLocalExample&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Thread Name= &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34; default Formatter = &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;formatter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toPattern&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//formatter pattern is changed here by thread, but it won&#39;t reflect to other threads&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        formatter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Thread Name= &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34; formatter = &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;formatter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toPattern&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;p&gt;从  &lt;code&gt;Thread&lt;/code&gt;  类源代码入手。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//......&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 与此线程有关的 ThreadLocal 值。由 ThreadLocal 类维护&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;ThreadLocal&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ThreadLocalMap&lt;/span&gt; threadLocals &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 与此线程有关的 InheritableThreadLocal 值。由 InheritableThreadLocal 类维护&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;ThreadLocal&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ThreadLocalMap&lt;/span&gt; inheritableThreadLocals &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//......&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;从上面  &lt;code&gt;Thread&lt;/code&gt;  类的源代码有&lt;font color=&#39;red&#39;&gt;一个 threadLocals 变量和一个 inheritableThreadLocals 变量&lt;/font&gt;，它们都是 &lt;strong&gt;ThreadLocalMap&lt;/strong&gt; 类型的变量，可以理解为  &lt;code&gt;ThreadLocal&lt;/code&gt;  类实现的定制化  &lt;code&gt;HashMap&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下这两个变量都是 null&lt;/li&gt;
&lt;li&gt;只有当前线程调用  &lt;code&gt;ThreadLocal&lt;/code&gt;  类的  &lt;code&gt;set()&lt;/code&gt;  或  &lt;code&gt;get()&lt;/code&gt;  方法时才创建它们，实际上调用的是  &lt;code&gt;ThreadLocalMap&lt;/code&gt;  类对应的  &lt;code&gt;get()&lt;/code&gt; 、 &lt;code&gt;set()&lt;/code&gt;  方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;  类的 &lt;code&gt;set()&lt;/code&gt;  方法&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 获取当前请求的线程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 取出 Thread 类内部的 threadLocals 变量 (哈希表结构)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;ThreadLocalMap&lt;/span&gt; map &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getMap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;map &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 将需要存储的值放入到这个哈希表中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;createMap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;ThreadLocalMap&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getMap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;threadLocals&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;结论：&lt;strong&gt;最终的变量是存放在当前线程的  &lt;code&gt;ThreadLocalMap&lt;/code&gt;  中，而不是  &lt;code&gt;ThreadLocal&lt;/code&gt;  上&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;  可以理解为只是  &lt;code&gt;ThreadLocalMap&lt;/code&gt;  的封装，传递了变量值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ThrealLocal&lt;/code&gt;  类中可以通过 &lt;code&gt;Thread.currentThread()&lt;/code&gt;  获取到当前线程对象后，直接通过 &lt;code&gt;getMap(Thread t)&lt;/code&gt;  可以访问到该线程的 &lt;code&gt;ThreadLocalMap&lt;/code&gt;  对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;每个 &lt;code&gt;Thread&lt;/code&gt;  中都具备一个 &lt;code&gt;ThreadLocalMap&lt;/code&gt; ，可以存储（key= &lt;code&gt;ThreadLocal&lt;/code&gt;  对象，value= Object 对象）的键值对。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;ThreadLocalMap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ThreadLocal&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; firstKey&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; firstValue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//......&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;比如我们在同一个线程中声明了两个  &lt;code&gt;ThreadLocal&lt;/code&gt;  对象的话，  &lt;code&gt;Thread&lt;/code&gt;  内部都是使用仅有的那个  &lt;code&gt;ThreadLocalMap&lt;/code&gt;  存放数据的，key 就是  &lt;code&gt;ThreadLocal&lt;/code&gt;  对象，value 就是  &lt;code&gt;ThreadLocal&lt;/code&gt;  对象调用 &lt;code&gt;set()&lt;/code&gt;  方法设置的值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;  数据结构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/github/javaguide/java/concurrent/threadlocal-data-structure.png&#34; alt=&#34;ThreadLocal 数据结构&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ThreadLocalMap&lt;/code&gt;  是  &lt;code&gt;ThreadLocal&lt;/code&gt;  的静态内部类。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/github/javaguide/java/concurrent/thread-local-inner-class.png&#34; alt=&#34;ThreadLocal内部类&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;内存泄露问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存泄露问题&#34;&gt;#&lt;/a&gt; 内存泄露问题&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ThreadLocalMap&lt;/code&gt;  中使用的&lt;font color=&#39;red&#39;&gt; key 为  &lt;code&gt;ThreadLocal&lt;/code&gt;  的弱引用&lt;/font&gt;，而 value 是强引用。所以，如果  &lt;code&gt;ThreadLocal&lt;/code&gt;  没有被外部强引用的情况下，&lt;font color=&#39;red&#39;&gt;在垃圾回收的时候，key 会被清理掉&lt;/font&gt;，而 value 不会被清理掉。这样一来， &lt;code&gt;ThreadLocalMap&lt;/code&gt;  中就&lt;font color=&#39;red&#39;&gt;会出现 key 为 null 的 Entry&lt;/font&gt;。假如我们不做任何措施的话，&lt;font color=&#39;red&#39;&gt;value 永远无法被 GC 回收&lt;/font&gt;，这个时候就可能会产生&lt;strong&gt;内存泄露&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ThreadLocalMap&lt;/code&gt;  实现中已经考虑了这种情况，在调用  &lt;code&gt;set()&lt;/code&gt; 、 &lt;code&gt;get()&lt;/code&gt; 、 &lt;code&gt;remove()&lt;/code&gt;  方法的时候，会清理掉 key 为 null 的记录。使用完  &lt;code&gt;ThreadLocal&lt;/code&gt;  方法后最好手动调用  &lt;code&gt;remove()&lt;/code&gt;  方法。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Entry&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;WeakReference&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ThreadLocal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/** The value associated with this ThreadLocal. */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ThreadLocal&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; v&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; v&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;弱引用介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一个对象只具有弱引用，那就类似于&lt;strong&gt;可有可无的生活用品&lt;/strong&gt;。弱引用与软引用的区别在于：&lt;font color=&#39;red&#39;&gt;只具有弱引用的对象拥有更短暂的生命周期&lt;/font&gt;。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，&lt;font color=&#39;red&#39;&gt;不管当前内存空间足够与否，都会回收它的内存&lt;/font&gt;。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。&lt;/p&gt;
&lt;p&gt;弱引用可以和一个&lt;font color=&#39;red&#39;&gt;引用队列（ReferenceQueue）&lt;/font&gt;联合使用，如果弱引用所引用的对象被垃圾回收，Java 虚拟机就会把这个弱引用加入到与之关联的引用队列中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;你的理解小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#你的理解小结&#34;&gt;#&lt;/a&gt; 你的理解？（小结）&lt;/h3&gt;
&lt;p&gt;ThreadLocal 提供了一种方式，在多线程环境下，&lt;strong&gt;每个线程都可以独立地维护自己的变量副本，互不干扰&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在多线程编程中，共享变量的访问可能会引发线程安全的问题。比如多个线程同时修改同一个变量，可能会导致数据不一致或者竞态条件等问题。而 ThreadLocal 则可以解决这个问题，它为每个线程提供了一个独立的变量副本，每个线程都可以访问和修改自己的变量副本，而不会影响其他线程的副本。这样就避免了多个线程之间的竞争和冲突。&lt;/p&gt;
&lt;p&gt;ThreadLocal 的工作原理是，&lt;strong&gt;在每个线程内部维护一个  &lt;code&gt;ThreadLocalMap&lt;/code&gt; ，用于存储线程局部变量的副本，（key=ThreadLocal 对象，value=Object 对象）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当线程需要访问这个变量时，首先通过 ThreadLocal 对象获取当前线程的副本，如果不存在则创建一个新的副本，并存储到 Map 中。而&lt;font color=&#39;red&#39;&gt;线程对变量的访问和修改都是通过 ThreadLocal 对象进行，保了线程间的隔离性&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;ThreadLocal 的典型应用场景包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;数据库连接管理&lt;/font&gt;：每个线程都可以拥有自己的数据库连接，避免了多个线程之间的数据库连接竞争和冲突。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;用户身份信息传递&lt;/font&gt;：将用户身份信息存储在 ThreadLocal 中，可以在多个方法中方便地获取和传递，避免了显式地传递参数。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;事务管理&lt;/font&gt;：将事务对象存储在 ThreadLocal 中，可以在多个方法中共享同一个事务，避免了事务对象的传递和管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是，使用 ThreadLocal 时&lt;font color=&#39;red&#39;&gt;要注意及时清理资源，避免内存泄漏问题&lt;/font&gt;。一般可以通过在 ThreadLocal 使用完毕后，调用  &lt;code&gt;remove()&lt;/code&gt;  方法进行清理。&lt;/p&gt;
&lt;h1 id=&#34;同步器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步器&#34;&gt;#&lt;/a&gt; 同步器&lt;/h1&gt;
&lt;h2 id=&#34;aqs-抽象类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aqs-抽象类&#34;&gt;#&lt;/a&gt; AQS 抽象类&lt;/h2&gt;
&lt;h3 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;AQS 的全称为  &lt;code&gt;AbstractQueuedSynchronizer&lt;/code&gt;  ，翻译过来的意思就是&lt;font color=&#39;red&#39;&gt;抽象队列同步器&lt;/font&gt;。这个类在  &lt;code&gt;java.util.concurrent.locks&lt;/code&gt;  包下面。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/AQS.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;AQS 就是一个抽象类，主要用来&lt;strong&gt;简单且高效地构造出大量的同步器&lt;/strong&gt;，&lt;font color=&#39;red&#39;&gt;比如  &lt;code&gt;ReentrantLock&lt;/code&gt; ， &lt;code&gt;Semaphore&lt;/code&gt; ，其他的诸如  &lt;code&gt;ReentrantReadWriteLock&lt;/code&gt; ， &lt;code&gt;SynchronousQueue&lt;/code&gt;  等等皆是基于 AQS 的&lt;/font&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;AbstractQueuedSynchronizer&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;AbstractOwnableSynchronizer&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;Serializable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;底层原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#底层原理&#34;&gt;#&lt;/a&gt; 底层原理&lt;/h3&gt;
&lt;h4 id=&#34;核心思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#核心思想&#34;&gt;#&lt;/a&gt; 核心思想&lt;/h4&gt;
&lt;p&gt;AQS 核心思想是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果被请求的共享资源是&lt;font color=&#39;gree&#39;&gt;空闲&lt;/font&gt;的，则将当前请求资源的线程设置为有效的&lt;font color=&#39;red&#39;&gt;工作线程&lt;/font&gt;，并且将共享资源设置为&lt;font color=&#39;red&#39;&gt;锁定状态&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;如果被请求的共享资源&lt;font color=&#39;gree&#39;&gt;被占用&lt;/font&gt;了，那么就需要&lt;font color=&#39;red&#39;&gt;一套线程阻塞等待以及被唤醒时锁分配的机制&lt;/font&gt;，这个机制是基于 &lt;strong&gt;CLH 队列锁&lt;/strong&gt; （Craig, Landin, and Hagersten locks） 实现的，即&lt;font color=&#39;red&#39;&gt;将暂时获取不到锁的线程加入到队列中&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CLH 锁是&lt;font color=&#39;red&#39;&gt;对自旋锁的一种改进&lt;/font&gt;，是一个 **&lt;font color=&#39;red&#39;&gt;虚拟的双向 FIFO 队列&lt;/font&gt;**（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。&lt;strong&gt;AQS 将每个请求共享资源的线程封装成 CLH 队列锁的一个结点（Node）来实现锁的分配&lt;/strong&gt;。每个结点包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;thread&lt;/font&gt;：线程的引用&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;waitStatus&lt;/font&gt;：当前节点在队列中的状态&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;prev&lt;/font&gt;：前驱节点&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;next&lt;/font&gt;：后继节点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CLH 队列结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/clh-queue-structure.png&#34; alt=&#34;CLH 队列结构&#34; /&gt;&lt;/p&gt;
&lt;p&gt;AQS( &lt;code&gt;AbstractQueuedSynchronizer&lt;/code&gt; ) 的核心原理图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231013130403824.png&#34; alt=&#34;image-20231013130403824&#34; /&gt;&lt;/p&gt;
&lt;p&gt;AQS 使用 &lt;strong&gt;int 成员变量  &lt;code&gt;state&lt;/code&gt;  表示同步状态&lt;/strong&gt;，通过内置的 &lt;strong&gt;双向 FIFO 线程等待队列&lt;/strong&gt; 来完成获取资源线程的排队工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt;  变量由  &lt;code&gt;volatile&lt;/code&gt;  修饰，保证线程可见性，用于展示当前临界资源的获锁情况。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 共享变量，使用 volatile 修饰保证线程可见性&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;volatile&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; state&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另外，状态信息  &lt;code&gt;state&lt;/code&gt;  可以通过  &lt;code&gt;protected&lt;/code&gt;  类型的 &lt;code&gt;getState()&lt;/code&gt; 、 &lt;code&gt;setState()&lt;/code&gt;  和 &lt;code&gt;compareAndSetState()&lt;/code&gt;  进行操作。并且，这几个方法都是  &lt;code&gt;final&lt;/code&gt;  修饰的，在子类中无法被重写。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 返回同步状态的当前值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; state&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token comment&#34;&gt;// 设置同步状态的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; newState&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; newState&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 原子地（CAS 操作）将同步状态值设置为给定值 update 如果当前同步状态的值等于 expect（期望值）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;compareAndSetState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; expect&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; update&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; unsafe&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;compareAndSwapInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stateOffset&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; expect&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; update&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;以&lt;strong&gt;可重入式的独占锁&lt;/strong&gt;  &lt;code&gt;ReentrantLock&lt;/code&gt;  为例，它的内部维护了一个  &lt;code&gt;state&lt;/code&gt;  变量，&lt;font color=&#39;red&#39;&gt;表示这个锁被多少个线程所持有&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt;  的&lt;font color=&#39;red&#39;&gt;初始值为 0&lt;/font&gt;，表示锁处于未锁定状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当线程 A 调用  &lt;code&gt;lock()&lt;/code&gt;  方法时，会尝试通过  &lt;code&gt;tryAcquire()&lt;/code&gt;  方法独占该锁，并让  &lt;code&gt;state&lt;/code&gt;  的值&lt;font color=&#39;red&#39;&gt;加 1&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果成功了，那么线程 A 就获取到了锁。&lt;/li&gt;
&lt;li&gt;如果失败了，那么线程 A 就会&lt;font color=&#39;red&#39;&gt;被加入到一个等待队列（CLH 队列）中&lt;/font&gt;，直到其他线程释放该锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假设线程 A 获取锁成功了，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;释放锁之前，A 线程自己是可以重复获取此锁的&lt;/font&gt;&lt;/strong&gt;（ &lt;code&gt;state&lt;/code&gt;  会累加）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这就是&lt;strong&gt;可重入性&lt;/strong&gt;的体现：&lt;strong&gt;一个线程可以多次获取同一个锁而不会被阻塞&lt;/strong&gt;。但是，这也意味着，一个线程必须释放与获取的次数相同的锁，才能让  &lt;code&gt;state&lt;/code&gt;  的值回到 0，也就是让锁恢复到未锁定状态。只有这样，其他等待的线程才能有机会获取该锁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程 A 尝试获取  &lt;code&gt;ReentrantLock&lt;/code&gt;  锁的过程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/aqs-exclusive-mode-acquire-lock.png&#34; alt=&#34;AQS 独占模式获取锁&#34; /&gt;&lt;/p&gt;
&lt;center&gt;（AQS 独占模式获取锁）&lt;/center&gt;
&lt;hr /&gt;
&lt;p&gt;再以倒计时器  &lt;code&gt;CountDownLatch&lt;/code&gt;  以例，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;任务分为 N 个子线程去执行， &lt;code&gt;state&lt;/code&gt;  也初始化为 N（&lt;font color=&#39;red&#39;&gt;表示子线程的个数&lt;/font&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这 N 个子线程开始执行任务，每执行完一个子线程，就调用一次  &lt;code&gt;countDown()&lt;/code&gt;  方法。该方法会尝试使用 CAS 操作，让  &lt;code&gt;state&lt;/code&gt;  的值减少 1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当所有的子线程都执行完毕后（即  &lt;code&gt;state&lt;/code&gt;  的值变为 0）， &lt;code&gt;CountDownLatch&lt;/code&gt;  会调用  &lt;code&gt;unpark()&lt;/code&gt;  方法，唤醒主线程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;park () 和 unpark () 是 LockSupport 类中的方法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;LockSupport&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;park&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 暂停当前线程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;LockSupport&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;unpark&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;暂停线程对象&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 恢复某个线程的运行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主线程被唤醒后就可以从  &lt;code&gt;CountDownLatch&lt;/code&gt;  中的  &lt;code&gt;await()&lt;/code&gt;  方法（而非 AQS 中的）返回，继续执行后续的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;资源共享方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资源共享方式&#34;&gt;#&lt;/a&gt; 资源共享方式&lt;/h4&gt;
&lt;p&gt;AQS 定义两种资源共享方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Exclusive&lt;/code&gt; ：&lt;strong&gt;独占式&lt;/strong&gt;，只有一个线程能执行，如 &lt;code&gt;ReentrantLock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Share&lt;/code&gt; ：&lt;strong&gt;共享式&lt;/strong&gt;，多个线程可同时执行，如 &lt;code&gt;Semaphore&lt;/code&gt; / &lt;code&gt;CountDownLatch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;一般来说，自定义同步器的共享方式要么是独占，要么是共享&lt;/font&gt;，他们也只需实现 &lt;code&gt;tryAcquire-tryRelease&lt;/code&gt; 、 &lt;code&gt;tryAcquireShared-tryReleaseShared&lt;/code&gt;  中的一种即可。&lt;font color=&#39;red&#39;&gt;但 AQS 也支持自定义同步器同时实现独占和共享两种方式&lt;/font&gt;，如 &lt;code&gt;ReentrantReadWriteLock&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;自定义同步器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义同步器&#34;&gt;#&lt;/a&gt; 自定义同步器&lt;/h4&gt;
&lt;p&gt;同步器的设计是基于&lt;font color=&#39;red&#39;&gt;模板方法模式&lt;/font&gt;的，如果需要自定义同步器一般的方式是这样：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;继承  &lt;code&gt;AbstractQueuedSynchronizer&lt;/code&gt; （AQS 抽象类），并重写指定的钩子方法&lt;/font&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;AQS 使用了模板方法模式，自定义同步器时，需要重写下面几个 AQS 提供的钩子方法：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 独占方式。尝试获取资源，成功则返回 true，失败则返回 false。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;tryAcquire&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 独占方式。尝试释放资源，成功则返回 true，失败则返回 false。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;tryRelease&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 共享方式。尝试获取资源。负数表示失败；0 表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;tryAcquireShared&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 共享方式。尝试释放资源，成功则返回 true，失败则返回 false。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;tryReleaseShared&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 该线程是否正在独占资源。只有用到 condition 才需要去实现它。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;isHeldExclusively&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;钩子方法&lt;/strong&gt;是一种&lt;font color=&#39;red&#39;&gt;被声明在抽象类中&lt;/font&gt;的方法，一般使用&lt;font color=&#39;red&#39;&gt;  &lt;code&gt;protected&lt;/code&gt;  关键字&lt;/font&gt;修饰，它可以是空方法（由子类实现），也可以是默认实现的方法。模板设计模式通过钩子方法控制固定步骤的实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;除了上面提到的钩子方法之外，AQS 类中的其他方法都是  &lt;code&gt;final&lt;/code&gt;  ，所以无法被其他类重写&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;常见同步工具类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见同步工具类&#34;&gt;#&lt;/a&gt; 常见同步工具类&lt;/h3&gt;
&lt;p&gt;下面介绍几个基于 AQS 的常见同步工具类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;Semaphore（信号量）&lt;/font&gt;：共享式，AQS 的  &lt;code&gt;state&lt;/code&gt;  值为  &lt;code&gt;permits&lt;/code&gt; ，表示许可证的数量，只有拿到许可证的线程才能执行。可以用来控制同时访问特定资源的线程数量。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;CountDownLatch（倒计时器）&lt;/font&gt;：共享式，AQS 的  &lt;code&gt;state&lt;/code&gt;  值为  &lt;code&gt;count&lt;/code&gt; ，表示允许  &lt;code&gt;count&lt;/code&gt;  个线程阻塞在一个地方，直至所有线程的任务都执行完毕。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;CyclicBarrier（循环栅栏）&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;semaphore信号量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#semaphore信号量&#34;&gt;#&lt;/a&gt; Semaphore（信号量）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;共享式&lt;/strong&gt;的资源访问方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;Semaphore&lt;/code&gt;  (信号量) 是共享锁，默认构造 AQS 的  &lt;code&gt;state&lt;/code&gt;  值为  &lt;code&gt;permits&lt;/code&gt; ，理解为许可证的数量，只有拿到许可证的线程才能执行&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Semaphore 的使用简单，我们这里假设有 N (N&amp;gt;5) 个线程来获取  &lt;code&gt;Semaphore&lt;/code&gt;  中的共享资源。下面的代码将  &lt;code&gt;permits&lt;/code&gt;  初始化为 5，表示同一时刻只有 5 个线程能获取到共享资源，其他线程都会阻塞，只有获取到共享资源的线程才能执行。等到有线程释放了共享资源，其他阻塞的线程才能获取到。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 初始共享资源数量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Semaphore&lt;/span&gt; semaphore &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Semaphore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 获取 1 个许可&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;semaphore&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;acquire&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 释放 1 个许可&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;semaphore&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;font color=&#39;red&#39;&gt;当初始的  &lt;code&gt;permits&lt;/code&gt;  为 1 的时候， &lt;code&gt;Semaphore&lt;/code&gt;  退化为独占锁&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Semaphore&lt;/code&gt;  有两种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;公平模式&lt;/font&gt;：调用  &lt;code&gt;acquire()&lt;/code&gt;  方法的顺序就是获取许可证的顺序，遵循 &lt;font color=&#39;red&#39;&gt;FIFO&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;非公平模式&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;抢占式&lt;/font&gt;，也是&lt;font color=&#39;red&#39;&gt;默认&lt;/font&gt;的模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;Semaphore&lt;/code&gt;  的两个构造方法如下，二者都必须提供  &lt;code&gt;permits&lt;/code&gt;  ，其中第二个构造方法可以通过提供  &lt;code&gt;fair&lt;/code&gt;  指定是公平模式 / 非公平模式，默认非公平模式。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Semaphore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;permits&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  	sync &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NonfairSync&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;permits&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Semaphore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;permits&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; fair&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  	sync &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fair &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FairSync&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;permits&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NonfairSync&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;permits&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;Semaphore&lt;/code&gt;  通常用于那些对资源有明确访问数量限制的场景比如限流（仅限于单机模式，&lt;font color=&#39;red&#39;&gt;实际项目中推荐使用 Redis +Lua 来做限流&lt;/font&gt;）。&lt;/p&gt;
&lt;h5 id=&#34;原理-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理-2&#34;&gt;#&lt;/a&gt; 原理&lt;/h5&gt;
&lt;p&gt;线程调用  &lt;code&gt;semaphore.acquire()&lt;/code&gt;  尝试获取许可证，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果  &lt;code&gt;permits &amp;gt;= 0&lt;/code&gt;  的话，则表示可以获取成功。使用&lt;font color=&#39;red&#39;&gt; CAS 操作&lt;/font&gt;去修改  &lt;code&gt;permits&lt;/code&gt;  的值减 1。&lt;/li&gt;
&lt;li&gt;如果  &lt;code&gt;permits &amp;lt; 0&lt;/code&gt;  的话，则表示许可证数量不足。此时会&lt;font color=&#39;red&#39;&gt;创建一个 Node 节点加入 CLH 队列锁，挂起当前线程&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; *  获取 1 个许可证&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;acquire&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; 	 sync&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;acquireSharedInterruptibly&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 共享模式下获取许可证，获取成功则返回，失败则加入阻塞队列，挂起线程&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;acquireSharedInterruptibly&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; arg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;interrupted&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 尝试获取许可证，arg 为获取许可证个数，当可用许可证数减当前获取的许可证数结果小于 0, 则创建一个节点加入阻塞队列，挂起当前线程。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;tryAcquireShared&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;doAcquireSharedInterruptibly&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;线程调用  &lt;code&gt;semaphore.release()&lt;/code&gt;  尝试释放许可证，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并使用&lt;font color=&#39;red&#39;&gt; CAS 操作&lt;/font&gt;去修改  &lt;code&gt;permits&lt;/code&gt;  的值加 1。&lt;/li&gt;
&lt;li&gt;释放许可证成功之后，同时会&lt;font color=&#39;red&#39;&gt;唤醒 CLH 队列锁 中的一个线程&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;被唤醒的线程会重新尝试获取许可证，修改  &lt;code&gt;permits&lt;/code&gt;  的值减 1，
&lt;ul&gt;
&lt;li&gt;如果  &lt;code&gt;permits &amp;gt;= 0&lt;/code&gt;  则获取令牌成功&lt;/li&gt;
&lt;li&gt;如果  &lt;code&gt;permits &amp;lt; 0&lt;/code&gt;  则重新进入阻塞队列，挂起线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 释放一个许可证&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  	sync&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;releaseShared&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 释放共享锁，同时会唤醒同步队列中的一个线程。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;releaseShared&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; arg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 释放共享锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;tryReleaseShared&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// 唤醒同步队列中的一个线程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;doReleaseShared&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;countdownlatch倒计时器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#countdownlatch倒计时器&#34;&gt;#&lt;/a&gt; CountDownLatch（倒计时器）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;共享式&lt;/strong&gt;的资源访问方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;简介-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-3&#34;&gt;#&lt;/a&gt; 简介&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;CountDownLatch&lt;/code&gt; （倒计时器）是共享锁，默认构造 AQS 的  &lt;code&gt;state&lt;/code&gt;  值为  &lt;code&gt;count&lt;/code&gt; ，理解为允许  &lt;code&gt;count&lt;/code&gt;  个线程阻塞在一个地方，直至所有线程的任务都执行完毕&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CountDownLatch&lt;/code&gt;  是 **&lt;font color=&#39;red&#39;&gt;一次性&lt;/font&gt;** 的，&lt;font color=&#39;red&#39;&gt; &lt;code&gt;count&lt;/code&gt;  只能在构造方法中初始化一次，之后没有任何机制再次对其设置值&lt;/font&gt;，当  &lt;code&gt;CountDownLatch&lt;/code&gt;  使用完毕后，它不能再次被使用。&lt;/p&gt;
&lt;h5 id=&#34;原理-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理-3&#34;&gt;#&lt;/a&gt; 原理&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当线程调用  &lt;code&gt;countDown()&lt;/code&gt;  方法时，其实调用了  &lt;code&gt;tryReleaseShared()&lt;/code&gt;  方法以 CAS 的操作来减少  &lt;code&gt;count&lt;/code&gt; ，直至  &lt;code&gt;count&lt;/code&gt;  为 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当调用  &lt;code&gt;await()&lt;/code&gt;  方法的时候，如果  &lt;code&gt;count&lt;/code&gt;  不为 0，那就证明任务还没有执行完毕， &lt;code&gt;await()&lt;/code&gt;  方法就会一直阻塞。也就是说  &lt;code&gt;await()&lt;/code&gt;  方法之后的语句不会被执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直到  &lt;code&gt;count&lt;/code&gt;  个线程调用了  &lt;code&gt;countDown()&lt;/code&gt; ，使  &lt;code&gt;count&lt;/code&gt;  值被减为 0。或者调用  &lt;code&gt;await()&lt;/code&gt;  的线程被中断，该线程才会从阻塞中被唤醒， &lt;code&gt;await()&lt;/code&gt;  方法之后的语句得到执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用场景&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;CountDownLatch&lt;/code&gt;  的作用就是允许 count 个线程阻塞在一个地方，直至所有线程的任务都执行完毕。之前在项目中，有一个&lt;font color=&#39;red&#39;&gt;使用多线程读取多个文件&lt;/font&gt;处理的场景，我用到了  &lt;code&gt;CountDownLatch&lt;/code&gt;  。具体场景是下面这样的：&lt;/p&gt;
&lt;p&gt;我们要读取处理 6 个文件，这 6 个任务都是&lt;font color=&#39;red&#39;&gt;没有执行顺序依赖&lt;/font&gt;的任务，但是我们需要返回给用户的时候将这几个文件的处理结果进行统计整理。&lt;/p&gt;
&lt;p&gt;为此我们定义了一个线程池和 count 为 6 的  &lt;code&gt;CountDownLatch&lt;/code&gt;  对象 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用线程池处理读取任务&lt;/li&gt;
&lt;li&gt;每一个线程处理完，调用  &lt;code&gt;CountDownLatch&lt;/code&gt;  对象的  &lt;code&gt;countDown()&lt;/code&gt;  将 count 减 1&lt;/li&gt;
&lt;li&gt;当所有线程处理完，调用  &lt;code&gt;CountDownLatch&lt;/code&gt;  对象的  &lt;code&gt;await()&lt;/code&gt;  方法。直到所有文件读取完之后，才会接着执行后面的逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CountDownLatchExample1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 处理文件的数量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; threadCount &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 创建一个具有固定线程数量的线程池对象（推荐使用构造方法创建）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ExecutorService&lt;/span&gt; threadPool &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Executors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CountDownLatch&lt;/span&gt; countDownLatch &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CountDownLatch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;threadCount&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; threadCount&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; threadnum &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            threadPool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 处理文件的业务操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;//......&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 表示一个文件已经被完成&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    countDownLatch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;countDown&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        countDownLatch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;await&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        threadPool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;finish&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr /&gt;
&lt;p&gt;有没有可以改进的地方呢？** 可以使用  &lt;code&gt;CompletableFuture&lt;/code&gt;  类来改进！**Java8 的  &lt;code&gt;CompletableFuture&lt;/code&gt;  提供了很多对多线程友好的方法，使用它可以很方便地为我们编写多线程程序，什么异步、串行、并行或者等待所有线程执行完任务什么的都非常方便。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; task1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;supplyAsync&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 自定义业务操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; task6 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;supplyAsync&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 自定义业务操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; headerFuture&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;allOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;task1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;task6&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    headerFuture&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; ex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//......&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;all done. &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面的代码还可以继续优化，当任务过多的时候，把每一个 task 都列出来不太现实，可以考虑&lt;font color=&#39;red&#39;&gt;通过循环来添加任务&lt;/font&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 文件夹位置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; filePaths &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 异步处理所有文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; fileFutures &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; filePaths&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;filePath &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doSomeThing&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;filePath&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 将他们合并起来&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; allFutures &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;allOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    fileFutures&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;fileFutures&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;cyclicbarrier循环栅栏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cyclicbarrier循环栅栏&#34;&gt;#&lt;/a&gt; CyclicBarrier（循环栅栏）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;共享式&lt;/strong&gt;的资源访问方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;简介-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-4&#34;&gt;#&lt;/a&gt; 简介&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;CyclicBarrier&lt;/code&gt; （循环栅栏）和  &lt;code&gt;CountDownLatch&lt;/code&gt;  非常类似，也是共享锁，内部通过一个  &lt;code&gt;count&lt;/code&gt;  变量作为计数器，其初始值也是  &lt;code&gt;parties&lt;/code&gt;  属性（表示拦截的线程数量）的初始值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CyclicBarrier&lt;/code&gt;  也可以实现线程间的技术等待，但是它的功能比  &lt;code&gt;CountDownLatch&lt;/code&gt;  更加复杂和强大，主要应用场景类似。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CountDownLatch&lt;/code&gt;  的实现是基于 AQS 的，而 &lt;strong&gt; &lt;code&gt;CycliBarrier&lt;/code&gt;  是基于  &lt;code&gt;ReentrantLock&lt;/code&gt; ( &lt;code&gt;ReentrantLock&lt;/code&gt;  也属于 AQS 同步器) 和  &lt;code&gt;Condition&lt;/code&gt;  的&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;CyclicBarrier&lt;/code&gt;  的字面意思是&lt;font color=&#39;red&#39;&gt;可循环使用（Cyclic）的屏障（Barrier）&lt;/font&gt;。它要做的事情是：让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。&lt;/p&gt;
&lt;h5 id=&#34;原理-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理-4&#34;&gt;#&lt;/a&gt; 原理&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;难！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每当一个线程到了栅栏这里了，那么就将 count 减 1。当 count 值为 0 时，表示这是这一代最后一个线程到达栅栏，就尝试执行我们构造方法中输入的任务。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 每次拦截的线程数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; parties&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 计数器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;结合源码来简单看看。&lt;/p&gt;
&lt;p&gt;1、 &lt;code&gt;CyclicBarrier&lt;/code&gt;  默认的构造方法是  &lt;code&gt;CyclicBarrier(int parties)&lt;/code&gt; ，参数  &lt;code&gt;parties&lt;/code&gt;  表示屏障拦截的线程数量，每个线程调用  &lt;code&gt;await()&lt;/code&gt;  方法告诉  &lt;code&gt;CyclicBarrier&lt;/code&gt;  我已经到达了屏障，然后当前线程被阻塞。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CyclicBarrier&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; parties&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;parties&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CyclicBarrier&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; parties&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; barrierAction&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;parties &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parties &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; parties&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; parties&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;barrierCommand &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; barrierAction&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其中，&lt;strong&gt; &lt;code&gt;parties&lt;/code&gt;  就代表了需要拦截的线程数量，当拦截的线程数量达到这个值的时候就打开栅栏，让所有线程通过&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;2、当调用  &lt;code&gt;CyclicBarrier&lt;/code&gt;  对象调用  &lt;code&gt;await()&lt;/code&gt;  方法时，实际上调用的是   &lt;code&gt;dowait(false, 0L)&lt;/code&gt;  方法。 &lt;code&gt;await()&lt;/code&gt;  方法就像树立起一个栅栏的行为一样，将线程挡住了，当拦住的线程数量达到  &lt;code&gt;parties&lt;/code&gt;  的值时，栅栏才会打开，线程才得以通过执行。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;await&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BrokenBarrierException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;dowait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;TimeoutException&lt;/span&gt; toe&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   	 &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;toe&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// cannot happen&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;dowait(false, 0L)&lt;/code&gt;  方法源码分析如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 当线程数量或者请求数量达到 count 时 await 之后的方法才会被执行。上面的示例中 count 的值就为 5。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * Main barrier code, covering the various policies.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;dowait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; timed&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; nanos&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BrokenBarrierException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;               &lt;span class=&#34;token class-name&#34;&gt;TimeoutException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ReentrantLock&lt;/span&gt; lock &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lock&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 锁住&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        lock&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Generation&lt;/span&gt; g &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; generation&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;g&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;broken&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BrokenBarrierException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 如果线程中断了，抛出异常&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;interrupted&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;breakBarrier&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;//cout 减 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; index &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;count&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 当 count 数量减为 0 之后说明最后一个线程已经到达栅栏了，也就是达到了可以执行 await 方法之后的条件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// tripped&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; ranAction &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; command &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; barrierCommand&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;command &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        command&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    ranAction &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 将 count 重置为 parties 属性的初始化值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 唤醒之前等待的线程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 下一波执行开始&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token function&#34;&gt;nextGeneration&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;ranAction&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token function&#34;&gt;breakBarrier&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// loop until tripped, broken, interrupted, or timed out&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;timed&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        trip&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;await&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nanos &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        nanos &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; trip&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;awaitNanos&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nanos&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; ie&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;g &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; generation &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; g&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;broken&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token function&#34;&gt;breakBarrier&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; ie&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token comment&#34;&gt;// We&#39;re about to finish waiting even if we had not&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token comment&#34;&gt;// been interrupted, so this interrupt is deemed to&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token comment&#34;&gt;// &#34;belong&#34; to subsequent execution.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;interrupt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;g&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;broken&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BrokenBarrierException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;g &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; generation&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; index&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;timed &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nanos &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token function&#34;&gt;breakBarrier&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TimeoutException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            lock&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;面试题aqs-的底层原理是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试题aqs-的底层原理是什么&#34;&gt;#&lt;/a&gt; 【面试题】AQS 的底层原理是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;互联网、美团 / 阿里、后端、Java。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;**AQS（AbstractQueuedSynchronizer，抽象队列同步器）** 的底层是通过 Java 中的&lt;font color=&#39;red&#39;&gt;  &lt;code&gt;Lock&lt;/code&gt;  接口和  &lt;code&gt;Condition&lt;/code&gt;  接口&lt;/font&gt;实现的。AQS 是一个抽象类，提供了一种灵活的机制来&lt;font color=&#39;red&#39;&gt;实现线程间的同步和互斥操作&lt;/font&gt;。它提供了两种同步模式：&lt;font color=&#39;cornflowerblue&#39;&gt;独占模式（Exclusive）&lt;/font&gt;和&lt;font color=&#39;cornflowerblue&#39;&gt;共享模式（Shared）&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;在 AQS 的底层实现中，主要使用了一个 ** 虚拟的双向 FIFO 队列（CLH 队列锁）** 来维护等待获取锁的线程队列。当一个线程请求获取锁时，如果锁已经被其他线程占用，则该线程会被加入到队列中，并进入等待状态。当持有锁的线程释放锁时，AQS 会从队列中选择一个线程唤醒并允许其获取锁。&lt;/p&gt;
&lt;p&gt;AQS 还提供了一些核心的方法，如 acquire 、 release 和 tryAcquire 等，用于实现具体的同步操作。这些方法通过内置的 ** 状态变量（state）** 来记录锁的状态，并根据不同的情况进行相应的操作。&lt;/p&gt;
&lt;h3 id=&#34;讲讲你对-aqs-的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#讲讲你对-aqs-的理解&#34;&gt;#&lt;/a&gt; 讲讲你对 AQS 的理解&lt;/h3&gt;
&lt;p&gt;AQS（AbstractQueuedSynchronizer）是 Java 并发包中一个重要的工具类，它&lt;font color=&#39;red&#39;&gt;提供了实现锁、同步器的基础框架&lt;/font&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AQS 是一个&lt;strong&gt;抽象类&lt;/strong&gt;，它定义了锁和同步器的基本接口和方法。它的子类可以通过继承 AQS 并重写其中的方法来实现自定义的同步器。&lt;/li&gt;
&lt;li&gt;AQS 通过一个 ** 状态变量（state）** 来表示锁的状态。state 的具体含义对于不同的同步器会有不同的解释，例如，ReentrantLock 中 的 state 表示持有锁的线程数量。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;AQS 使用一个 ** 双向队列（CLH 队列锁）** 来管理等待获取资源的线程&lt;/font&gt;。每个等待线程会被包装成一个 &amp;quot;Node&amp;quot; 对象，并且会按照一定的顺序排队。&lt;/li&gt;
&lt;li&gt;AQS &lt;font color=&#39;red&#39;&gt;提供了两个主要的方法： &lt;code&gt;acquire()&lt;/code&gt;  和  &lt;code&gt;release()&lt;/code&gt; &lt;/font&gt;。
&lt;ul&gt;
&lt;li&gt;acquire () 方法用于获取资源，而 release () 方法用于释放资源。&lt;/li&gt;
&lt;li&gt;当一个线程调用 acquire () 方法时，如果资源已经被其他线程占用，那么该线程将会被加入到 CLH 队列 中进行等待。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;Condition 是 AQS 的一个补充接口，它提供了更为细粒度的等待 / 通知机制&lt;/font&gt;。Condition 对象可以通过 AQS 的 newCondition () 方法创建。Condition 底层的实现依赖于 AQS ，并且使用 AQS 队列来管理等待线程。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;Condition 的底层原理是基于 AQS 的状态和 CLH 队列&lt;/font&gt;。当一个线程调用 Condition 的 await 方法时，该线程会释放持有的 AQS 状态（比如锁），并且进入 Condition 维护的等待队列中等待通知。当另一个线程执行相应的通知操作时，被唤醒的线程可以重新竞争资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AQS 是 Java 并发包中实现锁和同步器的基础框架。它使用一个双向队列来管理等待获取资源的线程，并提供 acquire 和 release 等方法来获取和释放资源。&lt;/li&gt;
&lt;li&gt;Condition 是 AQS 的补充接口，提供了更为细粒度的等待 / 通知机制。Condition 底层的实现依赖于 AQS 的状态和 CLH 队列。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reentrantlock-类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reentrantlock-类&#34;&gt;#&lt;/a&gt; ReentrantLock 类&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;可重入&lt;/strong&gt;式的&lt;strong&gt;独占锁&lt;/strong&gt;（悲观锁）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;简介-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-5&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ReentrantLock&lt;/code&gt;  实现了  &lt;code&gt;Lock&lt;/code&gt;  接口，是一个&lt;font color=&#39;red&#39;&gt;可重入&lt;/font&gt;且&lt;font color=&#39;red&#39;&gt;独占式&lt;/font&gt;的锁，和  &lt;code&gt;synchronized&lt;/code&gt;  关键字类似。不过， &lt;code&gt;ReentrantLock&lt;/code&gt;  更灵活、更强大，增加了&lt;font color=&#39;red&#39;&gt;轮询、超时、中断、公平锁和非公平锁&lt;/font&gt;等高级功能。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ReentrantLock&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Lock&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;Serializable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;ReentrantLock&lt;/code&gt;  里面有一个&lt;strong&gt;继承自 AQS（ &lt;code&gt;AbstractQueuedSynchronizer&lt;/code&gt; ）的内部类  &lt;code&gt;Sync&lt;/code&gt; &lt;/strong&gt;，添加锁和释放锁的大部分操作实际上都是其中实现的。 &lt;code&gt;Sync&lt;/code&gt;  有两个子类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;公平锁  &lt;code&gt;FairSync&lt;/code&gt;  &lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;非公平锁  &lt;code&gt;NonfairSync&lt;/code&gt;  &lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/reentrantlock-class-diagram.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt; &lt;code&gt;ReentrantLock&lt;/code&gt;  默认使用非公平锁&lt;/font&gt;，也可以通过构造器来显式的指定使用公平锁。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 传入一个 boolean 值，true 时为公平锁，false 时为非公平锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ReentrantLock&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; fair&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sync &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fair &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FairSync&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NonfairSync&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;从上面的内容可以看出， &lt;code&gt;ReentrantLock&lt;/code&gt;  的底层就是由 AQS 来实现的。&lt;/p&gt;
&lt;h3 id=&#34;公平锁和非公平锁有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公平锁和非公平锁有什么区别&#34;&gt;#&lt;/a&gt; 公平锁和非公平锁有什么区别？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;公平锁&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;锁被释放之后，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;先申请的线程先得到锁&lt;/font&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;性能较差一些&lt;/font&gt;，因为公平锁为了保证时间上的绝对顺序，上下文切换更频繁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;非公平锁&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;锁被释放之后，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;后申请的线程可能会先获取到锁&lt;/font&gt;&lt;/strong&gt;，是随机或者按照其他优先级排序的。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;性能更好&lt;/font&gt;，但可能会导致某些线程永远无法获取到锁。&lt;/li&gt;
&lt;li&gt;例如： &lt;code&gt;synchronized&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;synchronized-和-reentrantlock-有何异同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#synchronized-和-reentrantlock-有何异同&#34;&gt;#&lt;/a&gt; synchronized 和 ReentrantLock 有何异同？&lt;/h3&gt;
&lt;h4 id=&#34;都是可重入锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#都是可重入锁&#34;&gt;#&lt;/a&gt; 都是可重入锁&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;可重入锁&lt;/strong&gt;也叫递归锁，是指&lt;font color=&#39;red&#39;&gt;线程可以再次获取自己的内部锁&lt;/font&gt;。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，&lt;font color=&#39;red&#39;&gt;如果是不可重入锁的话，就会造成死锁&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;JDK 提供的所有现成的  &lt;code&gt;Lock&lt;/code&gt;  实现类，包括  &lt;code&gt;synchronized&lt;/code&gt;  关键字锁都是可重入的。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在下面的代码中， &lt;code&gt;method1()&lt;/code&gt;  和  &lt;code&gt;method2()&lt;/code&gt;  都被  &lt;code&gt;synchronized&lt;/code&gt;  关键字修饰， &lt;code&gt;method1()&lt;/code&gt;  调用了 &lt;code&gt;method2()&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SynchronizedDemo&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;method1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;方法1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;method2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;method2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;方法2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;由于  &lt;code&gt;synchronized&lt;/code&gt;  锁是可重入的，同一个线程在调用  &lt;code&gt;method1()&lt;/code&gt;  时可以直接获得当前对象的锁，执行  &lt;code&gt;method2()&lt;/code&gt;  的时候可以再次获取这个对象的锁，不会产生死锁问题。假如 &lt;code&gt;synchronized&lt;/code&gt;  是不可重入锁的话，由于该对象的锁已被当前线程所持有且无法释放，这就导致线程在执行  &lt;code&gt;method2()&lt;/code&gt;  时获取锁失败，会出现死锁问题。&lt;/p&gt;
&lt;h4 id=&#34;synchronized-依赖于-jvm而-reentrantlock-依赖于-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#synchronized-依赖于-jvm而-reentrantlock-依赖于-api&#34;&gt;#&lt;/a&gt; synchronized 依赖于 JVM，而 ReentrantLock 依赖于 API&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;synchronized&lt;/code&gt;  是依赖于 JVM 实现的，前面我们也讲到了虚拟机团队在 JDK1.6 为  &lt;code&gt;synchronized&lt;/code&gt;  关键字进行了很多优化，但是&lt;font color=&#39;red&#39;&gt;这些优化都是在虚拟机层面实现的&lt;/font&gt;，并没有直接暴露给我们。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ReentrantLock&lt;/code&gt;  是 JDK 层面实现的（也就是&lt;font color=&#39;red&#39;&gt; API 层面，需要 lock () 和 unlock () 方法配合 try/finally 语句块来完成&lt;/font&gt;），所以我们可以通过查看它的源代码，来看它是如何实现的。&lt;/p&gt;
&lt;h4 id=&#34;reentrantlock-比-synchronized-增加了一些高级功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reentrantlock-比-synchronized-增加了一些高级功能&#34;&gt;#&lt;/a&gt; ReentrantLock 比 synchronized 增加了一些高级功能&lt;/h4&gt;
&lt;p&gt;相比  &lt;code&gt;synchronized&lt;/code&gt; ， &lt;code&gt;ReentrantLock&lt;/code&gt;  增加了一些高级功能。主要来说主要有三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;等待可中断&lt;/strong&gt; :  &lt;code&gt;ReentrantLock&lt;/code&gt;  提供了一种能够中断等待锁的线程的机制，通过  &lt;code&gt;lock.lockInterruptibly()&lt;/code&gt;  来实现这个机制。也就是说&lt;font color=&#39;red&#39;&gt;正在等待的线程可以选择放弃等待，改为处理其他事情&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可实现公平锁&lt;/strong&gt; :  &lt;code&gt;ReentrantLock&lt;/code&gt;  可以指定是公平锁还是非公平锁。&lt;font color=&#39;red&#39;&gt;而 &lt;code&gt;synchronized&lt;/code&gt;  只能是非公平锁&lt;/font&gt;。所谓的公平锁就是先等待的线程先获得锁。 &lt;code&gt;ReentrantLock&lt;/code&gt;  默认情况是非公平的，可以通过  &lt;code&gt;ReentrantLock&lt;/code&gt;  类的 &lt;code&gt;ReentrantLock(boolean fair)&lt;/code&gt;  构造方法来指定是否是公平的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可实现选择性通知（锁可以绑定多个条件）&lt;/strong&gt;:  &lt;code&gt;synchronized&lt;/code&gt;  关键字与 &lt;code&gt;wait()&lt;/code&gt;  和 &lt;code&gt;notify()&lt;/code&gt; / &lt;code&gt;notifyAll()&lt;/code&gt;  方法相结合可以实现等待 / 通知机制。 &lt;code&gt;ReentrantLock&lt;/code&gt;  类当然也可以实现，但是需要借助于 &lt;code&gt;Condition&lt;/code&gt;  接口与 &lt;code&gt;newCondition()&lt;/code&gt;  方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于  &lt;code&gt;Condition&lt;/code&gt;  接口的补充：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Condition&lt;/code&gt;  接口是 JDK1.5 之后才有的，它具有很好的灵活性，比如可以实现多路通知功能。也就是在一个 &lt;code&gt;Lock&lt;/code&gt;  对象中可以创建多个 &lt;code&gt;Condition&lt;/code&gt;  实例（即对象监视器），&lt;strong&gt;线程对象可以注册在指定的 &lt;code&gt;Condition&lt;/code&gt;  中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用 &lt;code&gt;notify()/notifyAll()&lt;/code&gt;  方法进行通知时，被通知的线程是由 JVM 选择的，用 &lt;code&gt;ReentrantLock&lt;/code&gt;  类结合 &lt;code&gt;Condition&lt;/code&gt;  实例可以实现 “选择性通知”&lt;/strong&gt; ，这个功能非常重要，而且是  &lt;code&gt;Condition&lt;/code&gt;  接口默认提供的。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;synchronized&lt;/code&gt;  关键字就相当于整个  &lt;code&gt;Lock&lt;/code&gt;  对象中只有一个 &lt;code&gt;Condition&lt;/code&gt;  实例，所有的线程都注册在它一个身上。如果执行 &lt;code&gt;notifyAll()&lt;/code&gt;  方法的话就会通知所有处于等待状态的线程，这样会造成很大的效率问题。而 &lt;code&gt;Condition&lt;/code&gt;  实例的 &lt;code&gt;signalAll()&lt;/code&gt;  方法，只会唤醒注册在该 &lt;code&gt;Condition&lt;/code&gt;  实例中的所有等待线程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;可中断锁和不可中断锁有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可中断锁和不可中断锁有什么区别&#34;&gt;#&lt;/a&gt; 可中断锁和不可中断锁有什么区别？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;等待可中断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;可中断锁&lt;/strong&gt;：获取锁的过程中可以被中断，不需要一直等到获取锁之后 才能进行其他逻辑处理。 &lt;code&gt;ReentrantLock&lt;/code&gt;  就属于是可中断锁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不可中断锁&lt;/strong&gt;：一旦线程申请了锁，就只能等到拿到锁以后才能进行其他的逻辑处理。  &lt;code&gt;synchronized&lt;/code&gt;  就属于是不可中断锁。&lt;/p&gt;
&lt;h3 id=&#34;介绍下-reentrantlock-的底层原理可重入-公平锁和非公平锁的原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍下-reentrantlock-的底层原理可重入-公平锁和非公平锁的原理&#34;&gt;#&lt;/a&gt; 介绍下 ReentrantLock 的底层原理（可重入、公平锁和非公平锁的原理）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;可重入的原理：&lt;font color=&#39;red&#39;&gt;ReentrantLock 通过一个计数器（&lt;strong&gt;状态变量 state&lt;/strong&gt;）来记录锁的持有线程数&lt;/font&gt;。当一个线程第一次获取锁时，计数器加 1，当该线程再次获取锁时，计数器再次加 1。当线程释放锁时，计数器减 1。只有当计数器值为 0 时，表示锁完全释放，其他线程可以获取该锁。&lt;/li&gt;
&lt;li&gt;公平锁和非公平锁的原理：ReentrantLock 提供了公平锁（ &lt;code&gt;FairSync&lt;/code&gt; ）和非公平锁（ &lt;code&gt;NonfairSync&lt;/code&gt; ）两种模式。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;公平锁模式：当多个线程等待获取锁时，&lt;font color=&#39;red&#39;&gt;按照线程的申请顺序来获取锁&lt;/font&gt;。即先到先得的原则，保证等待时间越久的线程越早获取锁。&lt;/li&gt;
&lt;li&gt;非公平锁模式：当多个线程等待获取锁时，不按照线程的申请顺序来获取锁。即存在一个竞争机制，&lt;font color=&#39;red&#39;&gt;新来的线程有机会抢占锁&lt;/font&gt;，这样可以提高吞吐量。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;在底层实现上，公平锁和非公平锁的区别在于线程获取锁的方式：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;公平锁先检查队列中是否有正在等待的线程，如果有，则按照 FIFO 的顺序选择锁的持有者。&lt;/li&gt;
&lt;li&gt;非公平锁先尝试直接获取锁，
&lt;ul&gt;
&lt;li&gt;如果失败，则再进入同步队列等待。&lt;/li&gt;
&lt;li&gt;如果失败，则进入队列等待，但在这个等待过程中，可能会允许新来的线程抢占锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ReentrantLock 通过计数器实现可重入的机制，保证同一个线程可以多次获取同一个锁。&lt;/li&gt;
&lt;li&gt;公平锁和非公平锁的区别在于锁的获取方式，公平锁按照线程等待的顺序进行获取，而非公平锁允许在锁释放时新来的线程有机会优先获取锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;线程池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程池&#34;&gt;#&lt;/a&gt; 线程池&lt;/h1&gt;
&lt;h2 id=&#34;线程池-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程池-2&#34;&gt;#&lt;/a&gt; 线程池&lt;/h2&gt;
&lt;h3 id=&#34;简介-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-6&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;顾名思义，线程池就是&lt;strong&gt;管理一系列线程的资源池&lt;/strong&gt;。当有任务要处理时，直接从线程池中获取线程来处理，&lt;font color=&#39;red&#39;&gt;处理完之后线程并不会立即被销毁，而是等待下一个任务&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;池化技术的主要思想：&lt;strong&gt;为了减少每次获取资源的消耗&lt;/strong&gt;，提高对资源的利用率。&lt;/p&gt;
&lt;p&gt;借用《Java 并发编程的艺术》来说一下&lt;font color=&#39;red&#39;&gt;使用线程池的好处&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;降低资源消耗&lt;/strong&gt;。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高响应速度&lt;/strong&gt;。当任务到达时，任务可以不需要等到线程创建就能立即执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高线程的可管理性&lt;/strong&gt;。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;executor-框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#executor-框架&#34;&gt;#&lt;/a&gt; Executor 框架&lt;/h3&gt;
&lt;h4 id=&#34;简介-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-7&#34;&gt;#&lt;/a&gt; 简介&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Executor&lt;/code&gt;  框架是 Java5 之后引进的，&lt;font color=&#39;red&#39;&gt;通过  &lt;code&gt;Executor&lt;/code&gt;  来启动线程比使用  &lt;code&gt;Thread&lt;/code&gt;  的  &lt;code&gt;start&lt;/code&gt;  方法更好&lt;/font&gt;。除了更易管理，效率更好（&lt;font color=&#39;red&#39;&gt;用线程池实现，节约开销&lt;/font&gt;）外，还有关键的一点：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;有助于避免 this 逃逸问题&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;this 逃逸&lt;/strong&gt;：在构造函数返回之前，其他线程就持有该对象的引用，调用尚未构造完全的对象的方法，可能引发令人疑惑的错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Executor&lt;/code&gt;  框架不仅包括了&lt;font color=&#39;red&#39;&gt;线程池的管理&lt;/font&gt;，还提供了&lt;font color=&#39;red&#39;&gt;线程工厂、队列、拒绝策略&lt;/font&gt;等， &lt;code&gt;Executor&lt;/code&gt;  框架让并发编程变得更加简单。&lt;/p&gt;
&lt;h4 id=&#34;三大部分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三大部分&#34;&gt;#&lt;/a&gt; 三大部分&lt;/h4&gt;
&lt;h5 id=&#34;任务runnablecallable&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任务runnablecallable&#34;&gt;#&lt;/a&gt; 任务（ &lt;code&gt;Runnable&lt;/code&gt; / &lt;code&gt;Callable&lt;/code&gt; ）&lt;/h5&gt;
&lt;p&gt;执行任务需要实现 &lt;strong&gt; &lt;code&gt;Runnable&lt;/code&gt;  接口&lt;/strong&gt; 或 &lt;strong&gt; &lt;code&gt;Callable&lt;/code&gt;  接口&lt;/strong&gt;，对应的实现类可以被 &lt;strong&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; &lt;/strong&gt; 或 &lt;strong&gt; &lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt; &lt;/strong&gt; 执行。&lt;/p&gt;
&lt;h5 id=&#34;任务的执行executor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任务的执行executor&#34;&gt;#&lt;/a&gt; 任务的执行（ &lt;code&gt;Executor&lt;/code&gt; ）&lt;/h5&gt;
&lt;p&gt;如下图所示，包括任务执行机制的核心接口  &lt;code&gt;Executor&lt;/code&gt; ，以及继承自它的  &lt;code&gt;ExecutorService&lt;/code&gt;  接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  和  &lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;  是两个关键的实现类。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/executor-class-diagram.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  类描述：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//AbstractExecutorService 类实现了 ExecutorService 接口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;AbstractExecutorService&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;  类描述:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//ScheduledExecutorService 继承 ExecutorService 接口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ScheduledThreadPoolExecutor&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ScheduledExecutorService&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;异步计算的结果future&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步计算的结果future&#34;&gt;#&lt;/a&gt; 异步计算的结果（ &lt;code&gt;Future&lt;/code&gt; ）&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;Future&lt;/code&gt;  接口&lt;/strong&gt;及&lt;strong&gt;其实现类 &lt;code&gt;FutureTask&lt;/code&gt;  类&lt;/strong&gt;都可以代表异步计算的结果。&lt;/p&gt;
&lt;p&gt;当我们把  &lt;code&gt;Runnable&lt;/code&gt;  接口或  &lt;code&gt;Callable&lt;/code&gt;  接口的实现类提交给  &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  或  &lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;  执行时，在内部调用  &lt;code&gt;submit()&lt;/code&gt;  方法时会返回一个  &lt;code&gt;FutureTask&lt;/code&gt;  对象。&lt;/p&gt;
&lt;h4 id=&#34;如何使用-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何使用-2&#34;&gt;#&lt;/a&gt; 如何使用&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Executor&lt;/code&gt;  框架的使用示意图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231020143912018.png&#34; alt=&#34;image-20231020143912018&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;主线程首先要创建实现了  &lt;code&gt;Runnable&lt;/code&gt;  接口或者  &lt;code&gt;Callable&lt;/code&gt;  接口的任务对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把创建完成的实现了  &lt;code&gt;Runnable&lt;/code&gt;  /  &lt;code&gt;Callable&lt;/code&gt;  接口的对象直接交给  &lt;code&gt;ExecutorService&lt;/code&gt;  的  &lt;code&gt;execute()&lt;/code&gt;  或者  &lt;code&gt;submit()&lt;/code&gt;  执行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于  &lt;code&gt;FutureTask&lt;/code&gt;  实现了  &lt;code&gt;Runnable&lt;/code&gt; ，我们也可以直接创建  &lt;code&gt;FutureTask&lt;/code&gt; ，然后交给  &lt;code&gt;ExecutorService&lt;/code&gt;  执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果执行的是  &lt;code&gt;ExecutorService.submit（）&lt;/code&gt; ，将返回一个实现了  &lt;code&gt;Future&lt;/code&gt;  接口的  &lt;code&gt;FutureTask&lt;/code&gt;  对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后，主线程可以执行  &lt;code&gt;FutureTask.get()&lt;/code&gt;  方法来等待任务执行完成。主线程也可以执行  &lt;code&gt;FutureTask.cancel（boolean mayInterruptIfRunning）&lt;/code&gt; 来取消此任务的执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;threadpoolexecutor-类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#threadpoolexecutor-类&#34;&gt;#&lt;/a&gt; &lt;mark&gt;ThreadPoolExecutor 类&lt;/mark&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;线程池实现类  &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  是  &lt;code&gt;Executor&lt;/code&gt;  框架最核心的类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;构造方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造方法&#34;&gt;#&lt;/a&gt; 构造方法&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  类中提供的&lt;font color=&#39;red&#39;&gt;四个构造方法&lt;/font&gt;。我们来看最长的那个，其余三个都是在这个构造方法的基础上产生（其他几个构造方法说白点都是给定某些默认参数的构造方法，比如默认制定拒绝策略是什么）。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 用给定的初始参数创建一个新的 ThreadPoolExecutor。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; corePoolSize&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 线程池的核心线程数量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                              &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; maximumPoolSize&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 线程池的最大线程数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                              &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; keepAliveTime&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 当线程数大于核心线程数时，多余的空闲线程存活的最长时间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                              &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt; unit&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 时间单位&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                              &lt;span class=&#34;token class-name&#34;&gt;BlockingQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; workQueue&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 任务队列，用来储存等待执行任务的队列&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                              &lt;span class=&#34;token class-name&#34;&gt;ThreadFactory&lt;/span&gt; threadFactory&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 线程工厂，用来创建线程，一般默认即可&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                              &lt;span class=&#34;token class-name&#34;&gt;RejectedExecutionHandler&lt;/span&gt; handler&lt;span class=&#34;token comment&#34;&gt;// 拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                               &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;corePoolSize &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            maximumPoolSize &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            maximumPoolSize &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; corePoolSize &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            keepAliveTime &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;workQueue &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; threadFactory &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; handler &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NullPointerException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;corePoolSize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; corePoolSize&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;maximumPoolSize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; maximumPoolSize&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;workQueue &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; workQueue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;keepAliveTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; unit&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toNanos&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;keepAliveTime&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;threadFactory &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; threadFactory&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;handler &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; handler&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;常见参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见参数&#34;&gt;#&lt;/a&gt; &lt;mark&gt;常见参数&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  3 个最重要的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;corePoolSize&lt;/code&gt;  :&lt;/strong&gt; &lt;font color=&#39;gree&#39;&gt;核心线程数量&lt;/font&gt;。&lt;font color=&#39;red&#39;&gt;当任务队列未达到队列容量时&lt;/font&gt;，最大可以同时运行的线程数量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;maximumPoolSize&lt;/code&gt; &lt;/strong&gt; : &lt;font color=&#39;gree&#39;&gt;最大线程数量&lt;/font&gt;。&lt;font color=&#39;red&#39;&gt;任务队列中存放的任务达到队列容量的时候&lt;/font&gt;，当前可以同时运行的线程数量变为最大线程数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;workQueue&lt;/code&gt; &lt;/strong&gt;：&lt;font color=&#39;gree&#39;&gt;任务队列&lt;/font&gt;。新任务来的时候会先判断&lt;font color=&#39;red&#39;&gt;当前运行的线程数量是否达到核心线程数&lt;/font&gt;，如果达到的话，新任务就会被存放在队列中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他常见参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;keepAliveTime&lt;/code&gt; &lt;/strong&gt;：&lt;font color=&#39;gree&#39;&gt;当线程数大于  &lt;code&gt;corePoolSize&lt;/code&gt;  时，多余的空闲线程存活的最长时间&lt;/font&gt;。
&lt;ul&gt;
&lt;li&gt;当线程池中的线程数量大于  &lt;code&gt;corePoolSize&lt;/code&gt;  时，如果这时没有新的任务提交，多余的空闲线程不会立即销毁，而是会等待，直到等待的时间超过了  &lt;code&gt;keepAliveTime&lt;/code&gt;  才会被回收销毁。&lt;/li&gt;
&lt;li&gt;线程池回收线程时，会对核心线程和非核心线程一视同仁，直到线程池中线程的数量等于  &lt;code&gt;corePoolSize&lt;/code&gt;  ，回收过程才会停止。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;unit&lt;/code&gt; &lt;/strong&gt;： &lt;code&gt;keepAliveTime&lt;/code&gt;  参数的&lt;font color=&#39;gree&#39;&gt;时间单位&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;threadFactory&lt;/code&gt; &lt;/strong&gt; :&lt;font color=&#39;gree&#39;&gt;线程工厂&lt;/font&gt;，用来创建线程，一般默认即可。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;handler&lt;/code&gt; &lt;/strong&gt;：&lt;font color=&#39;gree&#39;&gt;饱和策略&lt;/font&gt;。当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对线程池中各个参数的相互关系的理解：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231018163149255.png&#34; alt=&#34;image-20231018163149255&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;饱和策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#饱和策略&#34;&gt;#&lt;/a&gt; 饱和策略&lt;/h4&gt;
&lt;p&gt;如果当前同时运行的线程数量达到  &lt;code&gt;maximumPoolSize&lt;/code&gt; ，并且  &lt;code&gt;workQueue&lt;/code&gt;  也被放满任务时， &lt;code&gt;ThreadPoolTaskExecutor&lt;/code&gt;  定义一些策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ThreadPoolExecutor.&lt;strong&gt; &lt;code&gt;AbortPolicy&lt;/code&gt; &lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;默认的饱和策略&lt;/font&gt;。抛出  &lt;code&gt;RejectedExecutionException&lt;/code&gt;  异常来&lt;font color=&#39;gree&#39;&gt;拒绝新任务的处理&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;ThreadPoolExecutor.&lt;strong&gt; &lt;code&gt;CallerRunsPolicy&lt;/code&gt; &lt;/strong&gt;：它既&lt;font color=&#39;gree&#39;&gt;不会抛弃任务&lt;/font&gt;，也不会抛出异常，而是&lt;font color=&#39;gree&#39;&gt;将任务回退给调用者，使用调用者的线程来执行任务&lt;/font&gt;。直接在调用 &lt;code&gt;execute&lt;/code&gt;  方法的调用者线程中运行 ( &lt;code&gt;run&lt;/code&gt; ) 任务。如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。&lt;/li&gt;
&lt;li&gt;ThreadPoolExecutor.&lt;strong&gt; &lt;code&gt;DiscardPolicy&lt;/code&gt; &lt;/strong&gt;：不处理新任务，&lt;font color=&#39;gree&#39;&gt;直接丢弃掉&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;ThreadPoolExecutor.&lt;strong&gt; &lt;code&gt;DiscardOldestPolicy&lt;/code&gt; &lt;/strong&gt;：此策略将&lt;font color=&#39;gree&#39;&gt;丢弃最早的未处理的任务请求&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;p&gt;Spring 通过  &lt;code&gt;ThreadPoolTaskExecutor&lt;/code&gt;  或者我们直接通过  &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  的构造函数创建线程池的时候，当我们不指定  &lt;code&gt;RejectedExecutionHandler&lt;/code&gt;  饱和策略来配置线程池的时候，默认使用的是  &lt;code&gt;AbortPolicy&lt;/code&gt; 。在这种饱和策略下，如果队列满了， &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  将抛出  &lt;code&gt;RejectedExecutionException&lt;/code&gt;  异常来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。&lt;/p&gt;
&lt;p&gt;如果不想丢弃任务的话，可以使用  &lt;code&gt;CallerRunsPolicy&lt;/code&gt; 。和其他的几个策略不同，它既不会抛弃任务，也不会抛出异常，而是将任务回退给调用者，使用调用者的线程来执行任务。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CallerRunsPolicy&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RejectedExecutionHandler&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CallerRunsPolicy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rejectedExecution&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; r&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isShutdown&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// 直接主线程执行，而不是线程池中的线程执行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;线程池的创建方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程池的创建方式&#34;&gt;#&lt;/a&gt; 线程池的创建方式&lt;/h4&gt;
&lt;h5 id=&#34;方式1threadpoolexecutor-类的构造函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方式1threadpoolexecutor-类的构造函数&#34;&gt;#&lt;/a&gt; 方式 1：ThreadPoolExecutor 类的构造函数&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;推荐！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231015003053159.png&#34; alt=&#34;image-20231015003053159&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;方式2executor-框架的-executors-工具类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方式2executor-框架的-executors-工具类&#34;&gt;#&lt;/a&gt; 方式 2：Executor 框架的 Executors 工具类&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;不推荐～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以创建多种类型的  &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;FixedThreadPool&lt;/code&gt; &lt;/strong&gt;：该方法返回一个&lt;font color=&#39;red&#39;&gt;固定线程数量&lt;/font&gt;的线程池。
&lt;ul&gt;
&lt;li&gt;该线程池中的线程数量始终不变。&lt;/li&gt;
&lt;li&gt;当有一个新的任务提交时，
&lt;ul&gt;
&lt;li&gt;若线程池中有空闲线程，则立即执行。&lt;/li&gt;
&lt;li&gt;若线程池中没有空间线程，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;SingleThreadExecutor&lt;/code&gt; ：&lt;/strong&gt; 该方法返回一个&lt;font color=&#39;red&#39;&gt;只有一个线程&lt;/font&gt;的线程池。
&lt;ul&gt;
&lt;li&gt;若多于一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;CachedThreadPool&lt;/code&gt; ：&lt;/strong&gt; 该方法返回一个&lt;font color=&#39;red&#39;&gt;会根据需要创建线程&lt;/font&gt;的线程池。
&lt;ul&gt;
&lt;li&gt;初始大小为 0。&lt;/li&gt;
&lt;li&gt;当有新任务提交时，如果当前线程池中没有线程可用，它会创建一个新的线程来处理该任务。&lt;/li&gt;
&lt;li&gt;如果在一段时间内（默认为 60 秒）没有新任务提交，核心线程会超时并被销毁，从而缩小线程池的大小。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;ScheduledThreadPool&lt;/code&gt; &lt;/strong&gt;：该方法返回一个用来&lt;font color=&#39;red&#39;&gt;在给定的延迟后，或者定期执行任务&lt;/font&gt;的线程池。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对应  &lt;code&gt;Executors&lt;/code&gt;  工具类中的方法如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/executors-inner-threadpool.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在《阿里巴巴 Java 开发手册》“并发处理” 这一章节，明确指出&lt;strong&gt;线程资源必须通过线程池提供，不允许在应用中自行显式创建线程&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原因：&lt;font color=&#39;red&#39;&gt;使用线程池可以减少在创建和销毁线程上所消耗的开销&lt;/font&gt;，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者 “过度切换” 的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外，《阿里巴巴 Java 开发手册》中&lt;strong&gt;强制线程池不允许使用  &lt;code&gt;Executors&lt;/code&gt;  工具类去创建，而是通过  &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  构造函数的方式&lt;/strong&gt;。这样的处理方式让写的同学更加明确线程池的运行规则，&lt;font color=&#39;red&#39;&gt;规避资源耗尽（OOM）的风险&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Executors&lt;/code&gt;  工具类返回线程池对象的弊端如下 (后文会详细介绍到)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;FixedThreadPool&lt;/code&gt;  和  &lt;code&gt;SingleThreadExecutor&lt;/code&gt; &lt;/strong&gt;：使用的是无界的  &lt;code&gt;LinkedBlockingQueue&lt;/code&gt; ，任务队列最大长度为  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; ，&lt;font color=&#39;red&#39;&gt;可能堆积大量的请求，从而导致 OOM&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;CachedThreadPool&lt;/code&gt; &lt;/strong&gt;：使用的是同步队列  &lt;code&gt;SynchronousQueue&lt;/code&gt; ，允许创建的线程数量为  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;  ，如果任务数量过多且执行速度较慢，&lt;font color=&#39;red&#39;&gt;可能会创建大量的线程，从而导致 OOM&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;ScheduledThreadPool&lt;/code&gt;  和  &lt;code&gt;SingleThreadScheduledExecutor&lt;/code&gt; &lt;/strong&gt; : 使用的无界的延迟阻塞队列 &lt;code&gt;DelayedWorkQueue&lt;/code&gt; ，任务队列最大长度为  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; ，可能堆积大量的请求，从而导致 OOM 。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 无界队列 LinkedBlockingQueue&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; nThreads&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nThreads&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; nThreads&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;MILLISECONDS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;LinkedBlockingQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 无界队列 LinkedBlockingQueue&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;newSingleThreadExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FinalizableDelegatedExecutorService&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;MILLISECONDS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;LinkedBlockingQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 同步队列 SynchronousQueue，没有容量，最大线程数是 Integer.MAX_VALUE`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;newCachedThreadPool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;60L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;SECONDS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SynchronousQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// DelayedWorkQueue（延迟阻塞队列）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ScheduledExecutorService&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;newScheduledThreadPool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; corePoolSize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ScheduledThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;corePoolSize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ScheduledThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; corePoolSize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;corePoolSize&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;NANOSECONDS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DelayedWorkQueue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;常用的阻塞队列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用的阻塞队列&#34;&gt;#&lt;/a&gt; 常用的阻塞队列&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;即任务队列。难！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;新任务来的时候会先判断当前运行的线程数量是否达到 &lt;code&gt;corePoolSize&lt;/code&gt; ，如果达到的话，新任务就会被存放在阻塞队列  &lt;code&gt;workQueue&lt;/code&gt;  中。&lt;/p&gt;
&lt;p&gt;不同的线程池会选用不同的阻塞队列，我们可以结合内置线程池来分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无界阻塞队列  &lt;code&gt;LinkedBlockingQueue&lt;/code&gt; &lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容量为  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FixedThreadPool&lt;/code&gt;  和  &lt;code&gt;SingleThreadExector&lt;/code&gt;  这两种线程池都是用的是无界队列，因此二者的任务队列永远不会被放满。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FixedThreadPool&lt;/code&gt;  最多只能创建  &lt;code&gt;corePoolSize&lt;/code&gt;  个线程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SingleThreadExector&lt;/code&gt;  只能创建 1 个线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;同步队列  &lt;code&gt;SynchronousQueue&lt;/code&gt; &lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;容量为 0，不存储元素&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CachedThreadPool&lt;/code&gt;  线程池使用的是同步队列。&lt;/li&gt;
&lt;li&gt;也就是说， &lt;code&gt;CachedThreadPool&lt;/code&gt;  的最大线程数是  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;  ，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;延迟阻塞队列  &lt;code&gt;DelayedWorkQueue&lt;/code&gt; &lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该队列的&lt;font color=&#39;red&#39;&gt;内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序&lt;/font&gt;。内部采用的是 “堆” 的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScheduledThreadPool&lt;/code&gt;  和  &lt;code&gt;SingleThreadScheduledExecutor&lt;/code&gt;  这两种线程池使用的是延迟阻塞队列。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DelayedWorkQueue&lt;/code&gt;  添加元素满了之后会自动&lt;font color=&#39;red&#39;&gt;扩容原来容量的 1/2&lt;/font&gt;，即永远不会阻塞，最大扩容可达  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; ，所以最多只能创建  &lt;code&gt;corePoolSize&lt;/code&gt;  个线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程池原理分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程池原理分析&#34;&gt;#&lt;/a&gt; &lt;mark&gt;线程池原理分析&lt;/mark&gt;&lt;/h3&gt;
&lt;p&gt;我们上面讲解了  &lt;code&gt;Executor&lt;/code&gt;  框架以及  &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  类，下面让我们实战一下，来通过写一个  &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  的小 Demo 来回顾上面的内容。&lt;/p&gt;
&lt;h4 id=&#34;threadpoolexecutor-示例代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#threadpoolexecutor-示例代码&#34;&gt;#&lt;/a&gt; ThreadPoolExecutor 示例代码&lt;/h4&gt;
&lt;p&gt;首先创建一个  &lt;code&gt;Runnable&lt;/code&gt;  接口的实现类（也可以是  &lt;code&gt;Callable&lt;/code&gt;  接口的实现类）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MyRunnable.java&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 这是一个简单的 Runnable 类，需要大约 5 秒钟来执行其任务。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @author shuang.kou&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MyRunnable&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; command&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MyRunnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;command &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; Start. Time = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;processCommand&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; End. Time = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;processCommand&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;command&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;编写测试程序，我们这里以阿里巴巴推荐的使用  &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  构造函数自定义参数的方式来创建线程池。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ThreadPoolExecutorDemo.java&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concurrent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ArrayBlockingQueue&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concurrent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concurrent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutorDemo&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CORE_POOL_SIZE&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;MAX_POOL_SIZE&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;QUEUE_CAPACITY&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Long&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;KEEP_ALIVE_TIME&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 使用阿里巴巴推荐的创建线程池的方式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 通过 ThreadPoolExecutor 构造函数自定义参数创建&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt; executor &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token constant&#34;&gt;CORE_POOL_SIZE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token constant&#34;&gt;MAX_POOL_SIZE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token constant&#34;&gt;KEEP_ALIVE_TIME&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;SECONDS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayBlockingQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;QUEUE_CAPACITY&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;CallerRunsPolicy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 创建 WorkerThread 对象（WorkerThread 类实现了 Runnable 接口）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; worker &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MyRunnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 执行 Runnable&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            executor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;worker&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 终止线程池&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        executor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;executor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isTerminated&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Finished all threads&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面的代码指定了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;corePoolSize&lt;/code&gt; : 核心线程数为 5。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maximumPoolSize&lt;/code&gt; ：最大线程数 10&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keepAliveTime&lt;/code&gt;  : 等待时间为 1L。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unit&lt;/code&gt; : 等待时间的单位为 TimeUnit.SECONDS。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;workQueue&lt;/code&gt; ：任务队列为  &lt;code&gt;ArrayBlockingQueue&lt;/code&gt; ，并且容量为 100;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handler&lt;/code&gt; : 饱和策略为  &lt;code&gt;CallerRunsPolicy&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输出结构：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Start&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;37&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Start&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;37&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Start&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;37&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Start&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;37&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Start&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;37&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;End&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;End&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;End&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;End&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Start&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;End&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Start&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Start&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Start&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Start&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;End&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;47&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;End&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;47&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;End&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;47&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;End&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;47&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;thread&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;End&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Time&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sun&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Apr&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;47&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Finished&lt;/span&gt; all threads  &lt;span class=&#34;token comment&#34;&gt;// 任务全部执行完了才会跳出来，因为 executor.isTerminated () 判断为 true 了才会跳出 while 循环，当且仅当调用 shutdown () 方法后，并且所有提交的任务完成后返回为 true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;线程池原理分析处理任务的流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程池原理分析处理任务的流程&#34;&gt;#&lt;/a&gt; &lt;mark&gt;线程池原理分析（处理任务的流程）&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;在示例代码中，我们使用  &lt;code&gt;executor.execute(worker)&lt;/code&gt;  来提交一个任务到线程池中去。为了搞懂线程池的原理，我们需要首先分析一下  &lt;code&gt;execute()&lt;/code&gt;  方法，源码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 存放线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;AtomicInteger&lt;/span&gt; ctl &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ctlOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;RUNNING&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;workerCountOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CAPACITY&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 任务队列&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BlockingQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; workQueue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; command&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 如果任务为 null，则抛出异常。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;command &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NullPointerException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//ctl 中保存的线程池当前的一些状态信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ctl&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//  下面会涉及到 3 步 操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 1. 首先判断当前线程池中执行的任务数量是否小于 corePoolSize&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 如果小于的话，通过 addWorker (command, true) 新建一个线程，并将任务 (command) 添加到该线程中；然后，启动该线程从而执行任务。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;workerCountOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; corePoolSize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addWorker&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;command&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ctl&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 2. 如果当前执行的任务数量大于等于 corePoolSize 的时候就会走到这里，表明创建新的线程失败。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 通过 isRunning 方法判断线程池状态，线程池处于 RUNNING 状态并且队列可以加入任务，该任务才会被加入进去&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isRunning&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; workQueue&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;offer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;command&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; recheck &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ctl&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 再次获取线程池状态，如果线程池状态不是 RUNNING 状态就需要从任务队列中移除任务，并尝试判断线程是否全部执行完毕。同时执行拒绝策略。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isRunning&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;recheck&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;command&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;command&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// 如果当前工作线程数量为 0，新创建一个线程并执行。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;workerCountOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;recheck&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;addWorker&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//3. 通过 addWorker (command, false) 新建一个线程，并将任务 (command) 添加到该线程中；然后，启动该线程从而执行任务。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 传入 false 代表增加线程时判断当前线程数是否少于 maxPoolSize&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 如果 addWorker (command, false) 执行失败，则通过 reject () 执行相应的拒绝策略的内容。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addWorker&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;command&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;command&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;简单分析一下整个流程&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/thread-pool-principle.png&#34; alt=&#34;图解线程池实现原理&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果 当前运行的线程数 ＜  &lt;code&gt;corePoolSize&lt;/code&gt;  ，那么就会&lt;font color=&#39;red&#39;&gt;新建一个线程&lt;/font&gt;来执行任务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果  &lt;code&gt;corePoolSize&lt;/code&gt;  ≤ 当前运行的线程数 ＜  &lt;code&gt;maximumPoolSize&lt;/code&gt; ，那么就&lt;font color=&#39;red&#39;&gt;把该任务放入到任务队列里等待执行&lt;/font&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;如果向任务队列添加任务失败（即任务队列已经满了），就新建一个线程&lt;/font&gt;来执行任务。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 当前运行的线程数 ==  &lt;code&gt;maximumPoolSize&lt;/code&gt; ，此时任务队列、线程池都满了，那么会根据&lt;font color=&#39;red&#39;&gt;饱和策略&lt;/font&gt;来处理无法接收的任务，比如抛出异常或者丢弃任务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;在  &lt;code&gt;execute()&lt;/code&gt;  方法中，多次调用  &lt;code&gt;addWorker()&lt;/code&gt;  方法，该方法主要用来&lt;font color=&#39;red&#39;&gt;创建新的工作线程&lt;/font&gt;，如果创建和启动工作线程成功则返回 true ，否则返回 false。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 全局锁，并发操作必备&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ReentrantLock&lt;/span&gt; mainLock &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ReentrantLock&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 跟踪线程池的最大大小，只有在持有全局锁 mainLock 的前提下才能访问此集合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; largestPoolSize&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 工作线程集合，存放线程池中所有的（活跃的）工作线程，只有在持有全局锁 mainLock 的前提下才能访问此集合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HashSet&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Worker&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; workers &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HashSet&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 获取线程池状态&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;runStateOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;CAPACITY&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 判断线程池的状态是否为 Running&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;isRunning&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;SHUTDOWN&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 添加新的工作线程到线程池&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @param firstTask 要执行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @param core 参数为 true 的话表示使用线程池的基本大小，为 false 使用线程池最大大小&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @return 添加成功就返回 true 否则返回 false&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;addWorker&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; firstTask&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; core&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        retry&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 这两句用来获取线程池的状态&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ctl&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; rs &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;runStateOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// Check if queue empty only if necessary.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rs &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;SHUTDOWN&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rs &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;SHUTDOWN&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                   firstTask &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                   &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; workQueue&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;               &lt;span class=&#34;token comment&#34;&gt;// 获取线程池中工作的线程的数量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; wc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;workerCountOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;//core 参数为 false 的话表明队列也满了，线程池大小变为 maximumPoolSize&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;wc &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CAPACITY&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    wc &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;core &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; corePoolSize &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; maximumPoolSize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;               &lt;span class=&#34;token comment&#34;&gt;// 原子操作将 workcount 的数量加 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;compareAndIncrementWorkerCount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt; retry&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// 如果线程的状态改变了就再次执行上述操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ctl&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;runStateOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; rs&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;continue&lt;/span&gt; retry&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// else CAS failed due to workerCount change; retry inner loop&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 标记工作线程是否启动成功&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; workerStarted &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 标记工作线程是否创建成功&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; workerAdded &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Worker&lt;/span&gt; w &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            w &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Worker&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;firstTask&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; w&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;thread&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token comment&#34;&gt;// 加锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ReentrantLock&lt;/span&gt; mainLock &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mainLock&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                mainLock&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                   &lt;span class=&#34;token comment&#34;&gt;// 获取线程池状态&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; rs &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;runStateOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ctl&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                   &lt;span class=&#34;token comment&#34;&gt;//rs &amp;lt; SHUTDOWN 如果线程池状态依然为 RUNNING, 并且线程的状态是存活的话，就会将工作线程添加到工作线程集合中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  &lt;span class=&#34;token comment&#34;&gt;//(rs=SHUTDOWN &amp;amp;&amp;amp; firstTask == null) 如果线程池状态小于 STOP，也就是 RUNNING 或者 SHUTDOWN 状态下，同时传入的任务实例 firstTask 为 null，则需要添加到工作线程集合和启动新的 Worker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                   &lt;span class=&#34;token comment&#34;&gt;//firstTask == null 证明只新建线程而不执行任务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rs &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;SHUTDOWN&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rs &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;SHUTDOWN&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; firstTask &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isAlive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// precheck that t is startable&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IllegalThreadStateException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        workers&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;w&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                       &lt;span class=&#34;token comment&#34;&gt;// 更新当前工作线程的最大容量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; workers&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; largestPoolSize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            largestPoolSize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                      &lt;span class=&#34;token comment&#34;&gt;// 工作线程是否启动成功&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        workerAdded &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 释放锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    mainLock&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;//// 如果成功添加工作线程，则调用 Worker 内部的线程实例 t 的 Thread#start () 方法启动真实的线程实例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;workerAdded&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  &lt;span class=&#34;token comment&#34;&gt;/// 标记线程启动成功&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    workerStarted &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;95&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           &lt;span class=&#34;token comment&#34;&gt;// 线程启动失败，需要从工作线程中移除对应的 Worker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;96&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; workerStarted&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;97&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;addWorkerFailed&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;w&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;98&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;99&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; workerStarted&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;100&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;现在，对于上述示例代码，分析如下：我们模拟了 10 个任务，配置的核心线程数为 5、等待队列容量为 100 ，所以每次只可能存在 5 个任务同时执行，剩下的 5 个任务会被放到等待队列中去。当前的 5 个任务中如果有任务被执行完了，线程池就会去拿新的任务执行。&lt;/p&gt;
&lt;h3 id=&#34;几个常见的对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#几个常见的对比&#34;&gt;#&lt;/a&gt; 几个常见的对比&lt;/h3&gt;
&lt;h4 id=&#34;runnable-vs-callable&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#runnable-vs-callable&#34;&gt;#&lt;/a&gt; Runnable vs Callable&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Runnable&lt;/code&gt;  接口自 Java 1.0 以来一直存在，但  &lt;code&gt;Callable&lt;/code&gt;  接口仅在 Java 1.5 中引入，目的是为了处理  &lt;code&gt;Runnable&lt;/code&gt;  接口不支持的用例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;Runnable&lt;/code&gt;  接口无返回值，且不会向上抛出异常，但是  &lt;code&gt;Callable&lt;/code&gt;  接口可以&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以，如果任务不需要返回结果或抛出异常，则推荐使用  &lt;code&gt;Runnable&lt;/code&gt;  接口，这样代码看起来会更加简洁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;工具类  &lt;code&gt;Executors&lt;/code&gt;  可以实现将  &lt;code&gt;Runnable&lt;/code&gt;  对象转换成  &lt;code&gt;Callable&lt;/code&gt;  对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Executors.callable(Runnable task)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Executors.callable(Runnable task, Object result)&lt;/code&gt; ）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@FunctionalInterface&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    * 被线程执行，没有返回值，也无法抛出异常&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@FunctionalInterface&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Callable&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 计算结果，或在无法这样做时抛出异常。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @return 计算得出的结果&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @throws 如果无法计算结果，则抛出异常&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;execute-vs-submit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#execute-vs-submit&#34;&gt;#&lt;/a&gt; execute() vs submit()&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;execute()&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;submit()&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;声明位置&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;Executor&lt;/code&gt;  接口&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;  接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;接收参数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;Runnable&lt;/code&gt;  或  &lt;code&gt;Callable&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;返回值类型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;void&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;能否处理异常&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;无法处理异常&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;借助  &lt;code&gt;Future.get()&lt;/code&gt;  可以捕获并处理异常&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;execute()&lt;/code&gt;  方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;submit()&lt;/code&gt;  方法用于提交需要返回值的任务。线程池会返回一个  &lt;code&gt;Future&lt;/code&gt;  类型的对象，通过这个  &lt;code&gt;Future&lt;/code&gt;  对象可以判断任务是否执行成功。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以通过  &lt;code&gt;Future&lt;/code&gt;  的  &lt;code&gt;get()&lt;/code&gt;  方法来获取返回值，该方法会阻塞当前线程直到任务完成。&lt;/li&gt;
&lt;li&gt;而使用  &lt;code&gt;Future&lt;/code&gt;  的  &lt;code&gt;get（long timeout，TimeUnit unit）&lt;/code&gt; 方法的话，如果在  &lt;code&gt;timeout&lt;/code&gt;  时间内任务还没有执行完，就会抛出  &lt;code&gt;java.util.concurrent.TimeoutException&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例 1：使用  &lt;code&gt;get()&lt;/code&gt;  方法获取返回值。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;ExecutorService&lt;/span&gt; executorService &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Executors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; submit &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; executorService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5000L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;abc&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; submit&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;executorService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输出：&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;figcaption data-lang=&#34;plain&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;abc&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;示例 2：使用  &lt;code&gt;get（long timeout，TimeUnit unit）&lt;/code&gt; 方法获取返回值。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;ExecutorService&lt;/span&gt; executorService &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Executors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; submit &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; executorService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5000L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;abc&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; submit&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;SECONDS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;executorService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输出：&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;figcaption data-lang=&#34;plain&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Exception in thread &#34;main&#34; java.util.concurrent.TimeoutException&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	at java.util.concurrent.FutureTask.get(FutureTask.java:205)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;shutdown-vs-shutdownnow&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shutdown-vs-shutdownnow&#34;&gt;#&lt;/a&gt; shutdown() vs shutdownNow()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;shutdown()&lt;/code&gt; &lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭线程池，线程池的状态变为  &lt;code&gt;SHUTDOWN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程池不再接受新任务了，但是队列里的任务得执行完毕&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;shutdownNow()&lt;/code&gt; &lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭线程池，线程池的状态变为  &lt;code&gt;STOP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程池会终止当前正在运行的任务，并停止处理排队的任务，并返回正在等待执行的 List&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;isshutdown-vs-isterminated&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#isshutdown-vs-isterminated&#34;&gt;#&lt;/a&gt; isShutdown() vs isTerminated()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;isShutDown()&lt;/code&gt; &lt;/strong&gt;：当调用  &lt;code&gt;shutdown()&lt;/code&gt;  方法后，返回为 true&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;isTerminated()&lt;/code&gt; &lt;/strong&gt;：当调用  &lt;code&gt;shutdown()&lt;/code&gt;  方法后，&lt;strong&gt;并且所有提交的任务完成后&lt;/strong&gt;，返回为 true&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;几种常见的内置线程池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#几种常见的内置线程池&#34;&gt;#&lt;/a&gt; 几种常见的内置线程池&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;即上文提到的  &lt;code&gt;Executor&lt;/code&gt;  框架的  &lt;code&gt;Executors&lt;/code&gt;  工具类中所提供的线程池&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;fixedthreadpool&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fixedthreadpool&#34;&gt;#&lt;/a&gt; FixedThreadPool&lt;/h4&gt;
&lt;h5 id=&#34;介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;FixedThreadPool&lt;/code&gt;  被称为可重用&lt;strong&gt;固定线程数&lt;/strong&gt;的线程池。通过  &lt;code&gt;Executors&lt;/code&gt;  类中的相关源代码来看一下相关实现：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 创建一个可重用固定数量线程的线程池&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; nThreads&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadFactory&lt;/span&gt; threadFactory&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nThreads&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; nThreads&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                      &lt;span class=&#34;token number&#34;&gt;0L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;MILLISECONDS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                      &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;LinkedBlockingQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                      threadFactory&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看出 &lt;font color=&#39;red&#39;&gt; &lt;code&gt;corePoolSize&lt;/code&gt;  和  &lt;code&gt;maximumPoolSize&lt;/code&gt;  都被设置为  &lt;code&gt;nThreads&lt;/code&gt; &lt;/font&gt;，这个  &lt;code&gt;nThreads&lt;/code&gt;  参数是我们使用的时候自己传递的。&lt;/p&gt;
&lt;p&gt;即使  &lt;code&gt;maximumPoolSize&lt;/code&gt;  的值比  &lt;code&gt;corePoolSize&lt;/code&gt;  大，也至多只会创建  &lt;code&gt;corePoolSize&lt;/code&gt;  个线程。这是因为 &lt;code&gt;FixedThreadPool&lt;/code&gt;  &lt;font color=&#39;red&#39;&gt;使用的是容量为  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;  的  &lt;code&gt;LinkedBlockingQueue&lt;/code&gt; （&lt;strong&gt;无界队列&lt;/strong&gt;），任务队列永远不会被放满&lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;处理任务的流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#处理任务的流程&#34;&gt;#&lt;/a&gt; 处理任务的流程&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;FixedThreadPool&lt;/code&gt;  的  &lt;code&gt;execute()&lt;/code&gt;  方法运行示意图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/FixedThreadPool-f8172448.png&#34; alt=&#34;FixedThreadPool的execute()方法运行示意图&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果当前运行的线程数小于  &lt;code&gt;corePoolSize&lt;/code&gt; ， 如果再来新任务的话，就创建新的线程来执行任务；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当前运行的线程数等于  &lt;code&gt;corePoolSize&lt;/code&gt;  后， 如果再来新任务的话，会将任务加入  &lt;code&gt;LinkedBlockingQueue&lt;/code&gt; ；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程池中的线程执行完手头的任务后，会在循环中反复从  &lt;code&gt;LinkedBlockingQueue&lt;/code&gt;  中获取任务来执行；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;为什么不推荐使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么不推荐使用&#34;&gt;#&lt;/a&gt; 为什么不推荐使用？&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;FixedThreadPool&lt;/code&gt;  使用无界队列  &lt;code&gt;LinkedBlockingQueue&lt;/code&gt; （队列的容量为  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; ）作为线程池的工作队列会对线程池带来如下影响：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当线程池中的线程数达到  &lt;code&gt;corePoolSize&lt;/code&gt;  后，新任务将在无界队列中等待，因此线程池中的线程数不会超过  &lt;code&gt;corePoolSize&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;由于使用无界队列时  &lt;code&gt;maximumPoolSize&lt;/code&gt;  将是一个无效参数，因为不可能存在任务队列满的情况。所以，通过创建  &lt;code&gt;FixedThreadPool&lt;/code&gt;  的源码可以看出创建的  &lt;code&gt;FixedThreadPool&lt;/code&gt;  的  &lt;code&gt;corePoolSize&lt;/code&gt;  和  &lt;code&gt;maximumPoolSize&lt;/code&gt;  被设置为同一个值。&lt;/li&gt;
&lt;li&gt;由于 1 和 2，使用无界队列时  &lt;code&gt;keepAliveTime&lt;/code&gt;  将是一个无效参数；&lt;/li&gt;
&lt;li&gt;运行中的  &lt;code&gt;FixedThreadPool&lt;/code&gt; （未执行  &lt;code&gt;shutdown()&lt;/code&gt;  或  &lt;code&gt;shutdownNow()&lt;/code&gt; ）不会拒绝任务，&lt;strong&gt;在任务比较多的时候会导致 OOM（内存溢出）&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;singlethreadexecutor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#singlethreadexecutor&#34;&gt;#&lt;/a&gt; SingleThreadExecutor&lt;/h4&gt;
&lt;h5 id=&#34;介绍-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-2&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;SingleThreadExecutor&lt;/code&gt;  是&lt;strong&gt;只有一个线程&lt;/strong&gt;的线程池。下面看看 SingleThreadExecutor 的实现：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 返回只有一个线程的线程池&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;newSingleThreadExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ThreadFactory&lt;/span&gt; threadFactory&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FinalizableDelegatedExecutorService&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                    &lt;span class=&#34;token number&#34;&gt;0L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;MILLISECONDS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                    &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;LinkedBlockingQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                    threadFactory&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看出&lt;font color=&#39;red&#39;&gt;  &lt;code&gt;corePoolSize&lt;/code&gt;  和  &lt;code&gt;maximumPoolSize&lt;/code&gt;  都被设置为 1&lt;/font&gt;，其他参数和  &lt;code&gt;FixedThreadPool&lt;/code&gt;  相同。&lt;/p&gt;
&lt;h5 id=&#34;处理任务的流程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#处理任务的流程-2&#34;&gt;#&lt;/a&gt; 处理任务的流程&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;SingleThreadExecutor&lt;/code&gt;  的运行示意图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/SingleThreadExecutor-7ffd92c2.png&#34; alt=&#34;SingleThreadExecutor的运行示意图&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果当前运行的线程数少于  &lt;code&gt;corePoolSize&lt;/code&gt; ，则创建一个新的线程执行任务；&lt;/li&gt;
&lt;li&gt;当前线程池中有一个运行的线程后，将任务加入  &lt;code&gt;LinkedBlockingQueue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;线程执行完当前的任务后，会在循环中反复从  &lt;code&gt;LinkedBlockingQueue&lt;/code&gt;  中获取任务来执行；&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;为什么不推荐使用-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么不推荐使用-2&#34;&gt;#&lt;/a&gt; 为什么不推荐使用？&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;SingleThreadExecutor&lt;/code&gt;  和  &lt;code&gt;FixedThreadPool&lt;/code&gt;  一样，&lt;strong&gt;使用的都是容量为  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;  的  &lt;code&gt;LinkedBlockingQueue&lt;/code&gt; （无界队列）&lt;strong&gt;作为线程池的工作队列。说简单点，就是&lt;/strong&gt;可能会导致 OOM&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;cachedthreadpool&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cachedthreadpool&#34;&gt;#&lt;/a&gt; CachedThreadPool&lt;/h4&gt;
&lt;h5 id=&#34;介绍-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-3&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;CachedThreadPool&lt;/code&gt;  是一个会&lt;strong&gt;根据需要创建新线程&lt;/strong&gt;的线程池。下面通过源码来看看实现：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 创建一个线程池，根据需要创建新线程，但会在先前构建的线程可用时重用它。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;newCachedThreadPool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ThreadFactory&lt;/span&gt; threadFactory&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                      &lt;span class=&#34;token number&#34;&gt;60L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;SECONDS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                      &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SynchronousQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                      threadFactory&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;font color=&#39;red&#39;&gt; &lt;code&gt;corePoolSize&lt;/code&gt;  被设置为空（0）， &lt;code&gt;maximumPoolSize&lt;/code&gt;  被设置为  &lt;code&gt;Integer.MAX.VALUE&lt;/code&gt; ，即它是无界的&lt;/font&gt;。这也就意味着如果主线程提交任务的速度高于  &lt;code&gt;maximumPool&lt;/code&gt;  中线程处理任务的速度时， &lt;code&gt;CachedThreadPool&lt;/code&gt;  会不断创建新的线程。极端情况下，这样&lt;strong&gt;会导致耗尽 cpu 和内存资源&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&#34;处理任务的流程-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#处理任务的流程-3&#34;&gt;#&lt;/a&gt; 处理任务的流程&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;CachedThreadPool&lt;/code&gt;  的  &lt;code&gt;execute()&lt;/code&gt;  方法的执行示意图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231021003533603.png&#34; alt=&#34;image-20231021003533603&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先执行  &lt;code&gt;SynchronousQueue.offer(Runnable task)&lt;/code&gt;  提交任务到任务队列。如果当前  &lt;code&gt;maximumPool&lt;/code&gt;  中有闲线程正在执行  &lt;code&gt;SynchronousQueue.poll(keepAliveTime,TimeUnit.NANOSECONDS)&lt;/code&gt; ，那么主线程执行 offer 操作与空闲线程执行的  &lt;code&gt;poll&lt;/code&gt;  操作配对成功，主线程把任务交给空闲线程执行， &lt;code&gt;execute()&lt;/code&gt;  方法执行完成，否则执行下面的步骤 2；&lt;/li&gt;
&lt;li&gt;当初始  &lt;code&gt;maximumPool&lt;/code&gt;  为空，或者  &lt;code&gt;maximumPool&lt;/code&gt;  中没有空闲线程时，将没有线程执行  &lt;code&gt;SynchronousQueue.poll(keepAliveTime,TimeUnit.NANOSECONDS)&lt;/code&gt; 。这种情况下，步骤 1 将失败，此时  &lt;code&gt;CachedThreadPool&lt;/code&gt;  会创建新线程执行任务，execute 方法执行完成；&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;为什么不推荐使用-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么不推荐使用-3&#34;&gt;#&lt;/a&gt; 为什么不推荐使用？&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;CachedThreadPool&lt;/code&gt;  使用的是同步队列  &lt;code&gt;SynchronousQueue&lt;/code&gt; ，&lt;strong&gt;允许创建的线程数量为  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;  ，可能会创建大量线程，从而导致 OOM&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;scheduledthreadpool&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#scheduledthreadpool&#34;&gt;#&lt;/a&gt; ScheduledThreadPool&lt;/h4&gt;
&lt;h5 id=&#34;介绍-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍-4&#34;&gt;#&lt;/a&gt; 介绍&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;ScheduledThreadPool&lt;/code&gt;  用来&lt;strong&gt;在给定的延迟后运行任务或者定期执行任务&lt;/strong&gt;。这个在实际项目中基本不会被用到，也&lt;font color=&#39;red&#39;&gt;不推荐使用&lt;/font&gt;，大家只需要简单了解一下即可。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ScheduledExecutorService&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;newScheduledThreadPool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; corePoolSize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ScheduledThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;corePoolSize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ScheduledThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; corePoolSize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;corePoolSize&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;NANOSECONDS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DelayedWorkQueue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;ScheduledThreadPool&lt;/code&gt;  是通过  &lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;  创建的，** 使用的  &lt;code&gt;DelayedWorkQueue&lt;/code&gt; （延迟阻塞队列）** 作为线程池的任务队列。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DelayedWorkQueue&lt;/code&gt;  的内部元素并不是按照放入时间排序的，而是&lt;font color=&#39;red&#39;&gt;按照延迟时间长短对任务进行排序的&lt;/font&gt;，内部采用的是 “堆” 的数据结构，可以保证&lt;font color=&#39;red&#39;&gt;每次出队的任务都是当前队列中执行时间最靠前的&lt;/font&gt;。 &lt;code&gt;DelayedWorkQueue&lt;/code&gt;  添加元素&lt;font color=&#39;red&#39;&gt;满了之后会自动扩容原来容量的 1/2&lt;/font&gt;，即永远不会阻塞，最大扩容可达  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; ，所以最多只能创建核心线程数的线程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;  继承了  &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; ，所以创建  &lt;code&gt;ScheduledThreadExecutor&lt;/code&gt;  本质也是创建一个  &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  线程池，只是传入的参数不相同。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ScheduledThreadPoolExecutor&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ScheduledExecutorService&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;scheduledthreadpoolexecutor-和-timer-对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#scheduledthreadpoolexecutor-和-timer-对比&#34;&gt;#&lt;/a&gt; ScheduledThreadPoolExecutor 和 Timer 对比&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Timer&lt;/code&gt;  对系统时钟的变化敏感， &lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;  不是；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Timer&lt;/code&gt;  只有一个执行线程，因此长时间运行的任务可以延迟其他任务。  &lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;  可以配置任意数量的线程。 此外，如果你想（通过提供  &lt;code&gt;ThreadFactory&lt;/code&gt; ），你可以完全控制创建的线程；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;TimerTask&lt;/code&gt;  中抛出的运行时异常会杀死一个线程，从而导致  &lt;code&gt;Timer&lt;/code&gt;  死机即计划任务将不再运行。 &lt;code&gt;ScheduledThreadExecutor&lt;/code&gt;  不仅捕获运行时异常，还允许您在需要时处理它们（通过重写  &lt;code&gt;afterExecute&lt;/code&gt;  方法 &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; ）。抛出异常的任务将被取消，但其他任务将继续运行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何设计一个能根据任务优先级来执行的线程池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何设计一个能根据任务优先级来执行的线程池&#34;&gt;#&lt;/a&gt; 如何设计一个能根据任务优先级来执行的线程池？&lt;/h3&gt;
&lt;p&gt;这是一个常见的面试问题，本质其实还是在考察求职者对于&lt;font color=&#39;red&#39;&gt;线程池&lt;/font&gt;以及&lt;font color=&#39;red&#39;&gt;阻塞队列（任务队列）&lt;/font&gt;的掌握。上面也提到了，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;不同的线程池会选用不同的阻塞队列作为任务队列&lt;/font&gt;&lt;/strong&gt;。比如  &lt;code&gt;FixedThreadPool&lt;/code&gt;  使用的是  &lt;code&gt;LinkedBlockingQueue&lt;/code&gt; （无界队列），由于该队列永远不会被放满，因此  &lt;code&gt;FixedThreadPool&lt;/code&gt;  最多只能创建  &lt;code&gt;corePoolSize&lt;/code&gt;  个线程。&lt;/p&gt;
&lt;p&gt;假如我们需要实现一个优先级任务线程池的话，那可以&lt;strong&gt;考虑使用  &lt;code&gt;PriorityBlockingQueue&lt;/code&gt;  （优先级阻塞队列）作为任务队列&lt;/strong&gt;（ &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  的构造函数有一个 &lt;code&gt;workQueue&lt;/code&gt;  参数可以传入任务队列）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/common-parameters-of-threadpool-workqueue.jpg&#34; alt=&#34;ThreadPoolExecutor构造函数&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优先级阻塞队列  &lt;code&gt;PriorityBlockingQueue&lt;/code&gt; &lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;一个支持优先级的无界阻塞队列&lt;/font&gt;，可以看作是&lt;font color=&#39;red&#39;&gt;线程安全&lt;/font&gt;的  &lt;code&gt;PriorityQueue&lt;/code&gt; ，两者底层都是使用&lt;font color=&#39;red&#39;&gt;小顶堆形式的二叉堆&lt;/font&gt;，即值最小的元素优先出队。不过， &lt;code&gt;PriorityQueue&lt;/code&gt;  不&lt;font color=&#39;red&#39;&gt;支持阻塞操作&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;要想让  &lt;code&gt;PriorityBlockingQueue&lt;/code&gt;  实现对任务的排序，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;传入的任务必须是具备排序能力的&lt;/font&gt;&lt;/strong&gt;，方式有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;让任务实现  &lt;code&gt;Comparable&lt;/code&gt;  接口，并重写  &lt;code&gt;compareTo&lt;/code&gt;  方法来指定任务之间的优先级比较规则。&lt;/li&gt;
&lt;li&gt;(推荐！)&lt;strong&gt; 创建  &lt;code&gt;PriorityBlockingQueue&lt;/code&gt;  时传入一个  &lt;code&gt;Comparator&lt;/code&gt;  对象来指定任务之间的排序规则&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;这存在一些风险和问题&lt;/font&gt;&lt;/strong&gt;，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PriorityBlockingQueue&lt;/code&gt;  是无界的，可能堆积大量的请求，从而导致 &lt;font color=&#39;red&#39;&gt;OOM&lt;/font&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解决方法：继承  &lt;code&gt;PriorityBlockingQueue&lt;/code&gt;  并&lt;strong&gt;重写一下  &lt;code&gt;offer&lt;/code&gt;  (入队) 方法&lt;/strong&gt;的逻辑，当插入的元素数量超过指定值就返回 false&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可能会导致&lt;font color=&#39;red&#39;&gt;饥饿问题&lt;/font&gt;，即低优先级的任务长时间得不到执行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解决方法：可以通过优化设计来解决（比较麻烦），比如&lt;strong&gt;等待时间过长的任务会被移除并重新添加到队列中，但是优先级会被提升&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于需要对队列中的元素进行排序操作以及保证线程安全（并发控制采用的是可重入锁  &lt;code&gt;ReentrantLock&lt;/code&gt;  ），因此会&lt;font color=&#39;red&#39;&gt;降低性能&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解决方法：性能方面的影响是&lt;strong&gt;没法避免&lt;/strong&gt;的，毕竟需要对任务进行排序操作。并且，对于大部分业务场景来说，这点性能影响是可以接受的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面试题线程池有了解吗线程池大概的原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试题线程池有了解吗线程池大概的原理&#34;&gt;#&lt;/a&gt; 【面试题】线程池有了解吗？线程池大概的原理？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;互联网、米哈游、后端、Java。考察的是&lt;strong&gt;线程池的常见参数、处理任务的流程&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线程池的核心参数如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;gree&#39;&gt;corePoolSize&lt;/font&gt;&lt;/strong&gt;：核心线程数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;gree&#39;&gt;maximumPoolSize&lt;/font&gt;&lt;/strong&gt;：最大线程数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;gree&#39;&gt;workQueue&lt;/font&gt;&lt;/strong&gt;：任务的阻塞队列&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;keepAliveTime&lt;/font&gt;：当线程池中的线程数量超过 corePoolSize 时，多余的空闲线程在超过 keepAliveTime 时间后会被终止。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;threadFactory&lt;/font&gt;：线程工厂，用于创建新的线程。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;handler&lt;/font&gt;：拒绝策略（饱和策略），当线程池无法接收新的任务时，采取的处理方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231018163149255.png&#34; alt=&#34;image-20231018163149255&#34; /&gt;&lt;/p&gt;
&lt;p&gt;线程池处理一个新任务的执行流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果 当前运行的线程数 ＜  &lt;code&gt;corePoolSize&lt;/code&gt;  ，那么就会&lt;font color=&#39;red&#39;&gt;新建一个线程&lt;/font&gt;来执行任务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果  &lt;code&gt;corePoolSize&lt;/code&gt;  ≤ 当前运行的线程数 ＜  &lt;code&gt;maximumPoolSize&lt;/code&gt; ，那么就&lt;font color=&#39;red&#39;&gt;把该任务放入到任务队列里等待执行&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;随着不断添加任务，&lt;font color=&#39;red&#39;&gt;如果任务队列满了，就新建一个线程&lt;/font&gt;来执行任务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 当前运行的线程数 ==  &lt;code&gt;maximumPoolSize&lt;/code&gt; ，此时任务队列、线程池都满了，那么根据&lt;font color=&#39;red&#39;&gt;拒绝策略（饱和策略）&lt;/font&gt;来处理无法接收的任务，比如抛出异常或者丢弃任务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/thread-pool-principle.png&#34; alt=&#34;图解线程池实现原理&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;当线程执行完任务后，会从任务队列中获取下一个任务继续执行，直到任务队列为空。&lt;/li&gt;
&lt;li&gt;当空闲线程的时间超过  &lt;code&gt;keepAliveTime&lt;/code&gt;  时，如果线程池中的线程数量超过  &lt;code&gt;corePoolSize&lt;/code&gt; ，则多余的空闲线程会被终止，直到线程数量等于  &lt;code&gt;corePoolSize&lt;/code&gt;  为止。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;面试题设计一个线程池需要考虑哪些因素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试题设计一个线程池需要考虑哪些因素&#34;&gt;#&lt;/a&gt; 【面试题】设计一个线程池需要考虑哪些因素？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;互联网、米哈游、后端情景题、系统设计。考察的是&lt;strong&gt;线程池的特征&lt;/strong&gt;，比较综合全面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设计一个线程池需要考虑以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;线程池的大小&lt;/font&gt;：线程池的大小应该根据系统的负载情况和任务的性质来确定。
&lt;ul&gt;
&lt;li&gt;如果线程池太小，会导致任务排队等待，影响系统的性能&lt;/li&gt;
&lt;li&gt;如果线程池太大，会造成过多的上下文切换。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;任务队列&lt;/font&gt;：线程池中的等待任务需要有一个队列来存储。任务队列可以是阻塞队列或非阻塞队列，根据具体的需求来选择。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;线程工厂&lt;/font&gt;：用于创建新的线程。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;拒绝策略&lt;/font&gt;：当线程池中的线程都处于忙碌状态时，新提交的任务会被放入任务队列中等待执行。此时需要设置一个拒绝策略，&lt;font color=&#39;red&#39;&gt;防止任务一直被放入队列中而无法执行&lt;/font&gt;。常见的拒绝策略有&lt;font color=&#39;red&#39;&gt;直接抛出异常、丢弃任务&lt;/font&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;饱和策略&lt;/font&gt;：当线程池中的线程数量达到最大值时，新提交的任务可能会被拒绝执行。此时需要设置一个饱和策略，&lt;font color=&#39;red&#39;&gt;防止线程池过度扩展&lt;/font&gt;。常见的饱和策略有&lt;font color=&#39;red&#39;&gt;直接抛出异常、丢弃任务&lt;/font&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;线程池监控&lt;/font&gt;：为了方便对线程池进行监控和管理，可以添加一些监控功能，如&lt;font color=&#39;red&#39;&gt;获取当前线程池的状态、获取当前正在执行的任务&lt;/font&gt;等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基于以上方面，可以设计一个简单的线程池示例代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concurrent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExample&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 创建一个固定大小的线程池&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ExecutorService&lt;/span&gt; executorService &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;SECONDS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;LinkedBlockingQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 提交任务到线程池中执行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; taskId &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            executorService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Task &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; taskId &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; is running by thread &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 关闭线程池&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        executorService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;java线程池最佳实践&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java线程池最佳实践&#34;&gt;#&lt;/a&gt; Java 线程池最佳实践&lt;/h3&gt;
&lt;h4 id=&#34;1-正确声明线程池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-正确声明线程池&#34;&gt;#&lt;/a&gt; 1、正确声明线程池&lt;/h4&gt;
&lt;p&gt;** 线程池必须手动通过  &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  的构造函数来声明，避免使用 &lt;code&gt;Executors&lt;/code&gt;  类创建线程池，会有 OOM 风险。** 说白了就是：&lt;strong&gt;使用有界队列，控制线程创建数量。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了避免 OOM 的原因之外，不推荐使用  &lt;code&gt;Executors&lt;/code&gt;  提供的两种快捷的线程池的原因还有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实际使用中需要根据自己机器的性能、业务场景来&lt;font color=&#39;red&#39;&gt;手动配置线程池的参数&lt;/font&gt;比如核心线程数、使用的任务队列、饱和策略等等。&lt;/li&gt;
&lt;li&gt;我们应该显示地给我们的线程池命名，这样有助于我们定位问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-监测线程池运行状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-监测线程池运行状态&#34;&gt;#&lt;/a&gt; 2、监测线程池运行状态&lt;/h4&gt;
&lt;p&gt;你可以通过一些手段来检测线程池的运行状态比如 SpringBoot 中的 &lt;font color=&#39;red&#39;&gt;Actuator 组件&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;除此之外，我们还可以利用  &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  的相关 API 做一个简陋的监控。从下图可以看出， &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  提供了获取线程池当前的线程数和活跃线程数、已经执行完成的任务数、正在排队中的任务数等等。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231021094845929.png&#34; alt=&#34;image-20231021094845929&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下面是一个简单的 Demo。 &lt;code&gt;printThreadPoolStatus()&lt;/code&gt;  会每隔一秒打印出线程池的线程数、活跃线程数、完成的任务数、以及队列中的任务数。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 打印线程池的状态&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @param threadPool 线程池对象&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;printThreadPoolStatus&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt; threadPool&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;ScheduledExecutorService&lt;/span&gt; scheduledExecutorService &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ScheduledThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createThreadFactory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;print-images/thread-pool-status&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    scheduledExecutorService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;scheduleAtFixedRate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;=========================&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;ThreadPool Size: [&amp;#123;&amp;#125;]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; threadPool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getPoolSize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Active Threads: &amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; threadPool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getActiveCount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Number of Tasks : &amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; threadPool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getCompletedTaskCount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Number of Tasks in Queue: &amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; threadPool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getQueue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;=========================&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;SECONDS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;3-建议不同类别的业务用不同的线程池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-建议不同类别的业务用不同的线程池&#34;&gt;#&lt;/a&gt; 3、建议不同类别的业务用不同的线程池&lt;/h4&gt;
&lt;p&gt;很多人在实际项目中都会有类似这样的问题：我的项目中多个业务需要用到线程池，是为每个线程池都定义一个还是说定义一个公共的线程池呢？&lt;/p&gt;
&lt;p&gt;一般建议是&lt;strong&gt;不同的业务使用不同的线程池&lt;/strong&gt;，配置线程池的时候根据当前业务的情况对当前线程池进行配置，因为不同的业务的并发以及对资源的使用情况都不同，重心优化系统性能瓶颈相关的业务。&lt;/p&gt;
&lt;p&gt;我们再来看一个真实的事故案例！ (本案例来源自：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbHViLnBlcmZtYS5jb20vYXJ0aWNsZS82NDY2Mzk=&#34;&gt;《线程池运用不当的一次线上事故》&lt;/span&gt; ，很精彩的一个案例)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/production-accident-threadpool-sharing-example.png&#34; alt=&#34;案例代码概览&#34; /&gt;&lt;/p&gt;
&lt;p&gt;上面的代码可能会存在死锁的情况，为什么呢？画个图给大家捋一捋。&lt;/p&gt;
&lt;p&gt;试想这样一种极端情况：假如我们线程池的核心线程数为 n，父任务（扣费任务）数量为 n，父任务下面有两个子任务（扣费任务下的子任务），其中一个已经执行完成，另外一个被放在了任务队列中。由于父任务把线程池核心线程资源用完，所以子任务因为无法获取到线程资源无法正常执行，一直被阻塞在队列中。父任务等待子任务执行完成，而子任务等待父任务释放线程池资源，这也就造成了 &lt;strong&gt;&amp;quot;死锁&amp;quot;&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;解决方法也很简单，就是&lt;strong&gt;专门为执行子任务新增加一个线程池&lt;/strong&gt;为其服务。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/production-accident-threadpool-sharing-deadlock.png&#34; alt=&#34;线程池使用不当导致死锁&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-别忘记给线程池命名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-别忘记给线程池命名&#34;&gt;#&lt;/a&gt; 4、别忘记给线程池命名&lt;/h4&gt;
&lt;p&gt;初始化线程池的时候需要&lt;font color=&#39;red&#39;&gt;显示命名（设置线程池名称前缀）&lt;/font&gt;，有利于定位问题。&lt;/p&gt;
&lt;p&gt;默认情况下创建的线程名字类似  &lt;code&gt;pool-1-thread-n&lt;/code&gt;  这样的，没有业务含义，不利于我们定位问题。&lt;/p&gt;
&lt;p&gt;给线程池里的线程命名通常有下面两种方式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、利用 guava 的  &lt;code&gt;ThreadFactoryBuilder&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;ThreadFactory&lt;/span&gt; threadFactory &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadFactoryBuilder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setNameFormat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;threadNamePrefix &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;-%d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setDaemon&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;ExecutorService&lt;/span&gt; threadPool &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;corePoolSize&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; maximumPoolSize&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; keepAliveTime&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;MINUTES&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; workQueue&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; threadFactory&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;2、自己实现  &lt;code&gt;ThreadFactory&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concurrent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Executors&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concurrent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ThreadFactory&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concurrent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;atomic&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;AtomicInteger&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 线程工厂，它设置线程名称，有利于我们定位问题。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NamingThreadFactory&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadFactory&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;AtomicInteger&lt;/span&gt; threadNum &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadFactory&lt;/span&gt; delegate&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 创建一个带名字的线程池生产工厂&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NamingThreadFactory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ThreadFactory&lt;/span&gt; delegate&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;delegate &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; delegate&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// TODO consider uniquifying this&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;newThread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; r&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; delegate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;newThread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; [#&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; threadNum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;incrementAndGet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;5-正确配置线程池大小&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-正确配置线程池大小&#34;&gt;#&lt;/a&gt; 5、正确配置线程池大小&lt;/h4&gt;
&lt;h5 id=&#34;常规操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常规操作&#34;&gt;#&lt;/a&gt; 常规操作&lt;/h5&gt;
&lt;p&gt;线程池大小设置过大或者过小都会有问题，合适的才是最好。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;** 线程过少会导致大量任务堆积，造成 OOM **。如果同一时间有大量任务 / 请求需要处理，可能会导致大量的请求 / 任务在任务队列中排队等待执行，甚至会出现任务队列满了之后任务 / 请求无法处理的情况，或者大量任务堆积在任务队列导致 OOM。这样很明显是有问题的，CPU 根本没有得到充分利用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;线程过多会增加上下文切换成本&lt;/strong&gt;。大量线程可能会同时在争取 CPU 资源，这样会导致大量的上下文切换，从而增加线程的执行时间，影响了整体执行效率。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上下文切换：任务从保存到再加载的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有一个简单并且适用面较广的公式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CPU 密集型任务 (N+1)&lt;/strong&gt;：这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下&lt;font color=&#39;red&#39;&gt;多出来的一个线程就可以充分利用 CPU 的空闲时间&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CPU 密集型任务：简单理解就是&lt;font color=&#39;red&#39;&gt;利用 CPU 计算能力&lt;/font&gt;的任务。比如你在内存中对大量数据进行排序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I/O 密集型任务 (2N)&lt;/strong&gt;：这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。&lt;font color=&#39;red&#39;&gt;因此在 I/O 密集型任务的应用中，我们可以多配置一些线程&lt;/font&gt;，具体的计算方法是 2N。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IO 密集型任务：但凡&lt;font color=&#39;red&#39;&gt;涉及到网络读取，文件读取&lt;/font&gt;，这类任务都是 IO 密集型，特点是 CPU 计算耗费时间相比于等待 IO 操作完成的时间来说很少，&lt;font color=&#39;red&#39;&gt;大部分时间都花在了等待 IO 操作完成上&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;美团骚操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#美团骚操作&#34;&gt;#&lt;/a&gt; 美团骚操作&lt;/h5&gt;
&lt;p&gt;美团技术团队的思路是&lt;font color=&#39;red&#39;&gt;对&lt;strong&gt;线程池的 3 个核心参数&lt;/strong&gt;实现自定义可配置&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;corePoolSize&lt;/code&gt; &lt;/strong&gt;：核心线程数量。当任务队列未达到容量时，可以同时运行的最大线程数量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;maximumPoolSize&lt;/code&gt; &lt;/strong&gt;：最大线程数量。当任务队列达到容量时，可以同时运行的最大线程数量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;workQueue&lt;/code&gt; &lt;/strong&gt;：任务队列。当新任务来时，如果当前运行的线程数量达到了  &lt;code&gt;corePoolSize&lt;/code&gt;  的话，新任务就会被存放在该队列中。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这 3 个参数之所以如此重要，是因为它们基本决定了线程池对任务的处理策略。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;  提供的下面这些方法支持参数的动态配置。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/threadpoolexecutor-methods.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;需要注意的是  &lt;code&gt;corePoolSize&lt;/code&gt; ， 程序运行期间的时候，我们调用 &lt;code&gt;setCorePoolSize（）&lt;/code&gt; 方法的话，线程池会首先判断当前工作线程数是否大于  &lt;code&gt;corePoolSize&lt;/code&gt; ，如果大于的话就会回收工作线程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另外，&lt;font color=&#34;red&#34;&gt;上面并没有动态指定任务队列长度的方法&lt;/font&gt;，因此美团自定义了一个叫做 &lt;strong&gt; &lt;code&gt;ResizableCapacityLinkedBlockIngQueue&lt;/code&gt; &lt;/strong&gt; 的队列。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要就是把  &lt;code&gt;LinkedBlockingQueue&lt;/code&gt;  的 capacity 字段的 final 关键字修饰给去掉了，让它变为可变的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终实现的可动态修改线程池参数效果如下。👏👏👏&lt;/p&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/meituan-dynamically-configuring-thread-pool-parameters.png&#34; alt=&#34;动态配置线程池参数最终效果&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;p&gt;如果我们的项目也想要实现这种效果的话，可以借助现成的开源项目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL29wZW5nb29meS9oaXBwbzRq&#34;&gt;Hippo4j&lt;/span&gt;&lt;/strong&gt;：异步线程池框架，支持线程池动态变更 &amp;amp; 监控 &amp;amp; 报警，无需修改代码轻松引入。支持多种使用模式，轻松引入，致力于提高系统运行保障能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2Ryb21hcmEvZHluYW1pYy10cA==&#34;&gt;Dynamic TP&lt;/span&gt;&lt;/strong&gt;：轻量级动态线程池，内置监控告警功能，集成三方中间件线程池管理，基于主流配置中心（已支持 Nacos、Apollo，Zookeeper、Consul、Etcd，可通过 SPI 自定义实现）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-记得关闭线程池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-记得关闭线程池&#34;&gt;#&lt;/a&gt; 6、记得关闭线程池&lt;/h4&gt;
&lt;p&gt;当线程池不再需要使用时，应该显式地关闭线程池，释放线程资源。&lt;/p&gt;
&lt;p&gt;线程池提供了两个关闭方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;shutdown()&lt;/code&gt; &lt;/strong&gt;：关闭线程池，线程池的状态变为  &lt;code&gt;SHUTDOWN&lt;/code&gt;  。线程池不再接受新任务了，但是&lt;strong&gt;队列里的任务得执行完毕&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;shutdownNow()&lt;/code&gt; &lt;/strong&gt;：关闭线程池，线程池的状态变为  &lt;code&gt;STOP&lt;/code&gt;  。线程池会终止当前正在运行的任务，&lt;strong&gt;停止处理排队的任务&lt;/strong&gt;，并返回正在等待执行的 List。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用完  &lt;code&gt;shutdownNow&lt;/code&gt;  和  &lt;code&gt;shuwdown&lt;/code&gt;  方法后，并不代表线程池已经完成关闭操作，它只是异步的通知线程池进行关闭处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果要同步等待线程池彻底关闭后才继续往下执行，需要调用  &lt;code&gt;awaitTermination()&lt;/code&gt;  方法进行同步等待&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在调用  &lt;code&gt;awaitTermination()&lt;/code&gt;  方法时，应该设置合理的超时时间，以避免程序长时间阻塞而导致性能问题。&lt;/li&gt;
&lt;li&gt;另外，由于线程池中的任务可能会被取消或抛出异常，因此在使用  &lt;code&gt;awaitTermination()&lt;/code&gt;  方法时还需要进行异常处理。该方法会抛出  &lt;code&gt;InterruptedException&lt;/code&gt;  异常，需要捕获并处理该异常，以避免程序崩溃或者无法正常退出。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// ...&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 关闭线程池&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;executor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 等待线程池关闭，最多等待 5 分钟&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;executor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;awaitTermination&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;MINUTES&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 如果等待超时，则打印日志&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;线程池未能在5分钟内完全关闭&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 异常处理&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;7-线程池尽量不要放耗时任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-线程池尽量不要放耗时任务&#34;&gt;#&lt;/a&gt; 7、线程池尽量不要放耗时任务&lt;/h4&gt;
&lt;p&gt;线程池本身的目的是为了提高任务执行效率，避免因频繁创建和销毁线程而带来的性能开销。如果将耗时任务提交到线程池中执行，可能会导致线程池中的线程被长时间占用，无法及时响应其他任务，甚至会导致线程池崩溃或者程序假死。&lt;/p&gt;
&lt;p&gt;因此，在使用线程池时，我们应该尽量避免将耗时任务提交到线程池中执行&lt;font color=&#39;red&#39;&gt;。对于一些比较耗时的操作，如网络请求、文件读写等，可以采用&lt;strong&gt;异步操作&lt;/strong&gt;的方式来处理，以避免阻塞线程池中的线程&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;8-线程池使用的一些小坑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-线程池使用的一些小坑&#34;&gt;#&lt;/a&gt; 8、线程池使用的一些小坑&lt;/h4&gt;
&lt;h5 id=&#34;不要重复创建线程池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不要重复创建线程池&#34;&gt;#&lt;/a&gt; 不要重复创建线程池&lt;/h5&gt;
&lt;p&gt;线程池是可以复用的，一定不要频繁创建线程池（比如一个用户请求到了就单独创建一个线程池）。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@GetMapping&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;wrong&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;wrong&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 自定义线程池&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt; executor &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;SECONDS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayBlockingQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;CallerRunsPolicy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//  处理任务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    executor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// ......&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;OK&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;出现这种问题的原因还是对于线程池认识不够，需要加强线程池的基础知识。&lt;/p&gt;
&lt;h5 id=&#34;使用spring内部线程池时一定要手动自定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用spring内部线程池时一定要手动自定义&#34;&gt;#&lt;/a&gt; 使用 Spring 内部线程池时一定要手动自定义&lt;/h5&gt;
&lt;p&gt;使用 Spring 内部线程池时，一定要手动自定义线程池，配置合理的参数，不然会出现生产问题（一个请求创建一个线程）。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Configuration&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@EnableAsync&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolExecutorConfig&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Bean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;threadPoolExecutor&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Executor&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;threadPoolExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolTaskExecutor&lt;/span&gt; threadPoolExecutor &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ThreadPoolTaskExecutor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; processNum &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Runtime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRuntime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;availableProcessors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 返回可用处理器的 Java 虚拟机的数量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; corePoolSize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;processNum &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; maxPoolSize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;processNum &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        threadPoolExecutor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setCorePoolSize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;corePoolSize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 核心池大小&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        threadPoolExecutor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setMaxPoolSize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;maxPoolSize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 最大线程数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        threadPoolExecutor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setQueueCapacity&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;maxPoolSize &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 队列程度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        threadPoolExecutor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setThreadPriority&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;MAX_PRIORITY&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        threadPoolExecutor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setDaemon&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        threadPoolExecutor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setKeepAliveSeconds&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 线程空闲时间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        threadPoolExecutor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setThreadNamePrefix&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;test-Executor-&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 线程名字前缀&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; threadPoolExecutor&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;线程池和-threadlocal-不要共用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程池和-threadlocal-不要共用&#34;&gt;#&lt;/a&gt; 线程池和 ThreadLocal 不要共用&lt;/h5&gt;
&lt;p&gt;线程池和  &lt;code&gt;ThreadLocal&lt;/code&gt;  共用，可能会导致线程从  &lt;code&gt;ThreadLocal&lt;/code&gt;  获取到的是旧值 / 脏数据。&lt;strong&gt;因为线程池会复用线程对象，与线程对象绑定的类的静态属性  &lt;code&gt;ThreadLocal&lt;/code&gt;  变量也会被重用，这就导致一个线程可能获取到其他线程的 &lt;code&gt;ThreadLocal&lt;/code&gt;  值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;不要以为代码中没有显示使用线程池就不存在线程池了，像常用的 Web 服务器 Tomcat 处理任务为了提高并发量，就使用到了线程池，并且使用的是基于原生 Java 线程池改进完善得到的自定义线程池。&lt;/p&gt;
&lt;p&gt;当然了，你可以将 Tomcat 设置为单线程处理任务。不过，这并不合适，会严重影响其处理任务的速度。&lt;/p&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;figcaption data-lang=&#34;.properties&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;server.tomcat.max-threads&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token value attr-value&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;解决上述问题比较建议的办法是&lt;strong&gt;使用阿里巴巴开源的   &lt;code&gt;TransmittableThreadLocal&lt;/code&gt; ( &lt;code&gt;TTL&lt;/code&gt; ) 来代替  &lt;code&gt;ThreadLocal&lt;/code&gt; &lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该类继承并加强了 JDK 内置的  &lt;code&gt;InheritableThreadLocal&lt;/code&gt;  类，在使用线程池等会池化复用线程的执行组件情况下，提供  &lt;code&gt;ThreadLocal&lt;/code&gt;  的值传递功能，解决异步执行时上下文传递的问题。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvdHJhbnNtaXR0YWJsZS10aHJlYWQtbG9jYWw=&#34;&gt;https://github.com/alibaba/transmittable-thread-local&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;future-接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#future-接口&#34;&gt;#&lt;/a&gt; Future 接口&lt;/h2&gt;
&lt;h3 id=&#34;有什么用-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有什么用-2&#34;&gt;#&lt;/a&gt; 有什么用？&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Future&lt;/code&gt;  类是 **&lt;font color=&#39;red&#39;&gt;异步调用思想&lt;/font&gt;** 的典型运用，可以将这个耗时任务交给一个子线程去异步执行，同时我们可以干点其他事情，&lt;font color=&#39;red&#39;&gt;不用傻傻等待耗时任务执行完成&lt;/font&gt;。等我们的事情干完后，再通过  &lt;code&gt;Future&lt;/code&gt;  类获取到耗时任务的执行结果。&lt;font color=&#39;red&#39;&gt;可以提高程序的执行效率&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;在 Java 中， &lt;code&gt;Future&lt;/code&gt;  类只是一个 **&lt;font color=&#39;red&#39;&gt;泛型接口&lt;/font&gt;**，位于  &lt;code&gt;java.util.concurrent&lt;/code&gt;  包下，其中定义了 5 个方法，主要包括下面这 4 个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;取消任务&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;判断任务是否被取消&lt;/li&gt;
&lt;li&gt;判断任务是否已经执行完成&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;gree&#39;&gt;获取任务执行结果&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// V 代表了 Future 执行的任务返回值的类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 取消任务执行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 成功取消返回 true，否则返回 false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cancel&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; mayInterruptIfRunning&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 判断任务是否被取消&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;isCancelled&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 判断任务是否已经执行完成&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;isDone&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 获取任务执行结果&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ExecutionException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 指定时间内没有返回计算结果就抛出 TimeOutException 异常&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; timeout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TimeUnit&lt;/span&gt; unit&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ExecutionException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;TimeoutException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;简单理解就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我有一个任务，提交给了  &lt;code&gt;Future&lt;/code&gt;  来处理。&lt;/li&gt;
&lt;li&gt;任务执行期间，我可以去做任何想做的事情，还可以取消任务或者获取任务的执行状态。&lt;/li&gt;
&lt;li&gt;一段时间之后，我就可以  &lt;code&gt;Future&lt;/code&gt;  那里直接取出任务执行结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;与-callable-的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#与-callable-的关系&#34;&gt;#&lt;/a&gt; 与 Callable 的关系&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;FutureTask&lt;/code&gt;  类基本实现了  &lt;code&gt;Future&lt;/code&gt;  接口&lt;/strong&gt;，常用来封装  &lt;code&gt;Callable&lt;/code&gt;  和  &lt;code&gt;Runnable&lt;/code&gt; ，具有取消任务、查看任务是否执行完成、获取任务执行结果的方法。 &lt;code&gt;ExecutorService.submit()&lt;/code&gt;  方法返回的其实就是  &lt;code&gt;Future&lt;/code&gt;  的实现类  &lt;code&gt;FutureTask&lt;/code&gt;  。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Callable&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; task&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; task&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;FutureTask&lt;/code&gt;  不光实现了  &lt;code&gt;Future&lt;/code&gt;  接口，还实现了  &lt;code&gt;Runnable&lt;/code&gt;  接口，因此可以作为任务直接被线程执行。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/completablefuture-class-diagram.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FutureTask&lt;/code&gt;  有两个构造函数，可传入  &lt;code&gt;Callable&lt;/code&gt;  或者  &lt;code&gt;Runnable&lt;/code&gt;  对象。实际上，传入  &lt;code&gt;Runnable&lt;/code&gt;  对象也会在方法内部转换为  &lt;code&gt;Callable&lt;/code&gt;  对象。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FutureTask&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Callable&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; callable&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;callable &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NullPointerException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;callable &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; callable&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;NEW&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FutureTask&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; runnable&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;V&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 通过适配器 RunnableAdapter 来将 Runnable 对象转换成 Callable 对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;callable &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Executors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;callable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;runnable&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;NEW&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt; &lt;code&gt;FutureTask&lt;/code&gt;  相当于对  &lt;code&gt;Callable&lt;/code&gt;  进行了封装，管理着任务执行的情况，存储了  &lt;code&gt;Callable&lt;/code&gt;  的  &lt;code&gt;call&lt;/code&gt;  方法的任务执行结果&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;completablefuture-类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#completablefuture-类&#34;&gt;#&lt;/a&gt; CompletableFuture 类&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Future&lt;/code&gt;  在实际使用过程中存在一些局限性，比如不支持异步任务的编排组合、获取计算结果的  &lt;code&gt;get()&lt;/code&gt;  方法为阻塞调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java 8 引入  &lt;code&gt;CompletableFuture&lt;/code&gt;  类来解决  &lt;code&gt;Future&lt;/code&gt;  的这些缺陷&lt;/strong&gt;。除了提供了更为好用和强大的  &lt;code&gt;Future&lt;/code&gt;  特性之外，还提供了&lt;font color=&#39;red&#39;&gt;函数式编程、异步任务编排组合（可以将多个异步任务串联起来，组成一个完整的链式调用）&lt;/font&gt;等能力。&lt;/p&gt;
&lt;p&gt;下面我们来简单看看  &lt;code&gt;CompletableFuture&lt;/code&gt;  类的定义。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CompletionStage&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看到， &lt;code&gt;CompletableFuture&lt;/code&gt;  同时实现了  &lt;code&gt;Future&lt;/code&gt;  接口和  &lt;code&gt;CompletionStage&lt;/code&gt;  接口。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/github/javaguide/java/concurrent/completablefuture-class-diagram.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt; &lt;code&gt;CompletionStage&lt;/code&gt;  接口描述了一个异步计算的阶段&lt;/font&gt;。很多计算可以分成多个阶段或步骤，此时可以通过它将所有步骤组合起来，形成异步计算的流水线。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CompletionStage&lt;/code&gt;  接口中的方法比较多， &lt;code&gt;CompletableFuture&lt;/code&gt;  的函数式能力就是这个接口赋予的。从这个接口的方法参数你就可以发现其大量使用了 Java8 引入的函数式编程。&lt;/p&gt;
&lt;h1 id=&#34;并发包juc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并发包juc&#34;&gt;#&lt;/a&gt; 并发包（J.U.C）&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;java.util.concurrent&lt;/code&gt;  包&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;java常见并发容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java常见并发容器&#34;&gt;#&lt;/a&gt; Java 常见并发容器&lt;/h2&gt;
&lt;p&gt;JDK 提供的这些容器大部分在  &lt;code&gt;java.util.concurrent&lt;/code&gt;  包中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;ConcurrentHashMap&lt;/code&gt; &lt;/strong&gt; : 线程安全的  &lt;code&gt;HashMap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt; &lt;/strong&gt; : 线程安全的  &lt;code&gt;List&lt;/code&gt; ，在&lt;font color=&#39;red&#39;&gt;读多写少&lt;/font&gt;的场合性能非常好，远远好于  &lt;code&gt;Vector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt; &lt;/strong&gt; : 高效的并发队列，&lt;font color=&#39;red&#39;&gt;使用链表实现&lt;/font&gt;。可以看做一个线程安全的  &lt;code&gt;LinkedList&lt;/code&gt; ，这是一个&lt;font color=&#39;red&#39;&gt;非阻塞队列&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;BlockingQueue&lt;/code&gt; &lt;/strong&gt; : 这是一个&lt;font color=&#39;red&#39;&gt;接口&lt;/font&gt;，JDK 内部通过链表、数组等方式实现了这个接口。表示&lt;font color=&#39;red&#39;&gt;阻塞队列&lt;/font&gt;，非常适合用于作为数据共享的通道&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;ConcurrentSkipListMap&lt;/code&gt; &lt;/strong&gt; : &lt;font color=&#39;red&#39;&gt;跳表&lt;/font&gt;的实现。这是一个 Map，使用跳表的数据结构进行快速查找&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;concurrenthashmap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#concurrenthashmap&#34;&gt;#&lt;/a&gt; ConcurrentHashMap&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;线程安全的  &lt;code&gt;HashMap&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt; &lt;code&gt;HashMap&lt;/code&gt;  不是线程安全的&lt;/font&gt;，在并发场景下如果要保证一种可行的方式是使用  &lt;code&gt;Collections.synchronizedMap()&lt;/code&gt;  方法来包装我们的  &lt;code&gt;HashMap&lt;/code&gt; 。但这是通过使用一个全局的锁来同步不同线程间的并发访问，因此会带来不可忽视的性能问题。&lt;/p&gt;
&lt;p&gt;所以就有了 &lt;strong&gt; &lt;code&gt;HashMap&lt;/code&gt;  的线程安全版本&lt;/strong&gt; ——  &lt;code&gt;ConcurrentHashMap&lt;/code&gt;  的诞生。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 JDK 1.7 的时候， &lt;code&gt;ConcurrentHashMap&lt;/code&gt;  对整个桶数组进行了分段（Segment），采用的是&lt;strong&gt;分段锁&lt;/strong&gt;，每把锁对应一个 Segment。每个  &lt;code&gt;Segment&lt;/code&gt;  都是一个类似  &lt;code&gt;HashMap&lt;/code&gt;  数组的结构，它可以扩容，它的冲突会转化为链表。但是  &lt;code&gt;Segment&lt;/code&gt;  的个数一但初始化就不能改变。&lt;/li&gt;
&lt;li&gt;到了 JDK 1.8 的时候， &lt;code&gt;ConcurrentHashMap&lt;/code&gt;  摒弃了  &lt;code&gt;Segment&lt;/code&gt;  的概念，而是采用 &lt;strong&gt; &lt;code&gt;Node&lt;/code&gt;  数组 + 链表 / 红黑树&lt;/strong&gt; 的数据结构来实现，使用 &lt;strong&gt; &lt;code&gt;synchronized&lt;/code&gt;  锁 + CAS&lt;/strong&gt; 来控制并发。Node 是类似于一个 HashEntry 的结构。它的冲突再达到一定大小时会转化成红黑树，在冲突小于一定数量时又退回链表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;concurrenthashmap-17&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#concurrenthashmap-17&#34;&gt;#&lt;/a&gt; ConcurrentHashMap 1.7&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/java7_concurrenthashmap.png&#34; alt=&#34;Java 7 ConcurrentHashMap 存储结构&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Java 7 中  &lt;code&gt;ConcurrentHashMap&lt;/code&gt;  的存储结构如上图，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ConcurrnetHashMap&lt;/code&gt;  由很多个  &lt;code&gt;Segment&lt;/code&gt;  组合&lt;/li&gt;
&lt;li&gt;每一个  &lt;code&gt;Segment&lt;/code&gt;  是一个类似于  &lt;code&gt;HashMap&lt;/code&gt;  的结构  &lt;code&gt;HashEntry&lt;/code&gt;  数组，所以每一个  &lt;code&gt;HashEntry&lt;/code&gt;  的内部可以进行扩容。&lt;/li&gt;
&lt;li&gt;但是  &lt;code&gt;Segment&lt;/code&gt;  的个数一旦&lt;strong&gt;初始化就不能改变&lt;/strong&gt;，默认  &lt;code&gt;Segment&lt;/code&gt;  的个数是 16 个，你也可以认为  &lt;code&gt;ConcurrentHashMap&lt;/code&gt;  默认支持最多 16 个线程并发。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;concurrenthashmap-18&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#concurrenthashmap-18&#34;&gt;#&lt;/a&gt; ConcurrentHashMap 1.8&lt;/h4&gt;
&lt;h5 id=&#34;存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储结构&#34;&gt;#&lt;/a&gt; 存储结构&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/java8_concurrenthashmap.png&#34; alt=&#34;Java8 ConcurrentHashMap 存储结构（图片来自 javadoop）&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以发现 Java8 的 ConcurrentHashMap 相对于 Java7 来说变化比较大，不再是之前的 Segment 数组 + HashEntry 数组 + 链表，而是 &lt;strong&gt;Node 数组 + 链表 / 红黑树&lt;/strong&gt;。&lt;font color=&#39;red&#39;&gt;当冲突链表达到一定长度时，链表会转换成红黑树&lt;/font&gt;。&lt;/p&gt;
&lt;h5 id=&#34;初始化-inittable&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化-inittable&#34;&gt;#&lt;/a&gt; 初始化 initTable&lt;/h5&gt;
&lt;p&gt;从源码中可以发现  &lt;code&gt;ConcurrentHashMap&lt;/code&gt;  的初始化是通过&lt;strong&gt;自旋&lt;/strong&gt;和 &lt;strong&gt;CAS 操作&lt;/strong&gt;完成的。里面需要注意的是变量  &lt;code&gt;sizeCtl&lt;/code&gt;  ，它的值决定着当前的初始化状态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;-1 说明正在初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-N 说明有 N-1 个线程正在进行扩容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0 表示 table 初始化大小，如果 table 没有初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;gt;0 表示 table 扩容的阈值，如果 table 已经初始化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;put&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#put&#34;&gt;#&lt;/a&gt; put&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据 key 计算出 hashcode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断是否需要进行初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;即为当前 key 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果当前位置的  &lt;code&gt;hashcode == MOVED == -1&lt;/code&gt; ，则需要进行扩容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果都不满足，则利用 synchronized 锁写入数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果数量大于  &lt;code&gt;TREEIFY_THRESHOLD&lt;/code&gt;  则要执行树化方法，在  &lt;code&gt;treeifyBin&lt;/code&gt;  中会首先判断当前数组长度 ≥64 时才会将链表转换为红黑树&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;get&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get&#34;&gt;#&lt;/a&gt; get&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;根据 hash 值计算位置。&lt;/li&gt;
&lt;li&gt;查找到指定位置，如果头节点就是要找的，直接返回它的 value.&lt;/li&gt;
&lt;li&gt;如果头节点 hash 值小于 0 ，说明正在扩容或者是红黑树，查找之。&lt;/li&gt;
&lt;li&gt;如果是链表，遍历查找之。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;面试题concurrenthashmap-相对于-hashmap-好在哪里&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试题concurrenthashmap-相对于-hashmap-好在哪里&#34;&gt;#&lt;/a&gt; 【面试题】concurrentHashMap 相对于 hashMap 好在哪里？&lt;/h4&gt;
&lt;p&gt;ConcurrentHashMap 是 Java 中的一个&lt;strong&gt;线程安全&lt;/strong&gt;的 hashMap 实现，它可以在多线程环境下并发地进行读写操作，而&lt;font color=&#39;red&#39;&gt;不需要像传统的 hashMap 那样在读写时加锁&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;ConcurrentHashMap 的实现原理主要基于&lt;strong&gt;分段锁&lt;/strong&gt;和 CAS 操作。它将整个哈希表分成了多个 Segment（段），每个 Segment 都类似于一个小的 HashMap，它拥有自己的数组和一个独立的锁。在 ConcurrentHashMap 中，读操作不需要锁，可以直接对 Segment 进行读取，而&lt;font color=&#39;red&#39;&gt;写操作则只需要锁定对应的 Segment，而不是整个哈希表&lt;/font&gt;，这样可以大大提高并发性能。&lt;/p&gt;
&lt;h3 id=&#34;copyonwritearraylist&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#copyonwritearraylist&#34;&gt;#&lt;/a&gt; CopyOnWriteArrayList&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;线程安全的  &lt;code&gt;List&lt;/code&gt; &lt;/strong&gt;，适合读多写少的场景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 JDK1.5 之前，如果想要使用并发安全的  &lt;code&gt;List&lt;/code&gt;  只能选择  &lt;code&gt;Vector&lt;/code&gt; 。而  &lt;code&gt;Vector&lt;/code&gt;  是一种老旧的集合，已经被淘汰。 &lt;code&gt;Vector&lt;/code&gt;  对于增删改查等方法基本都加了  &lt;code&gt;synchronized&lt;/code&gt; ，这种方式虽然能够保证同步，但这相当于对整个  &lt;code&gt;Vector&lt;/code&gt;  加上了一把大锁，使得每个方法执行的时候都要去获得锁，导致性能非常低下。&lt;/p&gt;
&lt;p&gt;JDK1.5 引入了  &lt;code&gt;Java.util.concurrent&lt;/code&gt; （JUC）包，其中提供了很多线程安全且并发性能良好的容器，其中唯一的线程安全  &lt;code&gt;List&lt;/code&gt;  实现就是  &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;对于大部分业务场景来说，读取操作往往是远大于写入操作的。由于读取操作不会对原有数据进行修改，因此，对于每次读取都进行加锁其实是一种资源浪费。相比之下，我们应该允许多个线程同时访问  &lt;code&gt;List&lt;/code&gt;  的内部数据，毕竟对于读取操作来说是安全的。&lt;/p&gt;
&lt;p&gt;这种思路与  &lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;  读写锁的设计思想非常类似，即读读不互斥、读写互斥、写写互斥（&lt;font color=&#39;red&#39;&gt;只有读读不互斥&lt;/font&gt;）。 &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;  更进一步地实现了这一思想。为了将读操作性能发挥到极致， &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;  中的&lt;font color=&#39;red&#39;&gt;读取操作是完全无需加锁的&lt;/font&gt;。更加厉害的是，&lt;font color=&#39;red&#39;&gt;写入操作也不会阻塞读取操作，只有写写才会互斥&lt;/font&gt;。这样一来，读操作的性能就可以大幅度提升。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;  线程安全的核心在于其采用了 &lt;strong&gt;写时复制（Copy-On-Write）&lt;/strong&gt; 的策略，从  &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;  的名字就能看出了。&lt;/p&gt;
&lt;p&gt;当需要修改（  &lt;code&gt;add&lt;/code&gt; ， &lt;code&gt;set&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt;  等操作）  &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;  的内容时，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;不会直接修改原数组，而是会先创建底层数组的副本，对副本数组进行修改，修改完之后再将修改后的数组赋值回去&lt;/font&gt;&lt;/strong&gt;，这样就可以保证写操作不会影响读操作了。&lt;/p&gt;
&lt;h3 id=&#34;concurrentlinkedqueue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#concurrentlinkedqueue&#34;&gt;#&lt;/a&gt; ConcurrentLinkedQueue&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;线程安全的&lt;font color=&#39;red&#39;&gt;非阻塞队列&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java 提供的线程安全的  &lt;code&gt;Queue&lt;/code&gt;  可以分为阻塞队列和非阻塞队列，其中阻塞队列的典型例子是  &lt;code&gt;BlockingQueue&lt;/code&gt; ，非阻塞队列的典型例子是  &lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt; ，在实际应用中要根据实际需要选用阻塞队列或者非阻塞队列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阻塞队列可以通过加锁来实现，非阻塞队列可以通过 CAS 操作实现。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从名字可以看出， &lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt;  这个队列使用&lt;font color=&#39;red&#39;&gt;链表&lt;/font&gt;作为其数据结构。 &lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt;  应该算是在高并发环境中性能最好的队列了。它之所有能有&lt;font color=&#39;red&#39;&gt;很好的性能&lt;/font&gt;，是因为其内部复杂的实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt;  主要使用 &lt;strong&gt;CAS 非阻塞算法&lt;/strong&gt;来实现线程安全就好了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt;  适合在对性能要求相对较高，同时对队列的读写存在多个线程同时进行的场景，即如果对队列加锁的成本较高则适合使用&lt;font color=&#39;red&#39;&gt;无锁&lt;/font&gt;的  &lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt;  来替代。&lt;/p&gt;
&lt;h3 id=&#34;blockingqueue-接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#blockingqueue-接口&#34;&gt;#&lt;/a&gt; BlockingQueue 接口&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;线程安全的&lt;font color=&#39;red&#39;&gt;阻塞队列&lt;/font&gt;&lt;/strong&gt;，可用作线程池中的工作队列 &lt;code&gt;workQueue&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;简介-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-8&#34;&gt;#&lt;/a&gt; 简介&lt;/h4&gt;
&lt;p&gt;阻塞队列（ &lt;code&gt;BlockingQueue&lt;/code&gt; ）被广泛使用在 “生产者 - 消费者” 问题中，其原因是  &lt;code&gt;BlockingQueue&lt;/code&gt;  提供了&lt;font color=&#39;red&#39;&gt;可阻塞的插入和移除&lt;/font&gt;的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当队列容器已满，生产者线程会被阻塞，直到队列未满&lt;/li&gt;
&lt;li&gt;当队列容器为空时，消费者线程会被阻塞，直至队列非空时为止&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;BlockingQueue&lt;/code&gt;  是一个&lt;font color=&#39;red&#39;&gt;接口&lt;/font&gt;，继承自  &lt;code&gt;Queue&lt;/code&gt; ，所以其实现类也可以作为  &lt;code&gt;Queue&lt;/code&gt;  的实现来使用，而  &lt;code&gt;Queue&lt;/code&gt;  又继承自  &lt;code&gt;Collection&lt;/code&gt;  接口。下面是  &lt;code&gt;BlockingQueue&lt;/code&gt;  的实现类：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/51622268.jpg&#34; alt=&#34;BlockingQueue 的实现类&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下面主要介绍一下 3 个常见的  &lt;code&gt;BlockingQueue&lt;/code&gt;  的实现类： &lt;code&gt;ArrayBlockingQueue&lt;/code&gt; 、 &lt;code&gt;LinkedBlockingQueue&lt;/code&gt; 、 &lt;code&gt;PriorityBlockingQueue&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;arrayblockingqueue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arrayblockingqueue&#34;&gt;#&lt;/a&gt; ArrayBlockingQueue&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ArrayBlockingQueue&lt;/code&gt;  是  &lt;code&gt;BlockingQueue&lt;/code&gt;  接口的&lt;strong&gt;有界阻塞队列&lt;/strong&gt;实现类，底层采用&lt;font color=&#39;red&#39;&gt;数组&lt;/font&gt;来实现。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayBlockingQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;AbstractQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BlockingQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Serializable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;ArrayBlockingQueue&lt;/code&gt;  &lt;font color=&#39;red&#39;&gt;一旦创建，容量不能改变&lt;/font&gt;。其并发控制采用&lt;font color=&#39;red&#39;&gt;可重入锁&lt;/font&gt;  &lt;code&gt;ReentrantLock&lt;/code&gt;  ，不管是插入操作还是读取操作，都需要获取到锁才能进行操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当队列容量满时，尝试将元素放入队列将导致操作阻塞&lt;/li&gt;
&lt;li&gt;尝试从一个空队列中取一个元素也会同样阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ArrayBlockingQueue&lt;/code&gt;  默认情况下不能保证线程访问队列的公平性，所谓公平性是指严格按照线程等待的绝对时间顺序，即最先等待的线程能够最先访问到  &lt;code&gt;ArrayBlockingQueue&lt;/code&gt; 。而&lt;font color=&#39;red&#39;&gt;非公平性&lt;/font&gt;则是指访问  &lt;code&gt;ArrayBlockingQueue&lt;/code&gt;  的顺序不是遵守严格的时间顺序，有可能存在，当  &lt;code&gt;ArrayBlockingQueue&lt;/code&gt;  可以被访问时，长时间阻塞的线程依然无法访问到  &lt;code&gt;ArrayBlockingQueue&lt;/code&gt; 。如果保证公平性，通常会降低吞吐量。&lt;/p&gt;
&lt;p&gt;如果需要获得公平性的  &lt;code&gt;ArrayBlockingQueue&lt;/code&gt; ，可采用如下代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayBlockingQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; blockingQueue &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayBlockingQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;linkedblockingqueue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linkedblockingqueue&#34;&gt;#&lt;/a&gt; LinkedBlockingQueue&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;LinkedBlockingQueue&lt;/code&gt;  底层基于 **&lt;font color=&#39;red&#39;&gt;单向链表&lt;/font&gt;&lt;strong&gt;实现的阻塞队列，可以当做&lt;/strong&gt;无界阻塞队列 ** 也可以当做有界阻塞队列来使用，同样满足 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;FIFO&lt;/font&gt;&lt;/strong&gt; 的特性，与  &lt;code&gt;ArrayBlockingQueue&lt;/code&gt;  相比起来具有更高的吞吐量，为了防止  &lt;code&gt;LinkedBlockingQueue&lt;/code&gt;  容量迅速增大，损耗大量内存。通常在创建  &lt;code&gt;LinkedBlockingQueue&lt;/code&gt;  对象时，会指定其大小，&lt;font color=&#39;red&#39;&gt;如果未指定大小，容量等于  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; &lt;/font&gt; 。&lt;/p&gt;
&lt;p&gt;相关构造方法:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 某种意义上的无界队列&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * Creates a &amp;#123;@code LinkedBlockingQueue&amp;#125; with a capacity of&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * &amp;#123;@link Integer#MAX_VALUE&amp;#125;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;LinkedBlockingQueue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 有界队列&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * Creates a &amp;#123;@code LinkedBlockingQueue&amp;#125; with the given (fixed) capacity.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @param capacity the capacity of this queue&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @throws IllegalArgumentException if &amp;#123;@code capacity&amp;#125; is not greater&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; *         than zero&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;LinkedBlockingQueue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; capacity&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;capacity &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;capacity &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; capacity&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    last &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; head &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;priorityblockingqueue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#priorityblockingqueue&#34;&gt;#&lt;/a&gt; PriorityBlockingQueue&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;线程安全的  &lt;code&gt;PriorityQueue&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;PriorityBlockingQueue&lt;/code&gt;  是一个&lt;strong&gt;支持优先级的无界阻塞队列&lt;/strong&gt;。默认情况下元素采用&lt;font color=&#39;red&#39;&gt;自然顺序&lt;/font&gt;进行排序，也可以通过自定义类&lt;font color=&#39;red&#39;&gt;实现  &lt;code&gt;compareTo()&lt;/code&gt;  方法&lt;/font&gt;来指定元素排序规则，或者初始化时通过&lt;font color=&#39;red&#39;&gt;构造器参数  &lt;code&gt;Comparator&lt;/code&gt;  &lt;/font&gt;来指定排序规则。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PriorityBlockingQueue&lt;/code&gt;  并发控制采用的是&lt;font color=&#39;red&#39;&gt;可重入锁&lt;/font&gt;  &lt;code&gt;ReentrantLock&lt;/code&gt; ，队列为&lt;font color=&#39;red&#39;&gt;无界队列&lt;/font&gt;（ &lt;code&gt;ArrayBlockingQueue&lt;/code&gt;  是有界队列， &lt;code&gt;LinkedBlockingQueue&lt;/code&gt;  也可以通过在构造函数中传入  &lt;code&gt;capacity&lt;/code&gt;  指定队列最大的容量，但是  &lt;code&gt;PriorityBlockingQueue&lt;/code&gt;  只能指定初始的队列大小，后面插入元素的时候，&lt;strong&gt;如果空间不够的话会自动扩容&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;简单地说，它就是  &lt;code&gt;PriorityQueue&lt;/code&gt;  的线程安全版本。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;不可以插入 null 值，同时，插入队列的对象必须是可比较大小的（comparable）&lt;/font&gt;&lt;/strong&gt;，否则报  &lt;code&gt;ClassCastException&lt;/code&gt;  异常。它的插入操作 put 方法不会 block，因为它是无界队列（take 方法在队列为空的时候会阻塞）。&lt;/p&gt;
&lt;h3 id=&#34;concurrentskiplistmap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#concurrentskiplistmap&#34;&gt;#&lt;/a&gt; ConcurrentSkipListMap&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用跳表实现的 Map&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先要清楚什么是 “跳表”：对于一个单链表，即使链表是有序的，如果我们想要在其中查找某个数据，也只能从头到尾遍历链表，这样效率自然就会很低，跳表就不一样了。跳表是一种&lt;font color=&#39;red&#39;&gt;可用来快速查找&lt;/font&gt;的数据结构，有点类似于平衡树。它们都可以对元素进行快速的查找。但一个重要的区别是：对平衡树的插入和删除往往很可能导致平衡树进行一次全局的调整。而&lt;font color=&#39;red&#39;&gt;对跳表的插入和删除只需要对数据结构的局部进行操作即可&lt;/font&gt;。这样带来的好处是：在高并发的情况下，你会需要一个全局锁来保证整个平衡树的线程安全。而对于跳表，你只需要&lt;font color=&#39;red&#39;&gt;部分锁即可&lt;/font&gt;。这样，在高并发环境下，你就可以拥有&lt;font color=&#39;red&#39;&gt;更好的性能&lt;/font&gt;。而就查询的性能而言，跳表的&lt;font color=&#39;red&#39;&gt;时间复杂度也是 O (logn)&lt;/font&gt; 。所以在并发数据结构中，JDK 使用跳表来实现一个 Map。&lt;/p&gt;
&lt;p&gt;跳表的本质：&lt;strong&gt;同时维护了多个链表，并且链表是分层的&lt;/strong&gt;。&lt;font color=&#39;red&#39;&gt;最低层的链表维护了跳表内所有的元素，每上面一层链表都是下面一层的子集&lt;/font&gt;。跳表内的&lt;font color=&#39;red&#39;&gt;所有链表的元素都是排序的&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/93666217.jpg&#34; alt=&#34;2级索引跳表&#34; /&gt;&lt;/p&gt;
&lt;center&gt;（2级索引跳表）&lt;/center&gt;
&lt;p&gt;从顶级链表开始查找。&lt;font color=&#39;red&#39;&gt;一旦发现被查找的元素大于当前链表中的&lt;strong&gt;所有&lt;/strong&gt;取值，就会转入下一层链表继续找&lt;/font&gt;。这也就是说在查找过程中，搜索是跳跃式的。&lt;/p&gt;
&lt;p&gt;如下图所示，在跳表中查找元素 18。查找 18 的时候原来需要遍历 18 次，现在只需要 7 次即可。针对链表长度比较大的时候，&lt;font color=&#39;red&#39;&gt;构建索引&lt;/font&gt;对查找效率的提升就会非常明显。&lt;/p&gt;
&lt;p&gt;从上面很容易看出，&lt;strong&gt;跳表是一种利用空间换时间的算法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/32005738.jpg&#34; alt=&#34;在跳表中查找元素18&#34; /&gt;&lt;/p&gt;
&lt;center&gt;（在跳表中查找元素18）&lt;/center&gt;
&lt;p&gt;使用跳表实现  &lt;code&gt;Map&lt;/code&gt;  和使用哈希算法实现  &lt;code&gt;Map&lt;/code&gt;  的另外一个不同之处是：哈希并不会保存元素的顺序，而&lt;strong&gt;跳表内所有的元素都是排序的&lt;/strong&gt;。因此在对跳表进行遍历时，你会得到一个有序的结果。所以，如果你的应用需要有序性，那么跳表就是你不二的选择。JDK 中实现这一数据结构的类是  &lt;code&gt;ConcurrentSkipListMap&lt;/code&gt; 。&lt;/p&gt;
&lt;h1 id=&#34;java-io&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java-io&#34;&gt;#&lt;/a&gt; Java IO&lt;/h1&gt;
&lt;h2 id=&#34;基础知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础知识&#34;&gt;#&lt;/a&gt; 基础知识&lt;/h2&gt;
&lt;p&gt;Java IO 流的 40 多个类都是从如下&lt;strong&gt; 4 个抽象类&lt;/strong&gt;基类中派生出来的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;InputStream&lt;/code&gt; ：字节输入流&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OutputStream&lt;/code&gt; ：字节输出流&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reader&lt;/code&gt; : 字符输入流&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Writer&lt;/code&gt; : 字符输出流&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计模式&#34;&gt;#&lt;/a&gt; 设计模式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;从 IO 中能够学习到的设计模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;装饰器模式decorator&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#装饰器模式decorator&#34;&gt;#&lt;/a&gt; 装饰器模式（Decorator）&lt;/h3&gt;
&lt;p&gt;装饰器模式&lt;strong&gt;可以在不改变原有对象的情况下，拓展其功能&lt;/strong&gt;。通过&lt;font color=&#39;red&#39;&gt;组合&lt;/font&gt;替代继承，来扩展原始类的功能，在一些继承关系比较复杂的场景更加实用。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;对于字节流来说， &lt;code&gt;FilterInputStream&lt;/code&gt;  和  &lt;code&gt;FilterOutputStream&lt;/code&gt;  是装饰器模式的核心&lt;/font&gt;，分别用于增强  &lt;code&gt;InputStream&lt;/code&gt;  和  &lt;code&gt;OutputStream&lt;/code&gt;  子类对象的功能。&lt;/p&gt;
&lt;p&gt;我们常见的  &lt;code&gt;BufferedInputStream&lt;/code&gt;  (字节缓冲输入流)、 &lt;code&gt;DataInputStream&lt;/code&gt;  等等都是  &lt;code&gt;FilterInputStream&lt;/code&gt;  的子类， &lt;code&gt;BufferedOutputStream&lt;/code&gt; （字节缓冲输出流）、 &lt;code&gt;DataOutputStream&lt;/code&gt;  等等都是  &lt;code&gt;FilterOutputStream&lt;/code&gt;  的子类。&lt;/p&gt;
&lt;h3 id=&#34;适配器模式adapter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#适配器模式adapter&#34;&gt;#&lt;/a&gt; 适配器模式（Adapter）&lt;/h3&gt;
&lt;p&gt;适配器（Adapter Pattern）模式主要&lt;strong&gt;用于接口互不兼容的类的协调工作&lt;/strong&gt;，你可以将其联想到我们日常经常使用的电源适配器。&lt;/p&gt;
&lt;p&gt;适配器模式中存在被适配的对象或者类称为&lt;strong&gt;适配者 (Adaptee)&lt;/strong&gt; ，作用于适配者的对象或者类称为&lt;strong&gt;适配器 (Adapter)&lt;/strong&gt; 。适配器分为对象适配器和类适配器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类适配器：使用继承关系来实现&lt;/li&gt;
&lt;li&gt;对象适配器：使用组合关系来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;与装饰器模式的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#与装饰器模式的区别&#34;&gt;#&lt;/a&gt; 与装饰器模式的区别&lt;/h4&gt;
&lt;p&gt;装饰器模式：更侧重于动态地增强原始类的功能，装饰器类需要跟原始类继承相同的抽象类或者实现相同的接口。并且，装饰器模式支持对原始类嵌套使用多个装饰器。&lt;/p&gt;
&lt;p&gt;适配器模式：更侧重于让接口不兼容而不能交互的类可以一起工作，当我们调用适配器对应的方法时，适配器内部会调用适配者类或者和适配类相关的类的方法，这个过程透明的。就比如说  &lt;code&gt;StreamDecoder&lt;/code&gt;  （流解码器）和 &lt;code&gt;StreamEncoder&lt;/code&gt; （流编码器）就是分别基于  &lt;code&gt;InputStream&lt;/code&gt;  和  &lt;code&gt;OutputStream&lt;/code&gt;  来获取  &lt;code&gt;FileChannel&lt;/code&gt;  对象并调用对应的  &lt;code&gt;read&lt;/code&gt;  方法和  &lt;code&gt;write&lt;/code&gt;  方法进行字节数据的读取和写入。&lt;/p&gt;
&lt;h3 id=&#34;工厂模式factory&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工厂模式factory&#34;&gt;#&lt;/a&gt; 工厂模式（Factory）&lt;/h3&gt;
&lt;p&gt;工厂模式&lt;strong&gt;用于创建对象&lt;/strong&gt;，NIO 中大量用到了工厂模式，比如  &lt;code&gt;Files&lt;/code&gt;  类的  &lt;code&gt;newInputStream&lt;/code&gt;  方法用于创建  &lt;code&gt;InputStream&lt;/code&gt;  对象（静态工厂）、  &lt;code&gt;Paths&lt;/code&gt;  类的  &lt;code&gt;get&lt;/code&gt;  方法创建  &lt;code&gt;Path&lt;/code&gt;  对象（静态工厂）、 &lt;code&gt;ZipFileSystem&lt;/code&gt;  类（ &lt;code&gt;sun.nio&lt;/code&gt;  包下的类，属于  &lt;code&gt;java.nio&lt;/code&gt;  相关的一些内部实现）的  &lt;code&gt;getPath&lt;/code&gt;  的方法创建  &lt;code&gt;Path&lt;/code&gt;  对象（简单工厂）。&lt;/p&gt;
&lt;h3 id=&#34;观察者模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#观察者模式&#34;&gt;#&lt;/a&gt; 观察者模式&lt;/h3&gt;
&lt;p&gt;NIO 中的文件目录&lt;strong&gt;监听服务&lt;/strong&gt;使用到了观察者模式。&lt;/p&gt;
&lt;p&gt;NIO 中的文件目录监听服务基于  &lt;code&gt;WatchService&lt;/code&gt;  接口和  &lt;code&gt;Watchable&lt;/code&gt;  接口。&lt;strong&gt; &lt;code&gt;WatchService&lt;/code&gt;  属于观察者， &lt;code&gt;Watchable&lt;/code&gt;  属于被观察者&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Watchable&lt;/code&gt;  接口定义了一个用于将对象注册到  &lt;code&gt;WatchService&lt;/code&gt; （监控服务） 并绑定监听事件的方法  &lt;code&gt;register&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;常用的监听事件有 3 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StandardWatchEventKinds.ENTRY_CREATE&lt;/code&gt; ：文件创建。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StandardWatchEventKinds.ENTRY_DELETE&lt;/code&gt;  : 文件删除。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StandardWatchEventKinds.ENTRY_MODIFY&lt;/code&gt;  : 文件修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;io-模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io-模型&#34;&gt;#&lt;/a&gt; &lt;mark&gt;IO 模型&lt;/mark&gt;&lt;/h2&gt;
&lt;h3 id=&#34;何为-io&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#何为-io&#34;&gt;#&lt;/a&gt; 何为 IO ？&lt;/h3&gt;
&lt;p&gt;从应用程序的角度来解读一下 I/O。&lt;/p&gt;
&lt;p&gt;根据操作系统相关知识：&lt;font color=&#39;red&#39;&gt;为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为&lt;strong&gt;用户空间（User space）&lt;strong&gt;和&lt;/strong&gt;内核空间（Kernel space）&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为了限制不同的程序之间的访问能力&lt;/strong&gt;，防止它们获取别的程序的内存数据，或者获取外围设备的数据，并发送到网络，CPU 划分出两个权限等级：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户态&lt;/strong&gt;：只能受限地访问内存，且不允许访问外围设备，占用 cpu 的能力被剥夺，cpu 资源可以被其他程序获取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内核态&lt;/strong&gt;：cpu 可以访问内存的所有数据，包括外围设备，例如硬盘，网卡，cpu 也可以将自己从一个程序切换到另一个程序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;最大的区别：权限不同&lt;/strong&gt;，运行在用户态下的程序不能直接访问操作系统内核数据结构和程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;像我们平常运行的应用程序都是运行在用户空间，只有内核空间才能进行系统态级别的资源有关的操作，比如文件管理、进程通信、内存管理等等。也就是说，&lt;font color=&#39;red&#39;&gt;想要进行 IO 操作，一定是要依赖内核空间的能力&lt;/font&gt;。并且，用户空间的程序不能直接访问内核空间。当想要执行 IO 操作时，由于没有执行这些操作的权限，只能发起系统调用请求操作系统帮忙完成。&lt;/p&gt;
&lt;p&gt;因此，用户进程想要执行 IO 操作的话，必须通过&lt;font color=&#39;red&#39;&gt;系统调用&lt;/font&gt;来间接访问内核空间。&lt;/p&gt;
&lt;p&gt;我们在平常开发过程中接触最多的就是&lt;font color=&#39;red&#39;&gt;磁盘 IO（读写文件）&lt;/font&gt;和&lt;font color=&#39;red&#39;&gt;网络 IO（网络请求和响应）&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;从应用程序的视角来看，应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就是说，&lt;strong&gt;应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当应用程序发起 I/O 调用后，会经历两个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内核等待 I/O 设备准备好数据&lt;/li&gt;
&lt;li&gt;内核将数据从内核空间拷贝到用户空间&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;常见的-io-模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的-io-模型&#34;&gt;#&lt;/a&gt; 常见的 IO 模型&lt;/h3&gt;
&lt;p&gt;UNIX 系统下，IO 模型一共有 5 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步阻塞 I/O&lt;/li&gt;
&lt;li&gt;同步非阻塞 I/O&lt;/li&gt;
&lt;li&gt;I/O 多路复用&lt;/li&gt;
&lt;li&gt;信号驱动 I/O&lt;/li&gt;
&lt;li&gt;异步 I/O&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-中-3-种常见-io-模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java-中-3-种常见-io-模型&#34;&gt;#&lt;/a&gt; Java 中 3 种常见 IO 模型&lt;/h3&gt;
&lt;h4 id=&#34;bioblocking&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bioblocking&#34;&gt;#&lt;/a&gt; BIO（Blocking）&lt;/h4&gt;
&lt;p&gt;BIO 属于&lt;strong&gt;同步阻塞 IO 模型&lt;/strong&gt;，应用程序发起 read 调用后，会一直阻塞，直到内核把数据拷贝到用户空间。这种阻塞模型&lt;font color=&#39;red&#39;&gt;在处理多个并发连接时可能会导致性能瓶颈&lt;/font&gt;，因为需要为每个连接创建一个线程，而线程的创建和切换都是有开销的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/6a9e704af49b4380bb686f0c96d33b81%7Etplv-k3u1fbpfcp-watermark.png&#34; alt=&#34;图源：《深入拆解Tomcat &amp;amp; Jetty》&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;nionon-blockingnew&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nionon-blockingnew&#34;&gt;#&lt;/a&gt; &lt;mark&gt;NIO（Non-blocking/New）&lt;/mark&gt;&lt;/h4&gt;
&lt;h5 id=&#34;nio-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nio-简介&#34;&gt;#&lt;/a&gt; NIO 简介&lt;/h5&gt;
&lt;p&gt;为了解决 BIO 同步阻塞 IO 模型导致在高并发下的性能瓶颈问题，Java 1.4 引入了 NIO，对应  &lt;code&gt;java.nio&lt;/code&gt;  包，提供了  &lt;code&gt;Channel&lt;/code&gt;  ,  &lt;code&gt;Selector&lt;/code&gt; ， &lt;code&gt;Buffer&lt;/code&gt;  等抽象。它在标准 Java 代码中提供了&lt;strong&gt;非阻塞、面向缓冲、基于通道&lt;/strong&gt;的 I/O，&lt;font color=&#39;red&#39;&gt;在高负载、高并发情况下可以使用少量的线程来处理多个连接&lt;/font&gt;，大大提高了 I/O 效率和并发。&lt;/p&gt;
&lt;p&gt;NIO 可以看作是 &lt;strong&gt;I/O 多路复用模型&lt;/strong&gt;。也有很多人认为，Java 中的 NIO 属于同步非阻塞 IO 模型。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;先来看看&lt;strong&gt;同步非阻塞 IO 模型&lt;/strong&gt;。应用程序会一直发起 read 调用，等待数据从内核空间拷贝到用户空间的这段时间里，线程依然是阻塞的，直到在内核把数据拷贝到用户空间。&lt;font color=&#39;red&#39;&gt;通过 轮询 操作，避免了一直阻塞&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;但是存在问题：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;应用程序不断进行 I/O 系统调用轮询数据是否已经准备好的过程是十分消耗 CPU 资源的&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/bb174e22dbe04bb79fe3fc126aed0c61%7Etplv-k3u1fbpfcp-watermark.png&#34; alt=&#34;图源：《深入拆解Tomcat &amp;amp; Jetty》&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这个时候，&lt;strong&gt;I/O 多路复用模型&lt;/strong&gt; 就上场了。线程首先发起  &lt;code&gt;select&lt;/code&gt;  调用，询问内核数据是否准备就绪，等内核把数据准备好了，用户线程再发起  &lt;code&gt;read&lt;/code&gt;  调用。read 调用的过程（数据从内核空间 -&amp;gt; 用户空间）还是阻塞的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目前支持 IO 多路复用的系统调用，有  &lt;code&gt;select&lt;/code&gt; ， &lt;code&gt;epoll&lt;/code&gt;  等等。select 系统调用，目前几乎在所有的操作系统上都有支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;select 调用&lt;/strong&gt;：内核提供的系统调用，它支持一次查询多个系统调用的可用状态。几乎所有的操作系统都支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;epoll 调用&lt;/strong&gt;：linux 2.6 内核，属于 select 调用的增强版本，优化了 IO 的执行效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;IO 多路复用模型，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;通过减少无效的系统调用，减少了对 CPU 资源的消耗&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/88ff862764024c3b8567367df11df6ab%7Etplv-k3u1fbpfcp-watermark.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;nio-三大组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nio-三大组件&#34;&gt;#&lt;/a&gt; NIO 三大组件&lt;/h5&gt;
&lt;p&gt;NIO 主要包括以下三个核心组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Buffer（缓冲区）&lt;/strong&gt;：NIO 读写数据都是通过缓冲区进行操作的。读操作的时候将 Channel 中的数据填充到 Buffer 中，而写操作时将 Buffer 中的数据写入到 Channel 中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Channel（通道）&lt;/strong&gt;：Channel 是一个双向的、可读可写的数据传输通道，NIO 通过 Channel 来实现数据的输入输出。通道是一个抽象的概念，它可以代表文件、套接字或者其他数据源之间的连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Selector（选择器）&lt;/strong&gt;：也被称为&lt;font color=&#39;red&#39;&gt;多路复用器&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;允许一个线程处理多个 Channel&lt;/font&gt;。所有的 Channel 都可以注册到 Selector 上，由 Selector 来分配线程来处理事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三者的关系如下图所示（暂时不理解没关系，后文会详细介绍）：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/channel-buffer-selector.png&#34; alt=&#34;Buffer、Channel和Selector三者之间的关系&#34; /&gt;&lt;/p&gt;
&lt;center&gt;（Buffer、Channel和Selector三者之间的关系）&lt;/center&gt;
&lt;h6 id=&#34;buffer缓冲区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#buffer缓冲区&#34;&gt;#&lt;/a&gt; Buffer（缓冲区）&lt;/h6&gt;
&lt;p&gt;在传统的 BIO 中，数据的读写是面向流的， 分为字节流和字符流。&lt;/p&gt;
&lt;p&gt;在 Java 1.4 的 **&lt;font color=&#39;red&#39;&gt; NIO 库中，所有数据都是用缓冲区处理的&lt;/font&gt;**，这是新库和之前的 BIO 的一个重要区别，有点类似于 BIO 中的缓冲流。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NIO 在读取数据时，它是直接读取缓冲区中的&lt;/li&gt;
&lt;li&gt;在写入数据时，是写入到缓冲区中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Buffer&lt;/code&gt;  的子类如下图所示，其中最常用的是  &lt;code&gt;ByteBuffer&lt;/code&gt; ，它可以用来存储和操作字节数据。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/buffer-subclasses.png&#34; alt=&#34;Buffer 的子类&#34; /&gt;&lt;/p&gt;
&lt;center&gt;（Buffer的子类）&lt;/center&gt;
&lt;p&gt;可以将 Buffer &lt;font color=&#39;red&#39;&gt;理解为数组&lt;/font&gt;， &lt;code&gt;IntBuffer&lt;/code&gt; 、 &lt;code&gt;FloatBuffer&lt;/code&gt; 、 &lt;code&gt;CharBuffer&lt;/code&gt;  等分别对应  &lt;code&gt;int[]&lt;/code&gt; 、 &lt;code&gt;float[]&lt;/code&gt; 、 &lt;code&gt;char[]&lt;/code&gt;  等。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;为了更清晰地认识缓冲区，我们来简单看看  &lt;code&gt;Buffer&lt;/code&gt;  类中定义的&lt;font color=&#39;gree&#39;&gt;四个成员变量&lt;/font&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Buffer&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; mark &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; position &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; limit&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; capacity&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这四个成员变量满足如下的关系：&lt;font color=&#39;red&#39;&gt;0 &amp;lt;= mark &amp;lt;= position &amp;lt;= limit &amp;lt;= capacity&lt;/font&gt;，具体含义如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;容量（ &lt;code&gt;capacity&lt;/code&gt; ）&lt;/font&gt;： &lt;code&gt;Buffer&lt;/code&gt;  可以存储的&lt;font color=&#39;red&#39;&gt;最大数据量&lt;/font&gt;， &lt;code&gt;Buffer&lt;/code&gt;  创建时设置且&lt;font color=&#39;red&#39;&gt;不可改变&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;界限（ &lt;code&gt;limit&lt;/code&gt; ）&lt;/font&gt;： &lt;code&gt;Buffer&lt;/code&gt;  中可以&lt;font color=&#39;red&#39;&gt;读 / 写数据的边界&lt;/font&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;写模式下，表示最多能写入的数据&lt;/font&gt;，一般等于  &lt;code&gt;capacity&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;读模式下，表示 Buffer 中实际写入的数据大小&lt;/font&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;位置（ &lt;code&gt;position&lt;/code&gt; ）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;下一个可以被读写的数据的索引&lt;/font&gt;。从写操作模式到读操作模式切换的时候（flip）， &lt;code&gt;position&lt;/code&gt;  都会归零，这样就可以&lt;font color=&#39;red&#39;&gt;从头开始读写&lt;/font&gt;了。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;标记（ &lt;code&gt;mark&lt;/code&gt; ）&lt;/font&gt;： &lt;code&gt;Buffer&lt;/code&gt;  &lt;font color=&#39;red&#39;&gt;允许将位置直接定位到该标记处&lt;/font&gt;，这是一个可选属性；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，Buffer 有&lt;font color=&#39;gree&#39;&gt;读模式和写模式&lt;/font&gt;这两种模式，分别用于从 Buffer 中读取数据或者向 Buffer 中写入数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Buffer 被创建之后&lt;font color=&#39;red&#39;&gt;默认是写模式，调用  &lt;code&gt;flip()&lt;/code&gt;  可以切换到读模式&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;通过调用  &lt;code&gt;clear()&lt;/code&gt;  或者  &lt;code&gt;compact()&lt;/code&gt;  方法可以再次切换回写模式&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/JavaNIOBuffer.png&#34; alt=&#34;position 、limit 和 capacity 之前的关系&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/NIOBufferClassAttributes.png&#34; alt=&#34;position 、limit 和 capacity 之前的关系&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;Buffer&lt;/code&gt;  对象不能通过  &lt;code&gt;new&lt;/code&gt;  调用构造方法创建对象，&lt;strong&gt;&lt;font color=&#39;gree&#39;&gt;只能通过静态方法实例化  &lt;code&gt;Buffer&lt;/code&gt; &lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以  &lt;code&gt;ByteBuffer&lt;/code&gt;  为例进行介绍：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 分配堆内存&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ByteBuffer&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;allocate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; capacity&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 分配直接内存&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ByteBuffer&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;allocateDirect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; capacity&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Buffer &lt;font color=&#39;gree&#39;&gt;最核心的两个方法&lt;/font&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;get()&lt;/code&gt;  : 读取缓冲区的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;put()&lt;/code&gt;  ：向缓冲区写入数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除上述两个方法之外，其他的重要方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flip()&lt;/code&gt;  ：将缓冲区从写模式&lt;font color=&#39;red&#39;&gt;切换到读模式&lt;/font&gt;，将  &lt;code&gt;limit&lt;/code&gt;  的值设置为当前  &lt;code&gt;position&lt;/code&gt;  的值，将  &lt;code&gt;position&lt;/code&gt;  的值设置为 0。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clear()&lt;/code&gt; : &lt;font color=&#39;red&#39;&gt;清空缓冲区&lt;/font&gt;，将缓冲区从读模式&lt;font color=&#39;red&#39;&gt;切换到写模式&lt;/font&gt;，并将  &lt;code&gt;position&lt;/code&gt;  的值设置为 0，将  &lt;code&gt;limit&lt;/code&gt;  的值设置为  &lt;code&gt;capacity&lt;/code&gt;  的值。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Buffer 中&lt;font color=&#39;gree&#39;&gt;数据变化的过程&lt;/font&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nio&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CharBufferDemo&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 分配一个容量为 8 的 CharBuffer&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;CharBuffer&lt;/span&gt; buffer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CharBuffer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;allocate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;初始状态：&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 向 buffer 写入 3 个字符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        buffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token char&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token char&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token char&#34;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;写入3个字符后的状态：&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 调用 flip () 方法，准备读取 buffer 中的数据，将 position 置 0,limit 的置 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        buffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flip&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;调用flip()方法后的状态：&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 读取字符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hasRemaining&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 调用 clear () 方法，清空缓冲区，将 position 的值置为 0，将 limit 的值置为 capacity 的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        buffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;调用clear()方法后的状态：&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 打印 buffer 的 capacity、limit、position、mark 的位置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;printState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;CharBuffer&lt;/span&gt; buffer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;capacity: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; buffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;, limit: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; buffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;, position: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; buffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;, mark 开始读取的字符: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; buffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;mark&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输出：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;初始状态：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;capacity: &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;, limit: &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;, position: &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;写入3个字符后的状态：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;capacity: &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;, limit: &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;, position: &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;准备读取buffer中的数据！&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;调用flip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;方法后的状态：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;capacity: &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;, limit: &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;, position: &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;读取到的数据：abc&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;调用clear&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;方法后的状态：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;capacity: &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;, limit: &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;, position: &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;为了帮助理解，我绘制了一张图片展示  &lt;code&gt;capacity&lt;/code&gt; 、 &lt;code&gt;limit&lt;/code&gt;  和 &lt;code&gt;position&lt;/code&gt;  每一阶段的变化。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/NIOBufferClassAttributesDataChanges.png&#34; alt=&#34;capacity、limit和position每一阶段的变化&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;channel通道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#channel通道&#34;&gt;#&lt;/a&gt; Channel（通道）&lt;/h6&gt;
&lt;p&gt;Channel 是一个通道，它建立了与数据源（如文件、网络套接字等）之间的连接。我们可以&lt;font color=&#39;red&#39;&gt;用它来读取和写入数据&lt;/font&gt;，就像打开了一条自来水管，让数据在 Channel 中自由流动。&lt;/p&gt;
&lt;p&gt;BIO 中的流是单向的，分为各种  &lt;code&gt;InputStream&lt;/code&gt; （输入流）和  &lt;code&gt;OutputStream&lt;/code&gt; （输出流），数据只是在一个方向上传输。通道与流的不同之处在于通道&lt;font color=&#39;red&#39;&gt;是双向的&lt;/font&gt;，它可以用于读、写或者同时用于读写。&lt;/p&gt;
&lt;p&gt;Channel 与前面介绍的 Buffer 打交道，读操作的时候将 Channel 中的数据填充到 Buffer 中，而写操作时将 Buffer 中的数据写入到 Channel 中。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/channel-buffer.png&#34; alt=&#34;Channel 和 Buffer之间的关系&#34; /&gt;&lt;/p&gt;
&lt;center&gt;（Channel 和 Buffer之间的关系）&lt;/center&gt;
&lt;p&gt;另外，因为 Channel 是&lt;font color=&#39;red&#39;&gt;全双工&lt;/font&gt;的，所以它可以比流更好地映射底层操作系统的 API。特别是在 UNIX 网络编程模型中，底层操作系统的通道都是全双工的，同时支持读写操作。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;Channel&lt;/code&gt;  的&lt;font color=&#39;gree&#39;&gt;子类&lt;/font&gt;如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/channel-subclasses.png&#34; alt=&#34;Channel 的子类&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其中，最常用的是以下几种类型的通道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FileChannel&lt;/code&gt; ：文件访问通道；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SocketChannel&lt;/code&gt; 、 &lt;code&gt;ServerSocketChannel&lt;/code&gt; ：TCP 通信通道；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DatagramChannel&lt;/code&gt; ：UDP 通信通道；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/channel-inheritance-relationship.png&#34; alt=&#34;Channel继承关系图&#34; /&gt;&lt;/p&gt;
&lt;center&gt;（Channel继承关系图）&lt;/center&gt;
&lt;hr /&gt;
&lt;p&gt;Channel &lt;font color=&#39;gree&#39;&gt;最核心的两个方法&lt;/font&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;read（）&lt;/code&gt;  ：&lt;font color=&#39;red&#39;&gt;读取数据并写入到 Buffer 中&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write（）&lt;/code&gt;  ：&lt;font color=&#39;red&#39;&gt;将 Buffer 中的数据写入到 Channel 中&lt;/font&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里我们以  &lt;code&gt;FileChannel&lt;/code&gt;  为例演示一下是读取文件数据的。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;RandomAccessFile&lt;/span&gt; reader &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RandomAccessFile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/Users/guide/Documents/test_read.in&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;r&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;FileChannel&lt;/span&gt; channel &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; reader&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getChannel&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;ByteBuffer&lt;/span&gt; buffer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ByteBuffer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;allocate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;channel&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h6 id=&#34;selector选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selector选择器&#34;&gt;#&lt;/a&gt; Selector（选择器）&lt;/h6&gt;
&lt;p&gt;Selector 是 NIO 中的一个关键组件，是&lt;strong&gt;基于事件驱动的 I/O 多路复用模型&lt;/strong&gt;，它&lt;font color=&#39;red&#39;&gt;允许一个线程处理多个 Channel&lt;/font&gt;。其主要&lt;font color=&#39;gree&#39;&gt;运作原理&lt;/font&gt;是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 Channel 的事件&lt;font color=&#39;red&#39;&gt;注册&lt;/font&gt;在 Selector 上&lt;/li&gt;
&lt;li&gt;Selector 会&lt;font color=&#39;red&#39;&gt;轮询&lt;/font&gt;注册在它上的 Channel。当某个 Channel 的事件发生时，该 Channel 就处于就绪状态，会被 Selector 轮询出来，并将相关的 Channel &lt;font color=&#39;red&#39;&gt;加入就绪集合中&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;通过 &lt;font color=&#39;red&#39;&gt;SelectionKey&lt;/font&gt; 集合可以获取就绪 Channel 的集合（&lt;font color=&#39;red&#39;&gt;一个 SelectionKey 对应一个 Channel&lt;/font&gt;），然后对这些就绪的 Channel 进行&lt;font color=&#39;red&#39;&gt;响应的 I/O 操作&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/selector-channel-selectionkey.png&#34; alt=&#34;Selector 选择器工作示意图&#34; /&gt;&lt;/p&gt;
&lt;center&gt;（Selector 选择器工作示意图）&lt;/center&gt;
&lt;p&gt;一个多路复用器 Selector 可以同时轮询多个 Channel，由于 JDK 使用了  &lt;code&gt;epoll()&lt;/code&gt;  代替传统的  &lt;code&gt;select()&lt;/code&gt;  实现，所以它并没有最大连接句柄  &lt;code&gt;1024/2048&lt;/code&gt;  的限制。这也就意味着&lt;strong&gt;只需要一个线程负责 Selector 的轮询，就可以接入成千上万的客户端&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Selector 可以&lt;font color=&#39;gree&#39;&gt;监听四种事件类型&lt;/font&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;SelectionKey.OP_ACCEPT&lt;/code&gt; ：表示&lt;font color=&#39;red&#39;&gt;通道接受连接&lt;/font&gt;的事件，这通常用于  &lt;code&gt;ServerSocketChannel&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SelectionKey.OP_CONNECT&lt;/code&gt; ：表示&lt;font color=&#39;red&#39;&gt;通道完成连接&lt;/font&gt;的事件，这通常用于  &lt;code&gt;SocketChannel&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SelectionKey.OP_READ&lt;/code&gt; ：表示&lt;font color=&#39;red&#39;&gt;通道准备好进行读取&lt;/font&gt;的事件，即有数据可读。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SelectionKey.OP_WRITE&lt;/code&gt; ：表示&lt;font color=&#39;red&#39;&gt;通道准备好进行写入&lt;/font&gt;的事件，即可以写入数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;Selector&lt;/code&gt;  是抽象类，可以&lt;strong&gt;通过调用此类的静态方法  &lt;code&gt;open()&lt;/code&gt;  来创建 Selector 实例&lt;/strong&gt;。Selector 可以同时监控多个  &lt;code&gt;SelectableChannel&lt;/code&gt;  的  &lt;code&gt;IO&lt;/code&gt;  状况，是非阻塞  &lt;code&gt;IO&lt;/code&gt;  的核心。&lt;/p&gt;
&lt;p&gt;一个 Selector 实例&lt;font color=&#39;gree&#39;&gt;有三种  &lt;code&gt;SelectionKey&lt;/code&gt;  集合&lt;/font&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;所有的&lt;/font&gt;  &lt;code&gt;SelectionKey&lt;/code&gt;  集合：代表了注册在该 Selector 上的  &lt;code&gt;Channel&lt;/code&gt; ，这个集合可以通过  &lt;code&gt;keys()&lt;/code&gt;  方法返回。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;被选择的&lt;/font&gt;  &lt;code&gt;SelectionKey&lt;/code&gt;  集合：代表了所有可通过  &lt;code&gt;select()&lt;/code&gt;  方法获取的、需要进行  &lt;code&gt;IO&lt;/code&gt;  处理的 Channel，这个集合可以通过  &lt;code&gt;selectedKeys()&lt;/code&gt;  返回。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;被取消的&lt;/font&gt;  &lt;code&gt;SelectionKey&lt;/code&gt;  集合：代表了所有被取消注册关系的  &lt;code&gt;Channel&lt;/code&gt; ，在下一次执行  &lt;code&gt;select()&lt;/code&gt;  方法时，这些  &lt;code&gt;Channel&lt;/code&gt;  对应的  &lt;code&gt;SelectionKey&lt;/code&gt;  会被彻底删除，程序通常无须直接访问该集合，也没有暴露访问的方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简单演示一下如何&lt;font color=&#39;gree&#39;&gt;遍历被选择的  &lt;code&gt;SelectionKey&lt;/code&gt;  集合&lt;/font&gt;并进行处理：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SelectionKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; selectedKeys &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; selector&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;selectedKeys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Iterator&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SelectionKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; keyIterator &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; selectedKeys&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;keyIterator&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;SelectionKey&lt;/span&gt; key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; keyIterator&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isAcceptable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// ServerSocketChannel 接收了一个新连接&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isConnectable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 表示一个新连接建立&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isReadable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// Channel 有准备好的数据，可以读取&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isWritable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// Channel 有空闲的 Buffer，可以写入数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    keyIterator&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr /&gt;
&lt;p&gt;Selector 还提供了一系列&lt;font color=&#39;gree&#39;&gt;和  &lt;code&gt;select()&lt;/code&gt;  相关的方法&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;int select()&lt;/code&gt; &lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;阻塞线程&lt;/font&gt;，监控所有注册的  &lt;code&gt;Channel&lt;/code&gt;  中是否有&lt;font color=&#39;red&#39;&gt;需要进行  &lt;code&gt;IO&lt;/code&gt;  处理&lt;/font&gt;的。如果有，该方法会将对应的  &lt;code&gt;SelectionKey&lt;/code&gt;  加入到被选择的  &lt;code&gt;SelectionKey&lt;/code&gt;  集合中，并&lt;strong&gt;返回这些  &lt;code&gt;Channel&lt;/code&gt;  的数量&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int select(long timeout)&lt;/code&gt; ：可以设置超时时长的  &lt;code&gt;select()&lt;/code&gt;  操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int selectNow()&lt;/code&gt; ：执行一个立即返回的  &lt;code&gt;select()&lt;/code&gt;  操作，相对于无参数的  &lt;code&gt;select()&lt;/code&gt;  方法而言，该方法&lt;font color=&#39;red&#39;&gt;不会阻塞线程&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Selector wakeup()&lt;/code&gt; ：使一个还未返回的  &lt;code&gt;select()&lt;/code&gt;  方法立刻返回。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 Selector 实现网络读写的简单示例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;net&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;InetSocketAddress&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nio&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ByteBuffer&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nio&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;channels&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SelectionKey&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nio&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;channels&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Selector&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nio&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;channels&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServerSocketChannel&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nio&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;channels&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SocketChannel&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Iterator&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NioSelectorExample&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// 实例化一个用于处理连接事件的 Channel ：ServerSocketChannel&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token class-name&#34;&gt;ServerSocketChannel&lt;/span&gt; serverSocketChannel &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServerSocketChannel&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      serverSocketChannel&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;configureBlocking&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      serverSocketChannel&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InetSocketAddress&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 设置 Channel 去监听 8080 端口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// 实例化一个 Selector 对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token class-name&#34;&gt;Selector&lt;/span&gt; selector &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Selector&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// 将 ServerSocketChannel 注册到 Selector 并监听 OP_ACCEPT 事件（通道接受连接）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      serverSocketChannel&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;selector&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SelectionKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;OP_ACCEPT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 轮询&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; readyChannels &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; selector&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 一直阻塞，直到 Selector 上存在需要进行 IO 处理的 Channel ，立即返回这些 Channel 的数量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;readyChannels &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 此时 Selector 上没有需要进行 IO 处理的 Channel，继续轮询&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 此时 Selector 上有需要进行 IO 处理的 Channel&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SelectionKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; selectedKeys &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; selector&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;selectedKeys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 获取 SelectionKey 集合，借此可获取就绪的 Channel 集合，从而得以处理它们的 IO 操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Iterator&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SelectionKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; keyIterator &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; selectedKeys&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 获取 SelectionKey 的迭代器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;keyIterator&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 遍历 SelectionKey&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token class-name&#34;&gt;SelectionKey&lt;/span&gt; key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; keyIterator&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isAcceptable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 处理连接事件：ServerSocketChannel&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;ServerSocketChannel&lt;/span&gt; server &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServerSocketChannel&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 获取当前 SelectionKey 对应的 Channel&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 完成连接，返回一个 SocketChannel 对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;SocketChannel&lt;/span&gt; client &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; server&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;configureBlocking&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 将 SocketChannel 对象注册到 Selector 并监听 OP_READ 事件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;selector&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SelectionKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;OP_READ&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isReadable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 处理读事件：SocketChannel&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;SocketChannel&lt;/span&gt; client &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SocketChannel&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 获取当前 SelectionKey 对应的 Channel&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;ByteBuffer&lt;/span&gt; buffer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ByteBuffer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;allocate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 新建 Buffer 帮助读取数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; bytesRead &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 通过 Channel 读取 Buffer 中的数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bytesRead &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              buffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flip&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 将 Buffer 切换为读模式（position 置为 0，limit 置为当前 Buffer 中的数据大小）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;收到数据：&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bytesRead&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token comment&#34;&gt;// 将 SocketChannel 注册到 Selector 并监听 OP_WRITE 事件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;selector&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SelectionKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;OP_WRITE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bytesRead &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token comment&#34;&gt;// 客户端断开连接&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isWritable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 处理写事件：SocketChannel&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;SocketChannel&lt;/span&gt; client &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SocketChannel&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;ByteBuffer&lt;/span&gt; buffer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ByteBuffer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;wrap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello, Client!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getBytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 通过 Channel 将数据写入 Buffer 中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 将 SocketChannel 注册到 Selector 并监听 OP_READ 事件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;selector&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SelectionKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;OP_READ&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          keyIterator&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 移除当前已处理完毕的 SelectionKey ，准备遍历下一个 SelectionKey &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 当前 select () 处理完毕，进入下一次轮询&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在示例中，我们创建了一个简单的服务器，监听 8080 端口，使用 Selector 处理连接、读取和写入事件。当接收到客户端的数据时，服务器将读取数据并将其打印到控制台，然后向客户端回复 &amp;quot;Hello, Client!&amp;quot;。&lt;/p&gt;
&lt;h5 id=&#34;nio-零拷贝&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nio-零拷贝&#34;&gt;#&lt;/a&gt; NIO 零拷贝&lt;/h5&gt;
&lt;p&gt;零拷贝是&lt;font color=&#39;red&#39;&gt;提升 IO 操作性能&lt;/font&gt;的一个常用手段，像 ActiveMQ、Kafka 、RocketMQ、QMQ、Netty 等顶级开源项目都用到了零拷贝。&lt;/p&gt;
&lt;p&gt;零拷贝是指&lt;strong&gt;计算机执行 IO 操作时，CPU 不需要将数据从一个存储区域复制到另一个存储区域，从而可以减少 CPU 拷贝、上下文切换的时间&lt;/strong&gt;。也就是说，零拷贝主主要解决操作系统在处理 I/O 操作时&lt;font color=&#39;red&#39;&gt;频繁复制数据的问题&lt;/font&gt;。零拷贝的常见实现技术有：  &lt;code&gt;mmap+write&lt;/code&gt; 、 &lt;code&gt;sendfile&lt;/code&gt;  和  &lt;code&gt;sendfile + DMA gather copy&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;下图展示了各种零拷贝技术的对比图：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;CPU 拷贝&lt;/th&gt;
&lt;th&gt;DMA 拷贝&lt;/th&gt;
&lt;th&gt;上下文切换&lt;/th&gt;
&lt;th&gt;系统调用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;传统方法 (read + write)&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;read+write&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mmap + write&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;mmap+write&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sendfile&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;sendfile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sendfile + DMA gather copy&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;sendfile&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以看出，无论是传统的 I/O 方式，还是引入了零拷贝之后，&lt;font color=&#39;red&#39;&gt;2 次 DMA（Direct Memory Access）拷贝是都少不了的&lt;/font&gt;。因为两次 DMA 都是依赖硬件完成的。零拷贝主要是减少了 CPU 拷贝及上下文的切换。&lt;/p&gt;
&lt;p&gt;Java 对零拷贝的支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MappedByteBuffer&lt;/code&gt; ：是 NIO 基于 ** 内存映射（ &lt;code&gt;mmap&lt;/code&gt; ）** 这种零拷⻉⽅式的提供的⼀种实现，底层实际是调用了 Linux 内核的  &lt;code&gt;mmap&lt;/code&gt;  系统调用。它可以将一个文件或者文件的一部分映射到内存中，形成一个虚拟内存文件，这样就可以&lt;font color=&#39;red&#39;&gt;直接操作内存中的数据&lt;/font&gt;，而不需要通过系统调用来读写文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FileChannel&lt;/code&gt; ：其  &lt;code&gt;transferTo()/transferFrom()&lt;/code&gt;  是 NIO 基于 ** 发送文件（ &lt;code&gt;sendfile&lt;/code&gt; ）** 这种零拷贝方式的提供的一种实现，底层实际是调用了 Linux 内核的  &lt;code&gt;sendfile&lt;/code&gt;  系统调用。它可以&lt;font color=&#39;red&#39;&gt;直接将文件数据从磁盘发送到网络，而不需要经过用户空间的缓冲区&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于 &lt;code&gt;FileChannel&lt;/code&gt;  的用法可以看看这篇文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcm9ib3RoeS9wLzE0MjM1NTk4Lmh0bWw=&#34;&gt;Java NIO 文件通道 FileChannel 用法&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;loadFileIntoMemory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt; xmlFile&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token class-name&#34;&gt;FileInputStream&lt;/span&gt; fis &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;xmlFile&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 创建 FileChannel 对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token class-name&#34;&gt;FileChannel&lt;/span&gt; fc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getChannel&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// FileChannle.map () 将文件映射到直接内存并返回 MappedByteBuffer 对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token class-name&#34;&gt;MappedByteBuffer&lt;/span&gt; mmb &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; fc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;FileChannel&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;MapMode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;READ_ONLY&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; fc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  xmlFileBuffer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;fc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  mmb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;xmlFileBuffer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  fis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小结&#34;&gt;#&lt;/a&gt; 小结&lt;/h5&gt;
&lt;p&gt;这篇文章我们主要介绍了 NIO 的核心组件、零拷贝。&lt;/p&gt;
&lt;p&gt;如果我们需要使用 NIO 构建网络程序的话，&lt;font color=&#39;red&#39;&gt;不建议直接使用原生 NIO&lt;/font&gt;，编程复杂且功能性太弱，推荐使用一些成熟的&lt;strong&gt;基于 NIO 的网络编程框架比如 Netty&lt;/strong&gt; 。Netty 在 NIO 的基础上进行了一些优化和扩展，比如支持多种协议、支持 SSL/TLS 等等。&lt;/p&gt;
&lt;h4 id=&#34;aioasynchronous&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aioasynchronous&#34;&gt;#&lt;/a&gt; AIO（Asynchronous）&lt;/h4&gt;
&lt;p&gt;Java 7 中引入了 NIO 的改进版 AIO（即 NIO 2），它是&lt;strong&gt;异步 IO 模型&lt;/strong&gt;。基于事件和&lt;font color=&#39;red&#39;&gt;回调机制&lt;/font&gt;实现的，也就是&lt;font color=&#39;red&#39;&gt;应用操作之后会直接返回&lt;/font&gt;，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。&lt;/p&gt;
&lt;p&gt;目前来说 AIO 的&lt;font color=&#39;red&#39;&gt;应用还不是很广泛&lt;/font&gt;。Netty 之前也尝试使用过 AIO，不过又放弃了。这是因为，Netty 使用了 AIO 之后，在 Linux 系统上的性能并没有多少提升。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/3077e72a1af049559e81d18205b56fd7%7Etplv-k3u1fbpfcp-watermark.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;小结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小结-2&#34;&gt;#&lt;/a&gt; 小结&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/bio-aio-nio.png&#34; alt=&#34;BIO、NIO 和 AIO 对比&#34; /&gt;&lt;/p&gt;
&lt;center&gt;（BIO、NIO 和 AIO 对比）&lt;/center&gt;
&lt;h3 id=&#34;面试题nio-是如何实现同步非阻塞的主线程是只有一个吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试题nio-是如何实现同步非阻塞的主线程是只有一个吗&#34;&gt;#&lt;/a&gt; 【面试题】NIO 是如何实现同步非阻塞的？主线程是只有一个吗？&lt;/h3&gt;
&lt;p&gt;NIO 底层是用  &lt;code&gt;Selector&lt;/code&gt;  、  &lt;code&gt;Channel&lt;/code&gt;  和  &lt;code&gt;Buffer&lt;/code&gt;  来实现的。主线程在循环调用  &lt;code&gt;select()&lt;/code&gt;  方法进行阻塞等待，当有 acceptable 、 readable 或者 writable 事件发生的时候，循环就会往下走，将对应的事件交给对应的事件处理器进行处理。&lt;/p&gt;
&lt;p&gt;它可以多线程的，可以有多个 accept () 线程和多个 worker 线程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;p&gt;在 NIO 中，使用了多路复用器 Selector 来实现同步非阻塞的 IO 操作。 Selector 可以监控多个 Channel 是否需要 IO 处理，当一个或多个 Channel 准备好读或写时，Selector 会通知程序进行读写操作，而不像 BIO 一样阻塞等待 IO 操作完成。&lt;/p&gt;
&lt;p&gt;在 NIO 中，主线程通常只有一个，但是可以使用 Selector 来管理多个 Channel，实现多个连接的非阻塞读写操作。当有多个 Channel 需要进行 IO 操作时，Selector 会轮询这些 Channel，检查它们的状态是否可读或可写。如果有可读或可写的 Channel，就将其加入到一个已选择键集合中，等待程序处理。这样，一个线程就可以同时处理多个 Channel，提高了系统的并发处理能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试题bionioaio的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试题bionioaio的区别&#34;&gt;#&lt;/a&gt; 【面试题】BIO/NIO/AIO 的区别？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;BIO（同步阻塞 IO）&lt;/strong&gt;：在进行 IO 操作时，&lt;font color=&#39;red&#39;&gt;必须等待 IO 操作完成&lt;/font&gt;后才能进行下一步操作，这时线程会被&lt;font color=&#39;red&#39;&gt;阻塞&lt;/font&gt;。适用于连接数比较小且固定的架构，由于线程阻塞等待 IO 操作，所以&lt;font color=&#39;red&#39;&gt;并发处理能力不强&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NIO（同步非阻塞 IO）&lt;/strong&gt;：支持多个连接同时进行读写操作，因此可以&lt;font color=&#39;red&#39;&gt;用较少的线程来处理大量的连接&lt;/font&gt;。NIO 通过  &lt;code&gt;Selector&lt;/code&gt;  来监听多个  &lt;code&gt;Channel&lt;/code&gt;  的状态，当 Channel 中有数据可读或可写时，Selector 会通知程序进行读写操作。适用于连接数多且连接时间较短的场景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AIO（异步非阻塞 IO）&lt;/strong&gt;：与 NIO 不同的是，&lt;font color=&#39;red&#39;&gt;AIO 不需要用户线程等待 IO 操作完成&lt;/font&gt;，而是由操作系统来完成 IO 操作，操作系统完成 IO 操作后会利用&lt;font color=&#39;red&#39;&gt;回调机制&lt;/font&gt;通知用户线程处理。适用于连接数较多且连接时间较长的场景，如高性能网络服务器等。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231025210135977.png&#34; alt=&#34;image-20231025210135977&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;消息队列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息队列&#34;&gt;#&lt;/a&gt; 消息队列&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;特指分布式消息队列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;消息队列基础知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息队列基础知识&#34;&gt;#&lt;/a&gt; 消息队列基础知识&lt;/h2&gt;
&lt;h3 id=&#34;消息队列的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息队列的定义&#34;&gt;#&lt;/a&gt; 消息队列的定义&lt;/h3&gt;
&lt;p&gt;可以把消息队列看作是&lt;font color=&#39;red&#39;&gt;一个存放消息的容器&lt;/font&gt;，当我们需要使用消息的时候，直接从容器中取出消息供自己使用即可。由于&lt;font color=&#39;red&#39;&gt;队列 Queue&lt;/font&gt; 是一种先进先出的数据结构，所以消费消息时也&lt;font color=&#39;red&#39;&gt;按照顺序来消费&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/message-queue-small.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;消息队列是一种 &lt;strong&gt;Pub/Sub 模型（发布 / 订阅模型）&lt;/strong&gt;，参与消息传递的双方称为&lt;strong&gt;生产者&lt;/strong&gt;和&lt;strong&gt;消费者&lt;/strong&gt;，生产者负责发送消息，消费者负责处理消息。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/message-queue-pub-sub-model-63a717b4.png&#34; alt=&#34;发布/订阅（Pub/Sub）模型&#34; /&gt;&lt;/p&gt;
&lt;center&gt;发布/订阅（Pub/Sub）模型&lt;/center&gt;
&lt;p&gt;我们知道操作系统中的进程通信的一种很重要的方式就是消息队列。我们这里提到的消息队列稍微有点区别，&lt;font color=&#39;red&#39;&gt;更多指的是各个服务以及系统内部各个组件 / 模块之前的通信&lt;/font&gt;，属于一种&lt;strong&gt;中间件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;简单来说：&lt;strong&gt;中间件是一类服务于应用软件的软件，应用软件是为用户服务的，用户不会接触或者使用到中间件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;随着分布式和微服务系统的发展，消息队列在系统设计中有了更大的发挥空间，使用消息队列&lt;font color=&#39;red&#39;&gt;可以降低系统耦合性、实现任务异步、有效地进行流量削峰&lt;/font&gt;，是分布式和微服务系统中重要的组件之一。&lt;/p&gt;
&lt;h3 id=&#34;消息队列的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息队列的作用&#34;&gt;#&lt;/a&gt; 消息队列的作用&lt;/h3&gt;
&lt;p&gt;通常来说，使用消息队列能为我们的系统带来下面三点好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;通过异步处理提高系统性能（减少响应所需时间）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;削峰 / 限流&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;降低系统耦合性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实现分布式事务&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果在面试的时候你被面试官问到这个问题的话，一般情况是你在你的简历上涉及到消息队列这方面的内容，这个时候推荐&lt;font color=&#39;red&#39;&gt;结合自己的项目来回答&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;作用1通过异步处理提高系统性能减少响应所需时间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用1通过异步处理提高系统性能减少响应所需时间&#34;&gt;#&lt;/a&gt; 作用 1：通过异步处理提高系统性能（减少响应所需时间）&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/Asynchronous-message-queue.png&#34; alt=&#34;通过异步处理提高系统性能&#34; /&gt;&lt;/p&gt;
&lt;center&gt;通过异步处理提高系统性能&lt;/center&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;服务端将用户的请求数据存储到消息队列后，立即返回结果&lt;/font&gt;。随后，系统再对消息进行消费。&lt;/p&gt;
&lt;p&gt;因为用户请求数据写入消息队列之后就立即返回给用户了，但是请求数据在后续的业务校验、写数据库等操作中可能失败。因此，&lt;strong&gt;使用消息队列进行异步处理之后，需要适当修改业务流程进行配合&lt;/strong&gt;，比如用户在提交订单之后，订单数据写入消息队列，不能立即返回用户订单提交成功，需要在消息队列的订单消费者进程真正处理完该订单之后，甚至出库后，再通过电子邮件或短信通知用户订单成功，以免交易纠纷。这就类似我们平时手机订火车票和电影票。&lt;/p&gt;
&lt;h4 id=&#34;作用2削峰限流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用2削峰限流&#34;&gt;#&lt;/a&gt; 作用 2：削峰 / 限流&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;先将短时间高并发产生的事务消息存储在消息队列中，然后后端服务再慢慢根据自己的能力去消费这些消息，这样就避免大量事务直接把后端服务冲垮。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举例：在电子商务一些秒杀、促销活动中，合理使用消息队列可以有效抵御促销活动刚开始大量订单涌入对系统的冲击。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231025224518547.png&#34; alt=&#34;削峰&#34; /&gt;&lt;/p&gt;
&lt;center&gt;削峰&lt;/center&gt;
&lt;h4 id=&#34;作用3降低系统的耦合性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用3降低系统的耦合性&#34;&gt;#&lt;/a&gt; 作用 3：降低系统的耦合性&lt;/h4&gt;
&lt;p&gt;使用消息队列还可以降低系统耦合性。我们知道如果模块之间不存在直接调用，那么新增模块或者修改模块就对其他模块影响较小，这样系统的可扩展性无疑更好一些。还是直接上图吧：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231025224821246.png&#34; alt=&#34;image-20231025224821246&#34; /&gt;&lt;/p&gt;
&lt;p&gt;生产者（客户端）发送消息到消息队列中去，接受者（服务端）处理消息，需要消费的系统直接去消息队列获取消息进行消费即可，而不需要和其他系统有耦合，这显然也提高了系统的扩展性。&lt;/p&gt;
&lt;p&gt;** 消息队列使用 Pub/Sub 模式（发布 / 订阅模式）工作，生产者发布消息，一个或多个消费者订阅消息。** 从上图可以看到&lt;font color=&#39;red&#39;&gt;生产者和消费者之间没有直接耦合&lt;/font&gt;，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产者将消息发送至分布式消息队列即结束对消息的处理&lt;/li&gt;
&lt;li&gt;消费者从分布式消息队列获取该消息后进行后续处理，并不需要知道该消息从何而来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;对新增业务，只要对该类消息感兴趣，即可订阅该消息，对原有系统和业务没有任何影响，从而实现网站业务的可扩展性设计&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;消费者对消息进行过滤、处理、包装后，构造成一个新的消息类型，将消息继续发送出去，等待其他消费者订阅该消息。因此基于事件（消息对象）驱动的业务架构可以是一系列流程。&lt;/p&gt;
&lt;p&gt;另外，&lt;font color=&#39;red&#39;&gt;为了避免 “消息队列服务器” 宕机造成消息丢失，会将成功发送到消息队列的消息存储在 “生产者服务器” 上，等消息真正被 “消费者服务器” 处理后才删除消息&lt;/font&gt;。在消息队列服务器宕机后，生产者服务器会选择分布式消息队列服务器集群中的其他服务器发布消息。&lt;/p&gt;
&lt;p&gt;备注：不要认为消息队列只能利用发布 - 订阅模式工作，只不过在解耦这个特定业务环境下是使用发布 - 订阅模式的。除了发布 - 订阅模式，还有&lt;strong&gt;点对点订阅模式&lt;/strong&gt;（一个消息只有一个消费者），我们比较常用的是发布 - 订阅模式。&lt;/p&gt;
&lt;h4 id=&#34;作用4实现分布式事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用4实现分布式事务&#34;&gt;#&lt;/a&gt; 作用 4：实现分布式事务&lt;/h4&gt;
&lt;p&gt;分布式事务的解决方案之一就是 MQ 事务。&lt;/p&gt;
&lt;p&gt;RocketMQ、Kafka、Pulsar、QMQ 都提供了事务相关的功能。&lt;font color=&#39;red&#39;&gt;事务允许事件流应用将生产、处理、消费消息的整个过程定义为一个原子操作&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;详细介绍可以查看 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGlzdHJpYnV0ZWQtc3lzdGVtL2Rpc3RyaWJ1dGVkLXRyYW5zYWN0aW9uLmh0bWw=&#34;&gt;分布式事务详解 (付费)&lt;/span&gt; 这篇文章。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/07b338324a7d8894b8aef4b659b76d92.png&#34; alt=&#34;分布式事务详解 - MQ事务&#34; /&gt;&lt;/p&gt;
&lt;center&gt;分布式事务详解 - MQ事务&lt;/center&gt;
&lt;h3 id=&#34;消息队列存在的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息队列存在的问题&#34;&gt;#&lt;/a&gt; 消息队列存在的问题&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;系统可用性降低&lt;/strong&gt;：在加入 MQ 之前，你不用考虑&lt;font color=&#39;red&#39;&gt;消息丢失、 MQ 挂掉&lt;/font&gt;等等的情况，但是引入 MQ 之后你就需要去考虑了！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;系统复杂性提高&lt;/strong&gt;：加入 MQ 之后，你需要&lt;font color=&#39;red&#39;&gt;保证消息没有被重复消费、处理消息丢失的情况、保证消息传递的顺序性&lt;/font&gt;等等问题！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一致性问题&lt;/strong&gt;：消息队列可以实现异步，确实可以提高系统响应速度。但是，万一消息的真正消费者并没有正确消费消息怎么办？这样就会导致&lt;font color=&#39;red&#39;&gt;数据不一致&lt;/font&gt;的情况了！&lt;/p&gt;
&lt;h3 id=&#34;jms-和-amqp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jms-和-amqp&#34;&gt;#&lt;/a&gt; JMS 和 AMQP&lt;/h3&gt;
&lt;h4 id=&#34;jms-定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jms-定义&#34;&gt;#&lt;/a&gt; JMS 定义&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;JMS（JAVA Message Service）是 Java 的消息服务，其 API 是一个消息服务的标准 / 规范&lt;/strong&gt;。JMS 的客户端之间可以通过 JMS 服务进行异步的消息传输。它允许应用程序组件基于 JavaEE 平台创建、发送、接收和读取消息。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。&lt;/p&gt;
&lt;p&gt;JMS 定义了&lt;font color=&#39;gree&#39;&gt;五种不同消息&lt;/font&gt;的正文格式以及调用的消息类型，允许你发送并接收一些不同形式的数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StreamMessage&lt;/code&gt; ：Java 原始值的数据流&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MapMessage&lt;/code&gt; ：一套名称 - 值对&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TextMessage&lt;/code&gt; ：一个字符串对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ObjectMessage&lt;/code&gt; ：一个序列化的 Java 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BytesMessage&lt;/code&gt; ：一个字节的数据流&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;jms-两种消息模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jms-两种消息模型&#34;&gt;#&lt;/a&gt; JMS 两种消息模型&lt;/h4&gt;
&lt;h5 id=&#34;点到点模型p2p&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#点到点模型p2p&#34;&gt;#&lt;/a&gt; 点到点模型（P2P）&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/message-queue-queue-model-3aa809bf.png&#34; alt=&#34;队列模型&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;strong&gt;队列（Queue）&lt;strong&gt;作为消息通信载体，满足&lt;/strong&gt;生产者与消费者模式&lt;/strong&gt;，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;一条消息只能被一个消费者使用&lt;/font&gt;&lt;/strong&gt;，未被消费的消息在队列中保留直到被消费或超时。比如：生产者发送 100 条消息的话，两个消费者来消费，一般情况下两个消费者会按照消息发送的顺序各自消费一半（也就是你一个我一个的消费）。&lt;/p&gt;
&lt;h5 id=&#34;发布订阅模型pubsub&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发布订阅模型pubsub&#34;&gt;#&lt;/a&gt; 发布 / 订阅模型（Pub/Sub）&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://javaguide.cn/assets/message-queue-pub-sub-model-63a717b4.png&#34; alt=&#34;发布/订阅（Pub/Sub）模型&#34; /&gt;&lt;/p&gt;
&lt;center&gt;发布/订阅（Pub/Sub）模型&lt;/center&gt;
&lt;p&gt;使用&lt;strong&gt;主题（Topic）&lt;strong&gt;作为消息通信载体，类似于&lt;/strong&gt;广播模式&lt;/strong&gt;；发布者发布一条消息，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;该消息通过主题传递给所有的订阅者&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;amqp-定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#amqp-定义&#34;&gt;#&lt;/a&gt; AMQP 定义&lt;/h4&gt;
&lt;p&gt;AMQP，即  &lt;code&gt;Advanced Message Queuing Protocol&lt;/code&gt; ，一个提供统一消息服务的应用层标准&lt;strong&gt;高级消息队列协议&lt;/strong&gt;（二进制应用层协议），是&lt;font color=&#39;red&#39;&gt;应用层协议&lt;/font&gt;的一个开放标准，为面向消息的中间件设计，兼容 JMS。&lt;font color=&#39;red&#39;&gt;基于此协议的客户端与消息中间件可传递消息&lt;/font&gt;，并不受客户端 / 中间件产品，不同的开发语言等条件的限制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RabbitMQ 就是基于 AMQP 协议实现的。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;jms-vs-amqp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jms-vs-amqp&#34;&gt;#&lt;/a&gt; JMS vs AMQP&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;JMS&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;AMQP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;定义&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Java API&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;跨语言&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;是&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;跨平台&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;是&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;支持消息类型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供两种消息模型：①P2P;②Pub/sub&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供了五种消息模型：①direct exchange；②fanout exchange；③topic change；④headers exchange；⑤system exchange。本质来讲，后四种和 JMS 的 pub/sub 模型没有太大差别，仅是在路由机制上做了更详细的划分；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;支持消息类型&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;多种消息类型&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;byte []（二进制）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AMQP 为消息定义了线路层的协议，而 JMS 所定义的是 API 规范。在 Java 体系中，多个 client 均可以通过 JMS 进行交互，不需要应用修改代码，但是其对跨平台的支持较差。而 &lt;strong&gt;AMQP 天然具有跨平台、跨语言特性&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JMS 支持  &lt;code&gt;TextMessage&lt;/code&gt; 、 &lt;code&gt;MapMessage&lt;/code&gt;  等复杂的消息类型&lt;/strong&gt;；而 &lt;strong&gt;AMQP 仅支持  &lt;code&gt;byte[]&lt;/code&gt;  消息类型&lt;/strong&gt;（复杂的类型可序列化后发送）。&lt;/li&gt;
&lt;li&gt;由于 Exchange 提供的路由算法，&lt;strong&gt;AMQP 可以提供多样化的路由方式&lt;/strong&gt;来传递消息到消息队列，&lt;strong&gt;而 JMS 仅支持 P2P 和 Pub/Sub 方式两种&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rpc-和消息队列的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rpc-和消息队列的区别&#34;&gt;#&lt;/a&gt; RPC 和消息队列的区别&lt;/h3&gt;
&lt;p&gt;RPC 和消息队列都是分布式微服务系统中重要的组件之一，下面我们来简单对比一下两者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;RPC：主要用来解决两个服务的远程通信问题，不需要了解底层网络的通信机制。通过 RPC 可以帮助我们&lt;font color=&#39;red&#39;&gt;远程调用某个服务的方法&lt;/font&gt;，这个过程就像调用本地方法一样简单。&lt;/li&gt;
&lt;li&gt;消息队列：主要用来&lt;font color=&#39;red&#39;&gt;降低系统耦合性、实现任务异步、流量削峰&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信方式&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;RPC：&lt;font color=&#39;red&#39;&gt;双向直接网络通讯&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;消息队列：&lt;font color=&#39;red&#39;&gt;单向引入中间载体&lt;/font&gt;的网络通讯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;架构&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;RPC：&lt;font color=&#39;red&#39;&gt;不需要存储消息&lt;/font&gt;，因为是双向直接网络通讯&lt;/li&gt;
&lt;li&gt;消息队列：需要把消息存储起来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求处理的时效性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过 RPC 发出的调用一般会&lt;font color=&#39;red&#39;&gt;立即被处理&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;存放在消息队列中的消息&lt;font color=&#39;red&#39;&gt;并不一定会立即被处理&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;RPC 和消息队列本质上是网络通讯的两种不同的实现机制，两者的用途不同&lt;/font&gt;，万不可将两者混为一谈。&lt;/p&gt;
&lt;h3 id=&#34;消息队列选型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息队列选型&#34;&gt;#&lt;/a&gt; &lt;mark&gt;消息队列选型&lt;/mark&gt;&lt;/h3&gt;
&lt;h4 id=&#34;常见的消息队列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的消息队列&#34;&gt;#&lt;/a&gt; 常见的消息队列&lt;/h4&gt;
&lt;h5 id=&#34;kafka&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kafka&#34;&gt;#&lt;/a&gt; Kafka&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Kafka 官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2thZmthLmFwYWNoZS5vcmcv&#34;&gt;http://kafka.apache.org/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Kafka 更新记录（可以直观看到项目是否还在维护）：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rYWZrYS5hcGFjaGUub3JnL2Rvd25sb2Fkcw==&#34;&gt;https://kafka.apache.org/downloads&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/kafka-logo.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Kafka 是 LinkedIn 开源的一个&lt;font color=&#39;red&#39;&gt;分布式流式处理平台&lt;/font&gt;，已经成为 Apache 顶级项目，早期被用来用于&lt;font color=&#39;red&#39;&gt;处理海量的日志&lt;/font&gt;，后面才慢慢发展成了一款功能全面的&lt;font color=&#39;red&#39;&gt;高性能消息队列&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;流式处理平台具有三个关键功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;消息队列&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;发布和订阅消息流&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持久方式存储消息流&lt;/strong&gt;：Kafka 会&lt;font color=&#39;red&#39;&gt;把消息持久化到磁盘&lt;/font&gt;，有效地避免了消息丢失的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流式处理平台&lt;/strong&gt;：在消息发布的时候进行处理，Kafka 提供了一个完整的流式处理类库。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Kafka 是一个分布式系统，由通过高性能&lt;font color=&#39;red&#39;&gt; TCP 网络协议&lt;/font&gt;进行通信的服务器和客户端组成，可以部署在在本地和云环境中的裸机硬件、虚拟机和容器上。&lt;/p&gt;
&lt;p&gt;在 Kafka 2.8 之前，Kafka 最被大家诟病的就是其重度依赖于 Zookeeper 做元数据管理和集群的高可用。&lt;font color=&#39;red&#39;&gt;在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;提示一下：&lt;font color=&#39;red&#39;&gt;如果要使用 KRaft 模式的话，建议选择较高版本的 Kafka&lt;/font&gt;，因为这个功能还在持续完善优化中。Kafka 3.3.1 版本是第一个将 KRaft（Kafka Raft）共识协议标记为生产就绪的版本。&lt;/p&gt;
&lt;h5 id=&#34;rocketmq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rocketmq&#34;&gt;#&lt;/a&gt; RocketMQ&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;RocketMQ 官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yb2NrZXRtcS5hcGFjaGUub3JnLw==&#34;&gt;https://rocketmq.apache.org/&lt;/span&gt; （文档很详细，推荐阅读）&lt;/p&gt;
&lt;p&gt;RocketMQ 更新记录（可以直观看到项目是否还在维护）：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcS9yZWxlYXNlcw==&#34;&gt;https://github.com/apache/rocketmq/releases&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/rocketmq-logo.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;RocketMQ 是阿里开源的一款&lt;font color=&#39;red&#39;&gt;云原生 “消息、事件、流” 实时数据处理平台&lt;/font&gt;，借鉴了 Kafka，已经成为 Apache 顶级项目。&lt;/p&gt;
&lt;p&gt;RocketMQ 的核心特性（摘自 RocketMQ 官网）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;云原生&lt;/strong&gt;：生与云，长与云，&lt;font color=&#39;red&#39;&gt;无限弹性扩缩，K8s 友好&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高吞吐&lt;/strong&gt;：万亿级吞吐保证，同时满足微服务与大数据场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流处理&lt;/strong&gt;：提供轻量、高扩展、高性能和丰富功能的流计算引擎。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;金融级&lt;/strong&gt;：金融级的稳定性，广泛用于交易核心链路。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;架构极简&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;零外部依赖&lt;/font&gt;，Shared-nothing 架构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生态友好&lt;/strong&gt;：无缝对接微服务、实时计算、数据湖等周边生态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据官网介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apache RocketMQ 自诞生以来，因其架构简单、业务功能丰富、具备极强可扩展性等特点&lt;font color=&#39;red&#39;&gt;被众多企业开发者以及云厂商广泛采用&lt;/font&gt;。历经十余年的大规模场景打磨，RocketMQ 已经成为&lt;font color=&#39;red&#39;&gt;业内共识的金融级可靠业务消息首选方案&lt;/font&gt;，被广泛应用于互联网、大数据、移动互联网、物联网等领域的业务场景。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;rabbitmq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rabbitmq&#34;&gt;#&lt;/a&gt; RabbitMQ&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;RabbitMQ 官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucmFiYml0bXEuY29tLw==&#34;&gt;https://www.rabbitmq.com/&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;RabbitMQ 更新记录（可以直观看到项目是否还在维护）：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL25ld3MuaHRtbA==&#34;&gt;https://www.rabbitmq.com/news.html&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/rabbitmq-logo.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;RabbitMQ 是采用 Erlang 语言实现 &lt;font color=&#39;red&#39;&gt;AMQP (Advanced Message Queuing Protocol，高级消息队列协议）&lt;/font&gt;的消息中间件，它最初起源于金融系统，用于在分布式系统中&lt;font color=&#39;red&#39;&gt;存储转发消息&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;RabbitMQ 发展到今天，被越来越多的人认可，这和它在易用性、扩展性、可靠性和高可用性等方面的卓著表现是分不开的。RabbitMQ 的具体特点可以概括为以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可靠性&lt;/strong&gt;：RabbitMQ 使用一些机制来保证消息的可靠性，如&lt;font color=&#39;red&#39;&gt;持久化、传输确认、发布确认&lt;/font&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活的路由&lt;/strong&gt;：在消息进入队列之前，&lt;font color=&#39;red&#39;&gt;通过交换器来路由消息&lt;/font&gt;。对于典型的路由功能，RabbitMQ 己经提供了一些内置的交换器来实现。针对更复杂的路由功能，可以将多个交换器绑定在一起，也可以通过插件机制来实现自己的交换器。这个后面会在我们讲 RabbitMQ 核心概念的时候详细介绍到。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展性&lt;/strong&gt;：多个 RabbitMQ 节点可以组成一个&lt;font color=&#39;red&#39;&gt;集群&lt;/font&gt;，也可以根据实际业务情况动态地扩展集群中节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高可用性&lt;/strong&gt;：队列可以在集群中的机器上&lt;font color=&#39;red&#39;&gt;设置镜像&lt;/font&gt;，使得在部分节点出现问题的情况下队列仍然可用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持多种协议&lt;/strong&gt;：RabbitMQ 除了原生支持 AMQP 协议，还支持 &lt;font color=&#39;red&#39;&gt;STOMP、MQTT&lt;/font&gt; 等多种消息中间件协议。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多语言客户端&lt;/strong&gt;：RabbitMQ 几乎&lt;font color=&#39;red&#39;&gt;支持所有常用语言&lt;/font&gt;，比如 Java、Python、Ruby、PHP、C#、JavaScript 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易用的管理界面&lt;/strong&gt;：RabbitMQ 提供了一个&lt;font color=&#39;red&#39;&gt;易用的用户界面&lt;/font&gt;，使得用户可以&lt;font color=&#39;red&#39;&gt;监控和管理消息、集群中的节点&lt;/font&gt;等。在安装 RabbitMQ 的时候会介绍到，安装好 RabbitMQ 就自带管理界面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插件机制&lt;/strong&gt;：RabbitMQ 提供了许多插件，以实现从多方面进行扩展，当然也可以编写自己的插件。感觉这个有点类似 Dubbo 的 SPI 机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;activemq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#activemq&#34;&gt;#&lt;/a&gt; ActiveMQ&lt;/h5&gt;
&lt;p&gt;目前已经被淘汰，不推荐使用，不建议学习。&lt;/p&gt;
&lt;h4 id=&#34;对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对比&#34;&gt;#&lt;/a&gt; 对比&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;参考《Java 工程师面试突击第 1 季 - 中华石杉老师》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;对比方向&lt;/th&gt;
&lt;th&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;吞吐量&lt;/td&gt;
&lt;td&gt;万级的 ActiveMQ 和 RabbitMQ 的吞吐量（ActiveMQ 的性能最差）要比十万级甚至是百万级的 &lt;font color=&#39;red&#39;&gt;RocketMQ 和 Kafka&lt;/font&gt; 低一个数量级。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可用性&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;都可以实现高可用&lt;/font&gt;。ActiveMQ 和 RabbitMQ 都是基于&lt;font color=&#39;red&#39;&gt;主从架构&lt;/font&gt;实现高可用性。RocketMQ 基于&lt;font color=&#39;red&#39;&gt;分布式架构&lt;/font&gt;。 Kafka 也是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;时效性&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;RabbitMQ&lt;/font&gt; 基于 Erlang 开发，所以并发能力很强，性能极其好，延时很低，达到微秒级，其他几个都是 ms 级。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;功能支持&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;Pulsar&lt;/font&gt; 的功能更全面，支持多租户、多种消费模式和持久性模式等功能，是下一代云原生分布式消息流平台。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息丢失&lt;/td&gt;
&lt;td&gt;ActiveMQ 和 RabbitMQ 丢失的可能性非常低， &lt;font color=&#39;red&#39;&gt;Kafka、RocketMQ 和 Pulsar&lt;/font&gt; 理论上可以做到 0 丢失。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ActiveMQ 的社区算是比较成熟，但是较目前来说，ActiveMQ 的性能比较差，而且版本迭代很慢，不推荐使用，已经被淘汰了。&lt;/li&gt;
&lt;li&gt;RabbitMQ 在吞吐量方面虽然稍逊于 Kafka、RocketMQ 和 Pulsar，但是由于它基于 Erlang 开发，所以并发能力很强，性能极其好，延时很低，达到微秒级。但是也因为 RabbitMQ 基于 Erlang 开发，所以国内很少有公司有实力做 Erlang 源码级别的研究和定制。如果业务场景对并发量要求不是太高（十万级、百万级），那这几种消息队列中，RabbitMQ 或许是你的首选。&lt;/li&gt;
&lt;li&gt;RocketMQ 和 Pulsar 支持强一致性，对消息一致性要求比较高的场景可以使用。&lt;/li&gt;
&lt;li&gt;RocketMQ 阿里出品，Java 系开源项目，源代码我们可以直接阅读，然后可以定制自己公司的 MQ，并且 RocketMQ 有阿里巴巴的实际业务场景的实战考验。&lt;/li&gt;
&lt;li&gt;Kafka 仅仅提供较少的核心功能，但是提供超高的吞吐量，ms 级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展。同时 Kafka 最好是支撑较少的 topic 数量即可，保证其超高吞吐量。&lt;font color=&#39;red&#39;&gt;Kafka 唯一的一点劣势是有可能消息重复消费&lt;/font&gt;，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略这个特性天然适合大数据实时计算以及日志收集。如果是&lt;font color=&#39;red&#39;&gt;大数据领域的实时计算、日志采集等场景&lt;/font&gt;，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kafka-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kafka-2&#34;&gt;#&lt;/a&gt; Kafka&lt;/h2&gt;
&lt;h3 id=&#34;基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础&#34;&gt;#&lt;/a&gt; 基础&lt;/h3&gt;
&lt;h4 id=&#34;功能-应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能-应用场景&#34;&gt;#&lt;/a&gt; 功能、应用场景&lt;/h4&gt;
&lt;p&gt;Kafka 是一个&lt;strong&gt;分布式流式处理平台&lt;/strong&gt;，流平台具有三个关键功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;消息队列&lt;/font&gt;&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;发布和订阅消息流&lt;/font&gt;，这个功能类似于消息队列，这也是 Kafka 也被归类为消息队列的原因。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;容错的持久方式存储记录消息流&lt;/font&gt;&lt;/strong&gt;：Kafka 会&lt;font color=&#39;red&#39;&gt;把消息持久化到磁盘&lt;/font&gt;，有效避免了消息丢失的风险。&lt;/li&gt;
&lt;li&gt;**&lt;font color=&#39;red&#39;&gt;流式处理平台&lt;/font&gt;：** 在消息发布的时候进行处理，Kafka 提供了一个&lt;font color=&#39;red&#39;&gt;完整的流式处理类库&lt;/font&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Kafka 主要有两大应用场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;消息队列&lt;/font&gt;&lt;/strong&gt;：建立实时流数据管道，以可靠地在系统或应用程序之间获取数据。&lt;/li&gt;
&lt;li&gt;**&lt;font color=&#39;red&#39;&gt;数据处理&lt;/font&gt;：** 构建实时的流数据处理程序来转换或处理数据流。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;相比其他-mq-的优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相比其他-mq-的优势&#34;&gt;#&lt;/a&gt; 相比其他 MQ 的优势&lt;/h4&gt;
&lt;p&gt;Kafka 相比其他消息队列主要的优势如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;极致的性能&lt;/font&gt;&lt;/strong&gt;：基于 Scala 和 Java 语言开发，设计中大量使用了&lt;font color=&#39;red&#39;&gt;批量处理&lt;/font&gt;和&lt;font color=&#39;red&#39;&gt;异步&lt;/font&gt;的思想，最高&lt;font color=&#39;red&#39;&gt;每秒可以处理千万级别的消息&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;生态系统兼容性无可匹敌&lt;/font&gt;&lt;/strong&gt;：Kafka 与周边生态系统的兼容性是最好的没有之一，尤其在大数据和流计算领域。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;消息模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息模型&#34;&gt;#&lt;/a&gt; 消息模型&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;题外话：早期的  &lt;code&gt;JMS&lt;/code&gt;  和  &lt;code&gt;AMQP&lt;/code&gt;  属于消息服务领域权威组织所做的相关的标准，但是这些标准的进化跟不上消息队列的演进速度，&lt;font color=&#39;red&#39;&gt;这些标准实际上已经属于废弃状态&lt;/font&gt;。所以，可能存在的情况是：&lt;font color=&#39;red&#39;&gt;不同的消息队列都有自己的一套消息模型&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;队列模型p2p&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#队列模型p2p&#34;&gt;#&lt;/a&gt; 队列模型（P2P）&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;早期的消息模型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/%E9%98%9F%E5%88%97%E6%A8%A1%E5%9E%8B23.png&#34; alt=&#34;队列模型&#34; /&gt;&lt;/p&gt;
&lt;center&gt;队列模型&lt;/center&gt;
&lt;p&gt;使用&lt;strong&gt;队列（Queue）&lt;strong&gt;作为消息通信载体，满足生产者与消费者模式，&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;一条消息只能被一个消费者使用，未被消费的消息在队列中保留直到被消费或超时&lt;/font&gt;&lt;/strong&gt;。比如：我们生产者发送 100 条消息的话，两个消费者来消费，一般情况下两个消费者会按照消息发送的顺序各自消费一半（也就是你一个我一个的消费。）&lt;/p&gt;
&lt;p&gt;队列模型存在的问题：&lt;font color=&#39;red&#39;&gt;无法将生产者产生的消息分发给多个消费者，并保证每个消费者都能接收到完整的消息内容&lt;/font&gt;。这种情况，队列模型就不好解决了。很多比较杠精的人就说：我们可以为每个消费者创建一个单独的队列，让生产者发送多份。这是一种非常愚蠢的做法，浪费资源不说，还违背了使用消息队列的目的。&lt;/p&gt;
&lt;h5 id=&#34;发布-订阅模型pub-sub&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发布-订阅模型pub-sub&#34;&gt;#&lt;/a&gt; 发布 - 订阅模型（Pub-Sub）&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Kafka 采用的消息模型&lt;/font&gt;&lt;/strong&gt;，为了解决队列模型存在的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/java-guide-blog/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%9E%8B.png&#34; alt=&#34;发布订阅模型&#34; /&gt;&lt;/p&gt;
&lt;center&gt;发布订阅模型&lt;/center&gt;
&lt;p&gt;发布 - 订阅模型（Pub-Sub） 使用&lt;strong&gt;主题（Topic）&lt;strong&gt;作为消息通信载体，类似于&lt;/strong&gt;广播模式&lt;/strong&gt;。&lt;strong&gt;发布者发布一条消息，该消息通过主题传递给所有的订阅者，在一条消息广播之后才订阅的用户则是收不到该条消息的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在发布 - 订阅模型中，&lt;font color=&#39;red&#39;&gt;如果只有一个订阅者，那它和队列模型就基本是一样的了&lt;/font&gt;。所以说，发布 - 订阅模型在功能层面上是可以兼容队列模型的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;RocketMQ 的消息模型和 Kafka 基本是完全一样的。唯一的区别是 Kafka 中没有队列这个概念，与之对应的是 Partition（分区）。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;核心概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#核心概念&#34;&gt;#&lt;/a&gt; 核心概念&lt;/h3&gt;
&lt;h4 id=&#34;producer-comsumer-broker-topic-partition&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#producer-comsumer-broker-topic-partition&#34;&gt;#&lt;/a&gt; Producer、Comsumer、Broker、Topic、Partition&lt;/h4&gt;
&lt;p&gt;Kafka 将生产者发布的消息发送到 **Topic（主题）** 中，需要这些消息的消费者可以订阅这些 Topic，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/message-queue20210507200944439.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;上面这张图也为我们引出了，Kafka 比较重要的几个概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Producer（生产者）: 产生消息的一方。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consumer（消费者）: 消费消息的一方。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Broker（代理）&lt;/strong&gt;: 可以看作是&lt;font color=&#39;red&#39;&gt;一个独立的 Kafka 实例&lt;/font&gt;。多个 Kafka Broker 组成一个 Kafka &lt;strong&gt;Cluster（集群）&lt;/strong&gt;。每个 Broker 中又包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Topic（主题）&lt;/strong&gt;: Producer 将消息发送到特定的主题，Consumer 通过订阅特定的 Topic (主题) 来消费消息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Partition（分区）&lt;/strong&gt;: &lt;font color=&#39;red&#39;&gt;属于 Topic 的一部分&lt;/font&gt;。一个 Topic 可以有多个 Partition ，并且 **&lt;font color=&#39;red&#39;&gt;同一 Topic 下的 Partition 可以分布在不同的 Broker 上，表明一个 Topic 可以横跨多个 Broker&lt;/font&gt;**。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;多副本机制replica&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多副本机制replica&#34;&gt;#&lt;/a&gt; 多副本机制（Replica）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;类似于 &lt;strong&gt;Redis 中的主从复制（Replica）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kafka 为分区（Partition）引入了&lt;strong&gt;多副本（Replica）机制&lt;/strong&gt;。Partition 中的多个副本之间会有一个叫做  &lt;code&gt;leader&lt;/code&gt;  的家伙，其他副本称为  &lt;code&gt;follower&lt;/code&gt; 。&lt;font color=&#39;red&#39;&gt;发送的消息先被发送到 leader 副本，然后 follower 副本才能从 leader 副本中拉取消息进行同步&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;生产者和消费者只与 leader 副本交互&lt;/font&gt;&lt;/strong&gt;。可以理解为&lt;font color=&#39;red&#39;&gt;其他副本只是 leader 副本的拷贝，它们的存在只是为了保证消息存储的安全性&lt;/font&gt;。&lt;font color=&#39;red&#39;&gt;当 leader 副本发生故障时会从 follower 中选举出一个 leader，前提是该 follower 和 leader 同步程度一致&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kafka 多副本（Replica）机制的好处如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;负载均衡&lt;/font&gt;&lt;/strong&gt;：Kafka 通过给特定 Topic 指定多个 Partition，而各个 Partition 可以分布在不同的 Broker 上，这样便能提供比较好的&lt;font color=&#39;red&#39;&gt;并发能力&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;数据容灾能力&lt;/font&gt;&lt;/strong&gt;：Partition 可以指定对应的 Replica 数，极大地提高了消息存储的安全性与容灾能力，不过也相应地增加了所需要的存储空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;kafka-与-zookeeper-的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kafka-与-zookeeper-的关系&#34;&gt;#&lt;/a&gt; Kafka 与 Zookeeper 的关系&lt;/h3&gt;
&lt;h4 id=&#34;zookeeper-在-kafka-中的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zookeeper-在-kafka-中的作用&#34;&gt;#&lt;/a&gt; Zookeeper 在 Kafka 中的作用&lt;/h4&gt;
&lt;p&gt;下图就是我的本地 Zookeeper，它成功和我本地的 Kafka 关联上（以下文件夹结构借助 idea 插件 Zookeeper tool 实现）。&lt;/p&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/zookeeper-kafka.jpg&#34; alt=&#34;img&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;ZooKeeper 主要为 Kafka 提供&lt;strong&gt;元数据的管理&lt;/strong&gt;的功能。&lt;/p&gt;
&lt;p&gt;从图中我们可以看出，Zookeeper 主要为 Kafka 做了下面这些事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Broker 注册&lt;/font&gt;&lt;/strong&gt;：在 Zookeeper 上会有一个专门用来&lt;font color=&#39;red&#39;&gt;记录 Broker 服务器列表&lt;/font&gt;的节点。每个 Broker 在启动时，都会到 Zookeeper 上进行注册，即到  &lt;code&gt;/brokers/ids&lt;/code&gt;  下创建属于自己的节点。每个 Broker 就会将自己的 IP 地址和端口等信息记录到该节点中去&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Topic 注册&lt;/font&gt;&lt;/strong&gt;：在 Kafka 中，&lt;font color=&#39;red&#39;&gt;同一个 Topic 的消息会被分成多个 Partition&lt;/font&gt;，并将其分布在多个 Broker 上。&lt;font color=&#39;red&#39;&gt;这些 Partition 信息及与 Broker 的对应关系也都是由 Zookeeper 在维护&lt;/font&gt;。比如我创建了一个名字为 my-topic 的 Topic 并且它有两个 Partition ，对应到 zookeeper 中会创建这些文件夹： &lt;code&gt;/brokers/topics/my-topic/Partitions/0&lt;/code&gt; 、 &lt;code&gt;/brokers/topics/my-topic/Partitions/1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;负载均衡&lt;/font&gt;&lt;/strong&gt;：上面也说过了 Kafka 通过给特定 Topic 指定多个 Partition，而各个 Partition 可以分布在不同的 Broker 上，这样便能提供比较好的并发能力。&lt;font color=&#39;red&#39;&gt;对于同一个 Topic 的不同 Partition，Kafka 会尽力将这些 Partition 分布到不同的 Broker 服务器上&lt;/font&gt;。
&lt;ul&gt;
&lt;li&gt;当 Provider 产生消息时，会尽量投递到不同 Broker 的 Partition 里面。&lt;/li&gt;
&lt;li&gt;当 Consumer 消费消息时，Zookeeper 会可以根据当前的 Partition 数量以及 Consumer 数量来实现动态负载均衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;kafka-不再依赖于-zookeeper&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kafka-不再依赖于-zookeeper&#34;&gt;#&lt;/a&gt; Kafka 不再依赖于 Zookeeper&lt;/h4&gt;
&lt;p&gt;在 Kafka 2.8 之前，Kafka 最被大家诟病的就是其重度依赖于 Zookeeper。&lt;font color=&#39;red&#39;&gt;在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构，让你可以以一种轻量级的方式来使用 Kafka&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;不过，要提示一下：如果要使用 KRaft 模式的话，建议选择较高版本的 Kafka，因为这个功能还在持续完善优化中。Kafka 3.3.1 版本是第一个将 KRaft（Kafka Raft）共识协议标记为生产就绪的版本。&lt;/p&gt;
&lt;p&gt;![](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vc3MuamF2YWd1aWRlLmNuL2dpdGh1Yi9qYXZhZ3VpZGUvaGlnaC1wZXJmb3JtYW5jZS9tZXNzYWdlLXF1ZXVlL2thZmthMy4zLjEta3JhZnQt&#34;&gt;https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/kafka3.3.1-kraft-&lt;/span&gt; production-ready.png)&lt;/p&gt;
&lt;h3 id=&#34;消费顺序-消息丢失-重复消费&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消费顺序-消息丢失-重复消费&#34;&gt;#&lt;/a&gt; 消费顺序、消息丢失、重复消费&lt;/h3&gt;
&lt;h4 id=&#34;如何保证消息的消费顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何保证消息的消费顺序&#34;&gt;#&lt;/a&gt; 如何保证消息的消费顺序？&lt;/h4&gt;
&lt;p&gt;我们在使用消息队列的过程中经常有业务场景需要严格保证消息的消费顺序，比如我们同时发了 2 个消息，这 2 个消息对应的操作分别对应的数据库操作是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更改用户会员等级。&lt;/li&gt;
&lt;li&gt;根据会员等级计算订单价格。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假如这两条消息的消费顺序不一样造成的最终结果就会截然不同。&lt;/p&gt;
&lt;p&gt;我们知道&lt;font color=&#39;red&#39;&gt; Kafka 中 Partition (分区) 是真正保存消息的地方&lt;/font&gt;，我们发送的消息都被放在了这里。而 Partition (分区) 又存在于 Topic (主题) 概念中，并且我们可以给特定 Topic 指定多个 Partition。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/KafkaTopicPartionsLayout.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;每次添加消息到 Partition (分区) 的时候都会采用 **&lt;font color=&#39;red&#39;&gt;尾加法&lt;/font&gt;**，如上图所示。 &lt;font color=&#39;red&#39;&gt;Kafka 只能为我们保证 Partition（分区）中的消息有序，通过 **offset（偏移量）** 实现&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;消息在被追加到 Partition (分区) 的时候都会分配一个特定的偏移量（offset）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，我们就有一种很简单的保证消息消费顺序的方法：1 个 Topic 只对应一个 Partition。这样当然可以解决问题，但是破坏了 Kafka 的设计初衷。&lt;/p&gt;
&lt;p&gt;Kafka 中发送 1 条消息的时候，可以指定 topic、partition、key、data（数据）4 个参数。如果你发送消息的时候指定了 Partition 的话，所有消息都会被发送到指定的 Partition。并且，&lt;font color=&#39;red&#39;&gt;同一个 key 的消息可以保证只发送到同一个 partition&lt;/font&gt;，这个我们可以采用表 / 对象的 id 来作为 key 。&lt;/p&gt;
&lt;p&gt;总结一下，对于如何保证 Kafka 中消息消费的顺序，有了下面两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1 个 Topic 只对应一个 Partition。&lt;/li&gt;
&lt;li&gt;（推荐）&lt;strong&gt;发送消息的时候指定 key/Partition&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然不仅仅只有上面两种方法，上面两种方法是我觉得比较好理解的。&lt;/p&gt;
&lt;h4 id=&#34;如何保证消息不丢失&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何保证消息不丢失&#34;&gt;#&lt;/a&gt; 如何保证消息不丢失？&lt;/h4&gt;
&lt;h5 id=&#34;情况1producer-丢失消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#情况1producer-丢失消息&#34;&gt;#&lt;/a&gt; 情况 1：Producer 丢失消息&lt;/h5&gt;
&lt;p&gt;Producer 调用  &lt;code&gt;send&lt;/code&gt;  方法发送消息之后，消息可能因为网络问题并没有发送过去。所以，我们不能默认在调用  &lt;code&gt;send&lt;/code&gt;  方法发送消息之后消息发送成功了。&lt;/p&gt;
&lt;p&gt;为了确定消息是发送成功，我们要判断消息发送的结果。但是要注意的是&lt;font color=&#39;red&#39;&gt; Kafka 中 Producer 使用  &lt;code&gt;send&lt;/code&gt;  方法发送消息实际上是异步的操作，可以通过  &lt;code&gt;get()&lt;/code&gt;  方法获取调用结果，但是这样也让它变为了同步操作&lt;/font&gt;，示例代码如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;详细代码见这篇文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpnMk9UQTBOamswT0E9PSZhbXA7bWlkPTIyNDc0ODYyNjkmYW1wO2lkeD0yJmFtcDtzbj1lYzAwNDE3YWQ2NDFkZDhjM2QxNDVkNzRjYWZhMDljZSZhbXA7Y2hrc209Y2VhMjQ0ZjZmOWQ1Y2RlMGM4ZWIyMzNmY2M0Y2Y4MmUxMWFjZDA2NDQ2NzE5YTdhZjU1MjMwNjQ5ODYzYTNkZGQ5NWY3OGQxMTFkZSZhbXA7dG9rZW49MTYzMzk1NzI2MiZhbXA7bGFuZz16aF9DTiNyZA==&#34;&gt;Kafka 系列第三篇！10 分钟学会如何在 Spring Boot 程序中使用 Kafka 作为消息队列？&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;SendResult&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; sendResult &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; kafkaTemplate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;topic&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; o&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sendResult&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRecordMetadata&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  logger&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;生产者成功发送消息到&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; sendResult&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getProducerRecord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;topic&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;-&gt; &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; sendRe&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              sult&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getProducerRecord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;但是&lt;font color=&#39;red&#39;&gt;一般不推荐这么做&lt;/font&gt;！可以&lt;strong&gt;借助  &lt;code&gt;ListenableFuture&lt;/code&gt;  为 Producer 的  &lt;code&gt;send&lt;/code&gt;  方法添加回调函数&lt;/strong&gt;的形式，示例代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;ListenableFuture&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SendResult&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; future &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; kafkaTemplate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;topic&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; o&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        future&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addCallback&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; logger&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;生产者成功发送消息到topic:&amp;#123;&amp;#125; partition:&amp;#123;&amp;#125;的消息&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRecordMetadata&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;topic&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRecordMetadata&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;partition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                ex &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; logger&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;生产者发送消息失败，原因：&amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ex&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getMessage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;如果消息发送失败的话，我们检查失败的原因之后重新发送即可&lt;/font&gt;&lt;/strong&gt;！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这里推荐&lt;font color=&#39;red&#39;&gt;为 Producer 的  &lt;code&gt;retries&lt;/code&gt; （重试次数）设置一个比较合理的值，一般是 3 &lt;/font&gt;，但是为了保证消息不丢失的话一般会设置比较大一点。设置完成之后，当出现网络问题之后能够自动重试消息发送，避免消息丢失。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另外，&lt;font color=&#39;red&#39;&gt;建议还要设置重试间隔&lt;/font&gt;，因为间隔太小的话重试的效果就不明显了，网络波动一次你 3 次一下子就重试完了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;情况2consumer-丢失消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#情况2consumer-丢失消息&#34;&gt;#&lt;/a&gt; 情况 2：Consumer 丢失消息&lt;/h5&gt;
&lt;p&gt;我们知道消息在被追加到 Partition (分区) 的时候都会分配一个特定的 offset（偏移量）。&lt;font color=&#39;red&#39;&gt;offset 表示 Consumer 当前消费到的 Partition (分区) 的所在位置&lt;/font&gt;。Kafka 通过偏移量（offset）可以保证消息在分区内的顺序性。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/kafka-offset.jpg&#34; alt=&#34;kafka offset&#34; /&gt;&lt;/p&gt;
&lt;center&gt;kafka offset&lt;/center&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;当 Consumer 拉取到了 Partition 的某个消息之后，Consumer 会自动提交了  offset &lt;/font&gt;。自动提交的话会有一个问题，试想一下，当 Consumer 刚拿到这个消息准备进行真正消费的时候，突然挂掉了，消息实际上并没有被消费，但是 offset 却被自动提交了。&lt;/p&gt;
&lt;p&gt;解决办法也比较粗暴，我们 ** 关闭自动提交 offset，每次在真正消费完消息之后再手动提交 offset **。 但是，细心的朋友一定会发现，&lt;font color=&#39;red&#39;&gt;这样会带来消息被重新消费的问题&lt;/font&gt;。比如你刚刚消费完消息之后，还没提交 offset，结果自己挂掉了，那么这个消息理论上就会被消费两次。&lt;/p&gt;
&lt;h5 id=&#34;情况3kafka-丢失消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#情况3kafka-丢失消息&#34;&gt;#&lt;/a&gt; 情况 3：Kafka 丢失消息&lt;/h5&gt;
&lt;p&gt;我们知道&lt;font color=&#39;red&#39;&gt; Kafka 为 Partition 引入了多副本（Replica）机制&lt;/font&gt;。Partition 中的多个副本之间会有一个叫做 leader 的家伙，其他副本称为 follower。我们发送的消息会被发送到 leader 副本，然后 follower 副本才能从 leader 副本中拉取消息进行同步。Producer 和 Comsumer 只与 leader 副本交互。可以理解为其他 follower 副本只是 leader 副本的拷贝，它们的存在只是为了保证消息存储的安全性。&lt;/p&gt;
&lt;p&gt;试想一种情况：&lt;font color=&#39;red&#39;&gt;假如 leader 副本所在的 broker 突然挂掉，但是 leader 的数据还有一些没有被 follower 副本的同步的话，就会造成&lt;strong&gt;消息丢失&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置  &lt;code&gt;acks = all&lt;/code&gt; &lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;acks 是 Kafka Producer 很重要的一个参数，其默认值为 1，代表我们的消息被 leader 副本接收之后就算被成功发送&lt;/font&gt;。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;配置  &lt;code&gt;acks = all&lt;/code&gt;  表示只有所有 ISR 列表的副本全部收到消息时，Producer 才会接收到来自服务器的响应&lt;/font&gt;&lt;/strong&gt;。这种模式是&lt;font color=&#39;red&#39;&gt;最高级别、最安全&lt;/font&gt;的，可以确保不止一个 Broker 接收到了消息，但副作用是&lt;font color=&#39;red&#39;&gt;延迟会很高&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Partition 中的所有副本统称为 &lt;strong&gt; &lt;code&gt;AR&lt;/code&gt; &lt;/strong&gt;（Assigned Repllicas）。所有与 leader 副本保持一定程度同步的副本（包括 Leader 本身）组成 &lt;strong&gt; &lt;code&gt;ISR&lt;/code&gt; &lt;/strong&gt;（In-Sync Replicas），ISR 集合是 AR 集合中的一个子集。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置  &lt;code&gt;replication.factor &amp;gt;= 3&lt;/code&gt; &lt;/strong&gt;：为了保证 leader 副本能有 follower 副本能同步消息，可以 **&lt;font color=&#39;red&#39;&gt;确保每个 Partition 至少有 3 个副本&lt;/font&gt;**。虽然造成了数据冗余，但是带来了&lt;font color=&#39;red&#39;&gt;数据的安全性&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置  &lt;code&gt;min.insync.replicas &amp;gt; 1&lt;/code&gt; &lt;/strong&gt;：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;代表消息至少要被写入到 2 个副本才算是被成功发送&lt;/font&gt;&lt;/strong&gt;。其默认值为 1 ，在实际生产中应尽量避免。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;确保  &lt;code&gt;replication.factor &amp;gt; min.insync.replicas&lt;/code&gt; &lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;为了保证整个 Kafka 服务的高可用性&lt;/font&gt;。设想一下假如两者相等的话，只要是有一个副本挂掉，整个 Partition 就无法正常工作了。这明显违反高可用性！&lt;font color=&#39;red&#39;&gt;一般推荐设置成  &lt;code&gt;replication.factor = min.insync.replicas + 1&lt;/code&gt; &lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置  &lt;code&gt;unclean.leader.election.enable = false&lt;/code&gt; &lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kafka 从 0.11.0.0 版本开始， &lt;code&gt;unclean.leader.election.enable&lt;/code&gt;  参数的默认值改为 false&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们最开始也说了我们发送的消息会被发送到 leader 副本，然后 follower 副本才能从 leader 副本中拉取消息进行同步，多个 follower 副本之间的消息同步情况不一样。当我们配置了 unclean.leader.election.enable = false 的话，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;当 leader 副本发生故障时，就不会从同步程度达不到要求的 follower 副本中选择出 leader&lt;/font&gt;&lt;/strong&gt;，降低了消息丢失的可能性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;如何保证消息不被重复消费&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何保证消息不被重复消费&#34;&gt;#&lt;/a&gt; 如何保证消息不被重复消费？&lt;/h4&gt;
&lt;p&gt;kafka 出现消息重复消费的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;根本原因：Consumer 已经消费了消息，但没有成功提交 offset&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直接原因：Consumer 由于处理业务时间长或者网络链接等原因，&lt;font color=&#39;red&#39;&gt;让 Kafka 认为服务假死，触发了 Partition  &lt;code&gt;rebalance&lt;/code&gt; &lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consumer 消费消息服务做幂等校验&lt;/strong&gt;，比如 Redis 的 set、MySQL 的主键等天然的幂等功能，这种方法最有效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将  &lt;code&gt;enable.auto.commit&lt;/code&gt;  参数设置为 false，关闭 offset 的自动提交，开发者在代码中手动提交 offset&lt;/strong&gt;。那么这里会有个问题：什么时候提交 offset 合适？
&lt;ul&gt;
&lt;li&gt;处理完消息再提交：依旧有消息重复消费的风险，和自动提交一样&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拉取到消息即提交&lt;/strong&gt;：会有消息丢失的风险。允许消息延时的场景，一般会采用这种方式。然后，通过定时任务在业务不繁忙（比如凌晨）的时候做数据兜底。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重试机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重试机制&#34;&gt;#&lt;/a&gt; 重试机制&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Kafka 如何保证消息不丢失中提到了 Kafka 的重试机制。&lt;/p&gt;
&lt;p&gt;网上关于 Spring Kafka 的默认重试机制文章很多，但大多都是过时的，和实际运行结果完全不一样。以下是根据 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tdm5yZXBvc2l0b3J5LmNvbS9hcnRpZmFjdC9vcmcuc3ByaW5nZnJhbWV3b3JrLmthZmthL3NwcmluZy1rYWZrYS8yLjkuMw==&#34;&gt;spring-kafka-2.9.3&lt;/span&gt; 源码重新梳理一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;消费失败后会先重试多次重试失败后会跳过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消费失败后会先重试多次重试失败后会跳过&#34;&gt;#&lt;/a&gt; 消费失败后会先重试，多次重试失败后会跳过&lt;/h4&gt;
&lt;p&gt;Producer 代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt; for (int i = 0; i &amp;lt; 10; i++) &amp;#123;
   kafkaTemplate.send(KafkaConst.TEST_TOPIC, String.valueOf(i))
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Comsumer 代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;   @KafkaListener(topics = &amp;#123;KafkaConst.TEST_TOPIC&amp;#125;,groupId = &amp;quot;apple&amp;quot;)
   private void customer(String message) throws InterruptedException &amp;#123;
       log.info(&amp;quot;kafka customer:&amp;#123;&amp;#125;&amp;quot;,message);
       Integer n = Integer.parseInt(message);
       if (n%5==0)&amp;#123; // 当n为0和5时抛出异常
           throw new  RuntimeException();
       &amp;#125;
   &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;在默认配置下，当消费异常会进行重试，重试多次后会跳过当前消息，继续进行后续消息的消费，不会一直卡在当前消息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;下面是一段消费的日志，可以看出当  &lt;code&gt;test-0@95&lt;/code&gt;  重试多次后会被跳过。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2023&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;32.918&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;DEBUG&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9700&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ntainer#&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;o&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;kafka&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;listener&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;DefaultErrorHandler&lt;/span&gt;   &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Skipping&lt;/span&gt; seek of&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; test&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@95&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2023&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;32.918&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;TRACE&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9700&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ntainer#&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;o&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;kafka&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;listener&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;DefaultErrorHandler&lt;/span&gt;   &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Seeking&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; test&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;96&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2023&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;08&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;32.918&lt;/span&gt;  &lt;span class=&#34;token constant&#34;&gt;INFO&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9700&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ntainer#&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;o&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;clients&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;consumer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;KafkaConsumer&lt;/span&gt;     &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Consumer&lt;/span&gt; clientId&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;consumer&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;apple&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; groupId&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;apple&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Seeking&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;96&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; partition test&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;默认重试-10-次时间间隔为-0&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#默认重试-10-次时间间隔为-0&#34;&gt;#&lt;/a&gt; 默认重试 10 次，时间间隔为 0&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;源码略了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总结：&lt;strong&gt;Kafka Comsumer 在默认配置下会进行最多 10 次重试，每次重试的时间间隔为 0，即立即重试。如果在 10 次重试后仍然无法成功消费消息，则不再进行重试，该消息将被视为消费失败&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;自定义重试次数-时间间隔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义重试次数-时间间隔&#34;&gt;#&lt;/a&gt; 自定义重试次数、时间间隔&lt;/h4&gt;
&lt;p&gt;从上面的代码可以知道，默认错误处理器的重试次数以及时间间隔是由  &lt;code&gt;FixedBackOff&lt;/code&gt;  控制的， &lt;code&gt;FixedBackOff&lt;/code&gt;  是  &lt;code&gt;DefaultErrorHandler&lt;/code&gt;  初始化时默认的。&lt;/p&gt;
&lt;p&gt;所以自定义重试次数以及时间间隔，&lt;strong&gt;只需要在  &lt;code&gt;DefaultErrorHandler&lt;/code&gt;  初始化的时候传入自定义的  &lt;code&gt;FixedBackOff&lt;/code&gt;  即可&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;重新实现一个  &lt;code&gt;KafkaListenerContainerFactory&lt;/code&gt;  ，调用  &lt;code&gt;setCommonErrorHandler&lt;/code&gt;  设置新的自定义的错误处理器就可以实现。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Bean&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;KafkaListenerContainerFactory&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;kafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ConsumerFactory&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; consumerFactory&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt; factory &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 自定义重试时间间隔以及次数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;FixedBackOff&lt;/span&gt; fixedBackOff &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FixedBackOff&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    factory&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setCommonErrorHandler&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DefaultErrorHandler&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fixedBackOff&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    factory&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setConsumerFactory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;consumerFactory&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; factory&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;重试失败后如何告警&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重试失败后如何告警&#34;&gt;#&lt;/a&gt; 重试失败后，如何告警？&lt;/h4&gt;
&lt;p&gt;重试失败后逻辑需要手动实现，以下是一个简单的例子。&lt;strong&gt;继承  &lt;code&gt;DefaultErrorHandler&lt;/code&gt;  并重写  &lt;code&gt;handleRemaining&lt;/code&gt;  函数，加上自定义的告警等操作&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;@Slf4j
public class DelErrorHandler extends DefaultErrorHandler &amp;#123;

    public DelErrorHandler(FixedBackOff backOff) &amp;#123;
        super(null,backOff);
    &amp;#125;

    @Override
    public void handleRemaining(Exception thrownException, List&amp;lt;ConsumerRecord&amp;lt;?, ?&amp;gt;&amp;gt; records, Consumer&amp;lt;?, ?&amp;gt; consumer, MessageListenerContainer container) &amp;#123;
        super.handleRemaining(thrownException, records, consumer, container);
        log.info(&amp;quot;重试多次失败&amp;quot;);
        // 自定义操作
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;DefaultErrorHandler&lt;/code&gt;  只是默认的一个错误处理器，Spring Kafka 还提供了  &lt;code&gt;CommonErrorHandler&lt;/code&gt;  接口。手动实现  &lt;code&gt;CommonErrorHandler&lt;/code&gt;  就可以实现更多的自定义操作，有很高的灵活性。例如根据不同的错误类型，实现不同的重试逻辑以及业务逻辑等。&lt;/p&gt;
&lt;h4 id=&#34;重试最大次数失败后如何再次处理该消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重试最大次数失败后如何再次处理该消息&#34;&gt;#&lt;/a&gt; 重试最大次数失败后，如何再次处理该消息？&lt;/h4&gt;
&lt;p&gt;当达到最大重试次数后，消息数据会被直接跳过，继续向后进行。当代码修复后，如何重新消费这些重试失败的消息数据呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;死信队列（Dead Letter Queue，简称 DLQ）&lt;/strong&gt; 是消息中间件中的一种特殊队列。它主要 **&lt;font color=&#39;red&#39;&gt;用于处理无法被 Comsumer 正确处理的消息&lt;/font&gt;**，通常是因为&lt;font color=&#39;red&#39;&gt;消息格式错误、处理失败、消费超时&lt;/font&gt;等情况导致的消息被 &amp;quot;丢弃&amp;quot; 或 &amp;quot;死亡&amp;quot; 的情况。&lt;/p&gt;
&lt;p&gt;当消息进入队列后，消费者会尝试处理它。如果处理失败，或者超过一定的重试次数仍无法被成功处理，消息可以发送到死信队列中，而不是被永久性地丢弃。&lt;font color=&#39;red&#39;&gt;在死信队列中，可以进一步分析、处理这些无法正常消费的消息，以便定位问题、修复错误，并采取适当的措施&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;重试注解-retryabletopic&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重试注解-retryabletopic&#34;&gt;#&lt;/a&gt; 重试注解  &lt;code&gt;@RetryableTopic&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;这是 Spring Kafka 中的一个注解，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;用于配置某个 Topic 支持消息重试&lt;/font&gt;&lt;/strong&gt;，更推荐使用这个注解来完成重试。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;// 重试 5 次，重试间隔 100 毫秒,最大间隔 1 秒
@RetryableTopic(
        attempts = &amp;quot;5&amp;quot;,
        backoff = @Backoff(delay = 100, maxDelay = 1000)
)
@KafkaListener(topics = &amp;#123;KafkaConst.TEST_TOPIC&amp;#125;, groupId = &amp;quot;apple&amp;quot;)
private void customer(String message) &amp;#123;
    log.info(&amp;quot;kafka customer:&amp;#123;&amp;#125;&amp;quot;, message);
    Integer n = Integer.parseInt(message);
    if (n % 5 == 0) &amp;#123;
        throw new RuntimeException();
    &amp;#125;
    System.out.println(n);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当达到最大重试次数后，如果仍然无法成功处理消息，消息会被发送到对应的死信队列中。&lt;font color=&#39;red&#39;&gt;对于死信队列的处理，既可以用  &lt;code&gt;@DltHandler&lt;/code&gt;  处理，也可以使用  &lt;code&gt;@KafkaListener&lt;/code&gt;  重新消费&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;面试题kafka-消费组有什么特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试题kafka-消费组有什么特性&#34;&gt;#&lt;/a&gt; 【面试题】kafka 消费组有什么特性？&lt;/h3&gt;
&lt;p&gt;Kafka 消费组：是 Kafka 提供的&lt;font color=&#39;red&#39;&gt;可扩展、具有容错性的 Comsumer 机制&lt;/font&gt;。同一个消费组的多个 Comsumer 能分布到多个物理机器上&lt;font color=&#39;red&#39;&gt;加速消费&lt;/font&gt;，同时也可以实现&lt;font color=&#39;red&#39;&gt;负载均衡&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;当某个 Comsumer 宕机时，其他 Comsumer 可以继续消费该 Partition 的数据，从而保证了&lt;font color=&#39;red&#39;&gt;数据的可靠性和持久性&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;因此，Kafka 消费组有以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同一个消费组内的&lt;font color=&#39;red&#39;&gt;所有 Comsumer 共享一个公共 ID&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;消费组内的&lt;font color=&#39;red&#39;&gt;每个 Comsumer 都有自己的 offset (偏移量)&lt;/font&gt;，用于记录已经消费过的消息位置。&lt;/li&gt;
&lt;li&gt;消费组内的&lt;font color=&#39;red&#39;&gt;每个 Comsumer 可以处理 Partition 中的所有消息&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面试题kafka-多-topic-为什么有性能问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试题kafka-多-topic-为什么有性能问题&#34;&gt;#&lt;/a&gt; 【面试题】kafka 多 topic 为什么有性能问题？&lt;/h3&gt;
&lt;p&gt;kafka 多 topic 可能会导致性能问题的&lt;font color=&#39;gree&#39;&gt;原因&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Partition 数量增加&lt;/strong&gt;：每个 topic 都会被分成多个 Partition，当有大量的 topic 存在时， Partition 数量也会相应增加。这会导致 Kafka 需要处理更多的 Partition，增加了系统的负载和资源消耗。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络开销增加&lt;/strong&gt;：Kafka 的多 topic 会导致更多的网络通信开销。当一个 Producer 同时向多个 topic 发送消息时，需要建立多个网络连接，并且需要维护多个网络通信的状态。这增加了网络开销和延迟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源竞争&lt;/strong&gt;：多个 topic 同时进行读写操作时，会引起资源的竞争。例如，多个 Comsumer 同时消费不同的 topic，会导致 Comsumer 之间的竞争和争夺资源的情况，从而影响系统的性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据分布不均衡&lt;/strong&gt;：当有大量的 topic 存在时，数据的分布可能会不均衡。某些 topic 可能会有更多的数据量，而某些 topic 可能会有较少的数据量。这会&lt;font color=&#39;red&#39;&gt;导致某些 broker 负载过重&lt;/font&gt;，而其他 broker 负载较轻，从而影响整个系统的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决这些性能问题，可以采取以下&lt;font color=&#39;gree&#39;&gt;措施&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;合并 topic&lt;/strong&gt;：如果有多个 topic 的数据量较小，可以考虑将它们合并为一个 topic，减少分区数量和网络开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增加资源&lt;/strong&gt;：&lt;font color=&#39;red&#39;&gt;增加 Kafka 集群的 broker 数量和 C omsumer 数量&lt;/font&gt;，以便更好地处理多 topic 的负载。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;均衡数据分布&lt;/strong&gt;：通过调整 Partition 分配策略，使得数据在各个 broker 上均衡分布，避免负载不均的情况。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用分区策略&lt;/strong&gt;：根据业务需求，合理地选择分区策略，避免数据集中在某个 Partition 或某个 broker 上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化网络通信&lt;/strong&gt;：通过合理的网络配置和优化，减少网络开销和延迟，提高系统的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rocketmq-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rocketmq-2&#34;&gt;#&lt;/a&gt; RocketMQ&lt;/h2&gt;
&lt;p&gt;RocketMQ 是一款功能强大的&lt;strong&gt;分布式消息系统&lt;/strong&gt;，广泛应用于多个领域，包括异步通信解耦、企业解决方案、金融支付、电信、电子商务、快递物流、广告营销、社交、即时通信、移动应用、手游、视频、物联网、车联网等。&lt;/p&gt;
&lt;p&gt;RocketMQ 源码地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcQ==&#34;&gt;https://github.com/apache/rocketmq&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;RocketMQ 官方网站：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yb2NrZXRtcS5hcGFjaGUub3JnL3poLw==&#34;&gt;https://rocketmq.apache.org&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;文章描述 RocketMQ 相关概念和知识，如无特别声明，均是  &lt;code&gt;Apache RocketMQ 4.x&lt;/code&gt;  版本。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vbmFnZW9mZmVyL3NwcmluZ2Jvb3QtbGFkZGVy&#34;&gt;🔥SpringBoot Ladder&lt;/span&gt;：从零到一学习 SpringBoot 各种组件框架实战的项目，让 Demo 变得简单。咱们文章中的 RocketMQ 示例也在这个项目。&lt;/p&gt;
&lt;h3 id=&#34;使用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用场景&#34;&gt;#&lt;/a&gt; 使用场景&lt;/h3&gt;
&lt;h4 id=&#34;异步解耦&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步解耦&#34;&gt;#&lt;/a&gt; &lt;mark&gt;异步解耦&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;最常见的一个场景是用户注册后，需要发送注册邮件和短信通知，以告知用户注册成功。传统的做法有以下两种：&lt;/p&gt;
&lt;h5 id=&#34;串行方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#串行方式&#34;&gt;#&lt;/a&gt; 串行方式&lt;/h5&gt;
&lt;p&gt;串行方式下的注册流程如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/p429262.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;数据流动如下所述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;您在注册页面填写账号和密码并提交注册信息，这些注册信息首先会被写入注册系统。&lt;/li&gt;
&lt;li&gt;注册信息写入注册系统成功后，再发送请求至邮件通知系统。邮件通知系统收到请求后向用户发送邮件通知。&lt;/li&gt;
&lt;li&gt;邮件通知系统接收注册系统请求后再向下游的短信通知系统发送请求。短信通知系统收到请求后向用户发送短信通知。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上三个任务全部完成后，才返回注册结果到客户端，用户才能使用账号登录。&lt;/p&gt;
&lt;p&gt;假设每个任务耗时分别为 50ms，则用户需要在注册页面等待总共 150ms 才能登录。&lt;/p&gt;
&lt;h5 id=&#34;并行方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并行方式&#34;&gt;#&lt;/a&gt; 并行方式&lt;/h5&gt;
&lt;p&gt;并行方式下的注册流程如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/p429331.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;数据流动如下所述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户在注册页面填写账号和密码并提交注册信息，这些注册信息首先会被写入注册系统。&lt;/li&gt;
&lt;li&gt;注册信息写入注册系统成功后，再&lt;font color=&#39;red&#39;&gt;同时发送请求至邮件和短信通知系统&lt;/font&gt;。邮件和短信通知系统收到请求后分别向用户发送邮件和短信通知。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上两个任务全部完成后，才返回注册结果到客户端，用户才能使用账号登录。&lt;/p&gt;
&lt;p&gt;假设每个任务耗时分别为 50ms，其中，邮件和短信通知并行完成，则用户需要在注册页面等待总共 100ms 才能登录。&lt;/p&gt;
&lt;h5 id=&#34;异步解耦-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步解耦-2&#34;&gt;#&lt;/a&gt; 异步解耦&lt;/h5&gt;
&lt;p&gt;对于用户来说，注册功能实际只需要注册系统存储用户的账户信息后，该用户便可以登录，后续的注册短信和邮件不是即时需要关注的步骤。&lt;/p&gt;
&lt;p&gt;对于注册系统而言，发送注册成功的短信和邮件通知并不一定要绑定在一起同步完成，所以实际&lt;font color=&#39;red&#39;&gt;当数据写入注册系统后，注册系统就可以把其他的操作放入对应的 RocketMQ 中然后马上返回用户结果，由 RocketMQ 异步地进行这些操作&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/p429333.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;数据流动如下所述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户在注册页面填写账号和密码并提交注册信息，这些注册信息首先会被写入注册系统。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;注册信息写入注册系统成功后，再发送消息至 RocketMQ。RocketMQ 会马上返回响应给注册系统，注册完成。用户可立即登录。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;下游的邮件和短信通知系统订阅 RocketMQ 的此类注册请求消息&lt;/font&gt;，即可向用户发送邮件和短信通知，完成所有的注册流程。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用户只需在注册页面等待注册数据写入注册系统和 RocketMQ 的时间，即等待 55ms 即可登录。&lt;/p&gt;
&lt;h4 id=&#34;流量削峰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流量削峰&#34;&gt;#&lt;/a&gt; &lt;mark&gt;流量削峰&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;流量削峰也是 RocketMQ 的常用场景，一般在&lt;font color=&#39;red&#39;&gt;秒杀或团队抢购&lt;/font&gt;活动中使用广泛。&lt;/p&gt;
&lt;p&gt;在秒杀或团队抢购活动中，由于&lt;font color=&#39;red&#39;&gt;用户请求量较大&lt;/font&gt;，导致流量暴增，秒杀的应用在处理如此大量的访问流量后，下游的通知系统无法承载海量的调用量，甚至会导致系统崩溃等问题而发生漏通知的情况。为解决这些问题，&lt;font color=&#39;red&#39;&gt;可在应用和下游通知系统之间加入 RocketMQ&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-machen.oss-cn-beijing.aliyuncs.com/p429350.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;秒杀处理流程如下所述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户发起海量秒杀请求到秒杀业务处理系统。&lt;/li&gt;
&lt;li&gt;秒杀处理系统按照秒杀处理逻辑&lt;font color=&#39;red&#39;&gt;将满足秒杀条件的请求发送 RocketMQ&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;下游的通知系统订阅 RocketMQ 的秒杀相关消息&lt;/font&gt;，再将秒杀成功的消息发送到相应用户。&lt;/li&gt;
&lt;li&gt;用户收到秒杀成功的通知。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;顺序消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序消息&#34;&gt;#&lt;/a&gt; 顺序消息&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;详细请见 “消息类型 - 顺序消息” 小节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;顺序消息是 RocketMQ 提供的&lt;strong&gt;一种对消息发送、消费顺序有严格要求的消息&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;分布式模缓存同步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式模缓存同步&#34;&gt;#&lt;/a&gt; 分布式模缓存同步&lt;/h4&gt;
&lt;p&gt;双十一大促时，各个分会场会有琳琅满目的商品，每件商品的价格都会实时变化。使用缓存技术也无法满足对商品价格的访问需求，缓存服务器网卡满载。访问较多次商品价格查询影响会场页面的打开速度。&lt;/p&gt;
&lt;p&gt;此时需要提供一种广播机制，一条消息本来只可以被集群的一台机器消费，如果使用 RocketMQ 的&lt;strong&gt;广播消费模式&lt;/strong&gt;，那么&lt;font color=&#39;red&#39;&gt;这条消息会被所有节点消费一次，相当于把价格信息同步到需要的每台机器上，取代缓存的作用&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/TB1ki7KXgMPMeJjy1XdXXasrXXa-1530-1140.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;分布式定时延时调度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式定时延时调度&#34;&gt;#&lt;/a&gt; 分布式定时 / 延时调度&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;详细请见 “消息类型 - 定时消息” 小节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;RocketMQ 提供&lt;strong&gt;精确度到秒级的分布式定时消息能力&lt;/strong&gt;（5.0 架构后），可广泛应用于&lt;font color=&#39;red&#39;&gt;订单超时中心处理、分布式延时调度系统&lt;/font&gt;等场景。&lt;/p&gt;
&lt;h3 id=&#34;消息类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息类型&#34;&gt;#&lt;/a&gt; 消息类型&lt;/h3&gt;
&lt;h4 id=&#34;普通消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#普通消息&#34;&gt;#&lt;/a&gt; 普通消息&lt;/h4&gt;
&lt;p&gt;普通消息一般应用于微服务解耦、事件驱动、数据集成等场景，这些场景大多数要求数据传输通道具有可靠的传输能力，且&lt;font color=&#39;red&#39;&gt;对消息的处理时机、处理顺序没有特别要求&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;以在线的电商交易场景为例，上游订单系统将用户下单支付这一业务事件封装成独立的普通消息并发送至 RocketMQ 服务端，下游按需从服务端订阅消息，并按照本地消费逻辑处理下游任务。&lt;font color=&#39;red&#39;&gt;每个消息之间都是相互独立的，且不需要产生关联&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;另外还有日志系统，以离线的日志收集场景为例，通过埋点组件收集前端应用的相关操作日志，并转发到 RocketMQ 。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;普通消息的生命周期&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://rocketmq.apache.org/zh/assets/images/lifecyclefornormal-e8a2a7e42a0722f681eb129b51e1bd66.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;初始化（Initialized）&lt;/font&gt;：消息被 Producer 构建并完成初始化，&lt;font color=&#39;red&#39;&gt;待发送到服务端&lt;/font&gt;的状态。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;待消费（Ready）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;消息被发送到服务端&lt;/font&gt;，对 Consumer 可见，等待消费的状态。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;消费中（Inflight）&lt;/font&gt;：&lt;font color=&#39;red&#39;&gt;消息被 Consumer 获取&lt;/font&gt;，并按照其本地的业务逻辑进行处理的过程。此时服务端会等待 Consumer 完成消费并提交消费结果，如果一定时间后没有收到 Consumer 的响应，RocketMQ 会对消息进行&lt;font color=&#39;red&#39;&gt;重试&lt;/font&gt;处理。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;消费提交（Acked）&lt;/font&gt;：Consumer 完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被处理（包括消费成功和失败）。RocketMQ 默认支持保留所有消息，此时消息数据并不会立即被删除，&lt;font color=&#39;red&#39;&gt;只是逻辑标记已消费&lt;/font&gt;。消息在保存时间到期或存储空间不足被删除前，&lt;font color=&#39;red&#39;&gt;Consumer 仍然可以回溯消息，重新消费&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;消息删除（Deleted）&lt;/font&gt;：RocketMQ 按照消息保存机制滚动清理最早的消息数据，&lt;font color=&#39;red&#39;&gt;将消息从物理文件中删除&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;定时消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定时消息&#34;&gt;#&lt;/a&gt; 定时消息&lt;/h4&gt;
&lt;p&gt;在分布式定时调度触发、任务超时处理等场景，需要实现精准、可靠的定时事件触发。使用 RocketMQ 的定时消息可以&lt;font color=&#39;red&#39;&gt;简化定时调度任务的开发逻辑&lt;/font&gt;，实现高性能、可扩展、高可靠的定时触发能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;定时消息仅支持在 MessageType 为 Delay 的 Topic 内使用&lt;/font&gt;&lt;/strong&gt;，即定时消息只能发送至类型为定时消息的 Topic 中，发送的消息的类型必须和 Topic 的类型一致。&lt;/p&gt;
&lt;p&gt;基于定时消息的超时任务处理具备如下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;定时精度高、开发门槛低&lt;/font&gt;：消息定时时间不存在阶梯间隔，可以轻松实现任意精度事件触发，无需业务去重。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;高性能、可扩展&lt;/font&gt;：传统的定时实现方案较为复杂，需要进行数据库扫描，容易遇到性能瓶颈的问题，RocketMQ 可以基于定时消息特性完成事件驱动，实现百万级消息 TPS 能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/p433720.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;定时消息的生命周期&lt;/font&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/lifecyclefordelay-2ce8278df69cd026dd11ffd27ab09a17.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;初始化（Initialized）&lt;/font&gt;：消息被生产者构建并完成初始化，待发送到服务端的状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;定时中（In timing）&lt;/font&gt;&lt;/strong&gt;：消息被发送到服务端，和普通消息不同的是，&lt;strong&gt;服务端不会直接构建消息索引，而是会将定时消息单独存储在定时存储系统中，等待定时时刻到达&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;待消费（Ready）&lt;/font&gt;：&lt;strong&gt;定时时刻到达后，服务端将定时消息重新写入普通存储引擎，对下游消费者可见&lt;/strong&gt;，等待消费者消费的状态。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;消费中（Inflight）&lt;/font&gt;：消息被消费者获取，并按照消费者本地的业务逻辑进行处理的过程。此时服务端会等待消费者完成消费并提交消费结果，如果一定时间后没有收到消费者的响应，RocketMQ 会对消息进行重试处理。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;消费提交（Acked）&lt;/font&gt;：消费者完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被处理（包括消费成功和失败）。RocketMQ 默认支持保留所有消息，此时消息数据并不会立即被删除，只是逻辑标记已消费。消息在保存时间到期或存储空间不足被删除前，消费者仍然可以回溯消息重新消费。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;消息删除（Deleted）&lt;/font&gt;：Apache RocketMQ 按照消息保存机制滚动清理最早的消息数据，将消息从物理文件中删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定时消息的实现逻辑：先经过定时存储等待触发，&lt;font color=&#39;red&#39;&gt;定时时间到达后才会被投递给 Consumer&lt;/font&gt;。因此，如果将大量定时消息的定时时间设置为同一时刻，则到达该时刻后会有大量消息同时需要被处理，会造成系统压力过大，导致消息分发延迟，影响定时精度。&lt;/p&gt;
&lt;h4 id=&#34;顺序消息-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序消息-2&#34;&gt;#&lt;/a&gt; 顺序消息&lt;/h4&gt;
&lt;p&gt;顺序消息是 RocketMQ 提供的&lt;strong&gt;一种对消息发送、消费顺序有严格要求的消息&lt;/strong&gt;。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;顺序消息仅支持在 MessageType 为 FIFO 的 Topic 内使用&lt;/font&gt;&lt;/strong&gt;，对于一个指定的 Topic，消息严格按照&lt;font color=&#39;red&#39;&gt;先进先出（FIFO）&lt;/font&gt;的原则进行消息发布和消费，即先发布的消息先消费，后发布的消息后消费。&lt;/p&gt;
&lt;p&gt;顺序消息分为分区顺序消息和全局顺序消息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;分区顺序消息&lt;/font&gt;&lt;/strong&gt;：对于指定的一个 Topic，所有消息&lt;font color=&#39;red&#39;&gt;根据 Sharding Key 进行区块分区&lt;/font&gt;，同一个 Partition 内的消息按照严格的先进先出（FIFO）原则进行发布和消费。&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;同一 Partition 内的消息保证顺序，不同 Partition 之间的消息顺序不做要求&lt;/font&gt;&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;适用场景：适用于性能要求高，以 Sharding Key 作为分区字段，在同一个区块中严格地按照先进先出（FIFO）原则进行消息发布和消费的场景。&lt;/li&gt;
&lt;li&gt;示例
&lt;ul&gt;
&lt;li&gt;用户注册需要&lt;font color=&#39;red&#39;&gt;发送验证码&lt;/font&gt;，以用户 ID 作为 Sharding Key，那么同一个用户发送的消息都会按照发布的先后顺序来消费。&lt;/li&gt;
&lt;li&gt;电商的&lt;font color=&#39;red&#39;&gt;订单创建&lt;/font&gt;，以订单 ID 作为 Sharding Key，那么同一个订单相关的创建订单消息、订单支付消息、订单退款消息、订单物流消息都会按照发布的先后顺序来消费。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;全局顺序消息&lt;/font&gt;&lt;/strong&gt;：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;对于指定的一个 Topic，所有消息按照严格的先入先出（FIFO）的顺序来发布和消费&lt;/font&gt;&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;适用场景：适用于性能要求不高，所有的消息严格按照 FIFO 原则来发布和消费的场景。&lt;/li&gt;
&lt;li&gt;示例：在证券处理中，以人民币兑换美元为 Topic，在价格相同的情况下，先出价者优先处理，则可以按照 FIFO 的方式发布和消费全局顺序消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;全局顺序消息实际上是一种特殊的分区顺序消息，即 Topic 中只有一个分区&lt;/font&gt;&lt;/strong&gt;，因此全局顺序和分区顺序的实现原理相同。因为分区顺序消息有多个分区，所以&lt;font color=&#39;red&#39;&gt;分区顺序消息比全局顺序消息的并发度和性能更高&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/p326576.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;和普通消息发送相比，&lt;font color=&#39;red&#39;&gt;顺序消息发送必须要设置消息组&lt;/font&gt;（推荐实现 MessageQueueSelector 的方式，见下文）。要保证消息的顺序性需要单一 Producer 串行发送。&lt;/p&gt;
&lt;p&gt;单线程使用 MessageListenerConcurrently 可以顺序消费，多线程环境下使用 MessageListenerOrderly 才能顺序消费。&lt;/p&gt;
&lt;h4 id=&#34;事务消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务消息&#34;&gt;#&lt;/a&gt; 事务消息&lt;/h4&gt;
&lt;h3 id=&#34;基础概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础概念&#34;&gt;#&lt;/a&gt; 基础概念&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;RocketMQ 消息模型：&lt;strong&gt;在一个  &lt;code&gt;Topic&lt;/code&gt;  中配置多个  &lt;code&gt;Queue&lt;/code&gt; ，并且每个  &lt;code&gt;Queue&lt;/code&gt;  维护每个  &lt;code&gt;Consumer组&lt;/code&gt;  的  &lt;code&gt;offset&lt;/code&gt; （消费位置）&lt;/strong&gt; 实现了 &lt;strong&gt;主题模式 / 发布订阅模式&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;topic-主题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#topic-主题&#34;&gt;#&lt;/a&gt; Topic 主题&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Topic 是消息传输和存储的顶层容器，用于标识同一类业务逻辑的消息&lt;/strong&gt;。Topic 的作用主要如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义数据的分类隔离&lt;/strong&gt;：在 Apache RocketMQ 的方案设计中，&lt;font color=&#39;red&#39;&gt;建议将不同业务类型的数据拆分到不同的 Topic 中管理，实现存储的隔离性和订阅隔离性&lt;/font&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义数据的身份和权限&lt;/strong&gt;：Apache RocketMQ 的消息本身是匿名无身份的&lt;font color=&#39;red&#39;&gt;，同一分类的消息使用相同的 Topic 来做身份识别和权限管理&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/archifortopic-ef512066703a22865613ea9216c4c300.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;queue-队列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#queue-队列&#34;&gt;#&lt;/a&gt; Queue 队列&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;类似于 **Kafka 中的 Partition（分区）** 这一概念？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Queue 是消息存储和传输的实际容器，也是消息的最小存储单元&lt;/strong&gt;。&lt;font color=&#39;red&#39;&gt;每个 Topic 都是由多个 Queue 组成的&lt;/font&gt;，以此实现 Queue 数量的水平拆分和 Queue 内部的流式存储。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/archiforqueue-dd6788b33bf2fc96b4a1dab83a1b0d71.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;message-消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#message-消息&#34;&gt;#&lt;/a&gt; Message 消息&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Message 是最小数据传输单元&lt;/strong&gt;。Producer 将业务数据的负载和拓展属性包装成 Message 发送到 Apache RocketMQ 服务端，服务端按照相关语义将 Message 投递到消费端进行消费。&lt;/p&gt;
&lt;h4 id=&#34;producer-生产者&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#producer-生产者&#34;&gt;#&lt;/a&gt; Producer 生产者&lt;/h4&gt;
&lt;p&gt;发布消息的角色。&lt;strong&gt;Producer 通过 MQ 的负载均衡模块选择相应的 Broker 集群队列进行消息投递，投递的过程支持快速失败和重试&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/archiforproducer-ebb8ff832f6e857cbebc2c17c2044a3b.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;consumer-消费者&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#consumer-消费者&#34;&gt;#&lt;/a&gt; Consumer 消费者&lt;/h4&gt;
&lt;p&gt;消息消费的角色。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持以 ** 推（push）、拉（pull）** 两种模式对消息进行消费。&lt;/li&gt;
&lt;li&gt;同时也支持&lt;strong&gt;集群方式&lt;/strong&gt;和&lt;strong&gt;广播方式&lt;/strong&gt;的消费。&lt;/li&gt;
&lt;li&gt;提供&lt;strong&gt;实时消息订阅机制&lt;/strong&gt;，可以满足大多数用户的需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/archiforconsumer-24914573add839fdf2ba2cbc0fcab7c4.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;broker-代理服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#broker-代理服务器&#34;&gt;#&lt;/a&gt; &lt;mark&gt;Broker 代理服务器&lt;/mark&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Broker 负责消息的存储、投递和查询，并保证服务高可用&lt;/strong&gt;。其实 Broker 就是 MQ 服务器，Producer 生产消息到 Broker，Consumer 从 Broker 拉取并消费消息。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;Broker、Topic、Queue 的关系&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 Topic 中存在多个 Queue&lt;/li&gt;
&lt;li&gt;一个 Topic 分布在多个 Broker 上，而一个 Broker 可以配置多个 Topic，即 &lt;font color=&#39;red&#39;&gt;Topic 和 Broker 之间是多对多的关系&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果某个 Topic 消息量很大，应该给它多配置几个 Queue (提高并发能力)，并且&lt;strong&gt;尽量多分布在不同 Broker 上，以减轻某个 Broker 的压力&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef38687488a5a4.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Broker 集群遵从 &lt;strong&gt;Master-Slave 架构&lt;/strong&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Broker 分为 Master 与 Slave&lt;/li&gt;
&lt;li&gt;一个 Master 可以对应多个 Slave，但是一个 Slave 只能对应一个 Master&lt;/li&gt;
&lt;li&gt;Master 与 Slave 的对应关系通过指定相同的 BrokerName，不同的 BrokerId 来定义，&lt;font color=&#39;red&#39;&gt;BrokerId 为 0 表示 Master&lt;/font&gt;，非 0 表示 Slave&lt;/li&gt;
&lt;li&gt;Master 也可以部署多个&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nameserver-名字服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nameserver-名字服务器&#34;&gt;#&lt;/a&gt; &lt;mark&gt;NameServer 名字服务器&lt;/mark&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;为 Broker 和 Producer、Consumer 解耦，类似于 SpringCloud 中的 Eureka / Nacos&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NameServer 是一个简单的 &lt;strong&gt;Broker 路由注册中心&lt;/strong&gt;，支持 Broker 的注册与发现，主要提供两个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Broker 管理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;NameServer 接受并保存 Broker 所提交的注册信息，作为 Broker 路由表的基本数据&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;提供心跳检测机制，检查 Broker 是否还存活&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由信息管理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个 NameServer 保存了关于 Broker 集群的整个路由信息、用于客户端查询的 Queue 信息&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;Producer 和 Consumer 通过 NameServer 中的 Broker 路由表就可以知道整个 Broker 集群的路由信息，从而和对应的 Broker 进行消息的投递和消费&lt;/font&gt;（Producer 和 Consumer 定期会向 NameServer 查询相关的 Broker 信息）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;NameServer 通常会有多个实例部署，各实例间相互不进行信息通讯&lt;/font&gt;。&lt;font color=&#39;red&#39;&gt;Broker 向每一台 NameServer 注册自己的路由信息&lt;/font&gt;，所以每一个 NameServer 实例上面都保存一份完整的路由信息。当某个 NameServer 因某种原因下线了，客户端仍然可以向其它 NameServer 获取路由信息。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef386c6d1e8bdb.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;Producer、Consumer、Broker、NameServer&lt;/center&gt;
&lt;blockquote&gt;
&lt;p&gt;上图中的四个角色实际上都需要做集群。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef386fa3be1e53.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;center&gt;官方架构图&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;Broker&lt;/code&gt;  做了集群，并且还进行了主从部署&lt;/strong&gt;：由于消息分布在各个  &lt;code&gt;Broker&lt;/code&gt;  上，一旦某个  &lt;code&gt;Broker&lt;/code&gt;  宕机，则该  &lt;code&gt;Broker&lt;/code&gt;  上的消息读写都会受到影响。所以  &lt;code&gt;RocketMQ&lt;/code&gt;  提供了  &lt;code&gt;master/slave&lt;/code&gt;  的结构， &lt;code&gt;salve&lt;/code&gt;  定时从  &lt;code&gt;master&lt;/code&gt;  同步数据 (同步刷盘或者异步刷盘)，&lt;strong&gt;如果  &lt;code&gt;master&lt;/code&gt;  宕机，则  &lt;code&gt;slave&lt;/code&gt;  提供消费服务，但是不能写入消息&lt;/strong&gt; (后面我还会提到哦)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为了保证高可用  &lt;code&gt;HA&lt;/code&gt; ， &lt;code&gt;NameServer&lt;/code&gt;  也做了集群部署，但它是去中心化的&lt;/strong&gt;：意味着  &lt;code&gt;NameServer&lt;/code&gt;  没有 master 节点，在  &lt;code&gt;RocketMQ&lt;/code&gt;  中是通过 &lt;strong&gt;单个 Broker 和所有 NameServer 保持长连接&lt;/strong&gt; ，并且  &lt;code&gt;Broker&lt;/code&gt;  会定期向所有  &lt;code&gt;Nameserver&lt;/code&gt;  发送心跳，其中包含了自身的  &lt;code&gt;Topic&lt;/code&gt;  配置信息，这个步骤就对应图中的  &lt;code&gt;Routing Info&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;在  &lt;code&gt;Producer&lt;/code&gt;  需要向  &lt;code&gt;Broker&lt;/code&gt;  发送消息的时候，&lt;strong&gt;需要先从  &lt;code&gt;NameServer&lt;/code&gt;  获取关于  &lt;code&gt;Broker&lt;/code&gt;  的路由信息&lt;/strong&gt;，然后通过 &lt;strong&gt;轮询&lt;/strong&gt; 的方式向每个 Queue 中生产数据，以达到&lt;strong&gt;负载均衡&lt;/strong&gt;的效果。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Comsumer&lt;/code&gt;  通过  &lt;code&gt;NameServer&lt;/code&gt;  获取所有  &lt;code&gt;Broker&lt;/code&gt;  的路由信息后，向  &lt;code&gt;Broker&lt;/code&gt;  发送  &lt;code&gt;Pull&lt;/code&gt;  请求来获取消息数据。 &lt;code&gt;Consumer&lt;/code&gt;  可以以两种模式启动 —— &lt;strong&gt;广播（Broadcast）和集群（Cluster）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;广播模式下，一条消息会发送给 &lt;strong&gt;同一个消费组中的所有消费者&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;集群模式下消息只会发送给一个消费者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;部署模型小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部署模型小结&#34;&gt;#&lt;/a&gt; 部署模型小结&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每个 Broker 与 NameServer 集群中的所有节点建立长连接，定时将 Topic 信息注册到所有 NameServer。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Producer 与 NameServer 集群中的其中一个节点建立长连接，定期从 NameServer 获取 Topic/Broker 路由信息。并向提供 Topic 服务的 Broker Master 建立长连接，且定时向 Broker Master 发送心跳。Producer 完全无状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consumer 与 NameServer 集群中的其中一个节点建立长连接，定期从 NameServer 获取 Topic/Broker 路由信息，并向提供 Topic 服务的 Broker Master、Broker Slave 建立长连接，且定时向 Broker Master、Broker Slave 发送心跳。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;Consumer 既可以从 Broker Master 订阅消息，也可以从 Broker Slave 订阅消息&lt;/font&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工作原理&#34;&gt;#&lt;/a&gt; 工作原理&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/p68921.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-启动-nameserver&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-启动-nameserver&#34;&gt;#&lt;/a&gt; 1、启动 NameServer&lt;/h4&gt;
&lt;p&gt;启动 NameServer。NameServer 启动后监听端口，等待 Broker、Producer、Consumer 连接，相当于一个&lt;font color=&#39;red&#39;&gt;路由控制中心&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;2-启动-broker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-启动-broker&#34;&gt;#&lt;/a&gt; 2、启动 Broker&lt;/h4&gt;
&lt;p&gt;启动 Broker。&lt;font color=&#39;red&#39;&gt;与所有 NameServer 保持长连接，定时发送心跳包&lt;/font&gt;（包含当前 Broker 信息以及存储的所有 Topic 信息）。注册成功后，NameServer 集群中就有 Topic 跟 Broker 的映射关系。&lt;/p&gt;
&lt;h4 id=&#34;3-创建-topic&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-创建-topic&#34;&gt;#&lt;/a&gt; 3、创建 Topic&lt;/h4&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;创建 Topic 时需要指定该 Topic 要存储在哪些 Broker 上&lt;/font&gt;，也可以在发送消息时自动创建 Topic。&lt;/p&gt;
&lt;h4 id=&#34;4-producer-发送消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-producer-发送消息&#34;&gt;#&lt;/a&gt; 4、Producer 发送消息&lt;/h4&gt;
&lt;p&gt;Producer 发送消息。启动时先跟 NameServer 集群中的其中一台建立长连接，并从 NameServer 中查询当前发送的 Topic 存在于哪些 Broker 上，轮询从对应 Broker 上的 Queue 列表中选择一个 Queue，然后与该 Queue 所在的 Broker 建立长连接，从而向 Broker 发消息。&lt;/p&gt;
&lt;h4 id=&#34;5-consumer-接收消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-consumer-接收消息&#34;&gt;#&lt;/a&gt; 5、Consumer 接收消息&lt;/h4&gt;
&lt;p&gt;Consumer 接受消息。跟其中一台 NameServer 建立长连接，获取当前订阅 Topic 存在于哪些 Broker 上，然后直接跟 Broker 建立连接通道，然后开始消费消息。&lt;/p&gt;
&lt;h3 id=&#34;如何正确发送消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何正确发送消息&#34;&gt;#&lt;/a&gt; 如何正确发送消息&lt;/h3&gt;
&lt;h4 id=&#34;不建议单一进程创建大量-producer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不建议单一进程创建大量-producer&#34;&gt;#&lt;/a&gt; 不建议单一进程创建大量 Producer&lt;/h4&gt;
&lt;p&gt;Apache RocketMQ 的 Producer 和 Topic 是多对多的关系，支持同一个 Producer 向多个 Topic 发送消息。&lt;font color=&#39;red&#39;&gt;对于 Producer 的创建和初始化，建议遵循够用即可、最大化复用原则&lt;/font&gt;，如果有需要发送消息到多个 Topic 的场景，无需为每个 Topic 都创建一个 Producer。&lt;/p&gt;
&lt;h4 id=&#34;不建议频繁创建和销毁-producer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不建议频繁创建和销毁-producer&#34;&gt;#&lt;/a&gt; 不建议频繁创建和销毁 Producer&lt;/h4&gt;
&lt;p&gt;Apache RocketMQ 的 &lt;font color=&#39;red&#39;&gt;Producer 是可以重复利用的底层资源&lt;/font&gt;，类似数据库的连接池。因此不需要在每次发送消息时动态创建 Producer，且在发送结束后销毁 Producer。这样频繁的创建销毁会在服务端产生大量短连接请求，严重影响系统性能。&lt;/p&gt;
&lt;p&gt;正确示例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Producer&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ProducerBuilder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Message&lt;/span&gt; m&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MessageBuilder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;m&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;consumer-分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#consumer-分类&#34;&gt;#&lt;/a&gt; Consumer 分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PushConsumer&lt;/li&gt;
&lt;li&gt;SimpleConsumer&lt;/li&gt;
&lt;li&gt;PullConsumer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;producer-和-consumer-分组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#producer-和-consumer-分组&#34;&gt;#&lt;/a&gt; Producer 和 Consumer 分组&lt;/h3&gt;
&lt;h4 id=&#34;producer-分组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#producer-分组&#34;&gt;#&lt;/a&gt; Producer 分组&lt;/h4&gt;
&lt;p&gt;RocketMQ 服务端 5.x 版本开始，&lt;strong&gt;Producer 是匿名的，无需管理 Producer 分组（ProducerGroup）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于历史版本服务端 3.x 和 4.x 版本，已经使用的 ProducerGroup 可以废弃无需再设置，且不会对当前业务产生影响。&lt;/p&gt;
&lt;h4 id=&#34;consumer-分组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#consumer-分组&#34;&gt;#&lt;/a&gt; Consumer 分组&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Consumer 分组是多个消费行为一致的 Consumer 的负载均衡分组&lt;/strong&gt;。Consumer  分组不是具体实体而是一个逻辑资源。通过 Consumer 分组实现消费性能的水平扩展以及高可用容灾。&lt;/p&gt;
&lt;p&gt;Consumer 分组中的订阅关系、投递顺序性、消费重试策略是一致的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;订阅关系：Apache RocketMQ 以 Consumer 分组的粒度管理订阅关系，实现订阅关系的管理和追溯。&lt;/li&gt;
&lt;li&gt;投递顺序性：Apache RocketMQ 的服务端将消息投递给 Consumer 消费时，支持顺序投递和并发投递，投递方式在 Consumer 分组中统一配置。&lt;/li&gt;
&lt;li&gt;消费重试策略：Consumer 消费消息失败时的重试策略，包括重试次数、死信队列设置等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RocketMQ 服务端 5.x 版本：上述 Consumer 的消费行为从关联的 Consumer 分组中统一获取，因此同一分组内所有 Consumer 的消费行为必然是一致的，客户端无需关注。&lt;/p&gt;
&lt;p&gt;RocketMQ 服务端 3.x/4.x 历史版本：上述消费逻辑由消费者客户端接口定义，因此，您需要自己在消费者客户端设置时保证同一分组下的消费者的消费行为一致。[来自官方网站]&lt;/p&gt;
&lt;h3 id=&#34;如何解决顺序消费-重复消费&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何解决顺序消费-重复消费&#34;&gt;#&lt;/a&gt; 如何解决顺序消费、重复消费？&lt;/h3&gt;
&lt;p&gt;其实  &lt;code&gt;RocketMQ&lt;/code&gt;  的架构基本和  &lt;code&gt;Kafka&lt;/code&gt;  类似，只不过：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RocketMQ 的注册中心是  &lt;code&gt;NameServer&lt;/code&gt; ，而 Kafka 的是  &lt;code&gt;Zookeeper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;RocketMQ 的 **Queue（队列）** 相当于是 Kafka 的 &lt;strong&gt;Partition（分区）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;顺序消费&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序消费&#34;&gt;#&lt;/a&gt; 顺序消费&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;可以参考 “消息类型 - 顺序消息” 小节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;RocketMQ&lt;/code&gt;  在 Topic 上是无序的、它只有在 Queue 层面才保证有序&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;普通顺序（分区顺序消息）&lt;/font&gt;：对于一个 Topic，同一 Queue 内的消息保证顺序，不同 Queue 之间的消息顺序不做要求。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;严格顺序（全局顺序消息）&lt;/font&gt;：对于指定的一个 Topic，所有消息按照严格的先入先出（FIFO）的顺序来发布和消费。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;严格顺序的代价巨大，而 MQ 一般能容忍短暂的乱序，所以&lt;font color=&#39;red&#39;&gt;推荐使用普通顺序模式！&lt;/font&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在 Producer 生产消息的时候，会轮询同一 Topic 的不同 Queue 来发送消息。那么如果此时我有几个消息分别是同一个订单的创建、支付、发货，&lt;font color=&#39;red&#39;&gt;在轮询的策略下这&lt;strong&gt;三个消息会被发送到不同的 Queue&lt;/strong&gt;，那么此时就无法使用  &lt;code&gt;RocketMQ&lt;/code&gt;  的队列有序特性来保证消息有序性了&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef3874585e096e.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;解决方法很简单，&lt;strong&gt;只需要将同一语义下的消息放入同一个队列&lt;/strong&gt;（比如这里是同一个订单)，那我们就可以使用 &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;Hash 取模法&lt;/font&gt;&lt;/strong&gt; 来保证同一个订单在同一个队列中就行了。&lt;/p&gt;
&lt;p&gt;RocketMQ 实现了两种&lt;font color=&#39;gree&#39;&gt; Queue 选择算法&lt;/font&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;轮询算法&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;向消息指定的 Topic 所在 Queue 中依次发送消息&lt;/font&gt;，保证消息均匀分布&lt;/li&gt;
&lt;li&gt;是 RocketMQ &lt;font color=&#39;red&#39;&gt;默认&lt;/font&gt;队列选择算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;最小投递延迟算法&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每次消息投递的时候统计消息投递的延迟，&lt;font color=&#39;red&#39;&gt;优先选择消息延时小的 Queue&lt;/font&gt;，导致消息分布不均匀，按照如下设置即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;producer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setSendLatencyFaultEnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;继承  &lt;code&gt;MessageQueueSelector&lt;/code&gt;  实现自定义的选择算法&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;SendResult&lt;/span&gt; sendResult &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; producer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MessageQueueSelector&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MessageQueue&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;MessageQueue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; mqs&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Message&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; arg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 从 mqs 中选择一个队列，可以根据 msg 特点选择&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;特殊情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特殊情况&#34;&gt;#&lt;/a&gt; 特殊情况&lt;/h4&gt;
&lt;h5 id=&#34;发送异常&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发送异常&#34;&gt;#&lt;/a&gt; 发送异常&lt;/h5&gt;
&lt;p&gt;选择 Queue 后会与 Broker 建立连接，通过网络请求将消息发送到 Broker 上，如果 Broker 挂了或者网络波动发送消息超时，此时 RocketMQ 会进行重试。&lt;/p&gt;
&lt;p&gt;重新选择其他 Broker 中的 Queue 进行发送，默认重试两次，可以手动设置。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;producer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setRetryTimesWhenSendFailed&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;消息过大&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息过大&#34;&gt;#&lt;/a&gt; 消息过大&lt;/h5&gt;
&lt;p&gt;消息超过 4k 时 RocketMQ 会将消息压缩后再发送到 Broker 上，减少网络资源的占用。&lt;/p&gt;
&lt;h4 id=&#34;重复消费&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重复消费&#34;&gt;#&lt;/a&gt; 重复消费&lt;/h4&gt;
&lt;p&gt;需求：有一个订单的处理积分的系统 FrancisQ，每当来一个消息的时候它就负责为创建这个订单的用户的积分加上相应的数值。可是有一次，消息队列发送给订单系统 FrancisQ 的订单信息，其要求是给 FrancisQ 的积分加上 500。但是积分系统在收到 FrancisQ 的订单信息处理完成之后返回给消息队列处理成功的信息的时候出现了网络波动 (当然还有很多种情况，比如 Broker 意外重启等等)，这条回应没有发送成功。那么，消息队列没收到积分系统的回应会不会尝试重发这个消息？问题就来了，我再发这个消息，万一它又给 FrancisQ 的账户加上 500 积分怎么办呢？&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;解决方法：&lt;strong&gt;让 Consumer 实现幂等校验&lt;/strong&gt;！即&lt;font color=&#39;red&#39;&gt;对同一个消息的处理结果，执行多少次都不变&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;幂等操作的特点：其执行任意多次所产生的影响，均与执行一次的影响相同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么如何给业务实现幂等呢？这个还是需要结合具体的业务的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用 **&lt;font color=&#39;cornflowerblue&#39;&gt;写入  &lt;code&gt;Redis&lt;/code&gt; &lt;/font&gt;** 来保证，因为  &lt;code&gt;Redis&lt;/code&gt;  的  &lt;code&gt;key&lt;/code&gt;  和  &lt;code&gt;value&lt;/code&gt;  就是天然支持幂等的。&lt;/li&gt;
&lt;li&gt;可以使用 **&lt;font color=&#39;cornflowerblue&#39;&gt;数据库插入法&lt;/font&gt;**，基于数据库的&lt;font color=&#39;red&#39;&gt;唯一键&lt;/font&gt;来保证重复数据不会被插入多条。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要根据特定场景使用特定的解决方案，你要知道你的消息消费是否是完全不可重复消费还是可以忍受重复消费的，然后再选择强校验和弱校验的方式。毕竟在 CS 领域还是很少有技术银弹的说法。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;而在互联网领域，幂等不仅仅适用于 **&lt;font color=&#39;red&#39;&gt;消息队列的重复消费问题&lt;/font&gt;&lt;strong&gt;，也同样适用于在其他场景中来解决&lt;/strong&gt;&lt;font color=&#39;red&#39;&gt;重复请求或者重复调用的问题&lt;/font&gt;**：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如将 HTTP 服务设计成幂等的&lt;font color=&#39;red&#39;&gt;解决前端或者 APP 重复提交表单数据的问题&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;可以将一个微服务设计成幂等的，解决  &lt;code&gt;RPC&lt;/code&gt;  框架&lt;font color=&#39;red&#39;&gt;自动重试导致的重复调用问题&lt;/font&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何实现分布式事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何实现分布式事务&#34;&gt;#&lt;/a&gt; 如何实现分布式事务？&lt;/h3&gt;
&lt;p&gt;事务指的是要么都执行，要么都不执行。在分布式架构中，很多服务是部署在不同系统之间的，那么如何实现分布式事务呢？常见的分布式事务实现有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;2PC（两阶段提交）&lt;/font&gt;：优点是简单，缺点是同步阻塞、中心化问题、数据不一致、太过保守...&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;TCC（Try Confirm/Cancel）&lt;/font&gt;：也是 2PC 的一种。&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;事务消息（half 半消息机制）&lt;/font&gt;：RocketMQ 支持这种类型的消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三种实现都有特定的使用场景和各自的局限，并不完美。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RocketMQ 中使用的是&lt;strong&gt;事务消息（half 半消息机制） + 事务反查机制&lt;/strong&gt;来解决分布式事务问题的，可以对照着图进行理解。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef38798d7a987f.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在第 1 步发送的 half 消息，它的意思是&lt;font color=&#39;red&#39;&gt;在事务提交之前，对于 Consumer 来说这个消息是不可见的&lt;/font&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;那么，如何做到写入消息但是对 Consumer 不可见呢？RocketMQ 事务消息的做法是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果消息是 half 消息，将备份原消息的 Topic 与消息消费队列&lt;/li&gt;
&lt;li&gt;然后&lt;strong&gt;改变 Topic 为 RMQ_SYS_TRANS_HALF_TOPIC&lt;/strong&gt;，由于 Consumer 未订阅该 Topic，故无法消费 half 类型的消息。&lt;/li&gt;
&lt;li&gt;然后 &lt;strong&gt;RocketMQ 会开启一个定时任务，从该 Topic 中拉取消息进行消费&lt;/strong&gt;，根据 Producer 组获取一个服务提供者，发送回查事务状态请求，根据事务状态来决定是提交或回滚消息。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果没有从第 5 步开始的&lt;font color=&#39;red&#39;&gt;事务反查机制&lt;/font&gt;，如果出现网路波动第 4 步没有发送成功，这样就会产生 MQ 不知道是不是需要给 Consumer 消费的问题。在  &lt;code&gt;RocketMQ&lt;/code&gt;  中就是使用的上述的事务反查来解决的，而在  &lt;code&gt;Kafka&lt;/code&gt;  中通常是直接抛出一个异常让用户来自行解决。&lt;/p&gt;
&lt;p&gt;你还需要注意的是， &lt;code&gt;MQ Server&lt;/code&gt;  指向系统 B 的操作已经和系统 A 不相关了，也就是说在消息队列中的分布式事务是：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;本地事务和存储消息到消息队列才是同一个事务&lt;/font&gt;&lt;/strong&gt;。这样也就产生了事务的&lt;font color=&#39;red&#39;&gt;最终一致性&lt;/font&gt;，因为整个过程是异步的，&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;每个系统只要保证它自己那一部分的事务就行了&lt;/font&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;如何解决消息堆积问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何解决消息堆积问题&#34;&gt;#&lt;/a&gt; 如何解决消息堆积问题？&lt;/h3&gt;
&lt;p&gt;在上面我们提到了消息队列的一个很重要的功能 ——&lt;strong&gt; 削峰&lt;/strong&gt;。那么如果这个峰值太大了导致消息堆积在队列中怎么办呢？&lt;/p&gt;
&lt;p&gt;其实这个问题可以将它广义化，因为产生消息堆积的根源其实就只有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Producer 生产太快：&lt;strong&gt;限流降级&lt;/strong&gt;，或者&lt;strong&gt;增加 Consumer 实例&lt;/strong&gt;以水平扩展消费能力（&lt;font color=&#39;red&#39;&gt;同时还需要增加每个 Topic 的 Queue 数量&lt;/font&gt;）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;别忘了在  &lt;code&gt;RocketMQ&lt;/code&gt;  中，&lt;strong&gt;一个 Queue 只会被一个 Consumer 消费&lt;/strong&gt; ，如果你仅仅是增加 Consumer 实例就会出现我一开始给你画的架构图的那种情况：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef387d939ab66d.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consumer 消费太慢：先检查 &lt;strong&gt;Consumer 是否出现了大量的消费错误&lt;/strong&gt;，或者打印日志查看是否有哪一个线程卡死，导致了锁资源不释放等问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;回溯消费&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#回溯消费&#34;&gt;#&lt;/a&gt; 回溯消费&lt;/h3&gt;
&lt;p&gt;回溯消费是指  &lt;code&gt;Consumer&lt;/code&gt;  已经消费成功的消息，由于业务上需求需要重新消费。在  &lt;code&gt;RocketMQ&lt;/code&gt;  中， &lt;code&gt;Broker&lt;/code&gt;  在向  &lt;code&gt;Consumer&lt;/code&gt;  投递成功消息后，&lt;font color=&#39;red&#39;&gt;消息仍然需要保留&lt;/font&gt;。并且重新消费一般是按照时间维度，例如由于  &lt;code&gt;Consumer&lt;/code&gt;  系统故障，恢复后需要重新消费 1 小时前的数据，那么  &lt;code&gt;Broker&lt;/code&gt;  要提供一种机制，可以按照时间维度来回退消费进度。 &lt;code&gt;RocketMQ&lt;/code&gt;  支持按照时间回溯消费，时间维度精确到毫秒。&lt;/p&gt;
&lt;h3 id=&#34;如何保证高性能读写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何保证高性能读写&#34;&gt;#&lt;/a&gt; 如何保证高性能读写？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;可参考 “Java IO - IO 模型 - NIO” 小节，略了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;传统 IO 方式：即  &lt;code&gt;read + write&lt;/code&gt; ，整个过程会发生 4 次上下文切换和 4 次数据的拷贝，这在高并发场景下会严重影响读写性能，故引入了零拷贝技术。
&lt;ul&gt;
&lt;li&gt;用户调用 read () 方法，开始读取数据，此时发生一次上下文从用户态到内核态的切换，也就是图示的切换 1&lt;/li&gt;
&lt;li&gt;将磁盘数据通过 DMA 拷贝到内核缓存区&lt;/li&gt;
&lt;li&gt;将内核缓存区的数据拷贝到用户缓冲区，这样用户，也就是我们写的代码就能拿到文件的数据&lt;/li&gt;
&lt;li&gt;read () 方法返回，此时就会从内核态切换到用户态，也就是图示的切换 2&lt;/li&gt;
&lt;li&gt;当我们拿到数据之后，就可以调用 write () 方法，此时上下文会从用户态切换到内核态，即图示切换 3&lt;/li&gt;
&lt;li&gt;CPU 将用户缓冲区的数据拷贝到 Socket 缓冲区&lt;/li&gt;
&lt;li&gt;将 Socket 缓冲区数据拷贝至网卡&lt;/li&gt;
&lt;li&gt;write () 方法返回，上下文重新从内核态切换到用户态，即图示切换 4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;零拷贝技术
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mmap&lt;/code&gt; ：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sendfile&lt;/code&gt; ：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;刷盘机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#刷盘机制&#34;&gt;#&lt;/a&gt; 刷盘机制&lt;/h3&gt;
&lt;h4 id=&#34;同步刷盘-异步刷盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步刷盘-异步刷盘&#34;&gt;#&lt;/a&gt; 同步刷盘、异步刷盘&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在单个节点层面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef387fba311cda-20230814005009889.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;同步刷盘&lt;/font&gt;：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;需要等待一个刷盘成功的  &lt;code&gt;ACK&lt;/code&gt; &lt;/font&gt;&lt;/strong&gt; ，对&lt;font color=&#39;red&#39;&gt;消息可靠性&lt;/font&gt;来说是一种不错的保障，但是&lt;font color=&#39;red&#39;&gt;性能上会有较大影响&lt;/font&gt;，一般适用于金融等特定业务场景。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;异步刷盘&lt;/font&gt;：&lt;strong&gt;&lt;font color=&#39;red&#39;&gt;开启一个线程去异步地执行刷盘操作&lt;/font&gt;&lt;/strong&gt;。消息刷盘采用后台异步线程提交的方式进行，&lt;font color=&#39;red&#39;&gt;降低了读写延迟&lt;/font&gt;，&lt;font color=&#39;red&#39;&gt;提高了  &lt;code&gt;MQ&lt;/code&gt;  的性能和吞吐量&lt;/font&gt;，一般适用于如发验证码等&lt;font color=&#39;red&#39;&gt;对于消息保证要求不太高&lt;/font&gt;的业务场景。&lt;/p&gt;
&lt;p&gt;一般地，&lt;strong&gt;异步刷盘只有在  &lt;code&gt;Broker&lt;/code&gt;  意外宕机的时候会丢失部分数据&lt;/strong&gt;，你可以设置  &lt;code&gt;Broker&lt;/code&gt;  的参数  &lt;code&gt;FlushDiskType&lt;/code&gt;  来调整你的刷盘策略 (ASYNC_FLUSH 或者 SYNC_FLUSH)。&lt;/p&gt;
&lt;h4 id=&#34;同步复制-异步复制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步复制-异步复制&#34;&gt;#&lt;/a&gt; 同步复制、异步复制&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Broker 主从模式下，master 返回消息给客户端时是否需要同步 slave&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;同步复制&lt;/font&gt;：也叫 “同步双写”，即&lt;strong&gt;只有消息同步双写到主从节点上时，才返回写入成功&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;cornflowerblue&#39;&gt;异步复制&lt;/font&gt;：&lt;strong&gt;消息写入主节点之后，直接返回写入成功&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;然而，很多事情是没有完美的方案的，就比如我们进行消息写入的节点越多就更能保证消息的可靠性，但是随之的性能也会下降，所以需要程序员根据特定业务场景去选择适应的主从复制方案。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;异步复制不会像异步刷盘那样影响消息的可靠性&lt;/font&gt;，因为两者是不同的概念，对于消息可靠性是通过不同的刷盘策略保证的，而像异步同步复制策略&lt;font color=&#39;red&#39;&gt;仅仅是影响到了可用性&lt;/font&gt;。为什么呢？其主要原因是 &lt;strong&gt; &lt;code&gt;RocketMQ&lt;/code&gt;  是不支持自动主从切换的，当 master 节点挂掉之后，Producer 就不能再给这个 master 节点生产消息了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如这个时候采用异步复制的方式，在主节点还未发送完需要同步的消息的时候主节点挂掉了，这个时候从节点就少了一部分消息。但是此时生产者无法再给主节点生产消息了，&lt;strong&gt;消费者可以自动切换到从节点进行消费&lt;/strong&gt; (仅仅是消费)，所以在主节点挂掉的时间只会产生主从结点短暂的消息不一致的情况，降低了可用性，而当主节点重启之后，从节点那部分未来得及复制的消息还会继续复制。&lt;/p&gt;
&lt;p&gt;在单主从架构中，如果一个主节点挂掉了，那么也就意味着整个系统不能再生产了。那么这个可用性的问题能否解决呢？&lt;strong&gt;一个主从不行那就多个主从的呗&lt;/strong&gt;，别忘了在我们最初的架构图中，每个  &lt;code&gt;Topic&lt;/code&gt;  是分布在不同  &lt;code&gt;Broker&lt;/code&gt;  中的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef38687488a5asadasfg4.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;但是这种复制方式同样也会带来一个问题，那就是无法保证 &lt;strong&gt;严格顺序&lt;/strong&gt; 。在上文中我们提到了如何保证的消息顺序性是通过将一个语义的消息发送在同一个队列中，使用  &lt;code&gt;Topic&lt;/code&gt;  下的队列来保证顺序性的。如果此时我们主节点 A 负责的是订单 A 的一系列语义消息，然后它挂了，这样其他节点是无法代替主节点 A 的，如果我们任意节点都可以存入任何消息，那就没有顺序性可言了。&lt;/p&gt;
&lt;p&gt;而在  &lt;code&gt;RocketMQ&lt;/code&gt;  中采用了  &lt;code&gt;Dledger&lt;/code&gt;  解决这个问题。他要求在写入消息的时候，要求&lt;strong&gt;至少消息复制到半数以上的节点之后&lt;/strong&gt;，才给客⼾端返回写⼊成功，并且它是⽀持通过选举来动态切换主节点的。这里我就不展开说明了，读者可以自己去了解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也不是说  &lt;code&gt;Dledger&lt;/code&gt;  是个完美的方案，至少在  &lt;code&gt;Dledger&lt;/code&gt;  选举过程中是无法提供服务的，而且他必须要使用三个节点或以上，如果多数节点同时挂掉他也是无法保证可用性的，而且要求消息复制半数以上节点的效率和直接异步复制还是有一定的差距的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;存储机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储机制&#34;&gt;#&lt;/a&gt; 存储机制&lt;/h4&gt;
&lt;h3 id=&#34;动手发一条消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动手发一条消息&#34;&gt;#&lt;/a&gt; 动手发一条消息&lt;/h3&gt;
&lt;h4 id=&#34;1-启动-rocketmq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-启动-rocketmq&#34;&gt;#&lt;/a&gt; 1、启动 RocketMQ&lt;/h4&gt;
&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;安装 NameServer&lt;/font&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9876&lt;/span&gt;:9876 &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; rmqnamesrv foxiswho/rocketmq:server-4.5.1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;安装 Broker&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;1）新建配置目录。&lt;/p&gt;
&lt;p&gt;如果是 Windows 需要替换为 Windows 的电脑路径，和 Linux 还是有点差异。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$&amp;#123;&lt;span class=&#34;token environment constant&#34;&gt;HOME&lt;/span&gt;&amp;#125;&lt;/span&gt;/docker/software/rocketmq/conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2）新建配置文件 broker.conf。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brokerClusterName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; DefaultCluster&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brokerName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; broker-a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brokerId &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;deleteWhen &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; 04&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fileReservedTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;48&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brokerRole &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ASYNC_MASTER&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flushDiskType &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ASYNC_FLUSH&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 此处为本地 ip, 如果部署服务器，需要填写服务器外网 ip&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brokerIP1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; xx.xx.xx.xx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;3）创建容器。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10911&lt;/span&gt;:10911 &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10909&lt;/span&gt;:10909 &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; rmqbroker &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--link&lt;/span&gt; rmqnamesrv:namesrv &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$&amp;#123;&lt;span class=&#34;token environment constant&#34;&gt;HOME&lt;/span&gt;&amp;#125;&lt;/span&gt;/docker/software/rocketmq/conf/broker.conf:/etc/rocketmq/broker.conf &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;NAMESRV_ADDR=namesrv:9876&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;JAVA_OPTS=-Duser.home=/opt&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;JAVA_OPT_EXT=-server -Xms512m -Xmx512m&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;foxiswho/rocketmq:broker-4.5.1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;font color=&#39;gree&#39;&gt;安装 RocketMQ 控制台&lt;/font&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; pull pangliang/rocketmq-console-ng&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--link&lt;/span&gt; rmqnamesrv:namesrv &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;JAVA_OPTS=-Drocketmq.config.namesrvAddr=namesrv:9876 -Drocketmq.config.isVIPChannel=false&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; rmqconsole &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8088&lt;/span&gt;:8080 &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-t&lt;/span&gt; pangliang/rocketmq-console-ng&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;运行成功，稍等几秒启动时间，浏览器输入  &lt;code&gt;localhost:8088&lt;/code&gt;  查看控制台。&lt;/p&gt;
&lt;h4 id=&#34;2-发送普通消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-发送普通消息&#34;&gt;#&lt;/a&gt; 2、发送普通消息&lt;/h4&gt;
&lt;p&gt;下述完整 Demo 详情查看&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vbmFnZW9mZmVyL3NwcmluZ2Jvb3QtbGFkZGVyL3RyZWUvbWFpbi9tcS1yb2NrZXRtcS00eA==&#34;&gt; springboot-ladder/mq-rocketmq-4x&lt;/span&gt; 项目模块。&lt;/p&gt;
&lt;h5 id=&#34;21-引入-rocketmq-依赖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-引入-rocketmq-依赖&#34;&gt;#&lt;/a&gt; 2.1、引入 RocketMQ 依赖&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.rocketmq&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;rocketmq-spring-boot-starter&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.2.3&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;22-启动自动装配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-启动自动装配&#34;&gt;#&lt;/a&gt; 2.2、启动自动装配&lt;/h5&gt;
&lt;p&gt;因为咱们 Demo 中使用的是 SpringBoot3，RocketMQ 最新版本 2.2.3 没有适配 SpringBoot3，所以需要手动搞定自动装配。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果 SpringBoot2 版本，就不需要执行这一步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;resources 目录下创建 META-INF/spring 目录，并创建 &lt;code&gt;org.springframework.boot.autoconfigure.AutoConfiguration.imports&lt;/code&gt;  文件。&lt;/p&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;figcaption data-lang=&#34;.properties&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# RocketMQ 2.2.3 version does not adapt to SpringBoot3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;org.apache.rocketmq.spring.autoconfigure.RocketMQAutoConfiguration&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230924172750462.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;23-producer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-producer&#34;&gt;#&lt;/a&gt; 2.3、Producer&lt;/h5&gt;
&lt;p&gt;配置文件中引入 RocketMQ 相关配置定义，比如连接 NameServer 地址等。&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6060&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;rocketmq&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;name-server&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 127.0.0.1&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9876&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# NameServer 地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;producer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; rocketmq&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;4x&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;service_common&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;message&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;execute_pg &lt;span class=&#34;token comment&#34;&gt;# 全局发送者组定义&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;定义消息生产者，通过  &lt;code&gt;RocketMQTemplate&lt;/code&gt;  向 RocketMQ 发送普通常规消息。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;cn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hutool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;core&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;StrUtil&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;alibaba&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fastjson&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;JSON&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nageoffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springbootladder&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rocketmq4x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;GeneralMessageEvent&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;lombok&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RequiredArgsConstructor&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;lombok&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;extern&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;slf4j&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Slf4j&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;apache&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rocketmq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;producer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SendResult&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;apache&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rocketmq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;common&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;message&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;MessageConst&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;apache&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rocketmq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;core&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RocketMQTemplate&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;messaging&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Message&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;messaging&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;support&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;MessageBuilder&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stereotype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Component&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 普通消息发送者&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @公众号：马丁玩编程，回复：加群，添加马哥微信（备注：ladder）获取更多项目资料&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Slf4j&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Component&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GeneralMessageDemoProduce&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RocketMQTemplate&lt;/span&gt; rocketMQTemplate&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 发送普通消息&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @param topic            消息发送主题，用于标识同一类业务逻辑的消息&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @param tag              消息的过滤标签，消费者可通过 Tag 对消息进行过滤，仅接收指定标签的消息。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @param keys             消息索引键，可根据关键字精确查找某条消息&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @param messageSendEvent 普通消息发送事件，自定义对象，最终都会序列化为字符串&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @return 消息发送 RocketMQ 返回结果&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SendResult&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sendMessage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; topic&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; tag&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; keys&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GeneralMessageEvent&lt;/span&gt; messageSendEvent&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;SendResult&lt;/span&gt; sendResult&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;StringBuilder&lt;/span&gt; destinationBuilder &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;StrUtil&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;topic&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;StrUtil&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isNotBlank&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tag&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                destinationBuilder&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tag&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Message&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; message &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MessageBuilder&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;withPayload&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;messageSendEvent&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setHeader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;MessageConst&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;PROPERTY_KEYS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; keys&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setHeader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;MessageConst&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;PROPERTY_TAGS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; tag&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            sendResult &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rocketMQTemplate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;syncSend&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    destinationBuilder&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    message&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token number&#34;&gt;2000L&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;[普通消息] 消息发送结果：&amp;#123;&amp;#125;，消息ID：&amp;#123;&amp;#125;，消息Keys：&amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sendResult&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getSendStatus&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sendResult&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getMsgId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; keys&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt; ex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;[普通消息] 消息发送失败，消息体：&amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toJSONString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;messageSendEvent&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; ex&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; sendResult&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;24-consumer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-consumer&#34;&gt;#&lt;/a&gt; 2.4、Consumer&lt;/h5&gt;
&lt;p&gt;定义消息消费者，从 RocketMQ Broker 拉取对应 Topic Tag 的消息列表。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;alibaba&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fastjson&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;JSON&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nageoffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springbootladder&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rocketmq4x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;GeneralMessageEvent&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;lombok&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RequiredArgsConstructor&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;lombok&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;extern&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;slf4j&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Slf4j&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;apache&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rocketmq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;annotation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RocketMQMessageListener&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;apache&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rocketmq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;core&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RocketMQListener&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stereotype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Component&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 普通消息消费者&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @公众号：马丁玩编程，回复：加群，添加马哥微信（备注：ladder）获取更多项目资料&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Slf4j&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Component&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@RocketMQMessageListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        topic &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;rocketmq-demo_common-message_topic&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        selectorExpression &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;general&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        consumerGroup &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;rocketmq-demo_general-message_cg&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GeneralMessageDemoConsume&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RocketMQListener&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;GeneralMessageEvent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;onMessage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;GeneralMessageEvent&lt;/span&gt; message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;接到到RocketMQ消息，消息体：&amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toJSONString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;25-发送一条消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-发送一条消息&#34;&gt;#&lt;/a&gt; 2.5、发送一条消息&lt;/h5&gt;
&lt;p&gt;定义消息发送程序，这里为了避免类过多，直接写在 SpringBoot 的启动程序里。发送普通消息的方法返回值就是发送 RocketMQ Broker 返回的状态码，成功的话就是  &lt;code&gt;SEND_OK&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nageoffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springbootladder&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rocketmq4x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;GeneralMessageEvent&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nageoffer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springbootladder&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rocketmq4x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;produce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;GeneralMessageDemoProduce&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;swagger&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;v3&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;oas&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;annotations&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Operation&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;swagger&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;v3&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;oas&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;annotations&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tags&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Tag&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;lombok&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RequiredArgsConstructor&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;apache&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rocketmq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;producer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SendResult&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;boot&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SpringApplication&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;boot&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;autoconfigure&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;web&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bind&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;annotation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;PostMapping&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;web&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bind&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;annotation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RestController&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;UUID&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@RestController&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Tag&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;RocketMQ发送示例&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; description &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;RocketMQ发送示例启动器&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RocketMQDemoApplication&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GeneralMessageDemoProduce&lt;/span&gt; generalMessageDemoProduce&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@PostMapping&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/test/send/general-message&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Operation&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;summary &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;发送RocketMQ普通消息&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sendGeneralMessage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; keys &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;randomUUID&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;GeneralMessageEvent&lt;/span&gt; generalMessageEvent &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GeneralMessageEvent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;消息具体内容，可以是自定义对象，最终都会序列化为字符串。如果是取消订单，这里应该是订单ID或者相关联的信息&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;keys&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;SendResult&lt;/span&gt; sendResult &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; generalMessageDemoProduce&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sendMessage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token string&#34;&gt;&#34;rocketmq-demo_common-message_topic&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token string&#34;&gt;&#34;general&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                keys&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                generalMessageEvent&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; sendResult&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getSendStatus&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RocketMQDemoApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;项目中引入了 Swagger3，通过界面 UI 发送一条消息测试效果。访问  &lt;code&gt;http://127.0.0.1:6060/swagger-ui/index.html&lt;/code&gt; ，调用定义的发送 RocketMQ 普通消息方法。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230924173811738.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点击 Execute 执行方法调用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-machen.oss-cn-beijing.aliyuncs.com/image-20230924173837160.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通过方法调用得知，返回数据为成功。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-machen.oss-cn-beijing.aliyuncs.com/image-20230924173948187.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;也能看到 RocketMQ 对应的生产者和消费者对应日志。&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;2023-09-24T17:38:57.457+08:00  INFO 48437 --- [nio-6060-exec-6] c.n.s.r.p.GeneralMessageDemoProduce      : [普通消息] 消息发送结果：SEND_OK，消息ID：7F000001BD35251A69D77A3BC5280002，消息Keys：7a60c853-08dc-46cd-a647-398d45b54966&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;2023-09-24T17:38:57.459+08:00  INFO 48437 --- [al-message_cg_3] c.n.s.r.c.GeneralMessageDemoConsume      : 接到RocketMQ消息，消息体：&amp;#123;&#34;body&#34;:&#34;消息具体内容，可以是自定义对象，最终都会序列化为字符串。如果是取消订单，这里应该是订单ID或者相关联的信息&#34;,&#34;keys&#34;:&#34;7a60c853-08dc-46cd-a647-398d45b54966&#34;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;3-扩展框架-springcloud-stream&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-扩展框架-springcloud-stream&#34;&gt;#&lt;/a&gt; 3、扩展框架 SpringCloud Stream&lt;/h4&gt;
&lt;p&gt;Spring Cloud Stream 是一个&lt;strong&gt;用于构建基于消息的微服务应用&lt;/strong&gt;框架。它基于 SpringBoot 来创建具有生产级别的单机 Spring 应用，并且使用  &lt;code&gt;Spring Integration&lt;/code&gt;  与 Broker 进行连接。&lt;/p&gt;
&lt;p&gt;Spring Cloud Stream 提供了消息中间件配置的统一抽象，推出了 publish-subscribe、consumer groups、partition 这些统一的概念。&lt;/p&gt;
&lt;p&gt;Spring Cloud Stream 内部有两个概念：Binder 和 Binding。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Binder&lt;/code&gt; ：跟外部消息中间件集成的组件，用来创建 Binding，各消息中间件都有自己的 Binder 实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如  &lt;code&gt;Kafka&lt;/code&gt;  的实现  &lt;code&gt;KafkaMessageChannelBinder&lt;/code&gt; ， &lt;code&gt;RabbitMQ&lt;/code&gt;  的实现  &lt;code&gt;RabbitMessageChannelBinder&lt;/code&gt;  以及  &lt;code&gt;RocketMQ&lt;/code&gt;  的实现  &lt;code&gt;RocketMQMessageChannelBinder&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Binding&lt;/code&gt; ：包括 Input Binding 和 Output Binding。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Binding 在消息中间件与应用程序提供的 Provider 和 Consumer 之间提供了一个桥梁，实现了开发者只需使用应用程序的 Provider 或 Consumer 生产或消费数据即可，屏蔽了开发者与底层消息中间件的接触。&lt;/p&gt;
&lt;p&gt;下图是 Spring Cloud Stream 的架构设计。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/hjx159/picture-bed/main/img/68747470733a2f2f646f63732e737072696e672e696f2f737072696e672d636c6f75642d73747265616d2f646f63732f63757272656e742f7265666572656e63652f68746d6c2f696d616765732f534353742d776974682d62696e6465722e706e67.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;SpringCloud Stream RocketMQ 不是咱们本次介绍的重点，所以只是抛砖引玉，大家需要了解详情参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvc3ByaW5nLWNsb3VkLWFsaWJhYmEvYmxvYi8yLjIueC9zcHJpbmctY2xvdWQtYWxpYmFiYS1leGFtcGxlcy9yb2NrZXRtcS1leGFtcGxlL3JlYWRtZS16aC5tZA==&#34;&gt;RocketMQ Example&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;部署架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部署架构&#34;&gt;#&lt;/a&gt; 部署架构&lt;/h3&gt;
&lt;h4 id=&#34;本地部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地部署&#34;&gt;#&lt;/a&gt; 本地部署&lt;/h4&gt;
&lt;h5 id=&#34;单组节点单副本模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单组节点单副本模式&#34;&gt;#&lt;/a&gt; 单组节点单副本模式&lt;/h5&gt;
&lt;p&gt;这种方式风险较大，因为 Broker 只有一个节点，一旦 Broker 重启或者宕机时，会导致整个服务不可用。不建议线上环境使用，可以用于本地测试。&lt;/p&gt;
&lt;h5 id=&#34;多组节点集群单副本模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多组节点集群单副本模式&#34;&gt;#&lt;/a&gt; 多组节点（集群）单副本模式&lt;/h5&gt;
&lt;p&gt;一个集群内全部部署 Master 角色，不部署 Slave 副本，例如 2 个 Master 或者 3 个 Master，这种模式的优缺点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：配置简单，单个 Master 宕机或重启维护对应用无影响，在磁盘配置为 RAID10 时，即使机器宕机不可恢复情况下，由于 RAID10 磁盘非常可靠，消息也不会丢（异步刷盘丢失少量消息，同步刷盘一条不丢），性能最高；&lt;/li&gt;
&lt;li&gt;缺点：单台机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息实时性会受到影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;生产部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生产部署&#34;&gt;#&lt;/a&gt; 生产部署&lt;/h4&gt;
&lt;h5 id=&#34;多节点集群多副本模式异步复制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多节点集群多副本模式异步复制&#34;&gt;#&lt;/a&gt; 多节点（集群）多副本模式：异步复制&lt;/h5&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;每个 Master 配置一个 Slave&lt;/font&gt;，有多组 Master-Slave，HA 采用&lt;strong&gt;异步复制&lt;/strong&gt;方式，主备有短暂消息延迟（毫秒级），这种模式的优缺点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：即使磁盘损坏，消息丢失的非常少，且消息实时性不会受影响，同时 Master 宕机后，消费者仍然可以从 Slave 消费，而且此过程对应用透明，不需要人工干预，性能同多 Master 模式几乎一样；&lt;/li&gt;
&lt;li&gt;缺点：Master 宕机，磁盘损坏情况下会丢失少量消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;多节点集群多副本模式同步双写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多节点集群多副本模式同步双写&#34;&gt;#&lt;/a&gt; 多节点（集群）多副本模式：同步双写&lt;/h5&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;每个 Master 配置一个 Slave&lt;/font&gt;，有多对 Master-Slave，HA 采用&lt;strong&gt;同步双写&lt;/strong&gt;方式，即只有主备都写成功，才向应用返回成功，这种模式的优缺点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：数据与服务都无单点故障，Master 宕机情况下，消息无延迟，服务可用性与数据可用性都非常高；&lt;/li&gt;
&lt;li&gt;缺点：性能比异步复制模式略低（大约低 10% 左右），发送单个消息的 RT 会略高，且目前版本在主节点宕机后，备机不能自动切换为主机。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/java/java-se/java-excise/%E7%AC%AC18%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88JDK8-17%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%89/</guid>
            <title>宋红康_第18章：JDK8-17新特性</title>
            <link>http://example.com/java/java-se/java-excise/%E7%AC%AC18%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88JDK8-17%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%89/</link>
            <category term="Java" scheme="http://example.com/categories/java/" />
            <category term="Java基础" scheme="http://example.com/categories/java/java-se/" />
            <category term="Java基础-真题" scheme="http://example.com/categories/java/java-se/java-excise/" />
            <pubDate>Sun, 12 Nov 2023 11:06:50 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;第18章随堂复习与企业真题jdk8-17新特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第18章随堂复习与企业真题jdk8-17新特性&#34;&gt;#&lt;/a&gt; 第 18 章：随堂复习与企业真题（JDK8-17 新特性）&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;一-随堂复习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-随堂复习&#34;&gt;#&lt;/a&gt; 一、随堂复习&lt;/h2&gt;
&lt;h3 id=&#34;1-jdk新特性的概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-jdk新特性的概述&#34;&gt;#&lt;/a&gt; 1. JDK 新特性的概述&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;几个重要的版本
&lt;ul&gt;
&lt;li&gt;jdk 5.0 /jdk 8.0 ：里程碑式的版本&lt;/li&gt;
&lt;li&gt;jdk9.0 开始每 6 个月发布一个新的版本&lt;/li&gt;
&lt;li&gt;LTS : jdk8 、 jdk 11 、 jdk 17&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何学习新特性
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;新的语法规则 （多关注）：自动装箱、自动拆箱、注解、enum、Lambda 表达式、方法引用、switch 表达式、try-catch 变化、record 等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;增加、过时、删除 API：StringBuilder、ArrayList、新的日期时间的 API、Optional 等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;底层的优化、JVM 参数的调整、GC 的变化、内存结构（永久代 ---&amp;gt; 元空间）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-jdk8lambda表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-jdk8lambda表达式&#34;&gt;#&lt;/a&gt; 2. JDK8:&lt;mark&gt;lambda 表达式&lt;/mark&gt;&lt;/h3&gt;
&lt;h4 id=&#34;21-什么情况下可以使用lambda表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-什么情况下可以使用lambda表达式&#34;&gt;#&lt;/a&gt; 2.1 什么情况下可以使用 lambda 表达式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在给函数式接口提供实例时&lt;/strong&gt;，都可以考虑使用 lambda 表达式。&lt;/li&gt;
&lt;li&gt;基本语法的使用（重要）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-函数式接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-函数式接口&#34;&gt;#&lt;/a&gt; 2.2 &lt;strong&gt;函数式接口&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;常见的函数式接口。Comparator \ Runnable \ java.util.function 下定义的丰富的函数式接口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;消费型接口：Consumer&amp;lt;T&amp;gt;     void accept(T t)
供给型接口：Supplier&amp;lt;T&amp;gt;     T get()
函数型接口：Function&amp;lt;T,R&amp;gt;   R apply(T t)
判断型接口：Predicate&amp;lt;T&amp;gt;    boolean test(T t)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;23-方法引用-构造器引用-数组引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-方法引用-构造器引用-数组引用&#34;&gt;#&lt;/a&gt; 2.3 方法引用、构造器引用、数组引用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方法引用、构造器引用、数组引用：看做是 lambda 表达式的进一步刻画、表达。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（掌握）方法引用、构造器引用、数组引用的使用场景。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-jdk8stream-api的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-jdk8stream-api的使用&#34;&gt;#&lt;/a&gt; 3. JDK8:&lt;mark&gt;Stream API&lt;/mark&gt; 的使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stream 关注于内存中的多个数据的运算。&lt;/li&gt;
&lt;li&gt;使用步骤：
&lt;ul&gt;
&lt;li&gt;Stream 的&lt;font color=&#39;red&#39;&gt;实例化&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;一系列的&lt;font color=&#39;red&#39;&gt;中间操作&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;终止操作&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-jdk8之后的新特性语法层面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-jdk8之后的新特性语法层面&#34;&gt;#&lt;/a&gt; 4. JDK8 之后的新特性：语法层面&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;jShell 工具&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;try-catch 结构的变化，资源自动关闭&lt;/font&gt;。try(...)&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;局部变量的类型推断：var&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;instanceof 的模式匹配&lt;/li&gt;
&lt;li&gt;&lt;font color=&#39;red&#39;&gt;switch 表达式&lt;/font&gt;、&lt;font color=&#39;red&#39;&gt;switch 的模式匹配&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;文本块的使用：&amp;quot;&amp;quot;&amp;quot;文本块&amp;quot;&amp;quot;&amp;quot;&lt;/li&gt;
&lt;li&gt;新的引用数据类型：&lt;font color=&#39;red&#39;&gt;record (记录)&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;密封类： &lt;code&gt;sealed&lt;/code&gt;  class&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-jdk8之后的新特性其它&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-jdk8之后的新特性其它&#34;&gt;#&lt;/a&gt; 5. JDK8 之后的新特性：其它&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Optional类&lt;/code&gt; 的使用&lt;/li&gt;
&lt;li&gt;其他：了解&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二-企业真题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-企业真题&#34;&gt;#&lt;/a&gt; 二、企业真题&lt;/h2&gt;
&lt;h3 id=&#34;21-jdk8新特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-jdk8新特性&#34;&gt;#&lt;/a&gt; 2.1 JDK8 新特性&lt;/h3&gt;
&lt;h4 id=&#34;1-谈谈java8新特性京旗下-时代宇信必-招信诺中外包金软件-阿巴&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-谈谈java8新特性京旗下-时代宇信必-招信诺中外包金软件-阿巴&#34;&gt;#&lt;/a&gt; 1. &lt;mark&gt;谈谈 java8 新特性&lt;/mark&gt; (京 * 旗下、时代 * 宇，信必 *、招 * 信诺，中 * 外包，金 * 软件、阿 ** 巴)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;类似问题
&amp;gt; JDK1.8相较于JDK1.7有什么不一样？（惠*）
&amp;gt; JDK1.8的新特性有哪些？Stream API + Lambda表达式，还有吗？（久*国际物流）
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lambda 表达式&lt;/strong&gt;：在给函数式接口提供实例时使用，可简化函数式编程的语法形式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法引用：用于直接引用已有的方法、构造函数来提供更简洁的 Lambda 表达式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stream API&lt;/strong&gt;：用于对集合进行处理和操作的 API，可以在集合中进行过滤、排序、映射等操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时间日期 API（ &lt;code&gt;java.time包&lt;/code&gt; ）：引入了全新的时间日期 API，解决了旧有的日期时间类库的许多问题，如线程安全、设计缺陷等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;接口默认方法和私有方法&lt;/font&gt;：允许在接口中定义默认的实现方法、私有方法，避免影响原有的继承关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可重复注解：允许同一个注解在同一个元素上使用多次，并且不会产生冲突。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新的类型注解：允许开发者对类型进行注释，提高代码可读性和可靠性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CompletableFuture 类：用于执行异步任务，可以轻松管理并发操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存结构：Java 8 引入了 &lt;code&gt;元空间（Metaspace）&lt;/code&gt; ，代替了旧版的永久代（PermGen Space）。元空间是 JVM 中&lt;font color=&#39;red&#39;&gt;存储类元数据（Class Metadata）&lt;/font&gt;的区域，能够动态的调整大小，并且可以设置元空间最大值。这对于需要动态生成类的应用程序而言，更为灵活和安全。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;HashMap 底层结构&lt;/font&gt;:Java 8 的 HashMap 实现中，链表长度超过一定阈值时，链表会转换成 &lt;code&gt;红黑树&lt;/code&gt; 。在红黑树中查询、插入、删除的时间复杂度均为 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(log n)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，相较于链表更为高效。该变化使得 HashMap 对于冲突较多的场景效率更高。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此外，还有 ArrayList、ConcurrentHashMap、Collections 等相关数据结构也做出了一些优化和改进。&lt;/p&gt;
&lt;h4 id=&#34;2-jdk18在数据结构上发生了哪些变化银数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-jdk18在数据结构上发生了哪些变化银数据&#34;&gt;#&lt;/a&gt; 2. JDK1.8 在数据结构上发生了哪些变化？（银 * 数据）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内存结构：Java 8 引入了 &lt;code&gt;元空间（Metaspace）&lt;/code&gt; ，代替了旧版的永久代（PermGen Space）。元空间是 JVM 中&lt;font color=&#39;red&#39;&gt;存储类元数据（Class Metadata）&lt;/font&gt;的区域，&lt;font color=&#39;red&#39;&gt;能够动态的调整大小&lt;/font&gt;，并且可以设置元空间最大值。这对于需要动态生成类的应用程序而言，更为灵活和安全。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 HotSpot，方法区在 jdk7 中是：永久代（PermGen Space）&lt;/li&gt;
&lt;li&gt;对于 HotSpot，方法区在 jdk8 中是：元空间（Metaspace）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;HashMap 底层结构&lt;/font&gt;:Java 8 的 HashMap 实现中，链表长度超过一定阈值时，链表会转换成 &lt;code&gt;红黑树&lt;/code&gt; 。在红黑树中查询、插入、删除的时间复杂度均为 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(log n)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，相较于链表更为高效。该变化使得 HashMap 对于冲突较多的场景效率更高。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-jdk18用的是哪个垃圾回收器oo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-jdk18用的是哪个垃圾回收器oo&#34;&gt;#&lt;/a&gt; 3. JDK1.8 用的是哪个垃圾回收器？（O**O）&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Parallel GC&lt;/code&gt;  --&amp;gt; jdk9：默认使用 &lt;code&gt;G1GC&lt;/code&gt;   --&amp;gt; &lt;strong&gt; &lt;code&gt;ZGC&lt;/code&gt; &lt;/strong&gt; （低延迟）&lt;/p&gt;
&lt;h3 id=&#34;22-lambda表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-lambda表达式&#34;&gt;#&lt;/a&gt; 2.2 Lambda 表达式&lt;/h3&gt;
&lt;h4 id=&#34;1-lambda表达式有了解吗说说如何使用的oo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-lambda表达式有了解吗说说如何使用的oo&#34;&gt;#&lt;/a&gt; 1. &lt;mark&gt;Lambda 表达式有了解吗，说说如何使用的&lt;/mark&gt;（O**O）&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;类似问题：
&amp;gt; Lambda的理解（国*）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;在给函数式接口提供实例时&lt;/strong&gt;，都可以考虑使用 lambda 表达式。&lt;/p&gt;
&lt;p&gt;Lambda 表达式是 Java 8 中引入的一种新特性，它本质上是&lt;font color=&#39;red&#39;&gt;一个匿名函数&lt;/font&gt;，用于表示将一个功能传递给某个方法。Lambda 表达式可以看作是函数式编程的核心思想，它是可传递的代码块，实现了代码的重复利用和简化。&lt;/p&gt;
&lt;p&gt;使用 Lambda 表达式的语法如下：&lt;/p&gt;
&lt;p&gt;(parameter1, parameter2, ...) -&amp;gt; expression&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;p statement1;=&#34;&#34; statement2;=&#34;&#34; css-module=&#34;.&#34;&gt;(parameter1, parameter2, ...) -&amp;gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;参数列表&lt;/code&gt;  parameter1, parameter2 指定了 Lambda 表达式中的参数。&lt;/li&gt;
&lt;li&gt;箭头符号 -&amp;gt; 将参数列表和 Lambda 表达式的主体分开。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;表达式&lt;/code&gt;  expression 或语句块组成了 Lambda 表达式的主体。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lambda 表达式可以被赋值给一个变量，也可以像参数一样传递到方法中去。在 Java 中，Lambda 通常会关联&lt;strong&gt;函数式接口（Functional Interface），即只包含一个抽象方法的接口&lt;/strong&gt;。例如，Runnable 接口只有一个 run () 方法，可以将一个 Lambda 表达式作为 Runnable 对象进行调用：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt; r &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello, world!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;除此之外，Lambda 表达式还可以&lt;strong&gt;与集合框架中的 Stream API 结合使用&lt;/strong&gt;来对数据流进行过滤、映射等处理操作，从而简化操作实现。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; nums &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; sum &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; nums&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;mapToInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;intValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输出：15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Lambda 表达式的使用，让 Java 语言有了更多的编程方式和更好的代码可读性，它是 Java 8 中最具有代表性的新特性之一。&lt;/p&gt;
&lt;h4 id=&#34;2-什么是函数式接口有几种函数式接口阿巴&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-什么是函数式接口有几种函数式接口阿巴&#34;&gt;#&lt;/a&gt; 2. &lt;mark&gt;什么是函数式接口？有几种函数式接口&lt;/mark&gt;（阿 ** 巴）&lt;/h4&gt;
&lt;p&gt;** 函数式接口（functional interface）** 是 Java 8 中引入的一种新类型接口，它&lt;font color=&#39;red&#39;&gt;只包含一个抽象方法&lt;/font&gt;，用于支持 Lambda 表达式和方法引用等函数式编程特性。当声明一个函数式接口时，可以使用  &lt;code&gt;@FunctionalInterface&lt;/code&gt;  注解标记以便在编译时进行验证，确保该接口只有一个抽象方法。&lt;/p&gt;
&lt;p&gt;在 Java 8 中的 &lt;code&gt;java.util.function包&lt;/code&gt; 下，已经为常见的函数式接口提供了内置支持，比如：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;称谓&lt;/th&gt;
&lt;th&gt;函数式接口&lt;/th&gt;
&lt;th&gt;参数类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;消费&lt;/code&gt; 型接口&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Consumer&amp;lt;T&amp;gt;  &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;有参数输入 T，没有输出&lt;/td&gt;
&lt;td&gt;对类型为 T 的对象应用操作，包含方法：   &lt;code&gt;void accept(T t)  &lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;供给&lt;/code&gt; 型接口&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Supplier&amp;lt;T&amp;gt;  &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无参数输入，返回一个 T 类型结果&lt;/td&gt;
&lt;td&gt;返回类型为 T 的对象，包含方法： &lt;code&gt;T get()  &lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;函数&lt;/code&gt; 型接口&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Function&amp;lt;T, R&amp;gt;  &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;有一个 T 类型的输入参数，输出 R 类型的结果&lt;/td&gt;
&lt;td&gt;对类型为 T 的对象应用操作，并返回结果。结果是 R 类型的对象。包含方法： &lt;code&gt;R apply(T t)  &lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;判断&lt;/code&gt; 型接口&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Predicate&amp;lt;T&amp;gt;  &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;输入 T，返回一个布尔值结果&lt;/td&gt;
&lt;td&gt;确定类型为 T 的对象是否满足某约束，并返回 boolean 值。包含方法： &lt;code&gt;boolean test(T t)  &lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;23-stream-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-stream-api&#34;&gt;#&lt;/a&gt; 2.3 Stream API&lt;/h3&gt;
&lt;h4 id=&#34;1-创建stream的方式阿巴&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-创建stream的方式阿巴&#34;&gt;#&lt;/a&gt; 1. 创建 Stream 的方式（阿 ** 巴）&lt;/h4&gt;
&lt;p&gt;Stream 操作分 3 个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建 Stream 实例（3 种主要方式）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通过集合 (Collection)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java8 中的 Collection 接口被扩展，提供了两个获取流的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;default Stream&lt;E&gt;  &lt;code&gt;stream&lt;/code&gt;  () : 返回一个&lt;font color=&#39;red&#39;&gt;顺序流&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;default Stream&lt;E&gt;  &lt;code&gt;parallelStream&lt;/code&gt;  () : 返回一个&lt;font color=&#39;red&#39;&gt;并行流&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Test&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;test01&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; list &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//JDK1.8 中，Collection 系列集合增加了方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Stream&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; stream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通过数组&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java8 中的  &lt;code&gt;Arrays.stream(T[] array)&lt;/code&gt;  可以获取数组流，这里的 T 既可以是引用数据类型，也可以是基本数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static &lt;T&gt; Stream&lt;T&gt; stream (T [] array): 返回一个流&lt;/li&gt;
&lt;li&gt;public static IntStream stream(int[] array)&lt;/li&gt;
&lt;li&gt;public static LongStream stream(long[] array)&lt;/li&gt;
&lt;li&gt;public static DoubleStream stream(double[] array)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Test&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;test02&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;world&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Stream&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; stream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Test&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;test03&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;IntStream&lt;/span&gt; stream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通过 Stream 类的静态方法 of ()&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以调用 &lt;code&gt;Stream.of(T... values)&lt;/code&gt; , 通过显示值创建一个流。它可以接收&lt;font color=&#39;red&#39;&gt;任意数量的参数&lt;/font&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public static&lt;T&gt; Stream&lt;T&gt; of (T... values) : 返回一个流&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Test&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;test04&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Stream&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; stream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Stream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    stream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token operator&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一系列的中间操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;终止操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-你讲讲stream表达式是咋用的干啥的中国际上海网络&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-你讲讲stream表达式是咋用的干啥的中国际上海网络&#34;&gt;#&lt;/a&gt; 2. 你讲讲 stream 表达式是咋用的，干啥的？（中 * 国际，上海 ** 网络）&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Stream API 关注的是多个数据的计算（排序、查找、过滤、映射、遍历等），面向CPU的。
  集合关注的数据的存储，面向内存的。
&amp;gt; Stream API 之于集合，类似于SQL之于数据表的查询。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 Java 8 中，Stream 是&lt;font color=&#39;red&#39;&gt;一种新的集合处理方式&lt;/font&gt;，它是用来对集合或者数组进行一系列操作的。Stream API 简化了对集合数据的处理，使代码更易读、更短。&lt;/p&gt;
&lt;p&gt;stream 表达式通常由三个部分构成： &lt;code&gt;源&lt;/code&gt; 、 &lt;code&gt;零个或多个中间操作&lt;/code&gt; ，以及 &lt;code&gt;一个终止操作&lt;/code&gt; 。其中，&lt;font color=&#39;red&#39;&gt;中间操作可有可无，终止操作是不可缺少的&lt;/font&gt;，只有&lt;font color=&#39;red&#39;&gt;在调用终止操作时才开始执行 stream 表达式中的各种操作&lt;/font&gt;，从而提高效率。&lt;/p&gt;
&lt;p&gt;Stream 的使用步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建 Stream 实例（3 种主要方式）
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通过集合 (Collection)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过数组&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过 Stream 类的静态方法 of ()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一系列的中间操作&lt;/li&gt;
&lt;li&gt;终止操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stream 表达式提供了一种简洁、灵活的集合处理方式，使得&lt;font color=&#39;red&#39;&gt;代码更加清晰、易读&lt;/font&gt;，同时使用 stream &lt;font color=&#39;red&#39;&gt;可以将数据处理部分代码进行函数式抽象&lt;/font&gt;，避免重复代码。&lt;/p&gt;
&lt;h4 id=&#34;3-集合用stream流怎么实现过滤润软件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-集合用stream流怎么实现过滤润软件&#34;&gt;#&lt;/a&gt; 3. 集合用 Stream 流怎么实现过滤？（润 * 软件）&lt;/h4&gt;
&lt;p&gt;filter (Predicate predicate) 方法&lt;/p&gt;
&lt;h4 id=&#34;4-用stream怎么选出list里想要的数据惠&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-用stream怎么选出list里想要的数据惠&#34;&gt;#&lt;/a&gt; 4. 用 Stream 怎么选出 List 里想要的数据？（惠 *）&lt;/h4&gt;
&lt;p&gt;使用 Stream 选出 List 中我们想要的数据通常可以通过过滤（ &lt;code&gt;filter&lt;/code&gt; ）操作来实现，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; list &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;apple&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;banana&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;orange&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;grape&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;peach&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                          &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                          &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 输出：[apple, banana, grape, peach]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在这个例子中，我们首先通过 Arrays.asList () 方法初始化一个字符串列表，然后使用 stream () 方法将其转换为一个流对象。接着调用 filter () 方法，使用 Lambda 表达式实现一个简单的条件判断，该条件将保留包含字符 “a” 的字符串。最后使用 collect () 方法将过滤后的结果收集回 List 对象。&lt;/p&gt;
&lt;p&gt;在 filter () 中，我们可以根据实际需求自定义过滤条件。例如，可以使用正则表达式、时间戳等其他方式进行过滤操作，只留下符合条件的元素。无论具体的过滤条件是什么，Stream 应该是处理集合或数组数据集的良好选择，并且在许多常见的情况下可以提供比传统循环更加清晰和简洁的代码实现方式。&lt;/p&gt;
&lt;h3 id=&#34;24-其它版本新特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-其它版本新特性&#34;&gt;#&lt;/a&gt; 2.4 其它版本新特性&lt;/h3&gt;
&lt;h4 id=&#34;1-说说jdk15-jdk16-jdk17中的新特性都有什么银数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-说说jdk15-jdk16-jdk17中的新特性都有什么银数据&#34;&gt;#&lt;/a&gt; 1. 说说 JDK15、JDK16、JDK17 中的新特性都有什么？(银 * 数据)&lt;/h4&gt;
&lt;p&gt;Java SE 15&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Sealed Classes（密封类）&lt;/code&gt; ：通过&lt;font color=&#39;red&#39;&gt;限制子类&lt;/font&gt;，增强类的封装性和安全性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hidden Classes（隐式类）：让开发人员在运行时动态创建类，并加强对于执行代码的保护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Text Blocks（文本块）&lt;/code&gt; ：为多行字符串提供了一种更加可读性和可写性的表示方式，优化了文本处理操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Record Classes（记录类）&lt;/code&gt; ：声明用于存储数据并带有标识性的类。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java SE 16&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Records&lt;/code&gt; ：进一步完善记录类（Record Classes），使得构造函数等细节更加灵活。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;instanceof的模式匹配&lt;/code&gt; ：简化了 instanceof 操作符的使用，使得&lt;font color=&#39;red&#39;&gt;当匹配成功时可以直接将类型转换&lt;/font&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Foreign Function &amp;amp; Memory API：为 Java 应用程序提供了与外部应用程序交互的基础设施，方便实现本地方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vector API（预览）：为处理向量形式数据提供了一个类库，从而提高处理性能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java SE 17&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sealed Classes 和 Hidden Classes 的迭代升级。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;switch的模式匹配 (预览)&lt;/code&gt; ：扩展了模式匹配功能，支持在 switch 语句中使用模式匹配，增强了代码的可读性和可维护性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;接口中默认方法的隐式继承&lt;/code&gt; ：使得接口的默认方法可以隐式继承自其他接口，而不需要进行实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enhanced Pseudo-Random Number Generators：升级并扩展了 Java 中的随机数生成器 API，支持更多的数据类型和方式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
