{
    "version": "https://jsonfeed.org/version/1",
    "title": "水文 & 摄影",
    "subtitle": "为了更好地访问，你可能需要一点魔法",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/photography/photo-share/%E6%9C%9D%E9%98%B3%E5%85%AC%E5%9B%AD/",
            "url": "http://example.com/photography/photo-share/%E6%9C%9D%E9%98%B3%E5%85%AC%E5%9B%AD/",
            "title": "朝阳公园",
            "date_published": "2023-11-12T08:06:56.973Z",
            "content_html": "<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1681636142000.jpeg\" alt=\"1681636142000\" title=\"婚纱照\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1681636229000.jpeg\" alt=\"1681636229000\" title=\"鸽子\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1681637707000.jpeg\" alt=\"1681637707000\" title=\"灯塔？喇叭？\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1681664957653.jpeg\" alt=\"1681664957653\" title=\"旋转跳跃~\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1681739163456.jpeg\" alt=\"1681739163456\" title=\"我不停歇~\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1681739448109.jpeg\" alt=\"1681739448109\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1681754285877.jpeg\" alt=\"1681754285877\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1681739584181.jpeg\" alt=\"1681739584181\" title=\"波光粼粼粼粼粼粼...\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1681739623380.jpeg\" alt=\"1681739623380\" title=\"麦门！\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1681739528868.jpeg\" alt=\"1681739528868\" /></p>\n",
            "tags": [
                "摄影",
                "照片分享"
            ]
        },
        {
            "id": "http://example.com/photography/photo-share/%E8%AF%BE%E4%B8%8A%E6%91%B8%E9%B1%BC/",
            "url": "http://example.com/photography/photo-share/%E8%AF%BE%E4%B8%8A%E6%91%B8%E9%B1%BC/",
            "title": "课上摸鱼",
            "date_published": "2023-11-12T03:50:08.798Z",
            "content_html": "<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1655450287450.jpeg\" alt=\"1655450287450\" title=\"早自习\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1655450274590.jpeg\" alt=\"1655450274590\" title=\"无聊的嵌入式课堂\" /></p>\n",
            "tags": [
                "摄影",
                "照片分享"
            ]
        },
        {
            "id": "http://example.com/java/juc/JUC%E7%AC%94%E8%AE%B0/",
            "url": "http://example.com/java/juc/JUC%E7%AC%94%E8%AE%B0/",
            "title": "JUC 笔记",
            "date_published": "2023-11-12T03:12:33.234Z",
            "content_html": "<h1 id=\"java-并发概述\"><a class=\"anchor\" href=\"#java-并发概述\">#</a> Java 并发概述</h1>\n<hr />\n<h2 id=\"什么是进程和线程\"><a class=\"anchor\" href=\"#什么是进程和线程\">#</a> 什么是进程和线程？</h2>\n<h3 id=\"何为进程\"><a class=\"anchor\" href=\"#何为进程\">#</a> 何为进程？</h3>\n<p><strong>进程是程序的一次执行过程，是系统进行资源分配的基本单位</strong>。系统运行一个程序即是一个进程从创建，运行到消亡的过程。</p>\n<p>在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称<font color='red'>主线程</font>。</p>\n<p>如下图所示，在 Windows 中通过查看任务管理器的方式，我们就可以清楚看到 Windows 当前运行的进程（ <code>.exe</code>  文件的运行）。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231008000329935.png\" alt=\"进程示例图片-Windows\" /></p>\n<h3 id=\"何为线程\"><a class=\"anchor\" href=\"#何为线程\">#</a> 何为线程？</h3>\n<p><strong>线程属于进程中的一个实体，是一个基本的 CPU 执行单元，是系统独立调度的基本单位</strong>。一个进程在其执行的过程中可以产生多个线程。与进程不同的是，<font color='red'>同类的多个线程共享进程的<strong>堆</strong>和<strong>方法区</strong>资源，但每个线程有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong></font>。所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为<font color='red'>轻量级进程</font>。</p>\n<p>Java 程序天生就是多线程程序，我们可以通过 JMX 来看看一个普通的 Java 程序有哪些线程，代码如下。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MultiThread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token comment\">// 获取 Java 线程管理 MXBean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">ThreadMXBean</span> threadMXBean <span class=\"token operator\">=</span> <span class=\"token class-name\">ManagementFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getThreadMXBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">// 不需要获取同步的 monitor 和 synchronizer 信息，仅获取线程和线程堆栈信息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">ThreadInfo</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> threadInfos <span class=\"token operator\">=</span> threadMXBean<span class=\"token punctuation\">.</span><span class=\"token function\">dumpAllThreads</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">// 遍历线程信息，仅打印线程 ID 和线程名称信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadInfo</span> threadInfo <span class=\"token operator\">:</span> threadInfos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\"</span> <span class=\"token operator\">+</span> threadInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"] \"</span> <span class=\"token operator\">+</span> threadInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getThreadName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述程序输出如下（输出内容可能不同，不用太纠结下面每个线程的作用，只用知道 main 线程执行 main 方法即可）：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[5] Attach Listener //添加事件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[4] Signal Dispatcher // 分发处理给 JVM 信号的线程</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>[3] Finalizer //调用对象 finalize 方法的线程</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>[2] Reference Handler //清除 reference 线程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>[1] main //main 线程,程序入口</pre></td></tr></table></figure><p>从上面的输出内容可以看出：<strong>一个 Java 程序（进程）的运行是 main 线程和多个其他线程同时运行</strong>。</p>\n<h2 id=\"进程和线程的关系区别优缺点\"><a class=\"anchor\" href=\"#进程和线程的关系区别优缺点\">#</a> 进程和线程的关系，区别，优缺点？</h2>\n<ul>\n<li><strong>调度</strong>：线程是调度的基本单位（PC，状态码，通用寄存器，线程栈及栈指针）；进程是拥有资源的基本单位（打开文件，堆，静态区，代码段等）。</li>\n<li><strong>并发性</strong>：一个进程内多个线程可以并发（最好和 CPU 核数相等）；多个进程可以并发。</li>\n<li><strong>拥有资源</strong>：线程不拥有系统资源，但一个进程的多个线程可以共享隶属进程的资源；进程是拥有资源的独立单位。</li>\n<li><strong>系统开销</strong>：线程创建销毁只需要处理 PC 值，状态码，通用寄存器值，线程栈及栈指针即可；进程创建和销毁需要重新分配及销毁 task_struct 结构。</li>\n</ul>\n<h3 id=\"图解进程与线程的关系\"><a class=\"anchor\" href=\"#图解进程与线程的关系\">#</a> 图解进程与线程的关系</h3>\n<p>下图是 Java 8 后的的内存结构（运行时数据区），通过下图我们从 JVM 的角度来说一下线程和进程之间的关系。</p>\n<p><img data-src=\"https://oss.javaguide.cn/github/javaguide/java/jvm/java-runtime-data-areas-jdk1.8.png\" alt=\"Java 运行时数据区域（JDK1.8 之后）\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231008002249305.png\" alt=\"image-20231008002249305\" /></p>\n<p>从上图可以看出：一个进程中可以有多个线程，多个线程共享进程的<strong>堆</strong>和<strong>方法区 (JDK1.8 之后的元空间)<strong> 资源，但是每个线程有自己的</strong>程序计数器</strong>、<strong>虚拟机栈</strong> 和 <strong>本地方法栈</strong>。</p>\n<p>进程与线程的对比总结：</p>\n<ul>\n<li><strong>线程是进程划分成的更小的运行单位</strong>。</li>\n<li>线程和进程最大的不同在于，<strong>各进程基本上是独立的，而各线程则不一定</strong>，因为同一进程中的线程极有可能会相互影响。</li>\n<li><strong>线程执行开销小，上下文切换的成本低</strong>，但不利于资源的管理和保护；而进程正相反。</li>\n</ul>\n<h3 id=\"为什么程序计数器的私有的\"><a class=\"anchor\" href=\"#为什么程序计数器的私有的\">#</a> 为什么程序计数器的私有的？</h3>\n<p>程序计数器主要有下面两个作用：</p>\n<ol>\n<li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li>\n<li>在多线程的情况下，程序计数器用于<font color='red'>记录当前线程执行的位置</font>，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li>\n</ol>\n<p>需要注意的是，如果执行的是 native 方法，那么程序计数器记录的是 undefined 地址，<font color='red'>只有执行的是 Java 代码时，程序计数器记录的才是下一条指令的地址</font>。</p>\n<p>所以，程序计数器私有主要是<strong>为了线程切换后能恢复到正确的执行位置</strong>。</p>\n<h3 id=\"为什么虚拟机栈和本地方法栈是私有的\"><a class=\"anchor\" href=\"#为什么虚拟机栈和本地方法栈是私有的\">#</a> 为什么虚拟机栈和本地方法栈是私有的？</h3>\n<ul>\n<li>\n<p>** 虚拟机栈：** 每个 Java 方法在执行之前会创建一个栈帧用于<font color='red'>存储调用方法的局部变量表、操作数栈、常量池引用等信息</font>。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231008001952766.png\" alt=\"image-20231008001952766\" /></p>\n</li>\n<li>\n<p>** 本地方法栈：** 和虚拟机栈所发挥的作用非常相似，区别是：** 虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。** 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p>\n</li>\n</ul>\n<p>所以，<strong>为了保证线程中的局部变量不被别的线程访问到</strong>，虚拟机栈和本地方法栈是线程私有的。</p>\n<h3 id=\"为什么堆和方法区是共享的\"><a class=\"anchor\" href=\"#为什么堆和方法区是共享的\">#</a> 为什么堆和方法区是共享的？</h3>\n<ul>\n<li><strong>堆</strong>：是进程中最大的一块内存，主要用于<strong>存放新创建的对象</strong> (几乎所有对象都在这里分配内存)</li>\n<li><strong>方法区</strong>：主要用于<strong>存放已被加载的类信息、常量等数据</strong>。</li>\n</ul>\n<h2 id=\"并发和并行的区别\"><a class=\"anchor\" href=\"#并发和并行的区别\">#</a> 并发和并行的区别？</h2>\n<ul>\n<li><strong>并发</strong>：两个及两个以上的作业在同一 <strong>时间段</strong> 内执行。</li>\n<li><strong>并行</strong>：两个及两个以上的作业在同一 <strong>时刻</strong> 执行。</li>\n</ul>\n<p>最关键的点是：是否是 <strong>同时</strong> 执行。</p>\n<h2 id=\"同步和异步的区别\"><a class=\"anchor\" href=\"#同步和异步的区别\">#</a> 同步和异步的区别？</h2>\n<ul>\n<li><strong>同步</strong>：发出一个调用之后，在没有得到结果之前，该调用就<strong>不可以返回，一直等待</strong></li>\n<li><strong>异步</strong>：调用在发出之后，不用等待返回结果，该调用<strong>直接返回</strong></li>\n</ul>\n<h2 id=\"为什么要使用多线程\"><a class=\"anchor\" href=\"#为什么要使用多线程\">#</a> 为什么要使用多线程？</h2>\n<p>先从总体上来说：</p>\n<ul>\n<li><strong>从计算机底层来说：</strong> 线程可以比作是轻量级的进程，是程序执行的最小单位，<font color='red'>线程间的切换和调度的成本远远小于进程</font>。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。</li>\n<li><strong>从当代互联网发展趋势来说：</strong> 现在的系统动不动就要求百万级甚至千万级的并发量，而<font color='red'>多线程并发编程正是开发高并发系统的基础</font>，利用好多线程机制可以大大提高系统整体的并发能力以及性能。</li>\n</ul>\n<p>再深入到计算机底层来探讨：</p>\n<ul>\n<li><strong>单核时代</strong>：在单核时代多线程主要是<font color='red'>为了提高单进程利用 CPU 和 IO 系统的效率</font>。 假设只运行了一个 Java 进程的情况，当我们请求 IO 的时候，如果 Java 进程中只有一个线程，此线程被 IO 阻塞则整个进程被阻塞。CPU 和 IO 设备只有一个在运行，那么可以简单地说系统整体效率只有 50%。当使用多线程的时候，一个线程被 IO 阻塞，其他线程还可以继续使用 CPU。从而提高了 Java 进程利用系统资源的整体效率。</li>\n<li><strong>多核时代</strong>：多核时代多线程主要是<font color='red'>为了提高进程利用多核 CPU 的能力</font>。举个例子：假如我们要计算一个复杂的任务，我们只用一个线程的话，不论系统有几个 CPU 核心，都只会有一个 CPU 核心被利用到。而创建多个线程，这些线程可以被映射到底层多个 CPU 上执行，在任务中的多个线程没有资源竞争的情况下，任务执行的效率会有显著性的提高，约等于（单核时执行时间 / CPU 核心数）。</li>\n</ul>\n<h2 id=\"多线程会带来什么问题\"><a class=\"anchor\" href=\"#多线程会带来什么问题\">#</a> 多线程会带来什么问题？</h2>\n<p>并发编程的目的就是为了能提高程序的执行效率，提高程序运行速度。但是并发编程并不总是能提高程序运行速度的，而且并发编程可能会遇到很多问题，比如：<font color='red'>内存泄漏、死锁、线程不安全</font>等。</p>\n<h2 id=\"如何理解线程安全和不安全\"><a class=\"anchor\" href=\"#如何理解线程安全和不安全\">#</a> 如何理解线程安全和不安全？</h2>\n<p>线程安全和不安全是在多线程环境下对于同一份数据的访问<font color='red'>是否能保证共享资源的正确性和一致性</font>的描述。</p>\n<ul>\n<li>线程安全：在多线程环境下，对于同一份数据，不管有多少个线程同时访问，都能保证这份数据的正确性和一致性。</li>\n<li>线程不安全：在多线程环境下，对于同一份数据，多个线程同时访问时可能会导致数据混乱、错误或者丢失。</li>\n</ul>\n<h2 id=\"单核-cpu-上运行多个线程效率一定会高吗\"><a class=\"anchor\" href=\"#单核-cpu-上运行多个线程效率一定会高吗\">#</a> 单核 CPU 上运行多个线程效率一定会高吗？</h2>\n<p>单核 CPU 同时运行多个线程的效率是否会高，<font color='red'>取决于线程的类型和任务的性质</font>。</p>\n<p>一般来说，有两种类型的线程：</p>\n<ul>\n<li><font color='cornflowerblue'>CPU 密集型</font>：主要进行计算和逻辑处理，需要占用大量的 CPU 资源。</li>\n<li><font color='cornflowerblue'>IO 密集型</font>：主要进行输入输出操作，如读写文件、网络通信等，需要等待 IO 设备的响应，而不占用太多的 CPU 资源。</li>\n</ul>\n<p><font color='red'>在单核 CPU 上，同一时刻只能有一个线程在运行，其他线程需要等待 CPU 的时间片分配</font>。如果线程是 CPU 密集型的，那么多个线程同时运行会导致频繁的线程切换，增加了系统的开销，降低了效率。如果线程是 IO 密集型的，那么多个线程同时运行可以利用 CPU 在等待 IO 时的空闲时间，提高了效率。</p>\n<p>因此，<strong>对于单核 CPU 来说，如果任务是 CPU 密集型的，那么多线程会影响效率；如果任务是 IO 密集型的，那么多线程会提高效率</strong>。当然，这里的 “多” 也要适度，不能超过系统能够承受的上限。</p>\n<h1 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h1>\n<h2 id=\"线程的创建方式\"><a class=\"anchor\" href=\"#线程的创建方式\">#</a> 线程的创建方式</h2>\n<h3 id=\"继承-thread-类\"><a class=\"anchor\" href=\"#继承-thread-类\">#</a> 继承 Thread 类</h3>\n<p>Thread 创建线程方式：创建线程类，匿名内部类方式</p>\n<ul>\n<li><strong>start () 方法底层其实是给 CPU 注册当前线程，并且触发 run () 方法执行</strong></li>\n<li>线程的启动必须调用 start () 方法，如果线程直接调用 run () 方法，相当于变成了普通类的执行，此时主线程将只有执行该线程</li>\n<li>建议线程先创建子线程，主线程的任务放在之后，否则主线程（main）永远是先执行完</li>\n</ul>\n<p>Thread 构造器：</p>\n<ul>\n<li><code>public Thread()</code></li>\n<li><code>public Thread(String name)</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main线程\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//main 线程输出放在上面 就变成有先后顺序了，因为是 main 线程驱动的子线程运行</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程输出：\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>继承 Thread 类的优缺点：</p>\n<ul>\n<li>优点：编码简单</li>\n<li>缺点：线程类已经继承了 Thread 类，<font color='red'>无法继承其他类了</font>，功能不能通过继承拓展（单继承的局限性）</li>\n</ul>\n<h3 id=\"实现-runnable-接口\"><a class=\"anchor\" href=\"#实现-runnable-接口\">#</a> 实现 Runnable 接口</h3>\n<p>Runnable 创建线程方式：创建线程类，匿名内部类方式</p>\n<p>Thread 的构造器：</p>\n<ul>\n<li><code>public Thread(Runnable target)</code></li>\n<li><code>public Thread(Runnable target, String name)</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Runnable</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span><span class=\"token string\">\"1号线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Thread-0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"->\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>Thread 类本身也是实现了 Runnable 接口</strong>，Thread 类中持有 Runnable 的属性，执行线程 run 方法底层是调用 Runnable#run：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Thread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Runnable</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          \t<span class=\"token comment\">// 底层调用的是 Runnable 的 run 方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            target<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Runnable 方式的优缺点：</p>\n<ul>\n<li>缺点：代码复杂一点。</li>\n<li>优点：\n<ol>\n<li>线程任务类只是实现了 Runnable 接口，可以继续继承其他类，<font color='red'>避免了单继承的局限性</font></li>\n<li>同一个线程任务对象可以被包装成多个线程对象</li>\n<li>适合多个线程去共享同一个资源</li>\n<li>实现解耦操作，线程任务代码可以被多个线程共享，<font color='red'>线程任务代码和线程独立</font></li>\n<li>线程池可以放入实现 Runnable 或 Callable 线程任务对象</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"实现-callable-接口\"><a class=\"anchor\" href=\"#实现-callable-接口\">#</a> 实现 Callable 接口</h3>\n<p>实现 Callable 接口：</p>\n<ol>\n<li>定义一个线程任务类实现 Callable 接口，声明线程执行的结果类型</li>\n<li>重写线程任务类的 call 方法，这个方法可以直接返回执行的结果</li>\n<li>创建一个 Callable 的线程任务对象</li>\n<li>把 Callable 的线程任务对象<strong>包装成一个 FutureTask 对象</strong></li>\n<li>把 FutureTask 对象包装成 Thread 对象</li>\n<li>调用线程的 start () 方法启动线程</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Callable</span> call <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCallable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 call 方法返回的结果（正常 / 异常结果）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCallable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span><span class=\"token comment\">// 重写线程任务类方法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"->\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>public FutureTask(Callable&lt;V&gt; callable)</code> ：未来任务对象，在线程执行完后得到线程的执行结果</p>\n<ul>\n<li>FutureTask 就是 Runnable 对象，因为 <strong>Thread 类只能执行 Runnable 实例的任务对象</strong>，所以把 Callable 包装成未来任务对象</li>\n<li>线程池部分详解了 FutureTask 的源码</li>\n</ul>\n<p><code>public V get()</code> ：同步等待 task 执行完毕的结果，如果在线程中获取另一个线程执行结果，会阻塞等待，用于线程同步</p>\n<ul>\n<li>get () 线程会阻塞等待任务执行完成</li>\n<li>run () 执行完后会把结果设置到 FutureTask 的一个成员变量，get () 线程可以获取到该变量的值</li>\n</ul>\n<p>优缺点：</p>\n<ul>\n<li>优点：同 Runnable，并且<font color='red'>能得到线程执行的结果</font></li>\n<li>缺点：编码复杂</li>\n</ul>\n<h3 id=\"runnable-和-callable-的区别\"><a class=\"anchor\" href=\"#runnable-和-callable-的区别\">#</a> Runnable 和 Callable 的区别？</h3>\n<ol>\n<li>接口类型：Runnable 是一个接口类型，而 Callable 是一个<font color='red'>通用接口类型</font>。</li>\n<li>返回值：Runnable 接口的 run () 方法没有返回值，它只能执行某个任务。Callable 接口的<font color='red'> call () 方法可以返回一个结果</font>。</li>\n<li>异常处理：Runnable 接口的 run () 方法不能抛出任何已检查异常，而 Callable 接口的<font color='red'> call () 方法可以抛出异常</font>。</li>\n<li>使用方式：Runnable 接口通常用于创建多线程任务，它不能直接返回结果或抛出异常。Callable 接口通常用于创建线程任务，它可以返回结果或抛出异常。</li>\n<li>多线程执行返回的结果：Runnable 接口无法直接获取执行结果，而<font color='red'> Callable 接口通过 Future 接口的 get () 方法可以获取线程执行的结果</font>。</li>\n</ol>\n<h2 id=\"thread-类的常用-api\"><a class=\"anchor\" href=\"#thread-类的常用-api\">#</a> Thread 类的常用 API</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public void  <code>start()</code></td>\n<td><strong>启动一个新线程，Java 虚拟机调用此线程的 run () 方法</strong></td>\n</tr>\n<tr>\n<td>public void  <code>run()</code></td>\n<td>线程启动后，调用该方法</td>\n</tr>\n<tr>\n<td>public void  <code>setName(String name)</code></td>\n<td>给当前线程取名字</td>\n</tr>\n<tr>\n<td>public void  <code>getName()</code></td>\n<td>获取当前线程的名字。线程存在默认名称：子线程是 Thread - 索引，主线程是 main</td>\n</tr>\n<tr>\n<td>public final int  <code>getPriority()</code></td>\n<td>返回此线程的优先级</td>\n</tr>\n<tr>\n<td>public final void  <code>setPriority(int priority)</code></td>\n<td>更改此线程的优先级，常用 1 5 10</td>\n</tr>\n<tr>\n<td>public void  <code>interrupt()</code></td>\n<td>中断这个线程，异常处理机制</td>\n</tr>\n<tr>\n<td>public boolean  <code>isInterrupted()</code></td>\n<td>判断当前线程是否被打断，不清除打断标记</td>\n</tr>\n<tr>\n<td>public final void  <code>join()</code></td>\n<td>等待这个线程结束</td>\n</tr>\n<tr>\n<td>public final void  <code>join(long millis)</code></td>\n<td>等待这个线程死亡 millis 毫秒，0 意味着永远等待</td>\n</tr>\n<tr>\n<td>public final native boolean  <code>isAlive()</code></td>\n<td>线程是否存活（还没有运行完毕）</td>\n</tr>\n<tr>\n<td>public final void  <code>setDaemon(boolean on)</code></td>\n<td>将此线程标记为守护线程或用户线程</td>\n</tr>\n<tr>\n<td>public <strong>static</strong> boolean  <code>interrupted()</code></td>\n<td>判断当前线程是否被打断，清除打断标记</td>\n</tr>\n<tr>\n<td>public <strong>static</strong> Thread  <code>currentThread()</code></td>\n<td>获取当前线程对象</td>\n</tr>\n<tr>\n<td>public <strong>static</strong> void  <code>sleep(long time)</code></td>\n<td>让当前线程休眠 time 毫秒，同时让出 CPU 时间片。<strong>Thread.sleep(0)</strong> : 让操作系统立刻重新进行一次 CPU 竞争</td>\n</tr>\n<tr>\n<td>public <strong>static</strong> native void  <code>yield()</code></td>\n<td>提示线程调度器<strong>让出当前线程对 CPU 的使用</strong></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"start-与-run\"><a class=\"anchor\" href=\"#start-与-run\">#</a> start () 与 run ()</h3>\n<p><strong>直接调用  <code>start()</code>  方法的话，可启动新的线程（进入 Runnable 状态），通过新线程间接执行  <code>run()</code>  方法。</strong></p>\n<p><strong>直接调用  <code>run()</code>  方法的话，是在 main 线程下作为普通方法执行，不会启动新线程。</strong></p>\n<p>run () 方法中的异常不能抛出，只能 try/catch</p>\n<ul>\n<li>因为父类中没有抛出任何异常，子类不能比父类抛出更多的异常</li>\n<li><strong>异常不能跨线程传播回 main () 中</strong>，因此必须在本地进行处理</li>\n</ul>\n<h3 id=\"sleep-与-yield\"><a class=\"anchor\" href=\"#sleep-与-yield\">#</a> sleep () 与 yield ()</h3>\n<p>sleep：</p>\n<ul>\n<li>调用 sleep 会让当前线程从  <code>Running</code>  进入  <code>Timed Waiting</code>  状态（计时等待）</li>\n<li>sleep () 方法的过程中，<strong>线程不会释放对象锁</strong></li>\n<li>其它线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出 InterruptedException</li>\n<li><font color='red'>睡眠结束后的线程未必会立刻得到执行，需要抢占 CPU</font></li>\n<li>建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性</li>\n</ul>\n<p>yield：</p>\n<ul>\n<li>调用 yield 会让提示线程调度器<font color='red'>让出当前线程对 CPU 的使用</font></li>\n<li>具体的实现依赖于操作系统的任务调度器</li>\n<li><strong>会放弃 CPU 资源，但不会释放锁资源</strong></li>\n</ul>\n<h3 id=\"sleep-与-wait\"><a class=\"anchor\" href=\"#sleep-与-wait\">#</a> sleep () 与 wait ()</h3>\n<p>共同点：两者都可以暂停线程的执行。</p>\n<p>区别：</p>\n<ul>\n<li><strong> <code>sleep()</code>  方法没有释放锁，而  <code>wait()</code>  方法释放了锁</strong>。</li>\n<li><font color='red'> <code>wait()</code>  通常被用于线程间交互 / 通信， <code>sleep()</code>  通常被用于暂停执行</font>。</li>\n<li><code>wait()</code>  方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的  <code>notify()</code>  或者  <code>notifyAll()</code>  方法。 <code>sleep()</code>  方法执行完成后，线程会自动苏醒，或者也可以使用  <code>wait(long timeout)</code>  超时后线程会自动苏醒。</li>\n<li><font color='red'> <code>sleep()</code>  是  <code>Thread</code>  类的静态本地方法， <code>wait()</code>  则是  <code>Object</code>  类的本地方法</font></li>\n</ul>\n<h2 id=\"说说线程的生命周期和状态\"><a class=\"anchor\" href=\"#说说线程的生命周期和状态\">#</a> 说说线程的生命周期和状态？</h2>\n<p>在  <code>java.lang.Thread.State</code>  这个枚举类中给出了 Java 线程的六种线程状态：</p>\n<table>\n<thead>\n<tr>\n<th>线程状态</th>\n<th>导致状态发生条件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font color='cornflowerblue'>NEW（初始）</font></td>\n<td>线程刚被创建，但还没有调用  <code>start()</code>  。只有线程对象，没有线程特征。</td>\n</tr>\n<tr>\n<td><font color='cornflowerblue'>RUNNABLE（运行）</font></td>\n<td>线程调用了  <code>start()</code>  ，可能正在运行，也可能在等待运行，这取决于操作系统处理器。</td>\n</tr>\n<tr>\n<td><font color='cornflowerblue'>BLOCKED（锁阻塞）</font></td>\n<td>需要等待锁释放。当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入 Blocked 状态；当该线程持有锁时，该线程将变成 Runnable 状态。</td>\n</tr>\n<tr>\n<td><font color='cornflowerblue'>WAITING（无限等待）</font></td>\n<td>表示该线程需要等待其他线程做出一些特定动作（通知或中断）。一个线程在等待另一个线程时，该线程进入 Waiting 状态，进入这个状态后不能自动唤醒，必须等待另一个线程调用 notify 或者 notifyAll 方法才能唤醒。</td>\n</tr>\n<tr>\n<td><font color='cornflowerblue'>TIME_WAITING（计时等待）</font></td>\n<td>可以在指定的时间后自行返回，而不是像 WAITING 那样一直等待。有几个方法有超时参数，调用将进入 Timed Waiting 状态，这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有 Thread.sleep 、Object.wait</td>\n</tr>\n<tr>\n<td><font color='cornflowerblue'>TERMINATED（终止）</font></td>\n<td>表示该线程已经运行完毕。run 方法正常退出而死亡，或者因为没有捕获的异常终止了 run 方法而死亡。</td>\n</tr>\n</tbody>\n</table>\n<p>Java 线程状态转移图：</p>\n<blockquote>\n<p>图源：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVU9yWHFsX0xoT0Q4ZGhUcV9FUEkwdw==\">挑错 |《Java 并发编程的艺术》中关于线程状态的三处错误</span></p>\n</blockquote>\n<p><img data-src=\"https://oss.javaguide.cn/github/javaguide/java/concurrent/640.png\" alt=\"Java 线程状态变迁图\" /></p>\n<p>由上图可以看出：线程创建之后它将处于 <strong>NEW（新建）</strong> 状态，调用  <code>start()</code>  方法后开始运行，线程这时候处于 <strong>READY（可运行）</strong> 状态。可运行状态的线程获得了 CPU 时间片（timeslice）后就处于 <strong>RUNNING（运行）</strong> 状态。</p>\n<ul>\n<li>\n<p>当线程执行  <code>wait()</code>  方法之后，线程进入 <strong>WAITING（无限等待）</strong> 状态，需要依靠其他线程的通知才能够返回到 RUNNABLE 状态。</p>\n</li>\n<li>\n<p><strong>TIMED_WAITING (计时等待)</strong> 状态相当于在 WAITING 状态的基础上增加了超时限制，比如通过  <code>sleep（long millis）</code> 方法或  <code>wait（long millis）</code> 方法可以将线程置于 TIMED_WAITING 状态。当超时时间结束后，线程将会返回到 RUNNABLE 状态。</p>\n</li>\n<li>\n<p>当线程进入  <code>synchronized</code>  方法 / 块或者调用  <code>wait</code>  后（被  <code>notify</code> ）重新进入  <code>synchronized</code>  方法 / 块，但是锁被其它线程占有，这个时候线程就会进入 <strong>BLOCKED（锁阻塞）</strong> 状态。</p>\n</li>\n<li>\n<p>线程在执行完了  <code>run()</code>  方法之后将会进入到 <strong>TERMINATED（终止）</strong> 状态。</p>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220524203355448.png\" alt=\"image-20220524203355448\" /></p>\n<h2 id=\"什么是线程上下文切换\"><a class=\"anchor\" href=\"#什么是线程上下文切换\">#</a> 什么是线程上下文切换？</h2>\n<p>线程在执行过程中会有自己的运行条件和状态（也称上下文），在上下文切换过程中，需要保存和恢复的资源包括：</p>\n<ul>\n<li><font color='cornflowerblue'>寄存器</font></li>\n<li><font color='cornflowerblue'>程序计数器（PC）</font>：保存当前任务执行的下一条指令的地址，以便在切换回来时继续执行。</li>\n<li><font color='cornflowerblue'>栈指针（SP）</font></li>\n<li><font color='cornflowerblue'>内存管理单元（MMU）</font>：保存当前任务的页表、段表等内存管理信息，以便在切换回来时继续使用该任务的内存映射。</li>\n<li><font color='cornflowerblue'>文件描述符表</font></li>\n<li><font color='cornflowerblue'>环境变量</font></li>\n</ul>\n<p>当出现如下情况的时候，线程会从占用 CPU 状态中退出：</p>\n<ul>\n<li>主动让出 CPU，比如调用了  <code>sleep()</code> ,  <code>wait()</code>  等。</li>\n<li>时间片用完，因为操作系统要防止一个线程或者进程长时间占用 CPU 导致其他线程或者进程饿死。</li>\n<li>调用了阻塞类型的系统中断，比如请求 IO，线程被阻塞。</li>\n<li>被终止或结束运行。</li>\n</ul>\n<p>这其中前三种都会发生线程切换，线程切换意味着<strong>需要保存当前线程的上下文，留待线程下次占用 CPU 时恢复现场。并加载下一个将要占用 CPU 的线程上下文</strong>。这就是所谓的上下文切换。</p>\n<p>上下文切换是现代操作系统的基本功能，因其每次需要保存信息恢复信息，这将会占用 CPU，内存等系统资源进行处理，也就意味着效率会有一定损耗，<font color='red'>如果频繁切换就会造成整体效率低下</font>。</p>\n<h2 id=\"什么是线程死锁\"><a class=\"anchor\" href=\"#什么是线程死锁\">#</a> 什么是线程死锁？</h2>\n<blockquote>\n<p>面试题：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b3AuaW50ZXJ2aWV3Z3VpZGUuY24vaXNzdWUvMzAz\">说说你了解的死锁？包括死锁产生原因、必要条件、处理方法、死锁恢复以及死锁预防等（死锁相关问题大总结，超全！）</span></p>\n</blockquote>\n<p>线程死锁描述的是这样一种情况：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。</p>\n<p>如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以<strong>这两个线程就会互相等待，而进入死锁状态</strong>。</p>\n<p><img data-src=\"https://oss.javaguide.cn/github/javaguide/java/2019-4%E6%AD%BB%E9%94%811.png\" alt=\"线程死锁示意图 \" /></p>\n<h3 id=\"死锁产生的原因\"><a class=\"anchor\" href=\"#死锁产生的原因\">#</a> 死锁产生的原因</h3>\n<p>理论上认为死锁产生有以下四个必要条件，缺一不可：</p>\n<ol>\n<li><strong>互斥</strong>：该资源任意一个时刻只由一个线程占用。</li>\n<li><strong>请求并保持</strong>：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</li>\n<li><strong>不剥夺</strong>：线程已获得的资源在未使用完之前，不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</li>\n<li><strong>循环等待</strong>：若干线程之间形成一种头尾相接的循环等待资源关系。</li>\n</ol>\n<h3 id=\"如何预防-避免死锁\"><a class=\"anchor\" href=\"#如何预防-避免死锁\">#</a> 如何预防、避免死锁？</h3>\n<p><font color='red'>如何预防死锁？</font>破坏死锁的产生的必要条件即可：</p>\n<ol>\n<li>破坏请求并保持条件：<strong>一次性申请所有的资源</strong>。</li>\n<li>破坏不剥夺条件：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以<strong>主动释放自身占有的资源</strong>。</li>\n<li>破坏循环等待条件：靠<strong>按序申请资源</strong>来预防。按某一顺序申请资源，释放资源则反序释放。</li>\n</ol>\n<p><font color='red'>如何避免死锁？</font>避免死锁就是<strong>在资源分配时，借助于算法（比如银行家算法）对资源分配进行计算评估，使其进入安全状态</strong>。</p>\n<blockquote>\n<p><strong>安全状态</strong>：指的是系统能够按照某种线程推进顺序（P1、P2、P3.....Pn）来为每个线程分配所需资源，直到<font color='red'>满足每个线程对资源的最大需求，使每个线程都可顺利完成</font>。称  <code>&lt;P1、P2、P3.....Pn&gt;</code>  序列为安全序列。</p>\n</blockquote>\n<h2 id=\"为什么-wait-定义在-object-类中而不是-thread-类中\"><a class=\"anchor\" href=\"#为什么-wait-定义在-object-类中而不是-thread-类中\">#</a> 为什么 wait () 定义在 Object 类中，而不是 Thread 类中？</h2>\n<p><strong> <code>wait()</code>  是让获得对象锁的线程实现等待，会自动释放当前线程占有的对象锁</strong>。每个对象（ <code>Object</code> ）都拥有对象锁，既然要释放当前线程占有的对象锁，并让其进入 WAITING 状态，自然是要操作对应的对象（ <code>Object</code> ）而非当前的线程（ <code>Thread</code> ）。</p>\n<p>类似的问题：为什么  <code>sleep()</code>  方法定义在  <code>Thread</code>  中？</p>\n<p>因为 <strong> <code>sleep()</code>  是让当前线程暂停执行，不涉及到对象类，也不需要获得对象锁</strong>。</p>\n<h2 id=\"可以直接调用-thread-类的-run-吗\"><a class=\"anchor\" href=\"#可以直接调用-thread-类的-run-吗\">#</a> 可以直接调用 Thread 类的 run () 吗？</h2>\n<p>new 一个  <code>Thread</code> ，线程进入了新建状态。调用  <code>start()</code>  方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。<font color='red'>  <code>start()</code>  会执行线程的相应准备工作，然后自动执行  <code>run()</code>  方法的内容</font>，这是真正的多线程工作。但是，<font color='red'>直接执行  <code>run()</code>  方法，会把  <code>run()</code>  方法当成一个 main 线程下的普通方法去执行，并不会在某个线程中执行它</font>，所以这并不是多线程工作。</p>\n<p>总结：</p>\n<ul>\n<li><strong>直接调用  <code>start()</code>  方法的话，可启动新的线程（进入 Runnable 状态），通过新线程间接执行  <code>run()</code>  方法。</strong></li>\n<li><strong>直接调用  <code>run()</code>  方法的话，是在 main 线程下作为普通方法执行，不会启动新线程。</strong></li>\n</ul>\n<h1 id=\"同步\"><a class=\"anchor\" href=\"#同步\">#</a> 同步</h1>\n<h2 id=\"临界区\"><a class=\"anchor\" href=\"#临界区\">#</a> 临界区</h2>\n<p><font color='cornflowerblue'>临界资源</font>：一次仅允许一个进程使用的资源成为临界资源</p>\n<p><font color='cornflowerblue'>临界区</font>：访问临界资源的代码块</p>\n<p><font color='cornflowerblue'>竞态条件</font>：多个线程在临界区内执行，由于代码的执行序列不同而导致结果无法预测，称之为发生了竞态条件</p>\n<p>一个程序运行多个线程是没有问题，多个线程读共享资源也没有问题，<font color='red'>在多个线程对共享资源读写操作时发生指令交错，就会出现问题</font></p>\n<p>为了避免临界区的竞态条件发生（解决线程安全问题）：</p>\n<ul>\n<li>阻塞式的解决方案：synchronized，lock</li>\n<li>非阻塞式的解决方案：原子变量</li>\n</ul>\n<p><font color='cornflowerblue'>管程（monitor）</font>：也称监视器，指的是<font color='red'>管理共享变量以及对共享变量的操作过程，让它们支持并发</font>。翻译为 Java 就是 **<font color='red'>管理类的成员变量和成员方法，让这个类是线程安全的</font>**。实现了<font color='red'>同一时刻，只有一个线程在执行管程的某个子程序</font>。</p>\n<p><strong>synchronized：对象锁，保证了临界区内代码的原子性</strong>，采用互斥的方式让同一时刻至多只有一个线程能持有对象锁，其它线程获取这个对象锁时会阻塞，保证拥有锁的线程可以安全的执行临界区内的代码，不用担心线程上下文切换。</p>\n<p>互斥和同步都可以采用 synchronized 关键字来完成，区别：</p>\n<ul>\n<li><font color='cornflowerblue'>互斥</font>：同一时刻只能有一个线程执行临界区代码</li>\n<li><font color='cornflowerblue'>同步</font>：是由于线程执行的先后、顺序不同，需要一个线程等待其它线程运行到某个点</li>\n</ul>\n<p>性能：</p>\n<ul>\n<li>线程安全：性能差</li>\n<li>线程不安全：性能好，假如开发中不会存在多线程安全问题，建议使用线程不安全的设计类</li>\n</ul>\n<hr />\n<blockquote>\n<p>以下内容，参考《<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1KVk0tbnE2aHUyMmUubWQ=\">JVM 笔记.md</span>》的第五章</p>\n</blockquote>\n<h2 id=\"乐观锁和悲观锁\"><a class=\"anchor\" href=\"#乐观锁和悲观锁\">#</a> 乐观锁和悲观锁</h2>\n<h3 id=\"数据库悲观锁和乐观锁的原理和应用场景分别有什么\"><a class=\"anchor\" href=\"#数据库悲观锁和乐观锁的原理和应用场景分别有什么\">#</a> 数据库悲观锁和乐观锁的原理和应用场景分别有什么？</h3>\n<ul>\n<li>\n<p><font color='cornflowerblue'>悲观锁</font>：<strong>先获取锁，再进行业务操作</strong>。例如  <code>synchronized</code>  和  <code>ReentrantLock</code> 。一般就是利用类似 SELECT … FOR UPDATE 这样的语句，对数据加锁，避免其他事务意外修改数据。<br />\n当数据库执行 SELECT … FOR UPDATE 时会获取被 select 中的数据行的行锁， select for update 获取的行锁会在当前事务结束时自动释放，因此必须在事务中使用。</p>\n</li>\n<li>\n<p><font color='cornflowerblue'>乐观锁</font>：<strong>先进行业务操作，只在最后实际更新数据时检查数据是否被更新过</strong>。Java 并发包中的 AtomicFieldUpdater 类似，也是利用 CAS 机制，并不会对数据加锁，而是通过对比数据的时间戳或者版本号，来实现乐观锁需要的版本判断。</p>\n</li>\n</ul>\n<h2 id=\"synchronized-关键字\"><a class=\"anchor\" href=\"#synchronized-关键字\">#</a> synchronized 关键字</h2>\n<blockquote>\n<p><strong>独占锁</strong>（悲观锁）</p>\n</blockquote>\n<h3 id=\"为什么把-jdk-16-之前的-synchronized-称为重量级锁\"><a class=\"anchor\" href=\"#为什么把-jdk-16-之前的-synchronized-称为重量级锁\">#</a> 为什么把 JDK 1.6 之前的 synchronized 称为重量级锁？</h3>\n<ol>\n<li>JDK 1.6 之前的 synchronized 是重量级锁主要是因为：其实现方式会导致性能上的较大损耗。</li>\n<li>在 JDK 1.6 之前，synchronized 关键字<strong>使用的是对象级别的锁</strong>，即每个对象都有一个相关的锁。<strong>在获取和释放锁的过程中需要进行用户态和内核态的切换，这个切换的代价比较高，消耗的时间比较多</strong>，因此被称为重量级锁。</li>\n<li>在 JDK 1.6 之前的 synchronized <strong>在获取锁时使用的是互斥量（Mutex）来实现，这是一种悲观锁，即当某个线程获取了锁之后，其他的线程将被阻塞，直到该线程释放锁</strong>。这种阻塞和唤醒线程的操作需要操作系统层面的支持，因此会有较高的开销。</li>\n<li>另外，JDK 1.6 之前的 synchronized 的实现没有进行优化，每一次锁的获取和释放都需要进行同步操作，无法做到细粒度的控制，导致锁的粒度较大，同一时间只能一个线程访问被锁定的代码块，效率较低。</li>\n</ol>\n<p>因此，JDK 1.6 之前的 synchronized 被称为重量级锁，主要是因为它在性能和资源消耗方面存在一些不足之处。不过随着 JDK 的不断更新，synchronized 的实现方式得到了改善，JDK 1.6 之后引入了偏向锁、轻量级锁等优化措施，使得 synchronized 的性能也得到了提升。</p>\n<h3 id=\"synchronized-锁升级过程偏向锁-轻量级锁-重量级锁\"><a class=\"anchor\" href=\"#synchronized-锁升级过程偏向锁-轻量级锁-重量级锁\">#</a> synchronized 锁升级过程（偏向锁、轻量级锁、重量级锁）</h3>\n<ol>\n<li><font color='cornflowerblue'>偏向锁</font>：</li>\n</ol>\n<ul>\n<li>在锁对象初始化时，对象头中的 Mark Word 会记录当前线程 ID，表示该锁对象偏向于该线程。</li>\n<li>当另一个线程也尝试获取这个锁对象时，会检查该对象头的 Mark Word，\n<ul>\n<li>如果记录的线程 ID 是自己，表示可以直接获取锁。</li>\n<li>如果记录的线程 ID 不是自己，会<strong>撤销偏向锁，升级为轻量级锁</strong>。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li><font color='cornflowerblue'>轻量级锁</font>：</li>\n</ol>\n<ul>\n<li>当多个线程尝试获取锁对象时，JVM 会为参与竞争的各个线程的栈帧中各自分配 ** 锁记录（ <code>Lock Record</code> ）** 空间，并将锁对象的 Mark Word 拷贝到其中，称为  <code>Displaced Mark Word</code> 。</li>\n<li>然后，一个线程使用 CAS 操作尝试将对象头的 Mark Word 替换为指向自己线程栈帧中的锁记录的指针。\n<ul>\n<li>如果 CAS 成功，表示获取锁成功。</li>\n<li>如果 CAS 失败，那么当前线程也不会阻塞，而是通过<strong>自旋</strong>的方式不断尝试获取锁，当达到一定次数仍未获得锁时，会进一步<strong>膨胀为重量级锁</strong>。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li><font color='cornflowerblue'>重量级锁</font>：</li>\n</ol>\n<ul>\n<li>当一个线程尝试获取对象锁时，发现对象已经是轻量级锁状态，但是锁的拥有者不是自己时，此时线程会进入<strong> BLOCKED（锁阻塞）状态</strong>，开始<strong>锁膨胀</strong>流程。</li>\n<li>升级为重量级锁时，虚拟机会在操作系统层面申请一个 ** 互斥量（Mutex）** 来保护整个对象。</li>\n<li>获取重量级锁失败的线程将会进入阻塞状态，只有当拥有锁的线程释放锁后，其他线程才有机会获取锁。</li>\n</ul>\n<p>需要注意的是，锁的升级过程中是逐级升级的，即从<strong>偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</strong>。而且<strong>锁只能升级，不能降级</strong>。这是为了防止频繁锁的请求和释放造成的性能损耗。</p>\n<h1 id=\"内存\"><a class=\"anchor\" href=\"#内存\">#</a> 内存</h1>\n<h2 id=\"java-内存模型jmm\"><a class=\"anchor\" href=\"#java-内存模型jmm\">#</a> Java 内存模型（JMM）</h2>\n<h2 id=\"volatile-关键字\"><a class=\"anchor\" href=\"#volatile-关键字\">#</a> volatile 关键字</h2>\n<h3 id=\"volatile实现什么能力怎么实现的\"><a class=\"anchor\" href=\"#volatile实现什么能力怎么实现的\">#</a> volatile 实现什么能力，怎么实现的？</h3>\n<ul>\n<li><strong>能保证变量的可见性</strong>：如果我们将变量声明为  <code>volatile</code> ，表明这个变量是共享且不稳定的，<font color='red'>每次读写都强制发生在主内存中</font>。</li>\n<li><strong>禁止指令重排</strong>：当一个变量被  <code>volatile</code>  修饰时，编译器和处理器会禁止对其进行指令重排，从而保证程序的正确性。</li>\n</ul>\n<h2 id=\"happens-before-原则\"><a class=\"anchor\" href=\"#happens-before-原则\">#</a> happens-before 原则</h2>\n<h1 id=\"无锁\"><a class=\"anchor\" href=\"#无锁\">#</a> 无锁</h1>\n<h2 id=\"cas\"><a class=\"anchor\" href=\"#cas\">#</a> CAS</h2>\n<h2 id=\"atomic-原子类\"><a class=\"anchor\" href=\"#atomic-原子类\">#</a> Atomic 原子类</h2>\n<ol>\n<li>\n<p><strong>Atomic 原子类是  <code>Java.util.concurrent</code>  包中的一个类，用于提供<u>线程安全</u>的<u>原子操作</u></strong>。</p>\n</li>\n<li>\n<p>Atomic 原子类可以保证在多线程环境下对变量的原子操作，即操作过程不会被其他线程中断，从而避免了竞态条件的发生。</p>\n</li>\n<li>\n<p>Atomic 原子类<font color='red'>提供了一系列的方法，可以对变量进行读取、写入、比较并设置等操作</font>，如 get、set、compareAndSet 等。</p>\n</li>\n<li>\n<p>Atomic 原子类<font color='red'>支持不同的数据类型</font>，</p>\n<ul>\n<li><font color='cornflowerblue'>基本类型</font>的原子类： <code>AtomicInteger</code> （整型）、 <code>AtomicLong</code> （长整型）、 <code>AtomicBoolean</code> （布尔型）</li>\n<li><font color='cornflowerblue'>数组类型</font>的原子类： <code>AtomicIntegerArray</code> （整型数组）、 <code>AtomicLongArray</code> （长整型数组）、 <code>AtomicReferenceArray</code> （引用类型数组）</li>\n<li><font color='cornflowerblue'>引用类型</font>的原子类： <code>AtomicReference</code> （引用类型）、 <code>AtomicStampedReference</code> （原子更新带有版本号的引用类型）、 <code>AtomicMarkableReference</code> （原子更新带有标记的引用类型）</li>\n</ul>\n</li>\n<li>\n<p>Atomic 原子类的内部实现<strong>基于 CAS（Compare-and-Swap）算法</strong>，该算法<font color='red'>通过比较内存中的值与期望值是否一致来判断是否更新</font>。</p>\n</li>\n<li>\n<p>Atomic 原子类的使用场景包括计数器、线程安全的累加器、标志位的设置等。</p>\n</li>\n<li>\n<p>Atomic 原子类 **<font color='red'>在高并发场景下可以提高性能，避免了使用锁造成的线程等待和上下文切换的开销</font>**。</p>\n</li>\n</ol>\n<h2 id=\"threadlocal-类\"><a class=\"anchor\" href=\"#threadlocal-类\">#</a> ThreadLocal 类</h2>\n<img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/1-af0577dc.png\" alt=\"img\"  />\n<h3 id=\"有什么用\"><a class=\"anchor\" href=\"#有什么用\">#</a> 有什么用？</h3>\n<p><strong> <code>ThreadLocal</code>  类可以让每个线程拥有自己单独的变量副本，分配在堆内的 TLAB 中，使得每个线程中的变量相互独立，从而保证线程安全。</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/68747470733a2f2f7365617a65616e2e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f696d672f4a6176612f4a564d2d4a617661382545352538362538352545352541442539382545372542422539332545362539452538342545352539422542452e706e67\" alt=\"img\" /></p>\n<p><font color='red'> <code>ThreadLocal</code>  变量是 private static 类型的，访问这个变量的每个线程都会在 TLAB 中存储这个变量的本地副本，所以是线程安全的</font>。他们可以使用  <code>get()</code>  和  <code>set()</code>  方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。</p>\n<h3 id=\"如何使用\"><a class=\"anchor\" href=\"#如何使用\">#</a> 如何使用？</h3>\n<p>下面简单演示一下如何在项目中实际使用  <code>ThreadLocal</code>  。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocalExample</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token comment\">// SimpleDateFormat 不是线程安全的，所以每个线程都要有自己独立的副本</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">></span></span> formatter <span class=\"token operator\">=</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">.</span><span class=\"token function\">withInitial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyyMMdd HHmm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">ThreadLocalExample</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocalExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread Name= \"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" default Formatter = \"</span><span class=\"token operator\">+</span>formatter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//formatter pattern is changed here by thread, but it won't reflect to other threads</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        formatter<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread Name= \"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" formatter = \"</span><span class=\"token operator\">+</span>formatter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>从  <code>Thread</code>  类源代码入手。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Thread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//......</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 与此线程有关的 ThreadLocal 值。由 ThreadLocal 类维护</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ThreadLocal<span class=\"token punctuation\">.</span>ThreadLocalMap</span> threadLocals <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 与此线程有关的 InheritableThreadLocal 值。由 InheritableThreadLocal 类维护</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">ThreadLocal<span class=\"token punctuation\">.</span>ThreadLocalMap</span> inheritableThreadLocals <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//......</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从上面  <code>Thread</code>  类的源代码有<font color='red'>一个 threadLocals 变量和一个 inheritableThreadLocals 变量</font>，它们都是 <strong>ThreadLocalMap</strong> 类型的变量，可以理解为  <code>ThreadLocal</code>  类实现的定制化  <code>HashMap</code> 。</p>\n<ul>\n<li>默认情况下这两个变量都是 null</li>\n<li>只有当前线程调用  <code>ThreadLocal</code>  类的  <code>set()</code>  或  <code>get()</code>  方法时才创建它们，实际上调用的是  <code>ThreadLocalMap</code>  类对应的  <code>get()</code> 、 <code>set()</code>  方法。</li>\n</ul>\n<p><code>ThreadLocal</code>  类的 <code>set()</code>  方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 获取当前请求的线程</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 取出 Thread 类内部的 threadLocals 变量 (哈希表结构)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalMap</span> map <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 将需要存储的值放入到这个哈希表中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">ThreadLocalMap</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span>threadLocals<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结论：<strong>最终的变量是存放在当前线程的  <code>ThreadLocalMap</code>  中，而不是  <code>ThreadLocal</code>  上</strong>。</p>\n<ul>\n<li><code>ThreadLocal</code>  可以理解为只是  <code>ThreadLocalMap</code>  的封装，传递了变量值。</li>\n<li><code>ThrealLocal</code>  类中可以通过 <code>Thread.currentThread()</code>  获取到当前线程对象后，直接通过 <code>getMap(Thread t)</code>  可以访问到该线程的 <code>ThreadLocalMap</code>  对象。</li>\n</ul>\n<p><strong>每个 <code>Thread</code>  中都具备一个 <code>ThreadLocalMap</code> ，可以存储（key= <code>ThreadLocal</code>  对象，value= Object 对象）的键值对。</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ThreadLocalMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> firstKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> firstValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//......</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>比如我们在同一个线程中声明了两个  <code>ThreadLocal</code>  对象的话，  <code>Thread</code>  内部都是使用仅有的那个  <code>ThreadLocalMap</code>  存放数据的，key 就是  <code>ThreadLocal</code>  对象，value 就是  <code>ThreadLocal</code>  对象调用 <code>set()</code>  方法设置的值。</p>\n<p><code>ThreadLocal</code>  数据结构如下图所示：</p>\n<p><img data-src=\"https://oss.javaguide.cn/github/javaguide/java/concurrent/threadlocal-data-structure.png\" alt=\"ThreadLocal 数据结构\" /></p>\n<p><code>ThreadLocalMap</code>  是  <code>ThreadLocal</code>  的静态内部类。</p>\n<p><img data-src=\"https://oss.javaguide.cn/github/javaguide/java/concurrent/thread-local-inner-class.png\" alt=\"ThreadLocal内部类\" /></p>\n<h3 id=\"内存泄露问题\"><a class=\"anchor\" href=\"#内存泄露问题\">#</a> 内存泄露问题</h3>\n<p><code>ThreadLocalMap</code>  中使用的<font color='red'> key 为  <code>ThreadLocal</code>  的弱引用</font>，而 value 是强引用。所以，如果  <code>ThreadLocal</code>  没有被外部强引用的情况下，<font color='red'>在垃圾回收的时候，key 会被清理掉</font>，而 value 不会被清理掉。这样一来， <code>ThreadLocalMap</code>  中就<font color='red'>会出现 key 为 null 的 Entry</font>。假如我们不做任何措施的话，<font color='red'>value 永远无法被 GC 回收</font>，这个时候就可能会产生<strong>内存泄露</strong>。</p>\n<p><code>ThreadLocalMap</code>  实现中已经考虑了这种情况，在调用  <code>set()</code> 、 <code>get()</code> 、 <code>remove()</code>  方法的时候，会清理掉 key 为 null 的记录。使用完  <code>ThreadLocal</code>  方法后最好手动调用  <code>remove()</code>  方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/** The value associated with this ThreadLocal. */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>弱引用介绍：</strong></p>\n<blockquote>\n<p>如果一个对象只具有弱引用，那就类似于<strong>可有可无的生活用品</strong>。弱引用与软引用的区别在于：<font color='red'>只具有弱引用的对象拥有更短暂的生命周期</font>。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，<font color='red'>不管当前内存空间足够与否，都会回收它的内存</font>。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。</p>\n<p>弱引用可以和一个<font color='red'>引用队列（ReferenceQueue）</font>联合使用，如果弱引用所引用的对象被垃圾回收，Java 虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p>\n</blockquote>\n<h3 id=\"你的理解小结\"><a class=\"anchor\" href=\"#你的理解小结\">#</a> 你的理解？（小结）</h3>\n<p>ThreadLocal 提供了一种方式，在多线程环境下，<strong>每个线程都可以独立地维护自己的变量副本，互不干扰</strong>。</p>\n<p>在多线程编程中，共享变量的访问可能会引发线程安全的问题。比如多个线程同时修改同一个变量，可能会导致数据不一致或者竞态条件等问题。而 ThreadLocal 则可以解决这个问题，它为每个线程提供了一个独立的变量副本，每个线程都可以访问和修改自己的变量副本，而不会影响其他线程的副本。这样就避免了多个线程之间的竞争和冲突。</p>\n<p>ThreadLocal 的工作原理是，<strong>在每个线程内部维护一个  <code>ThreadLocalMap</code> ，用于存储线程局部变量的副本，（key=ThreadLocal 对象，value=Object 对象）</strong>。</p>\n<p>当线程需要访问这个变量时，首先通过 ThreadLocal 对象获取当前线程的副本，如果不存在则创建一个新的副本，并存储到 Map 中。而<font color='red'>线程对变量的访问和修改都是通过 ThreadLocal 对象进行，保了线程间的隔离性</font>。</p>\n<p>ThreadLocal 的典型应用场景包括：</p>\n<ul>\n<li><font color='red'>数据库连接管理</font>：每个线程都可以拥有自己的数据库连接，避免了多个线程之间的数据库连接竞争和冲突。</li>\n<li><font color='red'>用户身份信息传递</font>：将用户身份信息存储在 ThreadLocal 中，可以在多个方法中方便地获取和传递，避免了显式地传递参数。</li>\n<li><font color='red'>事务管理</font>：将事务对象存储在 ThreadLocal 中，可以在多个方法中共享同一个事务，避免了事务对象的传递和管理。</li>\n</ul>\n<p>需要注意的是，使用 ThreadLocal 时<font color='red'>要注意及时清理资源，避免内存泄漏问题</font>。一般可以通过在 ThreadLocal 使用完毕后，调用  <code>remove()</code>  方法进行清理。</p>\n<h1 id=\"同步器\"><a class=\"anchor\" href=\"#同步器\">#</a> 同步器</h1>\n<h2 id=\"aqs-抽象类\"><a class=\"anchor\" href=\"#aqs-抽象类\">#</a> AQS 抽象类</h2>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<p>AQS 的全称为  <code>AbstractQueuedSynchronizer</code>  ，翻译过来的意思就是<font color='red'>抽象队列同步器</font>。这个类在  <code>java.util.concurrent.locks</code>  包下面。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/AQS.png\" alt=\"img\" /></p>\n<p>AQS 就是一个抽象类，主要用来<strong>简单且高效地构造出大量的同步器</strong>，<font color='red'>比如  <code>ReentrantLock</code> ， <code>Semaphore</code> ，其他的诸如  <code>ReentrantReadWriteLock</code> ， <code>SynchronousQueue</code>  等等皆是基于 AQS 的</font>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractQueuedSynchronizer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractOwnableSynchronizer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"底层原理\"><a class=\"anchor\" href=\"#底层原理\">#</a> 底层原理</h3>\n<h4 id=\"核心思想\"><a class=\"anchor\" href=\"#核心思想\">#</a> 核心思想</h4>\n<p>AQS 核心思想是：</p>\n<ul>\n<li>如果被请求的共享资源是<font color='gree'>空闲</font>的，则将当前请求资源的线程设置为有效的<font color='red'>工作线程</font>，并且将共享资源设置为<font color='red'>锁定状态</font>。</li>\n<li>如果被请求的共享资源<font color='gree'>被占用</font>了，那么就需要<font color='red'>一套线程阻塞等待以及被唤醒时锁分配的机制</font>，这个机制是基于 <strong>CLH 队列锁</strong> （Craig, Landin, and Hagersten locks） 实现的，即<font color='red'>将暂时获取不到锁的线程加入到队列中</font>。</li>\n</ul>\n<p>CLH 锁是<font color='red'>对自旋锁的一种改进</font>，是一个 **<font color='red'>虚拟的双向 FIFO 队列</font>**（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。<strong>AQS 将每个请求共享资源的线程封装成 CLH 队列锁的一个结点（Node）来实现锁的分配</strong>。每个结点包含：</p>\n<ul>\n<li><font color='cornflowerblue'>thread</font>：线程的引用</li>\n<li><font color='cornflowerblue'>waitStatus</font>：当前节点在队列中的状态</li>\n<li><font color='cornflowerblue'>prev</font>：前驱节点</li>\n<li><font color='cornflowerblue'>next</font>：后继节点</li>\n</ul>\n<p>CLH 队列结构如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/clh-queue-structure.png\" alt=\"CLH 队列结构\" /></p>\n<p>AQS( <code>AbstractQueuedSynchronizer</code> ) 的核心原理图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231013130403824.png\" alt=\"image-20231013130403824\" /></p>\n<p>AQS 使用 <strong>int 成员变量  <code>state</code>  表示同步状态</strong>，通过内置的 <strong>双向 FIFO 线程等待队列</strong> 来完成获取资源线程的排队工作。</p>\n<ul>\n<li>\n<p><code>state</code>  变量由  <code>volatile</code>  修饰，保证线程可见性，用于展示当前临界资源的获锁情况。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 共享变量，使用 volatile 修饰保证线程可见性</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> state<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>另外，状态信息  <code>state</code>  可以通过  <code>protected</code>  类型的 <code>getState()</code> 、 <code>setState()</code>  和 <code>compareAndSetState()</code>  进行操作。并且，这几个方法都是  <code>final</code>  修饰的，在子类中无法被重写。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回同步状态的当前值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// 设置同步状态的值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     state <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 原子地（CAS 操作）将同步状态值设置为给定值 update 如果当前同步状态的值等于 expect（期望值）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> expect<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> update<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">return</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> stateOffset<span class=\"token punctuation\">,</span> expect<span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<hr />\n<p>以<strong>可重入式的独占锁</strong>  <code>ReentrantLock</code>  为例，它的内部维护了一个  <code>state</code>  变量，<font color='red'>表示这个锁被多少个线程所持有</font>。</p>\n<ul>\n<li>\n<p><code>state</code>  的<font color='red'>初始值为 0</font>，表示锁处于未锁定状态。</p>\n</li>\n<li>\n<p>当线程 A 调用  <code>lock()</code>  方法时，会尝试通过  <code>tryAcquire()</code>  方法独占该锁，并让  <code>state</code>  的值<font color='red'>加 1</font>。</p>\n<ul>\n<li>如果成功了，那么线程 A 就获取到了锁。</li>\n<li>如果失败了，那么线程 A 就会<font color='red'>被加入到一个等待队列（CLH 队列）中</font>，直到其他线程释放该锁。</li>\n</ul>\n</li>\n<li>\n<p>假设线程 A 获取锁成功了，<strong><font color='red'>释放锁之前，A 线程自己是可以重复获取此锁的</font></strong>（ <code>state</code>  会累加）。</p>\n<blockquote>\n<p>这就是<strong>可重入性</strong>的体现：<strong>一个线程可以多次获取同一个锁而不会被阻塞</strong>。但是，这也意味着，一个线程必须释放与获取的次数相同的锁，才能让  <code>state</code>  的值回到 0，也就是让锁恢复到未锁定状态。只有这样，其他等待的线程才能有机会获取该锁。</p>\n</blockquote>\n</li>\n</ul>\n<p>线程 A 尝试获取  <code>ReentrantLock</code>  锁的过程如下图所示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/aqs-exclusive-mode-acquire-lock.png\" alt=\"AQS 独占模式获取锁\" /></p>\n<center>（AQS 独占模式获取锁）</center>\n<hr />\n<p>再以倒计时器  <code>CountDownLatch</code>  以例，</p>\n<ul>\n<li>\n<p>任务分为 N 个子线程去执行， <code>state</code>  也初始化为 N（<font color='red'>表示子线程的个数</font>）。</p>\n</li>\n<li>\n<p>这 N 个子线程开始执行任务，每执行完一个子线程，就调用一次  <code>countDown()</code>  方法。该方法会尝试使用 CAS 操作，让  <code>state</code>  的值减少 1。</p>\n</li>\n<li>\n<p>当所有的子线程都执行完毕后（即  <code>state</code>  的值变为 0）， <code>CountDownLatch</code>  会调用  <code>unpark()</code>  方法，唤醒主线程。</p>\n<blockquote>\n<p>park () 和 unpark () 是 LockSupport 类中的方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 暂停当前线程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>暂停线程对象<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 恢复某个线程的运行</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li>\n<p>主线程被唤醒后就可以从  <code>CountDownLatch</code>  中的  <code>await()</code>  方法（而非 AQS 中的）返回，继续执行后续的操作。</p>\n</li>\n</ul>\n<h4 id=\"资源共享方式\"><a class=\"anchor\" href=\"#资源共享方式\">#</a> 资源共享方式</h4>\n<p>AQS 定义两种资源共享方式：</p>\n<ul>\n<li><code>Exclusive</code> ：<strong>独占式</strong>，只有一个线程能执行，如 <code>ReentrantLock</code></li>\n<li><code>Share</code> ：<strong>共享式</strong>，多个线程可同时执行，如 <code>Semaphore</code> / <code>CountDownLatch</code></li>\n</ul>\n<p><font color='red'>一般来说，自定义同步器的共享方式要么是独占，要么是共享</font>，他们也只需实现 <code>tryAcquire-tryRelease</code> 、 <code>tryAcquireShared-tryReleaseShared</code>  中的一种即可。<font color='red'>但 AQS 也支持自定义同步器同时实现独占和共享两种方式</font>，如 <code>ReentrantReadWriteLock</code> 。</p>\n<h4 id=\"自定义同步器\"><a class=\"anchor\" href=\"#自定义同步器\">#</a> 自定义同步器</h4>\n<p>同步器的设计是基于<font color='red'>模板方法模式</font>的，如果需要自定义同步器一般的方式是这样：</p>\n<ol>\n<li><strong><font color='red'>继承  <code>AbstractQueuedSynchronizer</code> （AQS 抽象类），并重写指定的钩子方法</font></strong>。</li>\n<li>将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。</li>\n</ol>\n<p><strong>AQS 使用了模板方法模式，自定义同步器时，需要重写下面几个 AQS 提供的钩子方法：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 独占方式。尝试获取资源，成功则返回 true，失败则返回 false。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 独占方式。尝试释放资源，成功则返回 true，失败则返回 false。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryRelease</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 共享方式。尝试获取资源。负数表示失败；0 表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> <span class=\"token function\">tryAcquireShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 共享方式。尝试释放资源，成功则返回 true，失败则返回 false。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryReleaseShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 该线程是否正在独占资源。只有用到 condition 才需要去实现它。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isHeldExclusively</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>钩子方法</strong>是一种<font color='red'>被声明在抽象类中</font>的方法，一般使用<font color='red'>  <code>protected</code>  关键字</font>修饰，它可以是空方法（由子类实现），也可以是默认实现的方法。模板设计模式通过钩子方法控制固定步骤的实现。</p>\n<p><strong><font color='red'>除了上面提到的钩子方法之外，AQS 类中的其他方法都是  <code>final</code>  ，所以无法被其他类重写</font></strong>。</p>\n<h3 id=\"常见同步工具类\"><a class=\"anchor\" href=\"#常见同步工具类\">#</a> 常见同步工具类</h3>\n<p>下面介绍几个基于 AQS 的常见同步工具类：</p>\n<ul>\n<li><font color='cornflowerblue'>Semaphore（信号量）</font>：共享式，AQS 的  <code>state</code>  值为  <code>permits</code> ，表示许可证的数量，只有拿到许可证的线程才能执行。可以用来控制同时访问特定资源的线程数量。</li>\n<li><font color='cornflowerblue'>CountDownLatch（倒计时器）</font>：共享式，AQS 的  <code>state</code>  值为  <code>count</code> ，表示允许  <code>count</code>  个线程阻塞在一个地方，直至所有线程的任务都执行完毕。</li>\n<li><font color='cornflowerblue'>CyclicBarrier（循环栅栏）</font></li>\n</ul>\n<h4 id=\"semaphore信号量\"><a class=\"anchor\" href=\"#semaphore信号量\">#</a> Semaphore（信号量）</h4>\n<blockquote>\n<p><strong>共享式</strong>的资源访问方式</p>\n</blockquote>\n<h5 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h5>\n<p><strong> <code>Semaphore</code>  (信号量) 是共享锁，默认构造 AQS 的  <code>state</code>  值为  <code>permits</code> ，理解为许可证的数量，只有拿到许可证的线程才能执行</strong>。</p>\n<p>Semaphore 的使用简单，我们这里假设有 N (N&gt;5) 个线程来获取  <code>Semaphore</code>  中的共享资源。下面的代码将  <code>permits</code>  初始化为 5，表示同一时刻只有 5 个线程能获取到共享资源，其他线程都会阻塞，只有获取到共享资源的线程才能执行。等到有线程释放了共享资源，其他阻塞的线程才能获取到。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始共享资源数量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token class-name\">Semaphore</span> semaphore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 获取 1 个许可</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 释放 1 个许可</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><font color='red'>当初始的  <code>permits</code>  为 1 的时候， <code>Semaphore</code>  退化为独占锁</font>。</p>\n<p><code>Semaphore</code>  有两种模式：</p>\n<ul>\n<li><font color='cornflowerblue'>公平模式</font>：调用  <code>acquire()</code>  方法的顺序就是获取许可证的顺序，遵循 <font color='red'>FIFO</font></li>\n<li><font color='cornflowerblue'>非公平模式</font>：<font color='red'>抢占式</font>，也是<font color='red'>默认</font>的模式。</li>\n</ul>\n<p><strong> <code>Semaphore</code>  的两个构造方法如下，二者都必须提供  <code>permits</code>  ，其中第二个构造方法可以通过提供  <code>fair</code>  指定是公平模式 / 非公平模式，默认非公平模式。</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token keyword\">permits</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \tsync <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NonfairSync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">permits</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token keyword\">permits</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> fair<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  \tsync <span class=\"token operator\">=</span> fair <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FairSync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">permits</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NonfairSync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">permits</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Semaphore</code>  通常用于那些对资源有明确访问数量限制的场景比如限流（仅限于单机模式，<font color='red'>实际项目中推荐使用 Redis +Lua 来做限流</font>）。</p>\n<h5 id=\"原理-2\"><a class=\"anchor\" href=\"#原理-2\">#</a> 原理</h5>\n<p>线程调用  <code>semaphore.acquire()</code>  尝试获取许可证，</p>\n<ul>\n<li>如果  <code>permits &gt;= 0</code>  的话，则表示可以获取成功。使用<font color='red'> CAS 操作</font>去修改  <code>permits</code>  的值减 1。</li>\n<li>如果  <code>permits &lt; 0</code>  的话，则表示许可证数量不足。此时会<font color='red'>创建一个 Node 节点加入 CLH 队列锁，挂起当前线程</font>。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> *  获取 1 个许可证</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> \t sync<span class=\"token punctuation\">.</span><span class=\"token function\">acquireSharedInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 共享模式下获取许可证，获取成功则返回，失败则加入阻塞队列，挂起线程</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">acquireSharedInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 尝试获取许可证，arg 为获取许可证个数，当可用许可证数减当前获取的许可证数结果小于 0, 则创建一个节点加入阻塞队列，挂起当前线程。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tryAcquireShared</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function\">doAcquireSharedInterruptibly</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>线程调用  <code>semaphore.release()</code>  尝试释放许可证，</p>\n<ul>\n<li>并使用<font color='red'> CAS 操作</font>去修改  <code>permits</code>  的值加 1。</li>\n<li>释放许可证成功之后，同时会<font color='red'>唤醒 CLH 队列锁 中的一个线程</font>。</li>\n<li>被唤醒的线程会重新尝试获取许可证，修改  <code>permits</code>  的值减 1，\n<ul>\n<li>如果  <code>permits &gt;= 0</code>  则获取令牌成功</li>\n<li>如果  <code>permits &lt; 0</code>  则重新进入阻塞队列，挂起线程</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 释放一个许可证</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  \tsync<span class=\"token punctuation\">.</span><span class=\"token function\">releaseShared</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 释放共享锁，同时会唤醒同步队列中的一个线程。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">releaseShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 释放共享锁</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tryReleaseShared</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 唤醒同步队列中的一个线程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">doReleaseShared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"countdownlatch倒计时器\"><a class=\"anchor\" href=\"#countdownlatch倒计时器\">#</a> CountDownLatch（倒计时器）</h4>\n<blockquote>\n<p><strong>共享式</strong>的资源访问方式</p>\n</blockquote>\n<h5 id=\"简介-3\"><a class=\"anchor\" href=\"#简介-3\">#</a> 简介</h5>\n<p><strong> <code>CountDownLatch</code> （倒计时器）是共享锁，默认构造 AQS 的  <code>state</code>  值为  <code>count</code> ，理解为允许  <code>count</code>  个线程阻塞在一个地方，直至所有线程的任务都执行完毕</strong>。</p>\n<p><code>CountDownLatch</code>  是 **<font color='red'>一次性</font>** 的，<font color='red'> <code>count</code>  只能在构造方法中初始化一次，之后没有任何机制再次对其设置值</font>，当  <code>CountDownLatch</code>  使用完毕后，它不能再次被使用。</p>\n<h5 id=\"原理-3\"><a class=\"anchor\" href=\"#原理-3\">#</a> 原理</h5>\n<ul>\n<li>\n<p>当线程调用  <code>countDown()</code>  方法时，其实调用了  <code>tryReleaseShared()</code>  方法以 CAS 的操作来减少  <code>count</code> ，直至  <code>count</code>  为 0</p>\n</li>\n<li>\n<p>当调用  <code>await()</code>  方法的时候，如果  <code>count</code>  不为 0，那就证明任务还没有执行完毕， <code>await()</code>  方法就会一直阻塞。也就是说  <code>await()</code>  方法之后的语句不会被执行。</p>\n</li>\n<li>\n<p>直到  <code>count</code>  个线程调用了  <code>countDown()</code> ，使  <code>count</code>  值被减为 0。或者调用  <code>await()</code>  的线程被中断，该线程才会从阻塞中被唤醒， <code>await()</code>  方法之后的语句得到执行。</p>\n</li>\n</ul>\n<h5 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h5>\n<p><code>CountDownLatch</code>  的作用就是允许 count 个线程阻塞在一个地方，直至所有线程的任务都执行完毕。之前在项目中，有一个<font color='red'>使用多线程读取多个文件</font>处理的场景，我用到了  <code>CountDownLatch</code>  。具体场景是下面这样的：</p>\n<p>我们要读取处理 6 个文件，这 6 个任务都是<font color='red'>没有执行顺序依赖</font>的任务，但是我们需要返回给用户的时候将这几个文件的处理结果进行统计整理。</p>\n<p>为此我们定义了一个线程池和 count 为 6 的  <code>CountDownLatch</code>  对象 。</p>\n<ul>\n<li>使用线程池处理读取任务</li>\n<li>每一个线程处理完，调用  <code>CountDownLatch</code>  对象的  <code>countDown()</code>  将 count 减 1</li>\n<li>当所有线程处理完，调用  <code>CountDownLatch</code>  对象的  <code>await()</code>  方法。直到所有文件读取完之后，才会接着执行后面的逻辑。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CountDownLatchExample1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 处理文件的数量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> threadCount <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 创建一个具有固定线程数量的线程池对象（推荐使用构造方法创建）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> threadPool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">CountDownLatch</span> countDownLatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span>threadCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> threadCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> threadnum <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token comment\">// 处理文件的业务操作</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token comment\">//......</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token comment\">// 表示一个文件已经被完成</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    countDownLatch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        countDownLatch<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<p>有没有可以改进的地方呢？** 可以使用  <code>CompletableFuture</code>  类来改进！**Java8 的  <code>CompletableFuture</code>  提供了很多对多线程友好的方法，使用它可以很方便地为我们编写多线程程序，什么异步、串行、并行或者等待所有线程执行完任务什么的都非常方便。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> task1 <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">supplyAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 自定义业务操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> task6 <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">supplyAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 自定义业务操作</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> headerFuture<span class=\"token operator\">=</span><span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">allOf</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>task6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    headerFuture<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//......</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all done. \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面的代码还可以继续优化，当任务过多的时候，把每一个 task 都列出来不太现实，可以考虑<font color='red'>通过循环来添加任务</font>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 文件夹位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> filePaths <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 异步处理所有文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> fileFutures <span class=\"token operator\">=</span> filePaths<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>filePath <span class=\"token operator\">-></span> <span class=\"token function\">doSomeThing</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 将他们合并起来</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> allFutures <span class=\"token operator\">=</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">allOf</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    fileFutures<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">[</span>fileFutures<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"cyclicbarrier循环栅栏\"><a class=\"anchor\" href=\"#cyclicbarrier循环栅栏\">#</a> CyclicBarrier（循环栅栏）</h4>\n<blockquote>\n<p><strong>共享式</strong>的资源访问方式</p>\n</blockquote>\n<h5 id=\"简介-4\"><a class=\"anchor\" href=\"#简介-4\">#</a> 简介</h5>\n<p><strong> <code>CyclicBarrier</code> （循环栅栏）和  <code>CountDownLatch</code>  非常类似，也是共享锁，内部通过一个  <code>count</code>  变量作为计数器，其初始值也是  <code>parties</code>  属性（表示拦截的线程数量）的初始值</strong>。</p>\n<p><code>CyclicBarrier</code>  也可以实现线程间的技术等待，但是它的功能比  <code>CountDownLatch</code>  更加复杂和强大，主要应用场景类似。</p>\n<blockquote>\n<p><code>CountDownLatch</code>  的实现是基于 AQS 的，而 <strong> <code>CycliBarrier</code>  是基于  <code>ReentrantLock</code> ( <code>ReentrantLock</code>  也属于 AQS 同步器) 和  <code>Condition</code>  的</strong>。</p>\n</blockquote>\n<p><code>CyclicBarrier</code>  的字面意思是<font color='red'>可循环使用（Cyclic）的屏障（Barrier）</font>。它要做的事情是：让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。</p>\n<h5 id=\"原理-4\"><a class=\"anchor\" href=\"#原理-4\">#</a> 原理</h5>\n<blockquote>\n<p>难！</p>\n</blockquote>\n<p>每当一个线程到了栅栏这里了，那么就将 count 减 1。当 count 值为 0 时，表示这是这一代最后一个线程到达栅栏，就尝试执行我们构造方法中输入的任务。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 每次拦截的线程数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> parties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 计数器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>结合源码来简单看看。</p>\n<p>1、 <code>CyclicBarrier</code>  默认的构造方法是  <code>CyclicBarrier(int parties)</code> ，参数  <code>parties</code>  表示屏障拦截的线程数量，每个线程调用  <code>await()</code>  方法告诉  <code>CyclicBarrier</code>  我已经到达了屏障，然后当前线程被阻塞。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">CyclicBarrier</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>parties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">CyclicBarrier</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parties<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Runnable</span> barrierAction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parties <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parties <span class=\"token operator\">=</span> parties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> parties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>barrierCommand <span class=\"token operator\">=</span> barrierAction<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中，<strong> <code>parties</code>  就代表了需要拦截的线程数量，当拦截的线程数量达到这个值的时候就打开栅栏，让所有线程通过</strong>。</p>\n<p>2、当调用  <code>CyclicBarrier</code>  对象调用  <code>await()</code>  方法时，实际上调用的是   <code>dowait(false, 0L)</code>  方法。 <code>await()</code>  方法就像树立起一个栅栏的行为一样，将线程挡住了，当拦住的线程数量达到  <code>parties</code>  的值时，栅栏才会打开，线程才得以通过执行。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BrokenBarrierException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t<span class=\"token keyword\">return</span> <span class=\"token function\">dowait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeoutException</span> toe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   \t <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>toe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// cannot happen</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>dowait(false, 0L)</code>  方法源码分析如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 当线程数量或者请求数量达到 count 时 await 之后的方法才会被执行。上面的示例中 count 的值就为 5。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * Main barrier code, covering the various policies.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">dowait</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> timed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> nanos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BrokenBarrierException</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>               <span class=\"token class-name\">TimeoutException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 锁住</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">Generation</span> g <span class=\"token operator\">=</span> generation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>broken<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BrokenBarrierException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 如果线程中断了，抛出异常</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token function\">breakBarrier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">//cout 减 1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">--</span>count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 当 count 数量减为 0 之后说明最后一个线程已经到达栅栏了，也就是达到了可以执行 await 方法之后的条件</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// tripped</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">boolean</span> ranAction <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Runnable</span> command <span class=\"token operator\">=</span> barrierCommand<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        command<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    ranAction <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token comment\">// 将 count 重置为 parties 属性的初始化值</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token comment\">// 唤醒之前等待的线程</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token comment\">// 下一波执行开始</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token function\">nextGeneration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ranAction<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        <span class=\"token function\">breakBarrier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// loop until tripped, broken, interrupted, or timed out</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                        trip<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nanos <span class=\"token operator\">></span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                        nanos <span class=\"token operator\">=</span> trip<span class=\"token punctuation\">.</span><span class=\"token function\">awaitNanos</span><span class=\"token punctuation\">(</span>nanos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> ie<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">==</span> generation <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span> g<span class=\"token punctuation\">.</span>broken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                        <span class=\"token function\">breakBarrier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        <span class=\"token keyword\">throw</span> ie<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        <span class=\"token comment\">// We're about to finish waiting even if we had not</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                        <span class=\"token comment\">// been interrupted, so this interrupt is deemed to</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                        <span class=\"token comment\">// \"belong\" to subsequent execution.</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>broken<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BrokenBarrierException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">!=</span> generation<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timed <span class=\"token operator\">&amp;&amp;</span> nanos <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                    <span class=\"token function\">breakBarrier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"面试题aqs-的底层原理是什么\"><a class=\"anchor\" href=\"#面试题aqs-的底层原理是什么\">#</a> 【面试题】AQS 的底层原理是什么？</h3>\n<blockquote>\n<p>互联网、美团 / 阿里、后端、Java。</p>\n</blockquote>\n<p>**AQS（AbstractQueuedSynchronizer，抽象队列同步器）** 的底层是通过 Java 中的<font color='red'>  <code>Lock</code>  接口和  <code>Condition</code>  接口</font>实现的。AQS 是一个抽象类，提供了一种灵活的机制来<font color='red'>实现线程间的同步和互斥操作</font>。它提供了两种同步模式：<font color='cornflowerblue'>独占模式（Exclusive）</font>和<font color='cornflowerblue'>共享模式（Shared）</font>。</p>\n<p>在 AQS 的底层实现中，主要使用了一个 ** 虚拟的双向 FIFO 队列（CLH 队列锁）** 来维护等待获取锁的线程队列。当一个线程请求获取锁时，如果锁已经被其他线程占用，则该线程会被加入到队列中，并进入等待状态。当持有锁的线程释放锁时，AQS 会从队列中选择一个线程唤醒并允许其获取锁。</p>\n<p>AQS 还提供了一些核心的方法，如 acquire 、 release 和 tryAcquire 等，用于实现具体的同步操作。这些方法通过内置的 ** 状态变量（state）** 来记录锁的状态，并根据不同的情况进行相应的操作。</p>\n<h3 id=\"讲讲你对-aqs-的理解\"><a class=\"anchor\" href=\"#讲讲你对-aqs-的理解\">#</a> 讲讲你对 AQS 的理解</h3>\n<p>AQS（AbstractQueuedSynchronizer）是 Java 并发包中一个重要的工具类，它<font color='red'>提供了实现锁、同步器的基础框架</font>。</p>\n<ol>\n<li>AQS 是一个<strong>抽象类</strong>，它定义了锁和同步器的基本接口和方法。它的子类可以通过继承 AQS 并重写其中的方法来实现自定义的同步器。</li>\n<li>AQS 通过一个 ** 状态变量（state）** 来表示锁的状态。state 的具体含义对于不同的同步器会有不同的解释，例如，ReentrantLock 中 的 state 表示持有锁的线程数量。</li>\n<li><font color='red'>AQS 使用一个 ** 双向队列（CLH 队列锁）** 来管理等待获取资源的线程</font>。每个等待线程会被包装成一个 &quot;Node&quot; 对象，并且会按照一定的顺序排队。</li>\n<li>AQS <font color='red'>提供了两个主要的方法： <code>acquire()</code>  和  <code>release()</code> </font>。\n<ul>\n<li>acquire () 方法用于获取资源，而 release () 方法用于释放资源。</li>\n<li>当一个线程调用 acquire () 方法时，如果资源已经被其他线程占用，那么该线程将会被加入到 CLH 队列 中进行等待。</li>\n</ul>\n</li>\n<li><font color='red'>Condition 是 AQS 的一个补充接口，它提供了更为细粒度的等待 / 通知机制</font>。Condition 对象可以通过 AQS 的 newCondition () 方法创建。Condition 底层的实现依赖于 AQS ，并且使用 AQS 队列来管理等待线程。</li>\n<li><font color='red'>Condition 的底层原理是基于 AQS 的状态和 CLH 队列</font>。当一个线程调用 Condition 的 await 方法时，该线程会释放持有的 AQS 状态（比如锁），并且进入 Condition 维护的等待队列中等待通知。当另一个线程执行相应的通知操作时，被唤醒的线程可以重新竞争资源。</li>\n</ol>\n<p>总的来说，</p>\n<ul>\n<li>AQS 是 Java 并发包中实现锁和同步器的基础框架。它使用一个双向队列来管理等待获取资源的线程，并提供 acquire 和 release 等方法来获取和释放资源。</li>\n<li>Condition 是 AQS 的补充接口，提供了更为细粒度的等待 / 通知机制。Condition 底层的实现依赖于 AQS 的状态和 CLH 队列。</li>\n</ul>\n<h2 id=\"reentrantlock-类\"><a class=\"anchor\" href=\"#reentrantlock-类\">#</a> ReentrantLock 类</h2>\n<blockquote>\n<p><strong>可重入</strong>式的<strong>独占锁</strong>（悲观锁）</p>\n</blockquote>\n<h3 id=\"简介-5\"><a class=\"anchor\" href=\"#简介-5\">#</a> 简介</h3>\n<p><code>ReentrantLock</code>  实现了  <code>Lock</code>  接口，是一个<font color='red'>可重入</font>且<font color='red'>独占式</font>的锁，和  <code>synchronized</code>  关键字类似。不过， <code>ReentrantLock</code>  更灵活、更强大，增加了<font color='red'>轮询、超时、中断、公平锁和非公平锁</font>等高级功能。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReentrantLock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Lock</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>ReentrantLock</code>  里面有一个<strong>继承自 AQS（ <code>AbstractQueuedSynchronizer</code> ）的内部类  <code>Sync</code> </strong>，添加锁和释放锁的大部分操作实际上都是其中实现的。 <code>Sync</code>  有两个子类：</p>\n<ul>\n<li><font color='cornflowerblue'>公平锁  <code>FairSync</code>  </font></li>\n<li><font color='cornflowerblue'>非公平锁  <code>NonfairSync</code>  </font></li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/reentrantlock-class-diagram.png\" alt=\"img\" /></p>\n<p><font color='red'> <code>ReentrantLock</code>  默认使用非公平锁</font>，也可以通过构造器来显式的指定使用公平锁。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 传入一个 boolean 值，true 时为公平锁，false 时为非公平锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> fair<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sync <span class=\"token operator\">=</span> fair <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FairSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NonfairSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从上面的内容可以看出， <code>ReentrantLock</code>  的底层就是由 AQS 来实现的。</p>\n<h3 id=\"公平锁和非公平锁有什么区别\"><a class=\"anchor\" href=\"#公平锁和非公平锁有什么区别\">#</a> 公平锁和非公平锁有什么区别？</h3>\n<p><strong>公平锁</strong>:</p>\n<ul>\n<li>锁被释放之后，<strong><font color='red'>先申请的线程先得到锁</font></strong>。</li>\n<li><font color='red'>性能较差一些</font>，因为公平锁为了保证时间上的绝对顺序，上下文切换更频繁。</li>\n</ul>\n<p><strong>非公平锁</strong>：</p>\n<ul>\n<li>锁被释放之后，<strong><font color='red'>后申请的线程可能会先获取到锁</font></strong>，是随机或者按照其他优先级排序的。</li>\n<li><font color='red'>性能更好</font>，但可能会导致某些线程永远无法获取到锁。</li>\n<li>例如： <code>synchronized</code></li>\n</ul>\n<h3 id=\"synchronized-和-reentrantlock-有何异同\"><a class=\"anchor\" href=\"#synchronized-和-reentrantlock-有何异同\">#</a> synchronized 和 ReentrantLock 有何异同？</h3>\n<h4 id=\"都是可重入锁\"><a class=\"anchor\" href=\"#都是可重入锁\">#</a> 都是可重入锁</h4>\n<p><strong>可重入锁</strong>也叫递归锁，是指<font color='red'>线程可以再次获取自己的内部锁</font>。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，<font color='red'>如果是不可重入锁的话，就会造成死锁</font>。</p>\n<p>JDK 提供的所有现成的  <code>Lock</code>  实现类，包括  <code>synchronized</code>  关键字锁都是可重入的。</p>\n<hr />\n<p>在下面的代码中， <code>method1()</code>  和  <code>method2()</code>  都被  <code>synchronized</code>  关键字修饰， <code>method1()</code>  调用了 <code>method2()</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SynchronizedDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>由于  <code>synchronized</code>  锁是可重入的，同一个线程在调用  <code>method1()</code>  时可以直接获得当前对象的锁，执行  <code>method2()</code>  的时候可以再次获取这个对象的锁，不会产生死锁问题。假如 <code>synchronized</code>  是不可重入锁的话，由于该对象的锁已被当前线程所持有且无法释放，这就导致线程在执行  <code>method2()</code>  时获取锁失败，会出现死锁问题。</p>\n<h4 id=\"synchronized-依赖于-jvm而-reentrantlock-依赖于-api\"><a class=\"anchor\" href=\"#synchronized-依赖于-jvm而-reentrantlock-依赖于-api\">#</a> synchronized 依赖于 JVM，而 ReentrantLock 依赖于 API</h4>\n<p><code>synchronized</code>  是依赖于 JVM 实现的，前面我们也讲到了虚拟机团队在 JDK1.6 为  <code>synchronized</code>  关键字进行了很多优化，但是<font color='red'>这些优化都是在虚拟机层面实现的</font>，并没有直接暴露给我们。</p>\n<p><code>ReentrantLock</code>  是 JDK 层面实现的（也就是<font color='red'> API 层面，需要 lock () 和 unlock () 方法配合 try/finally 语句块来完成</font>），所以我们可以通过查看它的源代码，来看它是如何实现的。</p>\n<h4 id=\"reentrantlock-比-synchronized-增加了一些高级功能\"><a class=\"anchor\" href=\"#reentrantlock-比-synchronized-增加了一些高级功能\">#</a> ReentrantLock 比 synchronized 增加了一些高级功能</h4>\n<p>相比  <code>synchronized</code> ， <code>ReentrantLock</code>  增加了一些高级功能。主要来说主要有三点：</p>\n<ul>\n<li><strong>等待可中断</strong> :  <code>ReentrantLock</code>  提供了一种能够中断等待锁的线程的机制，通过  <code>lock.lockInterruptibly()</code>  来实现这个机制。也就是说<font color='red'>正在等待的线程可以选择放弃等待，改为处理其他事情</font>。</li>\n<li><strong>可实现公平锁</strong> :  <code>ReentrantLock</code>  可以指定是公平锁还是非公平锁。<font color='red'>而 <code>synchronized</code>  只能是非公平锁</font>。所谓的公平锁就是先等待的线程先获得锁。 <code>ReentrantLock</code>  默认情况是非公平的，可以通过  <code>ReentrantLock</code>  类的 <code>ReentrantLock(boolean fair)</code>  构造方法来指定是否是公平的。</li>\n<li><strong>可实现选择性通知（锁可以绑定多个条件）</strong>:  <code>synchronized</code>  关键字与 <code>wait()</code>  和 <code>notify()</code> / <code>notifyAll()</code>  方法相结合可以实现等待 / 通知机制。 <code>ReentrantLock</code>  类当然也可以实现，但是需要借助于 <code>Condition</code>  接口与 <code>newCondition()</code>  方法。</li>\n</ul>\n<p>关于  <code>Condition</code>  接口的补充：</p>\n<blockquote>\n<p><code>Condition</code>  接口是 JDK1.5 之后才有的，它具有很好的灵活性，比如可以实现多路通知功能。也就是在一个 <code>Lock</code>  对象中可以创建多个 <code>Condition</code>  实例（即对象监视器），<strong>线程对象可以注册在指定的 <code>Condition</code>  中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用 <code>notify()/notifyAll()</code>  方法进行通知时，被通知的线程是由 JVM 选择的，用 <code>ReentrantLock</code>  类结合 <code>Condition</code>  实例可以实现 “选择性通知”</strong> ，这个功能非常重要，而且是  <code>Condition</code>  接口默认提供的。</p>\n<p>而 <code>synchronized</code>  关键字就相当于整个  <code>Lock</code>  对象中只有一个 <code>Condition</code>  实例，所有的线程都注册在它一个身上。如果执行 <code>notifyAll()</code>  方法的话就会通知所有处于等待状态的线程，这样会造成很大的效率问题。而 <code>Condition</code>  实例的 <code>signalAll()</code>  方法，只会唤醒注册在该 <code>Condition</code>  实例中的所有等待线程。</p>\n</blockquote>\n<h3 id=\"可中断锁和不可中断锁有什么区别\"><a class=\"anchor\" href=\"#可中断锁和不可中断锁有什么区别\">#</a> 可中断锁和不可中断锁有什么区别？</h3>\n<blockquote>\n<p>等待可中断</p>\n</blockquote>\n<p><strong>可中断锁</strong>：获取锁的过程中可以被中断，不需要一直等到获取锁之后 才能进行其他逻辑处理。 <code>ReentrantLock</code>  就属于是可中断锁。</p>\n<p><strong>不可中断锁</strong>：一旦线程申请了锁，就只能等到拿到锁以后才能进行其他的逻辑处理。  <code>synchronized</code>  就属于是不可中断锁。</p>\n<h3 id=\"介绍下-reentrantlock-的底层原理可重入-公平锁和非公平锁的原理\"><a class=\"anchor\" href=\"#介绍下-reentrantlock-的底层原理可重入-公平锁和非公平锁的原理\">#</a> 介绍下 ReentrantLock 的底层原理（可重入、公平锁和非公平锁的原理）</h3>\n<ol>\n<li>可重入的原理：<font color='red'>ReentrantLock 通过一个计数器（<strong>状态变量 state</strong>）来记录锁的持有线程数</font>。当一个线程第一次获取锁时，计数器加 1，当该线程再次获取锁时，计数器再次加 1。当线程释放锁时，计数器减 1。只有当计数器值为 0 时，表示锁完全释放，其他线程可以获取该锁。</li>\n<li>公平锁和非公平锁的原理：ReentrantLock 提供了公平锁（ <code>FairSync</code> ）和非公平锁（ <code>NonfairSync</code> ）两种模式。</li>\n</ol>\n<ul>\n<li>公平锁模式：当多个线程等待获取锁时，<font color='red'>按照线程的申请顺序来获取锁</font>。即先到先得的原则，保证等待时间越久的线程越早获取锁。</li>\n<li>非公平锁模式：当多个线程等待获取锁时，不按照线程的申请顺序来获取锁。即存在一个竞争机制，<font color='red'>新来的线程有机会抢占锁</font>，这样可以提高吞吐量。</li>\n</ul>\n<ol start=\"3\">\n<li>在底层实现上，公平锁和非公平锁的区别在于线程获取锁的方式：</li>\n</ol>\n<ul>\n<li>公平锁先检查队列中是否有正在等待的线程，如果有，则按照 FIFO 的顺序选择锁的持有者。</li>\n<li>非公平锁先尝试直接获取锁，\n<ul>\n<li>如果失败，则再进入同步队列等待。</li>\n<li>如果失败，则进入队列等待，但在这个等待过程中，可能会允许新来的线程抢占锁。</li>\n</ul>\n</li>\n</ul>\n<p>总结：</p>\n<ul>\n<li>ReentrantLock 通过计数器实现可重入的机制，保证同一个线程可以多次获取同一个锁。</li>\n<li>公平锁和非公平锁的区别在于锁的获取方式，公平锁按照线程等待的顺序进行获取，而非公平锁允许在锁释放时新来的线程有机会优先获取锁。</li>\n</ul>\n<h1 id=\"线程池\"><a class=\"anchor\" href=\"#线程池\">#</a> 线程池</h1>\n<h2 id=\"线程池-2\"><a class=\"anchor\" href=\"#线程池-2\">#</a> 线程池</h2>\n<h3 id=\"简介-6\"><a class=\"anchor\" href=\"#简介-6\">#</a> 简介</h3>\n<p>顾名思义，线程池就是<strong>管理一系列线程的资源池</strong>。当有任务要处理时，直接从线程池中获取线程来处理，<font color='red'>处理完之后线程并不会立即被销毁，而是等待下一个任务</font>。</p>\n<p>池化技术的主要思想：<strong>为了减少每次获取资源的消耗</strong>，提高对资源的利用率。</p>\n<p>借用《Java 并发编程的艺术》来说一下<font color='red'>使用线程池的好处</font>：</p>\n<ul>\n<li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>\n<li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li>\n<li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li>\n</ul>\n<h3 id=\"executor-框架\"><a class=\"anchor\" href=\"#executor-框架\">#</a> Executor 框架</h3>\n<h4 id=\"简介-7\"><a class=\"anchor\" href=\"#简介-7\">#</a> 简介</h4>\n<p><code>Executor</code>  框架是 Java5 之后引进的，<font color='red'>通过  <code>Executor</code>  来启动线程比使用  <code>Thread</code>  的  <code>start</code>  方法更好</font>。除了更易管理，效率更好（<font color='red'>用线程池实现，节约开销</font>）外，还有关键的一点：<strong><font color='red'>有助于避免 this 逃逸问题</font></strong>。</p>\n<blockquote>\n<p><strong>this 逃逸</strong>：在构造函数返回之前，其他线程就持有该对象的引用，调用尚未构造完全的对象的方法，可能引发令人疑惑的错误。</p>\n</blockquote>\n<p><code>Executor</code>  框架不仅包括了<font color='red'>线程池的管理</font>，还提供了<font color='red'>线程工厂、队列、拒绝策略</font>等， <code>Executor</code>  框架让并发编程变得更加简单。</p>\n<h4 id=\"三大部分\"><a class=\"anchor\" href=\"#三大部分\">#</a> 三大部分</h4>\n<h5 id=\"任务runnablecallable\"><a class=\"anchor\" href=\"#任务runnablecallable\">#</a> 任务（ <code>Runnable</code> / <code>Callable</code> ）</h5>\n<p>执行任务需要实现 <strong> <code>Runnable</code>  接口</strong> 或 <strong> <code>Callable</code>  接口</strong>，对应的实现类可以被 <strong> <code>ThreadPoolExecutor</code> </strong> 或 <strong> <code>ScheduledThreadPoolExecutor</code> </strong> 执行。</p>\n<h5 id=\"任务的执行executor\"><a class=\"anchor\" href=\"#任务的执行executor\">#</a> 任务的执行（ <code>Executor</code> ）</h5>\n<p>如下图所示，包括任务执行机制的核心接口  <code>Executor</code> ，以及继承自它的  <code>ExecutorService</code>  接口。</p>\n<p><strong> <code>ThreadPoolExecutor</code>  和  <code>ScheduledThreadPoolExecutor</code>  是两个关键的实现类。</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/executor-class-diagram.png\" alt=\"img\" /></p>\n<p><code>ThreadPoolExecutor</code>  类描述：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//AbstractExecutorService 类实现了 ExecutorService 接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPoolExecutor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractExecutorService</span></pre></td></tr></table></figure><p><code>ScheduledThreadPoolExecutor</code>  类描述:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ScheduledExecutorService 继承 ExecutorService 接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ThreadPoolExecutor</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ScheduledExecutorService</span></pre></td></tr></table></figure><h5 id=\"异步计算的结果future\"><a class=\"anchor\" href=\"#异步计算的结果future\">#</a> 异步计算的结果（ <code>Future</code> ）</h5>\n<p><strong> <code>Future</code>  接口</strong>及<strong>其实现类 <code>FutureTask</code>  类</strong>都可以代表异步计算的结果。</p>\n<p>当我们把  <code>Runnable</code>  接口或  <code>Callable</code>  接口的实现类提交给  <code>ThreadPoolExecutor</code>  或  <code>ScheduledThreadPoolExecutor</code>  执行时，在内部调用  <code>submit()</code>  方法时会返回一个  <code>FutureTask</code>  对象。</p>\n<h4 id=\"如何使用-2\"><a class=\"anchor\" href=\"#如何使用-2\">#</a> 如何使用</h4>\n<p><code>Executor</code>  框架的使用示意图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231020143912018.png\" alt=\"image-20231020143912018\" /></p>\n<ol>\n<li>\n<p>主线程首先要创建实现了  <code>Runnable</code>  接口或者  <code>Callable</code>  接口的任务对象。</p>\n</li>\n<li>\n<p>把创建完成的实现了  <code>Runnable</code>  /  <code>Callable</code>  接口的对象直接交给  <code>ExecutorService</code>  的  <code>execute()</code>  或者  <code>submit()</code>  执行。</p>\n<blockquote>\n<p>由于  <code>FutureTask</code>  实现了  <code>Runnable</code> ，我们也可以直接创建  <code>FutureTask</code> ，然后交给  <code>ExecutorService</code>  执行。</p>\n</blockquote>\n</li>\n<li>\n<p>如果执行的是  <code>ExecutorService.submit（）</code> ，将返回一个实现了  <code>Future</code>  接口的  <code>FutureTask</code>  对象。</p>\n</li>\n<li>\n<p>最后，主线程可以执行  <code>FutureTask.get()</code>  方法来等待任务执行完成。主线程也可以执行  <code>FutureTask.cancel（boolean mayInterruptIfRunning）</code> 来取消此任务的执行。</p>\n</li>\n</ol>\n<h3 id=\"threadpoolexecutor-类\"><a class=\"anchor\" href=\"#threadpoolexecutor-类\">#</a> <mark>ThreadPoolExecutor 类</mark></h3>\n<blockquote>\n<p>线程池实现类  <code>ThreadPoolExecutor</code>  是  <code>Executor</code>  框架最核心的类。</p>\n</blockquote>\n<h4 id=\"构造方法\"><a class=\"anchor\" href=\"#构造方法\">#</a> 构造方法</h4>\n<p><code>ThreadPoolExecutor</code>  类中提供的<font color='red'>四个构造方法</font>。我们来看最长的那个，其余三个都是在这个构造方法的基础上产生（其他几个构造方法说白点都是给定某些默认参数的构造方法，比如默认制定拒绝策略是什么）。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 用给定的初始参数创建一个新的 ThreadPoolExecutor。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span><span class=\"token comment\">// 线程池的核心线程数量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                              <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span><span class=\"token comment\">// 线程池的最大线程数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                              <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span><span class=\"token comment\">// 当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                              <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span><span class=\"token comment\">// 时间单位</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                              <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> workQueue<span class=\"token punctuation\">,</span><span class=\"token comment\">// 任务队列，用来储存等待执行任务的队列</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                              <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">,</span><span class=\"token comment\">// 线程工厂，用来创建线程，一般默认即可</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                              <span class=\"token class-name\">RejectedExecutionHandler</span> handler<span class=\"token comment\">// 拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                               <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>corePoolSize <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            maximumPoolSize <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            maximumPoolSize <span class=\"token operator\">&lt;</span> corePoolSize <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            keepAliveTime <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workQueue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> threadFactory <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> handler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>corePoolSize <span class=\"token operator\">=</span> corePoolSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maximumPoolSize <span class=\"token operator\">=</span> maximumPoolSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>workQueue <span class=\"token operator\">=</span> workQueue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keepAliveTime <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>keepAliveTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threadFactory <span class=\"token operator\">=</span> threadFactory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"常见参数\"><a class=\"anchor\" href=\"#常见参数\">#</a> <mark>常见参数</mark></h4>\n<p><code>ThreadPoolExecutor</code>  3 个最重要的参数：</p>\n<ul>\n<li><strong> <code>corePoolSize</code>  :</strong> <font color='gree'>核心线程数量</font>。<font color='red'>当任务队列未达到队列容量时</font>，最大可以同时运行的线程数量。</li>\n<li><strong> <code>maximumPoolSize</code> </strong> : <font color='gree'>最大线程数量</font>。<font color='red'>任务队列中存放的任务达到队列容量的时候</font>，当前可以同时运行的线程数量变为最大线程数。</li>\n<li><strong> <code>workQueue</code> </strong>：<font color='gree'>任务队列</font>。新任务来的时候会先判断<font color='red'>当前运行的线程数量是否达到核心线程数</font>，如果达到的话，新任务就会被存放在队列中。</li>\n</ul>\n<p>其他常见参数:</p>\n<ul>\n<li><strong> <code>keepAliveTime</code> </strong>：<font color='gree'>当线程数大于  <code>corePoolSize</code>  时，多余的空闲线程存活的最长时间</font>。\n<ul>\n<li>当线程池中的线程数量大于  <code>corePoolSize</code>  时，如果这时没有新的任务提交，多余的空闲线程不会立即销毁，而是会等待，直到等待的时间超过了  <code>keepAliveTime</code>  才会被回收销毁。</li>\n<li>线程池回收线程时，会对核心线程和非核心线程一视同仁，直到线程池中线程的数量等于  <code>corePoolSize</code>  ，回收过程才会停止。</li>\n</ul>\n</li>\n<li><strong> <code>unit</code> </strong>： <code>keepAliveTime</code>  参数的<font color='gree'>时间单位</font>。</li>\n<li><strong> <code>threadFactory</code> </strong> :<font color='gree'>线程工厂</font>，用来创建线程，一般默认即可。</li>\n<li><strong> <code>handler</code> </strong>：<font color='gree'>饱和策略</font>。当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务。</li>\n</ul>\n<p>对线程池中各个参数的相互关系的理解：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231018163149255.png\" alt=\"image-20231018163149255\" /></p>\n<h4 id=\"饱和策略\"><a class=\"anchor\" href=\"#饱和策略\">#</a> 饱和策略</h4>\n<p>如果当前同时运行的线程数量达到  <code>maximumPoolSize</code> ，并且  <code>workQueue</code>  也被放满任务时， <code>ThreadPoolTaskExecutor</code>  定义一些策略：</p>\n<ul>\n<li>ThreadPoolExecutor.<strong> <code>AbortPolicy</code> </strong>：<font color='red'>默认的饱和策略</font>。抛出  <code>RejectedExecutionException</code>  异常来<font color='gree'>拒绝新任务的处理</font>。</li>\n<li>ThreadPoolExecutor.<strong> <code>CallerRunsPolicy</code> </strong>：它既<font color='gree'>不会抛弃任务</font>，也不会抛出异常，而是<font color='gree'>将任务回退给调用者，使用调用者的线程来执行任务</font>。直接在调用 <code>execute</code>  方法的调用者线程中运行 ( <code>run</code> ) 任务。如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。</li>\n<li>ThreadPoolExecutor.<strong> <code>DiscardPolicy</code> </strong>：不处理新任务，<font color='gree'>直接丢弃掉</font>。</li>\n<li>ThreadPoolExecutor.<strong> <code>DiscardOldestPolicy</code> </strong>：此策略将<font color='gree'>丢弃最早的未处理的任务请求</font>。</li>\n</ul>\n<hr />\n<p>举个例子：</p>\n<p>Spring 通过  <code>ThreadPoolTaskExecutor</code>  或者我们直接通过  <code>ThreadPoolExecutor</code>  的构造函数创建线程池的时候，当我们不指定  <code>RejectedExecutionHandler</code>  饱和策略来配置线程池的时候，默认使用的是  <code>AbortPolicy</code> 。在这种饱和策略下，如果队列满了， <code>ThreadPoolExecutor</code>  将抛出  <code>RejectedExecutionException</code>  异常来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。</p>\n<p>如果不想丢弃任务的话，可以使用  <code>CallerRunsPolicy</code> 。和其他的几个策略不同，它既不会抛弃任务，也不会抛出异常，而是将任务回退给调用者，使用调用者的线程来执行任务。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CallerRunsPolicy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RejectedExecutionHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">CallerRunsPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rejectedExecution</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ThreadPoolExecutor</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">isShutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token comment\">// 直接主线程执行，而不是线程池中的线程执行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                r<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"线程池的创建方式\"><a class=\"anchor\" href=\"#线程池的创建方式\">#</a> 线程池的创建方式</h4>\n<h5 id=\"方式1threadpoolexecutor-类的构造函数\"><a class=\"anchor\" href=\"#方式1threadpoolexecutor-类的构造函数\">#</a> 方式 1：ThreadPoolExecutor 类的构造函数</h5>\n<blockquote>\n<p>推荐！</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231015003053159.png\" alt=\"image-20231015003053159\" /></p>\n<h5 id=\"方式2executor-框架的-executors-工具类\"><a class=\"anchor\" href=\"#方式2executor-框架的-executors-工具类\">#</a> 方式 2：Executor 框架的 Executors 工具类</h5>\n<blockquote>\n<p>不推荐～</p>\n</blockquote>\n<p>我们可以创建多种类型的  <code>ThreadPoolExecutor</code> ：</p>\n<ul>\n<li><strong> <code>FixedThreadPool</code> </strong>：该方法返回一个<font color='red'>固定线程数量</font>的线程池。\n<ul>\n<li>该线程池中的线程数量始终不变。</li>\n<li>当有一个新的任务提交时，\n<ul>\n<li>若线程池中有空闲线程，则立即执行。</li>\n<li>若线程池中没有空间线程，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong> <code>SingleThreadExecutor</code> ：</strong> 该方法返回一个<font color='red'>只有一个线程</font>的线程池。\n<ul>\n<li>若多于一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。</li>\n</ul>\n</li>\n<li><strong> <code>CachedThreadPool</code> ：</strong> 该方法返回一个<font color='red'>会根据需要创建线程</font>的线程池。\n<ul>\n<li>初始大小为 0。</li>\n<li>当有新任务提交时，如果当前线程池中没有线程可用，它会创建一个新的线程来处理该任务。</li>\n<li>如果在一段时间内（默认为 60 秒）没有新任务提交，核心线程会超时并被销毁，从而缩小线程池的大小。</li>\n</ul>\n</li>\n<li><strong> <code>ScheduledThreadPool</code> </strong>：该方法返回一个用来<font color='red'>在给定的延迟后，或者定期执行任务</font>的线程池。</li>\n</ul>\n<p>对应  <code>Executors</code>  工具类中的方法如图所示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/executors-inner-threadpool.png\" alt=\"img\" /></p>\n<p>在《阿里巴巴 Java 开发手册》“并发处理” 这一章节，明确指出<strong>线程资源必须通过线程池提供，不允许在应用中自行显式创建线程</strong>。</p>\n<blockquote>\n<p>原因：<font color='red'>使用线程池可以减少在创建和销毁线程上所消耗的开销</font>，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者 “过度切换” 的问题。</p>\n</blockquote>\n<p>另外，《阿里巴巴 Java 开发手册》中<strong>强制线程池不允许使用  <code>Executors</code>  工具类去创建，而是通过  <code>ThreadPoolExecutor</code>  构造函数的方式</strong>。这样的处理方式让写的同学更加明确线程池的运行规则，<font color='red'>规避资源耗尽（OOM）的风险</font>。</p>\n<p><code>Executors</code>  工具类返回线程池对象的弊端如下 (后文会详细介绍到)：</p>\n<ul>\n<li><strong> <code>FixedThreadPool</code>  和  <code>SingleThreadExecutor</code> </strong>：使用的是无界的  <code>LinkedBlockingQueue</code> ，任务队列最大长度为  <code>Integer.MAX_VALUE</code> ，<font color='red'>可能堆积大量的请求，从而导致 OOM</font>。</li>\n<li><strong> <code>CachedThreadPool</code> </strong>：使用的是同步队列  <code>SynchronousQueue</code> ，允许创建的线程数量为  <code>Integer.MAX_VALUE</code>  ，如果任务数量过多且执行速度较慢，<font color='red'>可能会创建大量的线程，从而导致 OOM</font>。</li>\n<li><strong> <code>ScheduledThreadPool</code>  和  <code>SingleThreadScheduledExecutor</code> </strong> : 使用的无界的延迟阻塞队列 <code>DelayedWorkQueue</code> ，任务队列最大长度为  <code>Integer.MAX_VALUE</code> ，可能堆积大量的请求，从而导致 OOM 。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 无界队列 LinkedBlockingQueue</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nThreads<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span>nThreads<span class=\"token punctuation\">,</span> nThreads<span class=\"token punctuation\">,</span><span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 无界队列 LinkedBlockingQueue</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FinalizableDelegatedExecutorService</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 同步队列 SynchronousQueue，没有容量，最大线程数是 Integer.MAX_VALUE`</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">,</span><span class=\"token number\">60L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronousQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// DelayedWorkQueue（延迟阻塞队列）</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ScheduledExecutorService</span> <span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span><span class=\"token punctuation\">(</span>corePoolSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>corePoolSize<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NANOSECONDS</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token keyword\">new</span> <span class=\"token class-name\">DelayedWorkQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"常用的阻塞队列\"><a class=\"anchor\" href=\"#常用的阻塞队列\">#</a> 常用的阻塞队列</h4>\n<blockquote>\n<p>即任务队列。难！</p>\n</blockquote>\n<p>新任务来的时候会先判断当前运行的线程数量是否达到 <code>corePoolSize</code> ，如果达到的话，新任务就会被存放在阻塞队列  <code>workQueue</code>  中。</p>\n<p>不同的线程池会选用不同的阻塞队列，我们可以结合内置线程池来分析：</p>\n<ul>\n<li>\n<p><strong>无界阻塞队列  <code>LinkedBlockingQueue</code> </strong>：</p>\n<ul>\n<li>容量为  <code>Integer.MAX_VALUE</code></li>\n<li><code>FixedThreadPool</code>  和  <code>SingleThreadExector</code>  这两种线程池都是用的是无界队列，因此二者的任务队列永远不会被放满。</li>\n<li><code>FixedThreadPool</code>  最多只能创建  <code>corePoolSize</code>  个线程</li>\n<li><code>SingleThreadExector</code>  只能创建 1 个线程</li>\n</ul>\n</li>\n<li>\n<p><strong>同步队列  <code>SynchronousQueue</code> </strong>：</p>\n<ul>\n<li><font color='red'>容量为 0，不存储元素</font>。</li>\n<li>目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。</li>\n<li><code>CachedThreadPool</code>  线程池使用的是同步队列。</li>\n<li>也就是说， <code>CachedThreadPool</code>  的最大线程数是  <code>Integer.MAX_VALUE</code>  ，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM 。</li>\n</ul>\n</li>\n<li>\n<p><strong>延迟阻塞队列  <code>DelayedWorkQueue</code> </strong>：</p>\n<ul>\n<li>该队列的<font color='red'>内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序</font>。内部采用的是 “堆” 的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。</li>\n<li><code>ScheduledThreadPool</code>  和  <code>SingleThreadScheduledExecutor</code>  这两种线程池使用的是延迟阻塞队列。</li>\n<li><code>DelayedWorkQueue</code>  添加元素满了之后会自动<font color='red'>扩容原来容量的 1/2</font>，即永远不会阻塞，最大扩容可达  <code>Integer.MAX_VALUE</code> ，所以最多只能创建  <code>corePoolSize</code>  个线程。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"线程池原理分析\"><a class=\"anchor\" href=\"#线程池原理分析\">#</a> <mark>线程池原理分析</mark></h3>\n<p>我们上面讲解了  <code>Executor</code>  框架以及  <code>ThreadPoolExecutor</code>  类，下面让我们实战一下，来通过写一个  <code>ThreadPoolExecutor</code>  的小 Demo 来回顾上面的内容。</p>\n<h4 id=\"threadpoolexecutor-示例代码\"><a class=\"anchor\" href=\"#threadpoolexecutor-示例代码\">#</a> ThreadPoolExecutor 示例代码</h4>\n<p>首先创建一个  <code>Runnable</code>  接口的实现类（也可以是  <code>Callable</code>  接口的实现类）</p>\n<p><code>MyRunnable.java</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 这是一个简单的 Runnable 类，需要大约 5 秒钟来执行其任务。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @author shuang.kou</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> command<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyRunnable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" Start. Time = \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">processCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" End. Time = \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写测试程序，我们这里以阿里巴巴推荐的使用  <code>ThreadPoolExecutor</code>  构造函数自定义参数的方式来创建线程池。</p>\n<p><code>ThreadPoolExecutorDemo.java</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayBlockingQueue</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ThreadPoolExecutor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPoolExecutorDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CORE_POOL_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MAX_POOL_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">QUEUE_CAPACITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">KEEP_ALIVE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 使用阿里巴巴推荐的创建线程池的方式</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 通过 ThreadPoolExecutor 构造函数自定义参数创建</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">ThreadPoolExecutor</span> executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token constant\">CORE_POOL_SIZE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token constant\">MAX_POOL_SIZE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token constant\">KEEP_ALIVE_TIME</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">QUEUE_CAPACITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>CallerRunsPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 创建 WorkerThread 对象（WorkerThread 类实现了 Runnable 接口）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">Runnable</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRunnable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 执行 Runnable</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            executor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 终止线程池</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        executor<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>executor<span class=\"token punctuation\">.</span><span class=\"token function\">isTerminated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finished all threads\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的代码指定了：</p>\n<ul>\n<li><code>corePoolSize</code> : 核心线程数为 5。</li>\n<li><code>maximumPoolSize</code> ：最大线程数 10</li>\n<li><code>keepAliveTime</code>  : 等待时间为 1L。</li>\n<li><code>unit</code> : 等待时间的单位为 TimeUnit.SECONDS。</li>\n<li><code>workQueue</code> ：任务队列为  <code>ArrayBlockingQueue</code> ，并且容量为 100;</li>\n<li><code>handler</code> : 饱和策略为  <code>CallerRunsPolicy</code> 。</li>\n</ul>\n<p>输出结构：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token class-name\">Start<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">37</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token class-name\">Start<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">37</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token class-name\">Start<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">37</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token class-name\">Start<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">37</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">4</span> <span class=\"token class-name\">Start<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">37</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token class-name\">End<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">42</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">4</span> <span class=\"token class-name\">End<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">42</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token class-name\">End<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">42</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token class-name\">End<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">42</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token class-name\">Start<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">42</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token class-name\">End<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">42</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token class-name\">Start<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">42</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">4</span> <span class=\"token class-name\">Start<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">42</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token class-name\">Start<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">42</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token class-name\">Start<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">42</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token class-name\">End<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">47</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">4</span> <span class=\"token class-name\">End<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">47</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token class-name\">End<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">47</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token class-name\">End<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">47</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token class-name\">End<span class=\"token punctuation\">.</span> Time</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Apr</span> <span class=\"token number\">12</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">47</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token class-name\">Finished</span> all threads  <span class=\"token comment\">// 任务全部执行完了才会跳出来，因为 executor.isTerminated () 判断为 true 了才会跳出 while 循环，当且仅当调用 shutdown () 方法后，并且所有提交的任务完成后返回为 true</span></pre></td></tr></table></figure><h4 id=\"线程池原理分析处理任务的流程\"><a class=\"anchor\" href=\"#线程池原理分析处理任务的流程\">#</a> <mark>线程池原理分析（处理任务的流程）</mark></h4>\n<p>在示例代码中，我们使用  <code>executor.execute(worker)</code>  来提交一个任务到线程池中去。为了搞懂线程池的原理，我们需要首先分析一下  <code>execute()</code>  方法，源码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 存放线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicInteger</span> ctl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token function\">ctlOf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">RUNNING</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> c <span class=\"token operator\">&amp;</span> <span class=\"token constant\">CAPACITY</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 任务队列</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> workQueue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 如果任务为 null，则抛出异常。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//ctl 中保存的线程池当前的一些状态信息</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//  下面会涉及到 3 步 操作</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 1. 首先判断当前线程池中执行的任务数量是否小于 corePoolSize</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 如果小于的话，通过 addWorker (command, true) 新建一个线程，并将任务 (command) 添加到该线程中；然后，启动该线程从而执行任务。</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> corePoolSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 2. 如果当前执行的任务数量大于等于 corePoolSize 的时候就会走到这里，表明创建新的线程失败。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 通过 isRunning 方法判断线程池状态，线程池处于 RUNNING 状态并且队列可以加入任务，该任务才会被加入进去</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">int</span> recheck <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 再次获取线程池状态，如果线程池状态不是 RUNNING 状态就需要从任务队列中移除任务，并尝试判断线程是否全部执行完毕。同时执行拒绝策略。</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span>recheck<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token comment\">// 如果当前工作线程数量为 0，新创建一个线程并执行。</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>recheck<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">//3. 通过 addWorker (command, false) 新建一个线程，并将任务 (command) 添加到该线程中；然后，启动该线程从而执行任务。</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 传入 false 代表增加线程时判断当前线程数是否少于 maxPoolSize</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 如果 addWorker (command, false) 执行失败，则通过 reject () 执行相应的拒绝策略的内容。</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<p><strong>简单分析一下整个流程</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/thread-pool-principle.png\" alt=\"图解线程池实现原理\" /></p>\n<ol>\n<li>\n<p>如果 当前运行的线程数 ＜  <code>corePoolSize</code>  ，那么就会<font color='red'>新建一个线程</font>来执行任务。</p>\n</li>\n<li>\n<p>如果  <code>corePoolSize</code>  ≤ 当前运行的线程数 ＜  <code>maximumPoolSize</code> ，那么就<font color='red'>把该任务放入到任务队列里等待执行</font>。</p>\n<ol>\n<li><font color='red'>如果向任务队列添加任务失败（即任务队列已经满了），就新建一个线程</font>来执行任务。</li>\n</ol>\n</li>\n<li>\n<p>如果 当前运行的线程数 ==  <code>maximumPoolSize</code> ，此时任务队列、线程池都满了，那么会根据<font color='red'>饱和策略</font>来处理无法接收的任务，比如抛出异常或者丢弃任务。</p>\n</li>\n</ol>\n<hr />\n<p>在  <code>execute()</code>  方法中，多次调用  <code>addWorker()</code>  方法，该方法主要用来<font color='red'>创建新的工作线程</font>，如果创建和启动工作线程成功则返回 true ，否则返回 false。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局锁，并发操作必备</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> mainLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 跟踪线程池的最大大小，只有在持有全局锁 mainLock 的前提下才能访问此集合</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> largestPoolSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 工作线程集合，存放线程池中所有的（活跃的）工作线程，只有在持有全局锁 mainLock 的前提下才能访问此集合</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Worker</span><span class=\"token punctuation\">></span></span> workers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 获取线程池状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> c <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token constant\">CAPACITY</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 判断线程池的状态是否为 Running</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> c <span class=\"token operator\">&lt;</span> <span class=\"token constant\">SHUTDOWN</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 添加新的工作线程到线程池</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * @param firstTask 要执行</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @param core 参数为 true 的话表示使用线程池的基本大小，为 false 使用线程池最大大小</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @return 添加成功就返回 true 否则返回 false</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> firstTask<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> core<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        retry<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 这两句用来获取线程池的状态</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">int</span> rs <span class=\"token operator\">=</span> <span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// Check if queue empty only if necessary.</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">>=</span> <span class=\"token constant\">SHUTDOWN</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token operator\">!</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">==</span> <span class=\"token constant\">SHUTDOWN</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                   firstTask <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                   <span class=\"token operator\">!</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>               <span class=\"token comment\">// 获取线程池中工作的线程的数量</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">int</span> wc <span class=\"token operator\">=</span> <span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token comment\">//core 参数为 false 的话表明队列也满了，线程池大小变为 maximumPoolSize</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wc <span class=\"token operator\">>=</span> <span class=\"token constant\">CAPACITY</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    wc <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>core <span class=\"token operator\">?</span> corePoolSize <span class=\"token operator\">:</span> maximumPoolSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>               <span class=\"token comment\">// 原子操作将 workcount 的数量加 1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndIncrementWorkerCount</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token keyword\">break</span> retry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token comment\">// 如果线程的状态改变了就再次执行上述操作</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> rs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token keyword\">continue</span> retry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token comment\">// else CAS failed due to workerCount change; retry inner loop</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 标记工作线程是否启动成功</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">boolean</span> workerStarted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// 标记工作线程是否创建成功</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">boolean</span> workerAdded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token class-name\">Worker</span> w <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>firstTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>              <span class=\"token comment\">// 加锁</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> mainLock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainLock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                mainLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                   <span class=\"token comment\">// 获取线程池状态</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    <span class=\"token keyword\">int</span> rs <span class=\"token operator\">=</span> <span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                   <span class=\"token comment\">//rs &lt; SHUTDOWN 如果线程池状态依然为 RUNNING, 并且线程的状态是存活的话，就会将工作线程添加到工作线程集合中</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                  <span class=\"token comment\">//(rs=SHUTDOWN &amp;&amp; firstTask == null) 如果线程池状态小于 STOP，也就是 RUNNING 或者 SHUTDOWN 状态下，同时传入的任务实例 firstTask 为 null，则需要添加到工作线程集合和启动新的 Worker</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                   <span class=\"token comment\">//firstTask == null 证明只新建线程而不执行任务</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">&lt;</span> <span class=\"token constant\">SHUTDOWN</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                        <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">==</span> <span class=\"token constant\">SHUTDOWN</span> <span class=\"token operator\">&amp;&amp;</span> firstTask <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// precheck that t is startable</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalThreadStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                        workers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                       <span class=\"token comment\">// 更新当前工作线程的最大容量</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                        <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> workers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">></span> largestPoolSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                            largestPoolSize <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                      <span class=\"token comment\">// 工作线程是否启动成功</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                        workerAdded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    mainLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token comment\">//// 如果成功添加工作线程，则调用 Worker 内部的线程实例 t 的 Thread#start () 方法启动真实的线程实例</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workerAdded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                    t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                  <span class=\"token comment\">/// 标记线程启动成功</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                    workerStarted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>           <span class=\"token comment\">// 线程启动失败，需要从工作线程中移除对应的 Worker</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> workerStarted<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                <span class=\"token function\">addWorkerFailed</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">return</span> workerStarted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在，对于上述示例代码，分析如下：我们模拟了 10 个任务，配置的核心线程数为 5、等待队列容量为 100 ，所以每次只可能存在 5 个任务同时执行，剩下的 5 个任务会被放到等待队列中去。当前的 5 个任务中如果有任务被执行完了，线程池就会去拿新的任务执行。</p>\n<h3 id=\"几个常见的对比\"><a class=\"anchor\" href=\"#几个常见的对比\">#</a> 几个常见的对比</h3>\n<h4 id=\"runnable-vs-callable\"><a class=\"anchor\" href=\"#runnable-vs-callable\">#</a> Runnable vs Callable</h4>\n<p><code>Runnable</code>  接口自 Java 1.0 以来一直存在，但  <code>Callable</code>  接口仅在 Java 1.5 中引入，目的是为了处理  <code>Runnable</code>  接口不支持的用例。</p>\n<p><strong> <code>Runnable</code>  接口无返回值，且不会向上抛出异常，但是  <code>Callable</code>  接口可以</strong>。</p>\n<blockquote>\n<p>所以，如果任务不需要返回结果或抛出异常，则推荐使用  <code>Runnable</code>  接口，这样代码看起来会更加简洁。</p>\n</blockquote>\n<p>工具类  <code>Executors</code>  可以实现将  <code>Runnable</code>  对象转换成  <code>Callable</code>  对象。</p>\n<ul>\n<li><code>Executors.callable(Runnable task)</code></li>\n<li><code>Executors.callable(Runnable task, Object result)</code> ）</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * 被线程执行，没有返回值，也无法抛出异常</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 计算结果，或在无法这样做时抛出异常。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @return 计算得出的结果</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @throws 如果无法计算结果，则抛出异常</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"execute-vs-submit\"><a class=\"anchor\" href=\"#execute-vs-submit\">#</a> execute() vs submit()</h4>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\"><code>execute()</code></th>\n<th style=\"text-align:center\"><code>submit()</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>声明位置</td>\n<td style=\"text-align:center\"><code>Executor</code>  接口</td>\n<td style=\"text-align:center\"><code>ExecutorService</code>  接口</td>\n</tr>\n<tr>\n<td>接收参数</td>\n<td style=\"text-align:center\"><code>Runnable</code></td>\n<td style=\"text-align:center\"><code>Runnable</code>  或  <code>Callable&lt;T&gt;</code></td>\n</tr>\n<tr>\n<td>返回值类型</td>\n<td style=\"text-align:center\"><strong>void</strong></td>\n<td style=\"text-align:center\"><strong> <code>Future</code> </strong></td>\n</tr>\n<tr>\n<td>能否处理异常</td>\n<td style=\"text-align:center\"><strong>无法处理异常</strong></td>\n<td style=\"text-align:center\">借助  <code>Future.get()</code>  可以捕获并处理异常</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p><code>execute()</code>  方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功</p>\n</li>\n<li>\n<p><code>submit()</code>  方法用于提交需要返回值的任务。线程池会返回一个  <code>Future</code>  类型的对象，通过这个  <code>Future</code>  对象可以判断任务是否执行成功。</p>\n<ul>\n<li>可以通过  <code>Future</code>  的  <code>get()</code>  方法来获取返回值，该方法会阻塞当前线程直到任务完成。</li>\n<li>而使用  <code>Future</code>  的  <code>get（long timeout，TimeUnit unit）</code> 方法的话，如果在  <code>timeout</code>  时间内任务还没有执行完，就会抛出  <code>java.util.concurrent.TimeoutException</code> 。</li>\n</ul>\n</li>\n</ul>\n<p>示例 1：使用  <code>get()</code>  方法获取返回值。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> submit <span class=\"token operator\">=</span> executorService<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> submit<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>abc</pre></td></tr></table></figure><p>示例 2：使用  <code>get（long timeout，TimeUnit unit）</code> 方法获取返回值。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> submit <span class=\"token operator\">=</span> executorService<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> submit<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Exception in thread \"main\" java.util.concurrent.TimeoutException</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tat java.util.concurrent.FutureTask.get(FutureTask.java:205)</pre></td></tr></table></figure><h4 id=\"shutdown-vs-shutdownnow\"><a class=\"anchor\" href=\"#shutdown-vs-shutdownnow\">#</a> shutdown() vs shutdownNow()</h4>\n<ul>\n<li>\n<p><strong> <code>shutdown()</code> </strong>：</p>\n<ul>\n<li>关闭线程池，线程池的状态变为  <code>SHUTDOWN</code></li>\n<li><strong>线程池不再接受新任务了，但是队列里的任务得执行完毕</strong></li>\n</ul>\n</li>\n<li>\n<p><strong> <code>shutdownNow()</code> </strong>：</p>\n<ul>\n<li>关闭线程池，线程池的状态变为  <code>STOP</code></li>\n<li><strong>线程池会终止当前正在运行的任务，并停止处理排队的任务，并返回正在等待执行的 List</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"isshutdown-vs-isterminated\"><a class=\"anchor\" href=\"#isshutdown-vs-isterminated\">#</a> isShutdown() vs isTerminated()</h4>\n<ul>\n<li>\n<p><strong> <code>isShutDown()</code> </strong>：当调用  <code>shutdown()</code>  方法后，返回为 true</p>\n</li>\n<li>\n<p><strong> <code>isTerminated()</code> </strong>：当调用  <code>shutdown()</code>  方法后，<strong>并且所有提交的任务完成后</strong>，返回为 true</p>\n</li>\n</ul>\n<h3 id=\"几种常见的内置线程池\"><a class=\"anchor\" href=\"#几种常见的内置线程池\">#</a> 几种常见的内置线程池</h3>\n<blockquote>\n<p>即上文提到的  <code>Executor</code>  框架的  <code>Executors</code>  工具类中所提供的线程池</p>\n</blockquote>\n<h4 id=\"fixedthreadpool\"><a class=\"anchor\" href=\"#fixedthreadpool\">#</a> FixedThreadPool</h4>\n<h5 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h5>\n<p><code>FixedThreadPool</code>  被称为可重用<strong>固定线程数</strong>的线程池。通过  <code>Executors</code>  类中的相关源代码来看一下相关实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 创建一个可重用固定数量线程的线程池</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nThreads<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span>nThreads<span class=\"token punctuation\">,</span> nThreads<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                      <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                      <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                      threadFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看出 <font color='red'> <code>corePoolSize</code>  和  <code>maximumPoolSize</code>  都被设置为  <code>nThreads</code> </font>，这个  <code>nThreads</code>  参数是我们使用的时候自己传递的。</p>\n<p>即使  <code>maximumPoolSize</code>  的值比  <code>corePoolSize</code>  大，也至多只会创建  <code>corePoolSize</code>  个线程。这是因为 <code>FixedThreadPool</code>  <font color='red'>使用的是容量为  <code>Integer.MAX_VALUE</code>  的  <code>LinkedBlockingQueue</code> （<strong>无界队列</strong>），任务队列永远不会被放满</font>。</p>\n<h5 id=\"处理任务的流程\"><a class=\"anchor\" href=\"#处理任务的流程\">#</a> 处理任务的流程</h5>\n<p><code>FixedThreadPool</code>  的  <code>execute()</code>  方法运行示意图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/FixedThreadPool-f8172448.png\" alt=\"FixedThreadPool的execute()方法运行示意图\" /></p>\n<ol>\n<li>\n<p>如果当前运行的线程数小于  <code>corePoolSize</code> ， 如果再来新任务的话，就创建新的线程来执行任务；</p>\n</li>\n<li>\n<p>当前运行的线程数等于  <code>corePoolSize</code>  后， 如果再来新任务的话，会将任务加入  <code>LinkedBlockingQueue</code> ；</p>\n</li>\n<li>\n<p>线程池中的线程执行完手头的任务后，会在循环中反复从  <code>LinkedBlockingQueue</code>  中获取任务来执行；</p>\n</li>\n</ol>\n<h5 id=\"为什么不推荐使用\"><a class=\"anchor\" href=\"#为什么不推荐使用\">#</a> 为什么不推荐使用？</h5>\n<p><code>FixedThreadPool</code>  使用无界队列  <code>LinkedBlockingQueue</code> （队列的容量为  <code>Integer.MAX_VALUE</code> ）作为线程池的工作队列会对线程池带来如下影响：</p>\n<ol>\n<li>当线程池中的线程数达到  <code>corePoolSize</code>  后，新任务将在无界队列中等待，因此线程池中的线程数不会超过  <code>corePoolSize</code> ；</li>\n<li>由于使用无界队列时  <code>maximumPoolSize</code>  将是一个无效参数，因为不可能存在任务队列满的情况。所以，通过创建  <code>FixedThreadPool</code>  的源码可以看出创建的  <code>FixedThreadPool</code>  的  <code>corePoolSize</code>  和  <code>maximumPoolSize</code>  被设置为同一个值。</li>\n<li>由于 1 和 2，使用无界队列时  <code>keepAliveTime</code>  将是一个无效参数；</li>\n<li>运行中的  <code>FixedThreadPool</code> （未执行  <code>shutdown()</code>  或  <code>shutdownNow()</code> ）不会拒绝任务，<strong>在任务比较多的时候会导致 OOM（内存溢出）</strong>。</li>\n</ol>\n<h4 id=\"singlethreadexecutor\"><a class=\"anchor\" href=\"#singlethreadexecutor\">#</a> SingleThreadExecutor</h4>\n<h5 id=\"介绍-2\"><a class=\"anchor\" href=\"#介绍-2\">#</a> 介绍</h5>\n<p><code>SingleThreadExecutor</code>  是<strong>只有一个线程</strong>的线程池。下面看看 SingleThreadExecutor 的实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 返回只有一个线程的线程池</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FinalizableDelegatedExecutorService</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                    <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                                    threadFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看出<font color='red'>  <code>corePoolSize</code>  和  <code>maximumPoolSize</code>  都被设置为 1</font>，其他参数和  <code>FixedThreadPool</code>  相同。</p>\n<h5 id=\"处理任务的流程-2\"><a class=\"anchor\" href=\"#处理任务的流程-2\">#</a> 处理任务的流程</h5>\n<p><code>SingleThreadExecutor</code>  的运行示意图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/SingleThreadExecutor-7ffd92c2.png\" alt=\"SingleThreadExecutor的运行示意图\" /></p>\n<ol>\n<li>如果当前运行的线程数少于  <code>corePoolSize</code> ，则创建一个新的线程执行任务；</li>\n<li>当前线程池中有一个运行的线程后，将任务加入  <code>LinkedBlockingQueue</code></li>\n<li>线程执行完当前的任务后，会在循环中反复从  <code>LinkedBlockingQueue</code>  中获取任务来执行；</li>\n</ol>\n<h5 id=\"为什么不推荐使用-2\"><a class=\"anchor\" href=\"#为什么不推荐使用-2\">#</a> 为什么不推荐使用？</h5>\n<p><code>SingleThreadExecutor</code>  和  <code>FixedThreadPool</code>  一样，<strong>使用的都是容量为  <code>Integer.MAX_VALUE</code>  的  <code>LinkedBlockingQueue</code> （无界队列）<strong>作为线程池的工作队列。说简单点，就是</strong>可能会导致 OOM</strong>。</p>\n<h4 id=\"cachedthreadpool\"><a class=\"anchor\" href=\"#cachedthreadpool\">#</a> CachedThreadPool</h4>\n<h5 id=\"介绍-3\"><a class=\"anchor\" href=\"#介绍-3\">#</a> 介绍</h5>\n<p><code>CachedThreadPool</code>  是一个会<strong>根据需要创建新线程</strong>的线程池。下面通过源码来看看实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 创建一个线程池，根据需要创建新线程，但会在先前构建的线程可用时重用它。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                      <span class=\"token number\">60L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                      <span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronousQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                      threadFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><font color='red'> <code>corePoolSize</code>  被设置为空（0）， <code>maximumPoolSize</code>  被设置为  <code>Integer.MAX.VALUE</code> ，即它是无界的</font>。这也就意味着如果主线程提交任务的速度高于  <code>maximumPool</code>  中线程处理任务的速度时， <code>CachedThreadPool</code>  会不断创建新的线程。极端情况下，这样<strong>会导致耗尽 cpu 和内存资源</strong>。</p>\n<h5 id=\"处理任务的流程-3\"><a class=\"anchor\" href=\"#处理任务的流程-3\">#</a> 处理任务的流程</h5>\n<p><code>CachedThreadPool</code>  的  <code>execute()</code>  方法的执行示意图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231021003533603.png\" alt=\"image-20231021003533603\" /></p>\n<ol>\n<li>首先执行  <code>SynchronousQueue.offer(Runnable task)</code>  提交任务到任务队列。如果当前  <code>maximumPool</code>  中有闲线程正在执行  <code>SynchronousQueue.poll(keepAliveTime,TimeUnit.NANOSECONDS)</code> ，那么主线程执行 offer 操作与空闲线程执行的  <code>poll</code>  操作配对成功，主线程把任务交给空闲线程执行， <code>execute()</code>  方法执行完成，否则执行下面的步骤 2；</li>\n<li>当初始  <code>maximumPool</code>  为空，或者  <code>maximumPool</code>  中没有空闲线程时，将没有线程执行  <code>SynchronousQueue.poll(keepAliveTime,TimeUnit.NANOSECONDS)</code> 。这种情况下，步骤 1 将失败，此时  <code>CachedThreadPool</code>  会创建新线程执行任务，execute 方法执行完成；</li>\n</ol>\n<h5 id=\"为什么不推荐使用-3\"><a class=\"anchor\" href=\"#为什么不推荐使用-3\">#</a> 为什么不推荐使用？</h5>\n<p><code>CachedThreadPool</code>  使用的是同步队列  <code>SynchronousQueue</code> ，<strong>允许创建的线程数量为  <code>Integer.MAX_VALUE</code>  ，可能会创建大量线程，从而导致 OOM</strong>。</p>\n<h4 id=\"scheduledthreadpool\"><a class=\"anchor\" href=\"#scheduledthreadpool\">#</a> ScheduledThreadPool</h4>\n<h5 id=\"介绍-4\"><a class=\"anchor\" href=\"#介绍-4\">#</a> 介绍</h5>\n<p><code>ScheduledThreadPool</code>  用来<strong>在给定的延迟后运行任务或者定期执行任务</strong>。这个在实际项目中基本不会被用到，也<font color='red'>不推荐使用</font>，大家只需要简单了解一下即可。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ScheduledExecutorService</span> <span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span><span class=\"token punctuation\">(</span>corePoolSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>corePoolSize<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NANOSECONDS</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token keyword\">new</span> <span class=\"token class-name\">DelayedWorkQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>ScheduledThreadPool</code>  是通过  <code>ScheduledThreadPoolExecutor</code>  创建的，** 使用的  <code>DelayedWorkQueue</code> （延迟阻塞队列）** 作为线程池的任务队列。</p>\n<p><code>DelayedWorkQueue</code>  的内部元素并不是按照放入时间排序的，而是<font color='red'>按照延迟时间长短对任务进行排序的</font>，内部采用的是 “堆” 的数据结构，可以保证<font color='red'>每次出队的任务都是当前队列中执行时间最靠前的</font>。 <code>DelayedWorkQueue</code>  添加元素<font color='red'>满了之后会自动扩容原来容量的 1/2</font>，即永远不会阻塞，最大扩容可达  <code>Integer.MAX_VALUE</code> ，所以最多只能创建核心线程数的线程。</p>\n<p><code>ScheduledThreadPoolExecutor</code>  继承了  <code>ThreadPoolExecutor</code> ，所以创建  <code>ScheduledThreadExecutor</code>  本质也是创建一个  <code>ThreadPoolExecutor</code>  线程池，只是传入的参数不相同。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ThreadPoolExecutor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ScheduledExecutorService</span></pre></td></tr></table></figure><h5 id=\"scheduledthreadpoolexecutor-和-timer-对比\"><a class=\"anchor\" href=\"#scheduledthreadpoolexecutor-和-timer-对比\">#</a> ScheduledThreadPoolExecutor 和 Timer 对比</h5>\n<ul>\n<li>\n<p><code>Timer</code>  对系统时钟的变化敏感， <code>ScheduledThreadPoolExecutor</code>  不是；</p>\n</li>\n<li>\n<p><code>Timer</code>  只有一个执行线程，因此长时间运行的任务可以延迟其他任务。  <code>ScheduledThreadPoolExecutor</code>  可以配置任意数量的线程。 此外，如果你想（通过提供  <code>ThreadFactory</code> ），你可以完全控制创建的线程；</p>\n</li>\n<li>\n<p>在 <code>TimerTask</code>  中抛出的运行时异常会杀死一个线程，从而导致  <code>Timer</code>  死机即计划任务将不再运行。 <code>ScheduledThreadExecutor</code>  不仅捕获运行时异常，还允许您在需要时处理它们（通过重写  <code>afterExecute</code>  方法 <code>ThreadPoolExecutor</code> ）。抛出异常的任务将被取消，但其他任务将继续运行。</p>\n</li>\n</ul>\n<h3 id=\"如何设计一个能根据任务优先级来执行的线程池\"><a class=\"anchor\" href=\"#如何设计一个能根据任务优先级来执行的线程池\">#</a> 如何设计一个能根据任务优先级来执行的线程池？</h3>\n<p>这是一个常见的面试问题，本质其实还是在考察求职者对于<font color='red'>线程池</font>以及<font color='red'>阻塞队列（任务队列）</font>的掌握。上面也提到了，<strong><font color='red'>不同的线程池会选用不同的阻塞队列作为任务队列</font></strong>。比如  <code>FixedThreadPool</code>  使用的是  <code>LinkedBlockingQueue</code> （无界队列），由于该队列永远不会被放满，因此  <code>FixedThreadPool</code>  最多只能创建  <code>corePoolSize</code>  个线程。</p>\n<p>假如我们需要实现一个优先级任务线程池的话，那可以<strong>考虑使用  <code>PriorityBlockingQueue</code>  （优先级阻塞队列）作为任务队列</strong>（ <code>ThreadPoolExecutor</code>  的构造函数有一个 <code>workQueue</code>  参数可以传入任务队列）。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/common-parameters-of-threadpool-workqueue.jpg\" alt=\"ThreadPoolExecutor构造函数\" /></p>\n<p><strong>优先级阻塞队列  <code>PriorityBlockingQueue</code> </strong>：<font color='red'>一个支持优先级的无界阻塞队列</font>，可以看作是<font color='red'>线程安全</font>的  <code>PriorityQueue</code> ，两者底层都是使用<font color='red'>小顶堆形式的二叉堆</font>，即值最小的元素优先出队。不过， <code>PriorityQueue</code>  不<font color='red'>支持阻塞操作</font>。</p>\n<p>要想让  <code>PriorityBlockingQueue</code>  实现对任务的排序，<strong><font color='red'>传入的任务必须是具备排序能力的</font></strong>，方式有两种：</p>\n<ol>\n<li>让任务实现  <code>Comparable</code>  接口，并重写  <code>compareTo</code>  方法来指定任务之间的优先级比较规则。</li>\n<li>(推荐！)<strong> 创建  <code>PriorityBlockingQueue</code>  时传入一个  <code>Comparator</code>  对象来指定任务之间的排序规则</strong>。</li>\n</ol>\n<p>不过，<strong><font color='red'>这存在一些风险和问题</font></strong>，比如：</p>\n<ul>\n<li>\n<p><code>PriorityBlockingQueue</code>  是无界的，可能堆积大量的请求，从而导致 <font color='red'>OOM</font> 。</p>\n<blockquote>\n<p>解决方法：继承  <code>PriorityBlockingQueue</code>  并<strong>重写一下  <code>offer</code>  (入队) 方法</strong>的逻辑，当插入的元素数量超过指定值就返回 false</p>\n</blockquote>\n</li>\n<li>\n<p>可能会导致<font color='red'>饥饿问题</font>，即低优先级的任务长时间得不到执行。</p>\n<blockquote>\n<p>解决方法：可以通过优化设计来解决（比较麻烦），比如<strong>等待时间过长的任务会被移除并重新添加到队列中，但是优先级会被提升</strong></p>\n</blockquote>\n</li>\n<li>\n<p>由于需要对队列中的元素进行排序操作以及保证线程安全（并发控制采用的是可重入锁  <code>ReentrantLock</code>  ），因此会<font color='red'>降低性能</font>。</p>\n<blockquote>\n<p>解决方法：性能方面的影响是<strong>没法避免</strong>的，毕竟需要对任务进行排序操作。并且，对于大部分业务场景来说，这点性能影响是可以接受的</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"面试题线程池有了解吗线程池大概的原理\"><a class=\"anchor\" href=\"#面试题线程池有了解吗线程池大概的原理\">#</a> 【面试题】线程池有了解吗？线程池大概的原理？</h3>\n<blockquote>\n<p>互联网、米哈游、后端、Java。考察的是<strong>线程池的常见参数、处理任务的流程</strong>。</p>\n</blockquote>\n<p>线程池的核心参数如下：</p>\n<ul>\n<li><strong><font color='gree'>corePoolSize</font></strong>：核心线程数</li>\n<li><strong><font color='gree'>maximumPoolSize</font></strong>：最大线程数</li>\n<li><strong><font color='gree'>workQueue</font></strong>：任务的阻塞队列</li>\n<li><font color='gree'>keepAliveTime</font>：当线程池中的线程数量超过 corePoolSize 时，多余的空闲线程在超过 keepAliveTime 时间后会被终止。</li>\n<li><font color='gree'>threadFactory</font>：线程工厂，用于创建新的线程。</li>\n<li><font color='gree'>handler</font>：拒绝策略（饱和策略），当线程池无法接收新的任务时，采取的处理方式。</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231018163149255.png\" alt=\"image-20231018163149255\" /></p>\n<p>线程池处理一个新任务的执行流程：</p>\n<ol>\n<li>\n<p>如果 当前运行的线程数 ＜  <code>corePoolSize</code>  ，那么就会<font color='red'>新建一个线程</font>来执行任务。</p>\n</li>\n<li>\n<p>如果  <code>corePoolSize</code>  ≤ 当前运行的线程数 ＜  <code>maximumPoolSize</code> ，那么就<font color='red'>把该任务放入到任务队列里等待执行</font>。</p>\n<blockquote>\n<p>随着不断添加任务，<font color='red'>如果任务队列满了，就新建一个线程</font>来执行任务。</p>\n</blockquote>\n</li>\n<li>\n<p>如果 当前运行的线程数 ==  <code>maximumPoolSize</code> ，此时任务队列、线程池都满了，那么根据<font color='red'>拒绝策略（饱和策略）</font>来处理无法接收的任务，比如抛出异常或者丢弃任务。</p>\n</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/thread-pool-principle.png\" alt=\"图解线程池实现原理\" /></p>\n<ol start=\"4\">\n<li>当线程执行完任务后，会从任务队列中获取下一个任务继续执行，直到任务队列为空。</li>\n<li>当空闲线程的时间超过  <code>keepAliveTime</code>  时，如果线程池中的线程数量超过  <code>corePoolSize</code> ，则多余的空闲线程会被终止，直到线程数量等于  <code>corePoolSize</code>  为止。</li>\n</ol>\n<h3 id=\"面试题设计一个线程池需要考虑哪些因素\"><a class=\"anchor\" href=\"#面试题设计一个线程池需要考虑哪些因素\">#</a> 【面试题】设计一个线程池需要考虑哪些因素？</h3>\n<blockquote>\n<p>互联网、米哈游、后端情景题、系统设计。考察的是<strong>线程池的特征</strong>，比较综合全面</p>\n</blockquote>\n<p>设计一个线程池需要考虑以下几个方面：</p>\n<ol>\n<li><font color='gree'>线程池的大小</font>：线程池的大小应该根据系统的负载情况和任务的性质来确定。\n<ul>\n<li>如果线程池太小，会导致任务排队等待，影响系统的性能</li>\n<li>如果线程池太大，会造成过多的上下文切换。</li>\n</ul>\n</li>\n<li><font color='gree'>任务队列</font>：线程池中的等待任务需要有一个队列来存储。任务队列可以是阻塞队列或非阻塞队列，根据具体的需求来选择。</li>\n<li><font color='gree'>线程工厂</font>：用于创建新的线程。</li>\n<li><font color='gree'>拒绝策略</font>：当线程池中的线程都处于忙碌状态时，新提交的任务会被放入任务队列中等待执行。此时需要设置一个拒绝策略，<font color='red'>防止任务一直被放入队列中而无法执行</font>。常见的拒绝策略有<font color='red'>直接抛出异常、丢弃任务</font>等。</li>\n<li><font color='gree'>饱和策略</font>：当线程池中的线程数量达到最大值时，新提交的任务可能会被拒绝执行。此时需要设置一个饱和策略，<font color='red'>防止线程池过度扩展</font>。常见的饱和策略有<font color='red'>直接抛出异常、丢弃任务</font>等。</li>\n<li><font color='gree'>线程池监控</font>：为了方便对线程池进行监控和管理，可以添加一些监控功能，如<font color='red'>获取当前线程池的状态、获取当前正在执行的任务</font>等。</li>\n</ol>\n<p>基于以上方面，可以设计一个简单的线程池示例代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPoolExample</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 创建一个固定大小的线程池</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 提交任务到线程池中执行</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> taskId <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            executorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Task \"</span> <span class=\"token operator\">+</span> taskId <span class=\"token operator\">+</span> <span class=\"token string\">\" is running by thread \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 关闭线程池</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"java线程池最佳实践\"><a class=\"anchor\" href=\"#java线程池最佳实践\">#</a> Java 线程池最佳实践</h3>\n<h4 id=\"1-正确声明线程池\"><a class=\"anchor\" href=\"#1-正确声明线程池\">#</a> 1、正确声明线程池</h4>\n<p>** 线程池必须手动通过  <code>ThreadPoolExecutor</code>  的构造函数来声明，避免使用 <code>Executors</code>  类创建线程池，会有 OOM 风险。** 说白了就是：<strong>使用有界队列，控制线程创建数量。</strong></p>\n<p>除了避免 OOM 的原因之外，不推荐使用  <code>Executors</code>  提供的两种快捷的线程池的原因还有：</p>\n<ul>\n<li>实际使用中需要根据自己机器的性能、业务场景来<font color='red'>手动配置线程池的参数</font>比如核心线程数、使用的任务队列、饱和策略等等。</li>\n<li>我们应该显示地给我们的线程池命名，这样有助于我们定位问题。</li>\n</ul>\n<h4 id=\"2-监测线程池运行状态\"><a class=\"anchor\" href=\"#2-监测线程池运行状态\">#</a> 2、监测线程池运行状态</h4>\n<p>你可以通过一些手段来检测线程池的运行状态比如 SpringBoot 中的 <font color='red'>Actuator 组件</font>。</p>\n<p>除此之外，我们还可以利用  <code>ThreadPoolExecutor</code>  的相关 API 做一个简陋的监控。从下图可以看出， <code>ThreadPoolExecutor</code>  提供了获取线程池当前的线程数和活跃线程数、已经执行完成的任务数、正在排队中的任务数等等。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231021094845929.png\" alt=\"image-20231021094845929\" /></p>\n<p>下面是一个简单的 Demo。 <code>printThreadPoolStatus()</code>  会每隔一秒打印出线程池的线程数、活跃线程数、完成的任务数、以及队列中的任务数。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 打印线程池的状态</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param threadPool 线程池对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printThreadPoolStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadPoolExecutor</span> threadPool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">ScheduledExecutorService</span> scheduledExecutorService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">createThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"print-images/thread-pool-status\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    scheduledExecutorService<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadPool Size: [&#123;&#125;]\"</span><span class=\"token punctuation\">,</span> threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">getPoolSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Active Threads: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">getActiveCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of Tasks : &#123;&#125;\"</span><span class=\"token punctuation\">,</span> threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">getCompletedTaskCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of Tasks in Queue: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"3-建议不同类别的业务用不同的线程池\"><a class=\"anchor\" href=\"#3-建议不同类别的业务用不同的线程池\">#</a> 3、建议不同类别的业务用不同的线程池</h4>\n<p>很多人在实际项目中都会有类似这样的问题：我的项目中多个业务需要用到线程池，是为每个线程池都定义一个还是说定义一个公共的线程池呢？</p>\n<p>一般建议是<strong>不同的业务使用不同的线程池</strong>，配置线程池的时候根据当前业务的情况对当前线程池进行配置，因为不同的业务的并发以及对资源的使用情况都不同，重心优化系统性能瓶颈相关的业务。</p>\n<p>我们再来看一个真实的事故案例！ (本案例来源自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbHViLnBlcmZtYS5jb20vYXJ0aWNsZS82NDY2Mzk=\">《线程池运用不当的一次线上事故》</span> ，很精彩的一个案例)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/production-accident-threadpool-sharing-example.png\" alt=\"案例代码概览\" /></p>\n<p>上面的代码可能会存在死锁的情况，为什么呢？画个图给大家捋一捋。</p>\n<p>试想这样一种极端情况：假如我们线程池的核心线程数为 n，父任务（扣费任务）数量为 n，父任务下面有两个子任务（扣费任务下的子任务），其中一个已经执行完成，另外一个被放在了任务队列中。由于父任务把线程池核心线程资源用完，所以子任务因为无法获取到线程资源无法正常执行，一直被阻塞在队列中。父任务等待子任务执行完成，而子任务等待父任务释放线程池资源，这也就造成了 <strong>&quot;死锁&quot;</strong> 。</p>\n<p>解决方法也很简单，就是<strong>专门为执行子任务新增加一个线程池</strong>为其服务。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/production-accident-threadpool-sharing-deadlock.png\" alt=\"线程池使用不当导致死锁\" /></p>\n<h4 id=\"4-别忘记给线程池命名\"><a class=\"anchor\" href=\"#4-别忘记给线程池命名\">#</a> 4、别忘记给线程池命名</h4>\n<p>初始化线程池的时候需要<font color='red'>显示命名（设置线程池名称前缀）</font>，有利于定位问题。</p>\n<p>默认情况下创建的线程名字类似  <code>pool-1-thread-n</code>  这样的，没有业务含义，不利于我们定位问题。</p>\n<p>给线程池里的线程命名通常有下面两种方式：</p>\n<p><strong>1、利用 guava 的  <code>ThreadFactoryBuilder</code> </strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ThreadFactory</span> threadFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        <span class=\"token punctuation\">.</span><span class=\"token function\">setNameFormat</span><span class=\"token punctuation\">(</span>threadNamePrefix <span class=\"token operator\">+</span> <span class=\"token string\">\"-%d\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                        <span class=\"token punctuation\">.</span><span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">ExecutorService</span> threadPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span>corePoolSize<span class=\"token punctuation\">,</span> maximumPoolSize<span class=\"token punctuation\">,</span> keepAliveTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTES</span><span class=\"token punctuation\">,</span> workQueue<span class=\"token punctuation\">,</span> threadFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>2、自己实现  <code>ThreadFactory</code> </strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ThreadFactory</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicInteger</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 线程工厂，它设置线程名称，有利于我们定位问题。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NamingThreadFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ThreadFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicInteger</span> threadNum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ThreadFactory</span> delegate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 创建一个带名字的线程池生产工厂</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">NamingThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadFactory</span> delegate<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>delegate <span class=\"token operator\">=</span> delegate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// TODO consider uniquifying this</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Thread</span> <span class=\"token function\">newThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> delegate<span class=\"token punctuation\">.</span><span class=\"token function\">newThread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" [#\"</span> <span class=\"token operator\">+</span> threadNum<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"5-正确配置线程池大小\"><a class=\"anchor\" href=\"#5-正确配置线程池大小\">#</a> 5、正确配置线程池大小</h4>\n<h5 id=\"常规操作\"><a class=\"anchor\" href=\"#常规操作\">#</a> 常规操作</h5>\n<p>线程池大小设置过大或者过小都会有问题，合适的才是最好。</p>\n<ul>\n<li>\n<p>** 线程过少会导致大量任务堆积，造成 OOM **。如果同一时间有大量任务 / 请求需要处理，可能会导致大量的请求 / 任务在任务队列中排队等待执行，甚至会出现任务队列满了之后任务 / 请求无法处理的情况，或者大量任务堆积在任务队列导致 OOM。这样很明显是有问题的，CPU 根本没有得到充分利用。</p>\n</li>\n<li>\n<p><strong>线程过多会增加上下文切换成本</strong>。大量线程可能会同时在争取 CPU 资源，这样会导致大量的上下文切换，从而增加线程的执行时间，影响了整体执行效率。</p>\n<blockquote>\n<p>上下文切换：任务从保存到再加载的过程</p>\n</blockquote>\n</li>\n</ul>\n<p>有一个简单并且适用面较广的公式：</p>\n<ul>\n<li>\n<p><strong>CPU 密集型任务 (N+1)</strong>：这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下<font color='red'>多出来的一个线程就可以充分利用 CPU 的空闲时间</font>。</p>\n<blockquote>\n<p>CPU 密集型任务：简单理解就是<font color='red'>利用 CPU 计算能力</font>的任务。比如你在内存中对大量数据进行排序。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>I/O 密集型任务 (2N)</strong>：这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。<font color='red'>因此在 I/O 密集型任务的应用中，我们可以多配置一些线程</font>，具体的计算方法是 2N。</p>\n<blockquote>\n<p>IO 密集型任务：但凡<font color='red'>涉及到网络读取，文件读取</font>，这类任务都是 IO 密集型，特点是 CPU 计算耗费时间相比于等待 IO 操作完成的时间来说很少，<font color='red'>大部分时间都花在了等待 IO 操作完成上</font>。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"美团骚操作\"><a class=\"anchor\" href=\"#美团骚操作\">#</a> 美团骚操作</h5>\n<p>美团技术团队的思路是<font color='red'>对<strong>线程池的 3 个核心参数</strong>实现自定义可配置</font>。</p>\n<ul>\n<li><strong> <code>corePoolSize</code> </strong>：核心线程数量。当任务队列未达到容量时，可以同时运行的最大线程数量。</li>\n<li><strong> <code>maximumPoolSize</code> </strong>：最大线程数量。当任务队列达到容量时，可以同时运行的最大线程数量。</li>\n<li><strong> <code>workQueue</code> </strong>：任务队列。当新任务来时，如果当前运行的线程数量达到了  <code>corePoolSize</code>  的话，新任务就会被存放在该队列中。</li>\n</ul>\n<blockquote>\n<p>这 3 个参数之所以如此重要，是因为它们基本决定了线程池对任务的处理策略。</p>\n</blockquote>\n<p><code>ThreadPoolExecutor</code>  提供的下面这些方法支持参数的动态配置。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/threadpoolexecutor-methods.png\" alt=\"img\" /></p>\n<ul>\n<li>\n<p>需要注意的是  <code>corePoolSize</code> ， 程序运行期间的时候，我们调用 <code>setCorePoolSize（）</code> 方法的话，线程池会首先判断当前工作线程数是否大于  <code>corePoolSize</code> ，如果大于的话就会回收工作线程。</p>\n</li>\n<li>\n<p>另外，<font color=\"red\">上面并没有动态指定任务队列长度的方法</font>，因此美团自定义了一个叫做 <strong> <code>ResizableCapacityLinkedBlockIngQueue</code> </strong> 的队列。</p>\n<blockquote>\n<p>主要就是把  <code>LinkedBlockingQueue</code>  的 capacity 字段的 final 关键字修饰给去掉了，让它变为可变的</p>\n</blockquote>\n</li>\n</ul>\n<p>最终实现的可动态修改线程池参数效果如下。👏👏👏</p>\n<img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/meituan-dynamically-configuring-thread-pool-parameters.png\" alt=\"动态配置线程池参数最终效果\" style=\"zoom: 50%;\" />\n<p>如果我们的项目也想要实现这种效果的话，可以借助现成的开源项目：</p>\n<ul>\n<li><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5nb29meS9oaXBwbzRq\">Hippo4j</span></strong>：异步线程池框架，支持线程池动态变更 &amp; 监控 &amp; 报警，无需修改代码轻松引入。支持多种使用模式，轻松引入，致力于提高系统运行保障能力。</li>\n<li><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Ryb21hcmEvZHluYW1pYy10cA==\">Dynamic TP</span></strong>：轻量级动态线程池，内置监控告警功能，集成三方中间件线程池管理，基于主流配置中心（已支持 Nacos、Apollo，Zookeeper、Consul、Etcd，可通过 SPI 自定义实现）。</li>\n</ul>\n<h4 id=\"6-记得关闭线程池\"><a class=\"anchor\" href=\"#6-记得关闭线程池\">#</a> 6、记得关闭线程池</h4>\n<p>当线程池不再需要使用时，应该显式地关闭线程池，释放线程资源。</p>\n<p>线程池提供了两个关闭方法：</p>\n<ul>\n<li><strong> <code>shutdown()</code> </strong>：关闭线程池，线程池的状态变为  <code>SHUTDOWN</code>  。线程池不再接受新任务了，但是<strong>队列里的任务得执行完毕</strong>。</li>\n<li><strong> <code>shutdownNow()</code> </strong>：关闭线程池，线程池的状态变为  <code>STOP</code>  。线程池会终止当前正在运行的任务，<strong>停止处理排队的任务</strong>，并返回正在等待执行的 List。</li>\n</ul>\n<p>调用完  <code>shutdownNow</code>  和  <code>shuwdown</code>  方法后，并不代表线程池已经完成关闭操作，它只是异步的通知线程池进行关闭处理。</p>\n<p><strong>如果要同步等待线程池彻底关闭后才继续往下执行，需要调用  <code>awaitTermination()</code>  方法进行同步等待</strong>。</p>\n<ul>\n<li>在调用  <code>awaitTermination()</code>  方法时，应该设置合理的超时时间，以避免程序长时间阻塞而导致性能问题。</li>\n<li>另外，由于线程池中的任务可能会被取消或抛出异常，因此在使用  <code>awaitTermination()</code>  方法时还需要进行异常处理。该方法会抛出  <code>InterruptedException</code>  异常，需要捕获并处理该异常，以避免程序崩溃或者无法正常退出。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 关闭线程池</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>executor<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 等待线程池关闭，最多等待 5 分钟</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>executor<span class=\"token punctuation\">.</span><span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 如果等待超时，则打印日志</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程池未能在5分钟内完全关闭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 异常处理</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"7-线程池尽量不要放耗时任务\"><a class=\"anchor\" href=\"#7-线程池尽量不要放耗时任务\">#</a> 7、线程池尽量不要放耗时任务</h4>\n<p>线程池本身的目的是为了提高任务执行效率，避免因频繁创建和销毁线程而带来的性能开销。如果将耗时任务提交到线程池中执行，可能会导致线程池中的线程被长时间占用，无法及时响应其他任务，甚至会导致线程池崩溃或者程序假死。</p>\n<p>因此，在使用线程池时，我们应该尽量避免将耗时任务提交到线程池中执行<font color='red'>。对于一些比较耗时的操作，如网络请求、文件读写等，可以采用<strong>异步操作</strong>的方式来处理，以避免阻塞线程池中的线程</font>。</p>\n<h4 id=\"8-线程池使用的一些小坑\"><a class=\"anchor\" href=\"#8-线程池使用的一些小坑\">#</a> 8、线程池使用的一些小坑</h4>\n<h5 id=\"不要重复创建线程池\"><a class=\"anchor\" href=\"#不要重复创建线程池\">#</a> 不要重复创建线程池</h5>\n<p>线程池是可以复用的，一定不要频繁创建线程池（比如一个用户请求到了就单独创建一个线程池）。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wrong\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">wrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 自定义线程池</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ThreadPoolExecutor</span> executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">1L</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>CallerRunsPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//  处理任务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    executor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// ......</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>出现这种问题的原因还是对于线程池认识不够，需要加强线程池的基础知识。</p>\n<h5 id=\"使用spring内部线程池时一定要手动自定义\"><a class=\"anchor\" href=\"#使用spring内部线程池时一定要手动自定义\">#</a> 使用 Spring 内部线程池时一定要手动自定义</h5>\n<p>使用 Spring 内部线程池时，一定要手动自定义线程池，配置合理的参数，不然会出现生产问题（一个请求创建一个线程）。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAsync</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPoolExecutorConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"threadPoolExecutor\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Executor</span> <span class=\"token function\">threadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ThreadPoolTaskExecutor</span> threadPoolExecutor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolTaskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> processNum <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">availableProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回可用处理器的 Java 虚拟机的数量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> corePoolSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>processNum <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> maxPoolSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>processNum <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setCorePoolSize</span><span class=\"token punctuation\">(</span>corePoolSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 核心池大小</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxPoolSize</span><span class=\"token punctuation\">(</span>maxPoolSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大线程数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setQueueCapacity</span><span class=\"token punctuation\">(</span>maxPoolSize <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 队列程度</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setThreadPriority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_PRIORITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setKeepAliveSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 线程空闲时间</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setThreadNamePrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-Executor-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 线程名字前缀</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> threadPoolExecutor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"线程池和-threadlocal-不要共用\"><a class=\"anchor\" href=\"#线程池和-threadlocal-不要共用\">#</a> 线程池和 ThreadLocal 不要共用</h5>\n<p>线程池和  <code>ThreadLocal</code>  共用，可能会导致线程从  <code>ThreadLocal</code>  获取到的是旧值 / 脏数据。<strong>因为线程池会复用线程对象，与线程对象绑定的类的静态属性  <code>ThreadLocal</code>  变量也会被重用，这就导致一个线程可能获取到其他线程的 <code>ThreadLocal</code>  值</strong>。</p>\n<p>不要以为代码中没有显示使用线程池就不存在线程池了，像常用的 Web 服务器 Tomcat 处理任务为了提高并发量，就使用到了线程池，并且使用的是基于原生 Java 线程池改进完善得到的自定义线程池。</p>\n<p>当然了，你可以将 Tomcat 设置为单线程处理任务。不过，这并不合适，会严重影响其处理任务的速度。</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">server.tomcat.max-threads</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1</span></pre></td></tr></table></figure><p>解决上述问题比较建议的办法是<strong>使用阿里巴巴开源的   <code>TransmittableThreadLocal</code> ( <code>TTL</code> ) 来代替  <code>ThreadLocal</code> </strong>。</p>\n<blockquote>\n<p>该类继承并加强了 JDK 内置的  <code>InheritableThreadLocal</code>  类，在使用线程池等会池化复用线程的执行组件情况下，提供  <code>ThreadLocal</code>  的值传递功能，解决异步执行时上下文传递的问题。</p>\n<p>项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvdHJhbnNtaXR0YWJsZS10aHJlYWQtbG9jYWw=\">https://github.com/alibaba/transmittable-thread-local</span></p>\n</blockquote>\n<h2 id=\"future-接口\"><a class=\"anchor\" href=\"#future-接口\">#</a> Future 接口</h2>\n<h3 id=\"有什么用-2\"><a class=\"anchor\" href=\"#有什么用-2\">#</a> 有什么用？</h3>\n<p><code>Future</code>  类是 **<font color='red'>异步调用思想</font>** 的典型运用，可以将这个耗时任务交给一个子线程去异步执行，同时我们可以干点其他事情，<font color='red'>不用傻傻等待耗时任务执行完成</font>。等我们的事情干完后，再通过  <code>Future</code>  类获取到耗时任务的执行结果。<font color='red'>可以提高程序的执行效率</font>。</p>\n<p>在 Java 中， <code>Future</code>  类只是一个 **<font color='red'>泛型接口</font>**，位于  <code>java.util.concurrent</code>  包下，其中定义了 5 个方法，主要包括下面这 4 个功能：</p>\n<ul>\n<li><font color='gree'>取消任务</font></li>\n<li>判断任务是否被取消</li>\n<li>判断任务是否已经执行完成</li>\n<li><font color='gree'>获取任务执行结果</font></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// V 代表了 Future 执行的任务返回值的类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 取消任务执行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 成功取消返回 true，否则返回 false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> mayInterruptIfRunning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 判断任务是否被取消</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isCancelled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 判断任务是否已经执行完成</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 获取任务执行结果</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 指定时间内没有返回计算结果就抛出 TimeOutException 异常</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>简单理解就是：</p>\n<ul>\n<li>我有一个任务，提交给了  <code>Future</code>  来处理。</li>\n<li>任务执行期间，我可以去做任何想做的事情，还可以取消任务或者获取任务的执行状态。</li>\n<li>一段时间之后，我就可以  <code>Future</code>  那里直接取出任务执行结果。</li>\n</ul>\n<h3 id=\"与-callable-的关系\"><a class=\"anchor\" href=\"#与-callable-的关系\">#</a> 与 Callable 的关系</h3>\n<p><strong> <code>FutureTask</code>  类基本实现了  <code>Future</code>  接口</strong>，常用来封装  <code>Callable</code>  和  <code>Runnable</code> ，具有取消任务、查看任务是否执行完成、获取任务执行结果的方法。 <code>ExecutorService.submit()</code>  方法返回的其实就是  <code>Future</code>  的实现类  <code>FutureTask</code>  。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>FutureTask</code>  不光实现了  <code>Future</code>  接口，还实现了  <code>Runnable</code>  接口，因此可以作为任务直接被线程执行。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/completablefuture-class-diagram.jpg\" alt=\"img\" /></p>\n<p><code>FutureTask</code>  有两个构造函数，可传入  <code>Callable</code>  或者  <code>Runnable</code>  对象。实际上，传入  <code>Runnable</code>  对象也会在方法内部转换为  <code>Callable</code>  对象。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">FutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> callable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callable <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callable <span class=\"token operator\">=</span> callable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">NEW</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">FutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 通过适配器 RunnableAdapter 来将 Runnable 对象转换成 Callable 对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callable <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">callable</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">NEW</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong> <code>FutureTask</code>  相当于对  <code>Callable</code>  进行了封装，管理着任务执行的情况，存储了  <code>Callable</code>  的  <code>call</code>  方法的任务执行结果</strong>。</p>\n<h3 id=\"completablefuture-类\"><a class=\"anchor\" href=\"#completablefuture-类\">#</a> CompletableFuture 类</h3>\n<p><code>Future</code>  在实际使用过程中存在一些局限性，比如不支持异步任务的编排组合、获取计算结果的  <code>get()</code>  方法为阻塞调用。</p>\n<p><strong>Java 8 引入  <code>CompletableFuture</code>  类来解决  <code>Future</code>  的这些缺陷</strong>。除了提供了更为好用和强大的  <code>Future</code>  特性之外，还提供了<font color='red'>函数式编程、异步任务编排组合（可以将多个异步任务串联起来，组成一个完整的链式调用）</font>等能力。</p>\n<p>下面我们来简单看看  <code>CompletableFuture</code>  类的定义。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CompletionStage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到， <code>CompletableFuture</code>  同时实现了  <code>Future</code>  接口和  <code>CompletionStage</code>  接口。</p>\n<p><img data-src=\"https://oss.javaguide.cn/github/javaguide/java/concurrent/completablefuture-class-diagram.jpg\" alt=\"img\" /></p>\n<p><font color='red'> <code>CompletionStage</code>  接口描述了一个异步计算的阶段</font>。很多计算可以分成多个阶段或步骤，此时可以通过它将所有步骤组合起来，形成异步计算的流水线。</p>\n<p><code>CompletionStage</code>  接口中的方法比较多， <code>CompletableFuture</code>  的函数式能力就是这个接口赋予的。从这个接口的方法参数你就可以发现其大量使用了 Java8 引入的函数式编程。</p>\n<h1 id=\"并发包juc\"><a class=\"anchor\" href=\"#并发包juc\">#</a> 并发包（J.U.C）</h1>\n<blockquote>\n<p><code>java.util.concurrent</code>  包</p>\n</blockquote>\n<h2 id=\"java常见并发容器\"><a class=\"anchor\" href=\"#java常见并发容器\">#</a> Java 常见并发容器</h2>\n<p>JDK 提供的这些容器大部分在  <code>java.util.concurrent</code>  包中。</p>\n<ul>\n<li><strong> <code>ConcurrentHashMap</code> </strong> : 线程安全的  <code>HashMap</code></li>\n<li><strong> <code>CopyOnWriteArrayList</code> </strong> : 线程安全的  <code>List</code> ，在<font color='red'>读多写少</font>的场合性能非常好，远远好于  <code>Vector</code></li>\n<li><strong> <code>ConcurrentLinkedQueue</code> </strong> : 高效的并发队列，<font color='red'>使用链表实现</font>。可以看做一个线程安全的  <code>LinkedList</code> ，这是一个<font color='red'>非阻塞队列</font></li>\n<li><strong> <code>BlockingQueue</code> </strong> : 这是一个<font color='red'>接口</font>，JDK 内部通过链表、数组等方式实现了这个接口。表示<font color='red'>阻塞队列</font>，非常适合用于作为数据共享的通道</li>\n<li><strong> <code>ConcurrentSkipListMap</code> </strong> : <font color='red'>跳表</font>的实现。这是一个 Map，使用跳表的数据结构进行快速查找</li>\n</ul>\n<h3 id=\"concurrenthashmap\"><a class=\"anchor\" href=\"#concurrenthashmap\">#</a> ConcurrentHashMap</h3>\n<blockquote>\n<p><strong>线程安全的  <code>HashMap</code> </strong></p>\n</blockquote>\n<p><font color='red'> <code>HashMap</code>  不是线程安全的</font>，在并发场景下如果要保证一种可行的方式是使用  <code>Collections.synchronizedMap()</code>  方法来包装我们的  <code>HashMap</code> 。但这是通过使用一个全局的锁来同步不同线程间的并发访问，因此会带来不可忽视的性能问题。</p>\n<p>所以就有了 <strong> <code>HashMap</code>  的线程安全版本</strong> ——  <code>ConcurrentHashMap</code>  的诞生。</p>\n<ul>\n<li>在 JDK 1.7 的时候， <code>ConcurrentHashMap</code>  对整个桶数组进行了分段（Segment），采用的是<strong>分段锁</strong>，每把锁对应一个 Segment。每个  <code>Segment</code>  都是一个类似  <code>HashMap</code>  数组的结构，它可以扩容，它的冲突会转化为链表。但是  <code>Segment</code>  的个数一但初始化就不能改变。</li>\n<li>到了 JDK 1.8 的时候， <code>ConcurrentHashMap</code>  摒弃了  <code>Segment</code>  的概念，而是采用 <strong> <code>Node</code>  数组 + 链表 / 红黑树</strong> 的数据结构来实现，使用 <strong> <code>synchronized</code>  锁 + CAS</strong> 来控制并发。Node 是类似于一个 HashEntry 的结构。它的冲突再达到一定大小时会转化成红黑树，在冲突小于一定数量时又退回链表。</li>\n</ul>\n<h4 id=\"concurrenthashmap-17\"><a class=\"anchor\" href=\"#concurrenthashmap-17\">#</a> ConcurrentHashMap 1.7</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/java7_concurrenthashmap.png\" alt=\"Java 7 ConcurrentHashMap 存储结构\" /></p>\n<p>Java 7 中  <code>ConcurrentHashMap</code>  的存储结构如上图，</p>\n<ul>\n<li><code>ConcurrnetHashMap</code>  由很多个  <code>Segment</code>  组合</li>\n<li>每一个  <code>Segment</code>  是一个类似于  <code>HashMap</code>  的结构  <code>HashEntry</code>  数组，所以每一个  <code>HashEntry</code>  的内部可以进行扩容。</li>\n<li>但是  <code>Segment</code>  的个数一旦<strong>初始化就不能改变</strong>，默认  <code>Segment</code>  的个数是 16 个，你也可以认为  <code>ConcurrentHashMap</code>  默认支持最多 16 个线程并发。</li>\n</ul>\n<h4 id=\"concurrenthashmap-18\"><a class=\"anchor\" href=\"#concurrenthashmap-18\">#</a> ConcurrentHashMap 1.8</h4>\n<h5 id=\"存储结构\"><a class=\"anchor\" href=\"#存储结构\">#</a> 存储结构</h5>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/java8_concurrenthashmap.png\" alt=\"Java8 ConcurrentHashMap 存储结构（图片来自 javadoop）\" /></p>\n<p>可以发现 Java8 的 ConcurrentHashMap 相对于 Java7 来说变化比较大，不再是之前的 Segment 数组 + HashEntry 数组 + 链表，而是 <strong>Node 数组 + 链表 / 红黑树</strong>。<font color='red'>当冲突链表达到一定长度时，链表会转换成红黑树</font>。</p>\n<h5 id=\"初始化-inittable\"><a class=\"anchor\" href=\"#初始化-inittable\">#</a> 初始化 initTable</h5>\n<p>从源码中可以发现  <code>ConcurrentHashMap</code>  的初始化是通过<strong>自旋</strong>和 <strong>CAS 操作</strong>完成的。里面需要注意的是变量  <code>sizeCtl</code>  ，它的值决定着当前的初始化状态。</p>\n<ul>\n<li>\n<p>-1 说明正在初始化</p>\n</li>\n<li>\n<p>-N 说明有 N-1 个线程正在进行扩容</p>\n</li>\n<li>\n<p>0 表示 table 初始化大小，如果 table 没有初始化</p>\n</li>\n<li>\n<p>&gt;0 表示 table 扩容的阈值，如果 table 已经初始化。</p>\n</li>\n</ul>\n<h5 id=\"put\"><a class=\"anchor\" href=\"#put\">#</a> put</h5>\n<ol>\n<li>\n<p>根据 key 计算出 hashcode</p>\n</li>\n<li>\n<p>判断是否需要进行初始化</p>\n</li>\n<li>\n<p>即为当前 key 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功</p>\n</li>\n<li>\n<p>如果当前位置的  <code>hashcode == MOVED == -1</code> ，则需要进行扩容</p>\n</li>\n<li>\n<p>如果都不满足，则利用 synchronized 锁写入数据</p>\n</li>\n<li>\n<p>如果数量大于  <code>TREEIFY_THRESHOLD</code>  则要执行树化方法，在  <code>treeifyBin</code>  中会首先判断当前数组长度 ≥64 时才会将链表转换为红黑树</p>\n</li>\n</ol>\n<h5 id=\"get\"><a class=\"anchor\" href=\"#get\">#</a> get</h5>\n<ol>\n<li>根据 hash 值计算位置。</li>\n<li>查找到指定位置，如果头节点就是要找的，直接返回它的 value.</li>\n<li>如果头节点 hash 值小于 0 ，说明正在扩容或者是红黑树，查找之。</li>\n<li>如果是链表，遍历查找之。</li>\n</ol>\n<h4 id=\"面试题concurrenthashmap-相对于-hashmap-好在哪里\"><a class=\"anchor\" href=\"#面试题concurrenthashmap-相对于-hashmap-好在哪里\">#</a> 【面试题】concurrentHashMap 相对于 hashMap 好在哪里？</h4>\n<p>ConcurrentHashMap 是 Java 中的一个<strong>线程安全</strong>的 hashMap 实现，它可以在多线程环境下并发地进行读写操作，而<font color='red'>不需要像传统的 hashMap 那样在读写时加锁</font>。</p>\n<p>ConcurrentHashMap 的实现原理主要基于<strong>分段锁</strong>和 CAS 操作。它将整个哈希表分成了多个 Segment（段），每个 Segment 都类似于一个小的 HashMap，它拥有自己的数组和一个独立的锁。在 ConcurrentHashMap 中，读操作不需要锁，可以直接对 Segment 进行读取，而<font color='red'>写操作则只需要锁定对应的 Segment，而不是整个哈希表</font>，这样可以大大提高并发性能。</p>\n<h3 id=\"copyonwritearraylist\"><a class=\"anchor\" href=\"#copyonwritearraylist\">#</a> CopyOnWriteArrayList</h3>\n<blockquote>\n<p><strong>线程安全的  <code>List</code> </strong>，适合读多写少的场景</p>\n</blockquote>\n<p>在 JDK1.5 之前，如果想要使用并发安全的  <code>List</code>  只能选择  <code>Vector</code> 。而  <code>Vector</code>  是一种老旧的集合，已经被淘汰。 <code>Vector</code>  对于增删改查等方法基本都加了  <code>synchronized</code> ，这种方式虽然能够保证同步，但这相当于对整个  <code>Vector</code>  加上了一把大锁，使得每个方法执行的时候都要去获得锁，导致性能非常低下。</p>\n<p>JDK1.5 引入了  <code>Java.util.concurrent</code> （JUC）包，其中提供了很多线程安全且并发性能良好的容器，其中唯一的线程安全  <code>List</code>  实现就是  <code>CopyOnWriteArrayList</code>  。</p>\n<p>对于大部分业务场景来说，读取操作往往是远大于写入操作的。由于读取操作不会对原有数据进行修改，因此，对于每次读取都进行加锁其实是一种资源浪费。相比之下，我们应该允许多个线程同时访问  <code>List</code>  的内部数据，毕竟对于读取操作来说是安全的。</p>\n<p>这种思路与  <code>ReentrantReadWriteLock</code>  读写锁的设计思想非常类似，即读读不互斥、读写互斥、写写互斥（<font color='red'>只有读读不互斥</font>）。 <code>CopyOnWriteArrayList</code>  更进一步地实现了这一思想。为了将读操作性能发挥到极致， <code>CopyOnWriteArrayList</code>  中的<font color='red'>读取操作是完全无需加锁的</font>。更加厉害的是，<font color='red'>写入操作也不会阻塞读取操作，只有写写才会互斥</font>。这样一来，读操作的性能就可以大幅度提升。</p>\n<p><code>CopyOnWriteArrayList</code>  线程安全的核心在于其采用了 <strong>写时复制（Copy-On-Write）</strong> 的策略，从  <code>CopyOnWriteArrayList</code>  的名字就能看出了。</p>\n<p>当需要修改（  <code>add</code> ， <code>set</code> 、 <code>remove</code>  等操作）  <code>CopyOnWriteArrayList</code>  的内容时，<strong><font color='red'>不会直接修改原数组，而是会先创建底层数组的副本，对副本数组进行修改，修改完之后再将修改后的数组赋值回去</font></strong>，这样就可以保证写操作不会影响读操作了。</p>\n<h3 id=\"concurrentlinkedqueue\"><a class=\"anchor\" href=\"#concurrentlinkedqueue\">#</a> ConcurrentLinkedQueue</h3>\n<blockquote>\n<p><strong>线程安全的<font color='red'>非阻塞队列</font></strong></p>\n</blockquote>\n<p>Java 提供的线程安全的  <code>Queue</code>  可以分为阻塞队列和非阻塞队列，其中阻塞队列的典型例子是  <code>BlockingQueue</code> ，非阻塞队列的典型例子是  <code>ConcurrentLinkedQueue</code> ，在实际应用中要根据实际需要选用阻塞队列或者非阻塞队列。</p>\n<p><strong>阻塞队列可以通过加锁来实现，非阻塞队列可以通过 CAS 操作实现。</strong></p>\n<p>从名字可以看出， <code>ConcurrentLinkedQueue</code>  这个队列使用<font color='red'>链表</font>作为其数据结构。 <code>ConcurrentLinkedQueue</code>  应该算是在高并发环境中性能最好的队列了。它之所有能有<font color='red'>很好的性能</font>，是因为其内部复杂的实现。</p>\n<p><code>ConcurrentLinkedQueue</code>  主要使用 <strong>CAS 非阻塞算法</strong>来实现线程安全就好了。</p>\n<p><code>ConcurrentLinkedQueue</code>  适合在对性能要求相对较高，同时对队列的读写存在多个线程同时进行的场景，即如果对队列加锁的成本较高则适合使用<font color='red'>无锁</font>的  <code>ConcurrentLinkedQueue</code>  来替代。</p>\n<h3 id=\"blockingqueue-接口\"><a class=\"anchor\" href=\"#blockingqueue-接口\">#</a> BlockingQueue 接口</h3>\n<blockquote>\n<p><strong>线程安全的<font color='red'>阻塞队列</font></strong>，可用作线程池中的工作队列 <code>workQueue</code></p>\n</blockquote>\n<h4 id=\"简介-8\"><a class=\"anchor\" href=\"#简介-8\">#</a> 简介</h4>\n<p>阻塞队列（ <code>BlockingQueue</code> ）被广泛使用在 “生产者 - 消费者” 问题中，其原因是  <code>BlockingQueue</code>  提供了<font color='red'>可阻塞的插入和移除</font>的方法。</p>\n<ul>\n<li>当队列容器已满，生产者线程会被阻塞，直到队列未满</li>\n<li>当队列容器为空时，消费者线程会被阻塞，直至队列非空时为止</li>\n</ul>\n<p><code>BlockingQueue</code>  是一个<font color='red'>接口</font>，继承自  <code>Queue</code> ，所以其实现类也可以作为  <code>Queue</code>  的实现来使用，而  <code>Queue</code>  又继承自  <code>Collection</code>  接口。下面是  <code>BlockingQueue</code>  的实现类：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/51622268.jpg\" alt=\"BlockingQueue 的实现类\" /></p>\n<p>下面主要介绍一下 3 个常见的  <code>BlockingQueue</code>  的实现类： <code>ArrayBlockingQueue</code> 、 <code>LinkedBlockingQueue</code> 、 <code>PriorityBlockingQueue</code> 。</p>\n<h4 id=\"arrayblockingqueue\"><a class=\"anchor\" href=\"#arrayblockingqueue\">#</a> ArrayBlockingQueue</h4>\n<p><code>ArrayBlockingQueue</code>  是  <code>BlockingQueue</code>  接口的<strong>有界阻塞队列</strong>实现类，底层采用<font color='red'>数组</font>来实现。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">implements</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>ArrayBlockingQueue</code>  <font color='red'>一旦创建，容量不能改变</font>。其并发控制采用<font color='red'>可重入锁</font>  <code>ReentrantLock</code>  ，不管是插入操作还是读取操作，都需要获取到锁才能进行操作。</p>\n<ul>\n<li>当队列容量满时，尝试将元素放入队列将导致操作阻塞</li>\n<li>尝试从一个空队列中取一个元素也会同样阻塞</li>\n</ul>\n<p><code>ArrayBlockingQueue</code>  默认情况下不能保证线程访问队列的公平性，所谓公平性是指严格按照线程等待的绝对时间顺序，即最先等待的线程能够最先访问到  <code>ArrayBlockingQueue</code> 。而<font color='red'>非公平性</font>则是指访问  <code>ArrayBlockingQueue</code>  的顺序不是遵守严格的时间顺序，有可能存在，当  <code>ArrayBlockingQueue</code>  可以被访问时，长时间阻塞的线程依然无法访问到  <code>ArrayBlockingQueue</code> 。如果保证公平性，通常会降低吞吐量。</p>\n<p>如果需要获得公平性的  <code>ArrayBlockingQueue</code> ，可采用如下代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> blockingQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"linkedblockingqueue\"><a class=\"anchor\" href=\"#linkedblockingqueue\">#</a> LinkedBlockingQueue</h4>\n<p><code>LinkedBlockingQueue</code>  底层基于 **<font color='red'>单向链表</font><strong>实现的阻塞队列，可以当做</strong>无界阻塞队列 ** 也可以当做有界阻塞队列来使用，同样满足 <strong><font color='red'>FIFO</font></strong> 的特性，与  <code>ArrayBlockingQueue</code>  相比起来具有更高的吞吐量，为了防止  <code>LinkedBlockingQueue</code>  容量迅速增大，损耗大量内存。通常在创建  <code>LinkedBlockingQueue</code>  对象时，会指定其大小，<font color='red'>如果未指定大小，容量等于  <code>Integer.MAX_VALUE</code> </font> 。</p>\n<p>相关构造方法:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 某种意义上的无界队列</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * Creates a &#123;@code LinkedBlockingQueue&#125; with a capacity of</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * &#123;@link Integer#MAX_VALUE&#125;.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * 有界队列</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * Creates a &#123;@code LinkedBlockingQueue&#125; with the given (fixed) capacity.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @param capacity the capacity of this queue</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @throws IllegalArgumentException if &#123;@code capacity&#125; is not greater</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> *         than zero</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>capacity <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    last <span class=\"token operator\">=</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"priorityblockingqueue\"><a class=\"anchor\" href=\"#priorityblockingqueue\">#</a> PriorityBlockingQueue</h4>\n<blockquote>\n<p>线程安全的  <code>PriorityQueue</code></p>\n</blockquote>\n<p><code>PriorityBlockingQueue</code>  是一个<strong>支持优先级的无界阻塞队列</strong>。默认情况下元素采用<font color='red'>自然顺序</font>进行排序，也可以通过自定义类<font color='red'>实现  <code>compareTo()</code>  方法</font>来指定元素排序规则，或者初始化时通过<font color='red'>构造器参数  <code>Comparator</code>  </font>来指定排序规则。</p>\n<p><code>PriorityBlockingQueue</code>  并发控制采用的是<font color='red'>可重入锁</font>  <code>ReentrantLock</code> ，队列为<font color='red'>无界队列</font>（ <code>ArrayBlockingQueue</code>  是有界队列， <code>LinkedBlockingQueue</code>  也可以通过在构造函数中传入  <code>capacity</code>  指定队列最大的容量，但是  <code>PriorityBlockingQueue</code>  只能指定初始的队列大小，后面插入元素的时候，<strong>如果空间不够的话会自动扩容</strong>）。</p>\n<p>简单地说，它就是  <code>PriorityQueue</code>  的线程安全版本。<strong><font color='red'>不可以插入 null 值，同时，插入队列的对象必须是可比较大小的（comparable）</font></strong>，否则报  <code>ClassCastException</code>  异常。它的插入操作 put 方法不会 block，因为它是无界队列（take 方法在队列为空的时候会阻塞）。</p>\n<h3 id=\"concurrentskiplistmap\"><a class=\"anchor\" href=\"#concurrentskiplistmap\">#</a> ConcurrentSkipListMap</h3>\n<blockquote>\n<p><strong>使用跳表实现的 Map</strong></p>\n</blockquote>\n<p>首先要清楚什么是 “跳表”：对于一个单链表，即使链表是有序的，如果我们想要在其中查找某个数据，也只能从头到尾遍历链表，这样效率自然就会很低，跳表就不一样了。跳表是一种<font color='red'>可用来快速查找</font>的数据结构，有点类似于平衡树。它们都可以对元素进行快速的查找。但一个重要的区别是：对平衡树的插入和删除往往很可能导致平衡树进行一次全局的调整。而<font color='red'>对跳表的插入和删除只需要对数据结构的局部进行操作即可</font>。这样带来的好处是：在高并发的情况下，你会需要一个全局锁来保证整个平衡树的线程安全。而对于跳表，你只需要<font color='red'>部分锁即可</font>。这样，在高并发环境下，你就可以拥有<font color='red'>更好的性能</font>。而就查询的性能而言，跳表的<font color='red'>时间复杂度也是 O (logn)</font> 。所以在并发数据结构中，JDK 使用跳表来实现一个 Map。</p>\n<p>跳表的本质：<strong>同时维护了多个链表，并且链表是分层的</strong>。<font color='red'>最低层的链表维护了跳表内所有的元素，每上面一层链表都是下面一层的子集</font>。跳表内的<font color='red'>所有链表的元素都是排序的</font>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/93666217.jpg\" alt=\"2级索引跳表\" /></p>\n<center>（2级索引跳表）</center>\n<p>从顶级链表开始查找。<font color='red'>一旦发现被查找的元素大于当前链表中的<strong>所有</strong>取值，就会转入下一层链表继续找</font>。这也就是说在查找过程中，搜索是跳跃式的。</p>\n<p>如下图所示，在跳表中查找元素 18。查找 18 的时候原来需要遍历 18 次，现在只需要 7 次即可。针对链表长度比较大的时候，<font color='red'>构建索引</font>对查找效率的提升就会非常明显。</p>\n<p>从上面很容易看出，<strong>跳表是一种利用空间换时间的算法。</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/32005738.jpg\" alt=\"在跳表中查找元素18\" /></p>\n<center>（在跳表中查找元素18）</center>\n<p>使用跳表实现  <code>Map</code>  和使用哈希算法实现  <code>Map</code>  的另外一个不同之处是：哈希并不会保存元素的顺序，而<strong>跳表内所有的元素都是排序的</strong>。因此在对跳表进行遍历时，你会得到一个有序的结果。所以，如果你的应用需要有序性，那么跳表就是你不二的选择。JDK 中实现这一数据结构的类是  <code>ConcurrentSkipListMap</code> 。</p>\n<h1 id=\"java-io\"><a class=\"anchor\" href=\"#java-io\">#</a> Java IO</h1>\n<h2 id=\"基础知识\"><a class=\"anchor\" href=\"#基础知识\">#</a> 基础知识</h2>\n<p>Java IO 流的 40 多个类都是从如下<strong> 4 个抽象类</strong>基类中派生出来的：</p>\n<ul>\n<li><code>InputStream</code> ：字节输入流</li>\n<li><code>OutputStream</code> ：字节输出流</li>\n<li><code>Reader</code> : 字符输入流</li>\n<li><code>Writer</code> : 字符输出流</li>\n</ul>\n<h2 id=\"设计模式\"><a class=\"anchor\" href=\"#设计模式\">#</a> 设计模式</h2>\n<blockquote>\n<p>从 IO 中能够学习到的设计模式</p>\n</blockquote>\n<h3 id=\"装饰器模式decorator\"><a class=\"anchor\" href=\"#装饰器模式decorator\">#</a> 装饰器模式（Decorator）</h3>\n<p>装饰器模式<strong>可以在不改变原有对象的情况下，拓展其功能</strong>。通过<font color='red'>组合</font>替代继承，来扩展原始类的功能，在一些继承关系比较复杂的场景更加实用。</p>\n<p><font color='red'>对于字节流来说， <code>FilterInputStream</code>  和  <code>FilterOutputStream</code>  是装饰器模式的核心</font>，分别用于增强  <code>InputStream</code>  和  <code>OutputStream</code>  子类对象的功能。</p>\n<p>我们常见的  <code>BufferedInputStream</code>  (字节缓冲输入流)、 <code>DataInputStream</code>  等等都是  <code>FilterInputStream</code>  的子类， <code>BufferedOutputStream</code> （字节缓冲输出流）、 <code>DataOutputStream</code>  等等都是  <code>FilterOutputStream</code>  的子类。</p>\n<h3 id=\"适配器模式adapter\"><a class=\"anchor\" href=\"#适配器模式adapter\">#</a> 适配器模式（Adapter）</h3>\n<p>适配器（Adapter Pattern）模式主要<strong>用于接口互不兼容的类的协调工作</strong>，你可以将其联想到我们日常经常使用的电源适配器。</p>\n<p>适配器模式中存在被适配的对象或者类称为<strong>适配者 (Adaptee)</strong> ，作用于适配者的对象或者类称为<strong>适配器 (Adapter)</strong> 。适配器分为对象适配器和类适配器。</p>\n<ul>\n<li>类适配器：使用继承关系来实现</li>\n<li>对象适配器：使用组合关系来实现</li>\n</ul>\n<h4 id=\"与装饰器模式的区别\"><a class=\"anchor\" href=\"#与装饰器模式的区别\">#</a> 与装饰器模式的区别</h4>\n<p>装饰器模式：更侧重于动态地增强原始类的功能，装饰器类需要跟原始类继承相同的抽象类或者实现相同的接口。并且，装饰器模式支持对原始类嵌套使用多个装饰器。</p>\n<p>适配器模式：更侧重于让接口不兼容而不能交互的类可以一起工作，当我们调用适配器对应的方法时，适配器内部会调用适配者类或者和适配类相关的类的方法，这个过程透明的。就比如说  <code>StreamDecoder</code>  （流解码器）和 <code>StreamEncoder</code> （流编码器）就是分别基于  <code>InputStream</code>  和  <code>OutputStream</code>  来获取  <code>FileChannel</code>  对象并调用对应的  <code>read</code>  方法和  <code>write</code>  方法进行字节数据的读取和写入。</p>\n<h3 id=\"工厂模式factory\"><a class=\"anchor\" href=\"#工厂模式factory\">#</a> 工厂模式（Factory）</h3>\n<p>工厂模式<strong>用于创建对象</strong>，NIO 中大量用到了工厂模式，比如  <code>Files</code>  类的  <code>newInputStream</code>  方法用于创建  <code>InputStream</code>  对象（静态工厂）、  <code>Paths</code>  类的  <code>get</code>  方法创建  <code>Path</code>  对象（静态工厂）、 <code>ZipFileSystem</code>  类（ <code>sun.nio</code>  包下的类，属于  <code>java.nio</code>  相关的一些内部实现）的  <code>getPath</code>  的方法创建  <code>Path</code>  对象（简单工厂）。</p>\n<h3 id=\"观察者模式\"><a class=\"anchor\" href=\"#观察者模式\">#</a> 观察者模式</h3>\n<p>NIO 中的文件目录<strong>监听服务</strong>使用到了观察者模式。</p>\n<p>NIO 中的文件目录监听服务基于  <code>WatchService</code>  接口和  <code>Watchable</code>  接口。<strong> <code>WatchService</code>  属于观察者， <code>Watchable</code>  属于被观察者</strong>。</p>\n<p><code>Watchable</code>  接口定义了一个用于将对象注册到  <code>WatchService</code> （监控服务） 并绑定监听事件的方法  <code>register</code>  。</p>\n<p>常用的监听事件有 3 种：</p>\n<ul>\n<li><code>StandardWatchEventKinds.ENTRY_CREATE</code> ：文件创建。</li>\n<li><code>StandardWatchEventKinds.ENTRY_DELETE</code>  : 文件删除。</li>\n<li><code>StandardWatchEventKinds.ENTRY_MODIFY</code>  : 文件修改。</li>\n</ul>\n<h2 id=\"io-模型\"><a class=\"anchor\" href=\"#io-模型\">#</a> <mark>IO 模型</mark></h2>\n<h3 id=\"何为-io\"><a class=\"anchor\" href=\"#何为-io\">#</a> 何为 IO ？</h3>\n<p>从应用程序的角度来解读一下 I/O。</p>\n<p>根据操作系统相关知识：<font color='red'>为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为<strong>用户空间（User space）<strong>和</strong>内核空间（Kernel space）</strong></font>。</p>\n<blockquote>\n<p><strong>为了限制不同的程序之间的访问能力</strong>，防止它们获取别的程序的内存数据，或者获取外围设备的数据，并发送到网络，CPU 划分出两个权限等级：</p>\n<ul>\n<li>\n<p><strong>用户态</strong>：只能受限地访问内存，且不允许访问外围设备，占用 cpu 的能力被剥夺，cpu 资源可以被其他程序获取。</p>\n</li>\n<li>\n<p><strong>内核态</strong>：cpu 可以访问内存的所有数据，包括外围设备，例如硬盘，网卡，cpu 也可以将自己从一个程序切换到另一个程序。</p>\n</li>\n</ul>\n<p><strong>最大的区别：权限不同</strong>，运行在用户态下的程序不能直接访问操作系统内核数据结构和程序。</p>\n</blockquote>\n<p>像我们平常运行的应用程序都是运行在用户空间，只有内核空间才能进行系统态级别的资源有关的操作，比如文件管理、进程通信、内存管理等等。也就是说，<font color='red'>想要进行 IO 操作，一定是要依赖内核空间的能力</font>。并且，用户空间的程序不能直接访问内核空间。当想要执行 IO 操作时，由于没有执行这些操作的权限，只能发起系统调用请求操作系统帮忙完成。</p>\n<p>因此，用户进程想要执行 IO 操作的话，必须通过<font color='red'>系统调用</font>来间接访问内核空间。</p>\n<p>我们在平常开发过程中接触最多的就是<font color='red'>磁盘 IO（读写文件）</font>和<font color='red'>网络 IO（网络请求和响应）</font>。</p>\n<p>从应用程序的视角来看，应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就是说，<strong>应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的</strong>。</p>\n<p>当应用程序发起 I/O 调用后，会经历两个步骤：</p>\n<ol>\n<li>内核等待 I/O 设备准备好数据</li>\n<li>内核将数据从内核空间拷贝到用户空间</li>\n</ol>\n<h3 id=\"常见的-io-模型\"><a class=\"anchor\" href=\"#常见的-io-模型\">#</a> 常见的 IO 模型</h3>\n<p>UNIX 系统下，IO 模型一共有 5 种：</p>\n<ul>\n<li>同步阻塞 I/O</li>\n<li>同步非阻塞 I/O</li>\n<li>I/O 多路复用</li>\n<li>信号驱动 I/O</li>\n<li>异步 I/O</li>\n</ul>\n<h3 id=\"java-中-3-种常见-io-模型\"><a class=\"anchor\" href=\"#java-中-3-种常见-io-模型\">#</a> Java 中 3 种常见 IO 模型</h3>\n<h4 id=\"bioblocking\"><a class=\"anchor\" href=\"#bioblocking\">#</a> BIO（Blocking）</h4>\n<p>BIO 属于<strong>同步阻塞 IO 模型</strong>，应用程序发起 read 调用后，会一直阻塞，直到内核把数据拷贝到用户空间。这种阻塞模型<font color='red'>在处理多个并发连接时可能会导致性能瓶颈</font>，因为需要为每个连接创建一个线程，而线程的创建和切换都是有开销的。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/6a9e704af49b4380bb686f0c96d33b81%7Etplv-k3u1fbpfcp-watermark.png\" alt=\"图源：《深入拆解Tomcat &amp; Jetty》\" /></p>\n<h4 id=\"nionon-blockingnew\"><a class=\"anchor\" href=\"#nionon-blockingnew\">#</a> <mark>NIO（Non-blocking/New）</mark></h4>\n<h5 id=\"nio-简介\"><a class=\"anchor\" href=\"#nio-简介\">#</a> NIO 简介</h5>\n<p>为了解决 BIO 同步阻塞 IO 模型导致在高并发下的性能瓶颈问题，Java 1.4 引入了 NIO，对应  <code>java.nio</code>  包，提供了  <code>Channel</code>  ,  <code>Selector</code> ， <code>Buffer</code>  等抽象。它在标准 Java 代码中提供了<strong>非阻塞、面向缓冲、基于通道</strong>的 I/O，<font color='red'>在高负载、高并发情况下可以使用少量的线程来处理多个连接</font>，大大提高了 I/O 效率和并发。</p>\n<p>NIO 可以看作是 <strong>I/O 多路复用模型</strong>。也有很多人认为，Java 中的 NIO 属于同步非阻塞 IO 模型。</p>\n<hr />\n<p>先来看看<strong>同步非阻塞 IO 模型</strong>。应用程序会一直发起 read 调用，等待数据从内核空间拷贝到用户空间的这段时间里，线程依然是阻塞的，直到在内核把数据拷贝到用户空间。<font color='red'>通过 轮询 操作，避免了一直阻塞</font>。</p>\n<p>但是存在问题：<strong><font color='red'>应用程序不断进行 I/O 系统调用轮询数据是否已经准备好的过程是十分消耗 CPU 资源的</font></strong>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/bb174e22dbe04bb79fe3fc126aed0c61%7Etplv-k3u1fbpfcp-watermark.png\" alt=\"图源：《深入拆解Tomcat &amp; Jetty》\" /></p>\n<hr />\n<p>这个时候，<strong>I/O 多路复用模型</strong> 就上场了。线程首先发起  <code>select</code>  调用，询问内核数据是否准备就绪，等内核把数据准备好了，用户线程再发起  <code>read</code>  调用。read 调用的过程（数据从内核空间 -&gt; 用户空间）还是阻塞的。</p>\n<blockquote>\n<p>目前支持 IO 多路复用的系统调用，有  <code>select</code> ， <code>epoll</code>  等等。select 系统调用，目前几乎在所有的操作系统上都有支持。</p>\n<ul>\n<li><strong>select 调用</strong>：内核提供的系统调用，它支持一次查询多个系统调用的可用状态。几乎所有的操作系统都支持。</li>\n<li><strong>epoll 调用</strong>：linux 2.6 内核，属于 select 调用的增强版本，优化了 IO 的执行效率。</li>\n</ul>\n</blockquote>\n<p>IO 多路复用模型，<strong><font color='red'>通过减少无效的系统调用，减少了对 CPU 资源的消耗</font></strong>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/88ff862764024c3b8567367df11df6ab%7Etplv-k3u1fbpfcp-watermark.png\" alt=\"img\" /></p>\n<hr />\n<h5 id=\"nio-三大组件\"><a class=\"anchor\" href=\"#nio-三大组件\">#</a> NIO 三大组件</h5>\n<p>NIO 主要包括以下三个核心组件：</p>\n<ul>\n<li><strong>Buffer（缓冲区）</strong>：NIO 读写数据都是通过缓冲区进行操作的。读操作的时候将 Channel 中的数据填充到 Buffer 中，而写操作时将 Buffer 中的数据写入到 Channel 中。</li>\n<li><strong>Channel（通道）</strong>：Channel 是一个双向的、可读可写的数据传输通道，NIO 通过 Channel 来实现数据的输入输出。通道是一个抽象的概念，它可以代表文件、套接字或者其他数据源之间的连接。</li>\n<li><strong>Selector（选择器）</strong>：也被称为<font color='red'>多路复用器</font>，<font color='red'>允许一个线程处理多个 Channel</font>。所有的 Channel 都可以注册到 Selector 上，由 Selector 来分配线程来处理事件。</li>\n</ul>\n<p>三者的关系如下图所示（暂时不理解没关系，后文会详细介绍）：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/channel-buffer-selector.png\" alt=\"Buffer、Channel和Selector三者之间的关系\" /></p>\n<center>（Buffer、Channel和Selector三者之间的关系）</center>\n<h6 id=\"buffer缓冲区\"><a class=\"anchor\" href=\"#buffer缓冲区\">#</a> Buffer（缓冲区）</h6>\n<p>在传统的 BIO 中，数据的读写是面向流的， 分为字节流和字符流。</p>\n<p>在 Java 1.4 的 **<font color='red'> NIO 库中，所有数据都是用缓冲区处理的</font>**，这是新库和之前的 BIO 的一个重要区别，有点类似于 BIO 中的缓冲流。</p>\n<ul>\n<li>NIO 在读取数据时，它是直接读取缓冲区中的</li>\n<li>在写入数据时，是写入到缓冲区中</li>\n</ul>\n<p><code>Buffer</code>  的子类如下图所示，其中最常用的是  <code>ByteBuffer</code> ，它可以用来存储和操作字节数据。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/buffer-subclasses.png\" alt=\"Buffer 的子类\" /></p>\n<center>（Buffer的子类）</center>\n<p>可以将 Buffer <font color='red'>理解为数组</font>， <code>IntBuffer</code> 、 <code>FloatBuffer</code> 、 <code>CharBuffer</code>  等分别对应  <code>int[]</code> 、 <code>float[]</code> 、 <code>char[]</code>  等。</p>\n<hr />\n<p>为了更清晰地认识缓冲区，我们来简单看看  <code>Buffer</code>  类中定义的<font color='gree'>四个成员变量</font>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Buffer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> mark <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> position <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这四个成员变量满足如下的关系：<font color='red'>0 &lt;= mark &lt;= position &lt;= limit &lt;= capacity</font>，具体含义如下：</p>\n<ol>\n<li><font color='cornflowerblue'>容量（ <code>capacity</code> ）</font>： <code>Buffer</code>  可以存储的<font color='red'>最大数据量</font>， <code>Buffer</code>  创建时设置且<font color='red'>不可改变</font>。</li>\n<li><font color='cornflowerblue'>界限（ <code>limit</code> ）</font>： <code>Buffer</code>  中可以<font color='red'>读 / 写数据的边界</font>。\n<ul>\n<li><font color='red'>写模式下，表示最多能写入的数据</font>，一般等于  <code>capacity</code> ；</li>\n<li><font color='red'>读模式下，表示 Buffer 中实际写入的数据大小</font>；</li>\n</ul>\n</li>\n<li><font color='cornflowerblue'>位置（ <code>position</code> ）</font>：<font color='red'>下一个可以被读写的数据的索引</font>。从写操作模式到读操作模式切换的时候（flip）， <code>position</code>  都会归零，这样就可以<font color='red'>从头开始读写</font>了。</li>\n<li><font color='cornflowerblue'>标记（ <code>mark</code> ）</font>： <code>Buffer</code>  <font color='red'>允许将位置直接定位到该标记处</font>，这是一个可选属性；</li>\n</ol>\n<p>另外，Buffer 有<font color='gree'>读模式和写模式</font>这两种模式，分别用于从 Buffer 中读取数据或者向 Buffer 中写入数据。</p>\n<ul>\n<li>Buffer 被创建之后<font color='red'>默认是写模式，调用  <code>flip()</code>  可以切换到读模式</font></li>\n<li><font color='red'>通过调用  <code>clear()</code>  或者  <code>compact()</code>  方法可以再次切换回写模式</font></li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/JavaNIOBuffer.png\" alt=\"position 、limit 和 capacity 之前的关系\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/NIOBufferClassAttributes.png\" alt=\"position 、limit 和 capacity 之前的关系\" /></p>\n<hr />\n<p><code>Buffer</code>  对象不能通过  <code>new</code>  调用构造方法创建对象，<strong><font color='gree'>只能通过静态方法实例化  <code>Buffer</code> </font></strong>。</p>\n<p>以  <code>ByteBuffer</code>  为例进行介绍：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 分配堆内存</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ByteBuffer</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 分配直接内存</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ByteBuffer</span> <span class=\"token function\">allocateDirect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Buffer <font color='gree'>最核心的两个方法</font>：</p>\n<ol>\n<li><code>get()</code>  : 读取缓冲区的数据</li>\n<li><code>put()</code>  ：向缓冲区写入数据</li>\n</ol>\n<p>除上述两个方法之外，其他的重要方法：</p>\n<ul>\n<li><code>flip()</code>  ：将缓冲区从写模式<font color='red'>切换到读模式</font>，将  <code>limit</code>  的值设置为当前  <code>position</code>  的值，将  <code>position</code>  的值设置为 0。</li>\n<li><code>clear()</code> : <font color='red'>清空缓冲区</font>，将缓冲区从读模式<font color='red'>切换到写模式</font>，并将  <code>position</code>  的值设置为 0，将  <code>limit</code>  的值设置为  <code>capacity</code>  的值。</li>\n<li>……</li>\n</ul>\n<hr />\n<p>Buffer 中<font color='gree'>数据变化的过程</font>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CharBufferDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 分配一个容量为 8 的 CharBuffer</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">CharBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">CharBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始状态：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">printState</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 向 buffer 写入 3 个字符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        buffer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入3个字符后的状态：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">printState</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 调用 flip () 方法，准备读取 buffer 中的数据，将 position 置 0,limit 的置 3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用flip()方法后的状态：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">printState</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 读取字符</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">hasRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 调用 clear () 方法，清空缓冲区，将 position 的值置为 0，将 limit 的值置为 capacity 的值</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        buffer<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用clear()方法后的状态：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">printState</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 打印 buffer 的 capacity、limit、position、mark 的位置</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharBuffer</span> buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"capacity: \"</span> <span class=\"token operator\">+</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", limit: \"</span> <span class=\"token operator\">+</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", position: \"</span> <span class=\"token operator\">+</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", mark 开始读取的字符: \"</span> <span class=\"token operator\">+</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>初始状态：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>capacity: <span class=\"token number\">8</span>, limit: <span class=\"token number\">8</span>, position: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>写入3个字符后的状态：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>capacity: <span class=\"token number\">8</span>, limit: <span class=\"token number\">8</span>, position: <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>准备读取buffer中的数据！</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>调用flip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法后的状态：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>capacity: <span class=\"token number\">8</span>, limit: <span class=\"token number\">3</span>, position: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>读取到的数据：abc</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>调用clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法后的状态：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>capacity: <span class=\"token number\">8</span>, limit: <span class=\"token number\">8</span>, position: <span class=\"token number\">0</span></pre></td></tr></table></figure><p>为了帮助理解，我绘制了一张图片展示  <code>capacity</code> 、 <code>limit</code>  和 <code>position</code>  每一阶段的变化。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/NIOBufferClassAttributesDataChanges.png\" alt=\"capacity、limit和position每一阶段的变化\" /></p>\n<h6 id=\"channel通道\"><a class=\"anchor\" href=\"#channel通道\">#</a> Channel（通道）</h6>\n<p>Channel 是一个通道，它建立了与数据源（如文件、网络套接字等）之间的连接。我们可以<font color='red'>用它来读取和写入数据</font>，就像打开了一条自来水管，让数据在 Channel 中自由流动。</p>\n<p>BIO 中的流是单向的，分为各种  <code>InputStream</code> （输入流）和  <code>OutputStream</code> （输出流），数据只是在一个方向上传输。通道与流的不同之处在于通道<font color='red'>是双向的</font>，它可以用于读、写或者同时用于读写。</p>\n<p>Channel 与前面介绍的 Buffer 打交道，读操作的时候将 Channel 中的数据填充到 Buffer 中，而写操作时将 Buffer 中的数据写入到 Channel 中。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/channel-buffer.png\" alt=\"Channel 和 Buffer之间的关系\" /></p>\n<center>（Channel 和 Buffer之间的关系）</center>\n<p>另外，因为 Channel 是<font color='red'>全双工</font>的，所以它可以比流更好地映射底层操作系统的 API。特别是在 UNIX 网络编程模型中，底层操作系统的通道都是全双工的，同时支持读写操作。</p>\n<hr />\n<p><code>Channel</code>  的<font color='gree'>子类</font>如下图所示。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/channel-subclasses.png\" alt=\"Channel 的子类\" /></p>\n<p>其中，最常用的是以下几种类型的通道：</p>\n<ul>\n<li><code>FileChannel</code> ：文件访问通道；</li>\n<li><code>SocketChannel</code> 、 <code>ServerSocketChannel</code> ：TCP 通信通道；</li>\n<li><code>DatagramChannel</code> ：UDP 通信通道；</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/channel-inheritance-relationship.png\" alt=\"Channel继承关系图\" /></p>\n<center>（Channel继承关系图）</center>\n<hr />\n<p>Channel <font color='gree'>最核心的两个方法</font>：</p>\n<ol>\n<li><code>read（）</code>  ：<font color='red'>读取数据并写入到 Buffer 中</font>。</li>\n<li><code>write（）</code>  ：<font color='red'>将 Buffer 中的数据写入到 Channel 中</font>。</li>\n</ol>\n<p>这里我们以  <code>FileChannel</code>  为例演示一下是读取文件数据的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">RandomAccessFile</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Users/guide/Documents/test_read.in\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">FileChannel</span> channel <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>channel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h6 id=\"selector选择器\"><a class=\"anchor\" href=\"#selector选择器\">#</a> Selector（选择器）</h6>\n<p>Selector 是 NIO 中的一个关键组件，是<strong>基于事件驱动的 I/O 多路复用模型</strong>，它<font color='red'>允许一个线程处理多个 Channel</font>。其主要<font color='gree'>运作原理</font>是：</p>\n<ul>\n<li>将 Channel 的事件<font color='red'>注册</font>在 Selector 上</li>\n<li>Selector 会<font color='red'>轮询</font>注册在它上的 Channel。当某个 Channel 的事件发生时，该 Channel 就处于就绪状态，会被 Selector 轮询出来，并将相关的 Channel <font color='red'>加入就绪集合中</font>。</li>\n<li>通过 <font color='red'>SelectionKey</font> 集合可以获取就绪 Channel 的集合（<font color='red'>一个 SelectionKey 对应一个 Channel</font>），然后对这些就绪的 Channel 进行<font color='red'>响应的 I/O 操作</font>。</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/selector-channel-selectionkey.png\" alt=\"Selector 选择器工作示意图\" /></p>\n<center>（Selector 选择器工作示意图）</center>\n<p>一个多路复用器 Selector 可以同时轮询多个 Channel，由于 JDK 使用了  <code>epoll()</code>  代替传统的  <code>select()</code>  实现，所以它并没有最大连接句柄  <code>1024/2048</code>  的限制。这也就意味着<strong>只需要一个线程负责 Selector 的轮询，就可以接入成千上万的客户端</strong>。</p>\n<hr />\n<p>Selector 可以<font color='gree'>监听四种事件类型</font>：</p>\n<ol>\n<li><code>SelectionKey.OP_ACCEPT</code> ：表示<font color='red'>通道接受连接</font>的事件，这通常用于  <code>ServerSocketChannel</code> 。</li>\n<li><code>SelectionKey.OP_CONNECT</code> ：表示<font color='red'>通道完成连接</font>的事件，这通常用于  <code>SocketChannel</code> 。</li>\n<li><code>SelectionKey.OP_READ</code> ：表示<font color='red'>通道准备好进行读取</font>的事件，即有数据可读。</li>\n<li><code>SelectionKey.OP_WRITE</code> ：表示<font color='red'>通道准备好进行写入</font>的事件，即可以写入数据。</li>\n</ol>\n<hr />\n<p><code>Selector</code>  是抽象类，可以<strong>通过调用此类的静态方法  <code>open()</code>  来创建 Selector 实例</strong>。Selector 可以同时监控多个  <code>SelectableChannel</code>  的  <code>IO</code>  状况，是非阻塞  <code>IO</code>  的核心。</p>\n<p>一个 Selector 实例<font color='gree'>有三种  <code>SelectionKey</code>  集合</font>：</p>\n<ol>\n<li><font color='red'>所有的</font>  <code>SelectionKey</code>  集合：代表了注册在该 Selector 上的  <code>Channel</code> ，这个集合可以通过  <code>keys()</code>  方法返回。</li>\n<li><font color='red'>被选择的</font>  <code>SelectionKey</code>  集合：代表了所有可通过  <code>select()</code>  方法获取的、需要进行  <code>IO</code>  处理的 Channel，这个集合可以通过  <code>selectedKeys()</code>  返回。</li>\n<li><font color='red'>被取消的</font>  <code>SelectionKey</code>  集合：代表了所有被取消注册关系的  <code>Channel</code> ，在下一次执行  <code>select()</code>  方法时，这些  <code>Channel</code>  对应的  <code>SelectionKey</code>  会被彻底删除，程序通常无须直接访问该集合，也没有暴露访问的方法。</li>\n</ol>\n<p>简单演示一下如何<font color='gree'>遍历被选择的  <code>SelectionKey</code>  集合</font>并进行处理：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> selectedKeys <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">selectedKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> keyIterator <span class=\"token operator\">=</span> selectedKeys<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">SelectionKey</span> key <span class=\"token operator\">=</span> keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// ServerSocketChannel 接收了一个新连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isConnectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 表示一个新连接建立</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isReadable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// Channel 有准备好的数据，可以读取</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isWritable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// Channel 有空闲的 Buffer，可以写入数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<p>Selector 还提供了一系列<font color='gree'>和  <code>select()</code>  相关的方法</font>：</p>\n<ul>\n<li><strong> <code>int select()</code> </strong>：<font color='red'>阻塞线程</font>，监控所有注册的  <code>Channel</code>  中是否有<font color='red'>需要进行  <code>IO</code>  处理</font>的。如果有，该方法会将对应的  <code>SelectionKey</code>  加入到被选择的  <code>SelectionKey</code>  集合中，并<strong>返回这些  <code>Channel</code>  的数量</strong>。</li>\n<li><code>int select(long timeout)</code> ：可以设置超时时长的  <code>select()</code>  操作。</li>\n<li><code>int selectNow()</code> ：执行一个立即返回的  <code>select()</code>  操作，相对于无参数的  <code>select()</code>  方法而言，该方法<font color='red'>不会阻塞线程</font>。</li>\n<li><code>Selector wakeup()</code> ：使一个还未返回的  <code>select()</code>  方法立刻返回。</li>\n<li>……</li>\n</ul>\n<p>使用 Selector 实现网络读写的简单示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InetSocketAddress</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ByteBuffer</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SelectionKey</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Selector</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServerSocketChannel</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SocketChannel</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Iterator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NioSelectorExample</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 实例化一个用于处理连接事件的 Channel ：ServerSocketChannel</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token class-name\">ServerSocketChannel</span> serverSocketChannel <span class=\"token operator\">=</span> <span class=\"token class-name\">ServerSocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      serverSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      serverSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置 Channel 去监听 8080 端口</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 实例化一个 Selector 对象</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token class-name\">Selector</span> selector <span class=\"token operator\">=</span> <span class=\"token class-name\">Selector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// 将 ServerSocketChannel 注册到 Selector 并监听 OP_ACCEPT 事件（通道接受连接）</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      serverSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OP_ACCEPT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 轮询</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> readyChannels <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一直阻塞，直到 Selector 上存在需要进行 IO 处理的 Channel ，立即返回这些 Channel 的数量</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readyChannels <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此时 Selector 上没有需要进行 IO 处理的 Channel，继续轮询</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 此时 Selector 上有需要进行 IO 处理的 Channel</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> selectedKeys <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">selectedKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 SelectionKey 集合，借此可获取就绪的 Channel 集合，从而得以处理它们的 IO 操作</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> keyIterator <span class=\"token operator\">=</span> selectedKeys<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 SelectionKey 的迭代器</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历 SelectionKey</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token class-name\">SelectionKey</span> key <span class=\"token operator\">=</span> keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 处理连接事件：ServerSocketChannel</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">ServerSocketChannel</span> server <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerSocketChannel</span><span class=\"token punctuation\">)</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取当前 SelectionKey 对应的 Channel</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 完成连接，返回一个 SocketChannel 对象</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token class-name\">SocketChannel</span> client <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            client<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 将 SocketChannel 对象注册到 Selector 并监听 OP_READ 事件</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            client<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OP_READ</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isReadable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 处理读事件：SocketChannel</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">SocketChannel</span> client <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">)</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取当前 SelectionKey 对应的 Channel</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新建 Buffer 帮助读取数据</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">int</span> bytesRead <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过 Channel 读取 Buffer 中的数据</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bytesRead <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>              buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 Buffer 切换为读模式（position 置为 0，limit 置为当前 Buffer 中的数据大小）</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到数据：\"</span> <span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytesRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>              <span class=\"token comment\">// 将 SocketChannel 注册到 Selector 并监听 OP_WRITE 事件</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>              client<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OP_WRITE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bytesRead <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>              <span class=\"token comment\">// 客户端断开连接</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>              client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isWritable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 处理写事件：SocketChannel</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token class-name\">SocketChannel</span> client <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">)</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Client!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            client<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过 Channel 将数据写入 Buffer 中</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// 将 SocketChannel 注册到 Selector 并监听 OP_READ 事件</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            client<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OP_READ</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>          keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 移除当前已处理完毕的 SelectionKey ，准备遍历下一个 SelectionKey </span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token comment\">// 当前 select () 处理完毕，进入下一次轮询</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在示例中，我们创建了一个简单的服务器，监听 8080 端口，使用 Selector 处理连接、读取和写入事件。当接收到客户端的数据时，服务器将读取数据并将其打印到控制台，然后向客户端回复 &quot;Hello, Client!&quot;。</p>\n<h5 id=\"nio-零拷贝\"><a class=\"anchor\" href=\"#nio-零拷贝\">#</a> NIO 零拷贝</h5>\n<p>零拷贝是<font color='red'>提升 IO 操作性能</font>的一个常用手段，像 ActiveMQ、Kafka 、RocketMQ、QMQ、Netty 等顶级开源项目都用到了零拷贝。</p>\n<p>零拷贝是指<strong>计算机执行 IO 操作时，CPU 不需要将数据从一个存储区域复制到另一个存储区域，从而可以减少 CPU 拷贝、上下文切换的时间</strong>。也就是说，零拷贝主主要解决操作系统在处理 I/O 操作时<font color='red'>频繁复制数据的问题</font>。零拷贝的常见实现技术有：  <code>mmap+write</code> 、 <code>sendfile</code>  和  <code>sendfile + DMA gather copy</code>  。</p>\n<p>下图展示了各种零拷贝技术的对比图：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>CPU 拷贝</th>\n<th>DMA 拷贝</th>\n<th>上下文切换</th>\n<th>系统调用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>传统方法 (read + write)</td>\n<td>2</td>\n<td>2</td>\n<td>4</td>\n<td>read+write</td>\n</tr>\n<tr>\n<td>mmap + write</td>\n<td>1</td>\n<td>2</td>\n<td>4</td>\n<td>mmap+write</td>\n</tr>\n<tr>\n<td>sendfile</td>\n<td>1</td>\n<td>2</td>\n<td>2</td>\n<td>sendfile</td>\n</tr>\n<tr>\n<td>sendfile + DMA gather copy</td>\n<td>0</td>\n<td>2</td>\n<td>2</td>\n<td>sendfile</td>\n</tr>\n</tbody>\n</table>\n<p>可以看出，无论是传统的 I/O 方式，还是引入了零拷贝之后，<font color='red'>2 次 DMA（Direct Memory Access）拷贝是都少不了的</font>。因为两次 DMA 都是依赖硬件完成的。零拷贝主要是减少了 CPU 拷贝及上下文的切换。</p>\n<p>Java 对零拷贝的支持：</p>\n<ul>\n<li>\n<p><code>MappedByteBuffer</code> ：是 NIO 基于 ** 内存映射（ <code>mmap</code> ）** 这种零拷⻉⽅式的提供的⼀种实现，底层实际是调用了 Linux 内核的  <code>mmap</code>  系统调用。它可以将一个文件或者文件的一部分映射到内存中，形成一个虚拟内存文件，这样就可以<font color='red'>直接操作内存中的数据</font>，而不需要通过系统调用来读写文件。</p>\n</li>\n<li>\n<p><code>FileChannel</code> ：其  <code>transferTo()/transferFrom()</code>  是 NIO 基于 ** 发送文件（ <code>sendfile</code> ）** 这种零拷贝方式的提供的一种实现，底层实际是调用了 Linux 内核的  <code>sendfile</code>  系统调用。它可以<font color='red'>直接将文件数据从磁盘发送到网络，而不需要经过用户空间的缓冲区</font>。</p>\n<blockquote>\n<p>关于 <code>FileChannel</code>  的用法可以看看这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcm9ib3RoeS9wLzE0MjM1NTk4Lmh0bWw=\">Java NIO 文件通道 FileChannel 用法</span>。</p>\n</blockquote>\n</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">loadFileIntoMemory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> xmlFile<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>xmlFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 创建 FileChannel 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">FileChannel</span> fc <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// FileChannle.map () 将文件映射到直接内存并返回 MappedByteBuffer 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token class-name\">MappedByteBuffer</span> mmb <span class=\"token operator\">=</span> fc<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileChannel<span class=\"token punctuation\">.</span>MapMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">READ_ONLY</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fc<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  xmlFileBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>fc<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  mmb<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>xmlFileBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h5>\n<p>这篇文章我们主要介绍了 NIO 的核心组件、零拷贝。</p>\n<p>如果我们需要使用 NIO 构建网络程序的话，<font color='red'>不建议直接使用原生 NIO</font>，编程复杂且功能性太弱，推荐使用一些成熟的<strong>基于 NIO 的网络编程框架比如 Netty</strong> 。Netty 在 NIO 的基础上进行了一些优化和扩展，比如支持多种协议、支持 SSL/TLS 等等。</p>\n<h4 id=\"aioasynchronous\"><a class=\"anchor\" href=\"#aioasynchronous\">#</a> AIO（Asynchronous）</h4>\n<p>Java 7 中引入了 NIO 的改进版 AIO（即 NIO 2），它是<strong>异步 IO 模型</strong>。基于事件和<font color='red'>回调机制</font>实现的，也就是<font color='red'>应用操作之后会直接返回</font>，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p>\n<p>目前来说 AIO 的<font color='red'>应用还不是很广泛</font>。Netty 之前也尝试使用过 AIO，不过又放弃了。这是因为，Netty 使用了 AIO 之后，在 Linux 系统上的性能并没有多少提升。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/3077e72a1af049559e81d18205b56fd7%7Etplv-k3u1fbpfcp-watermark.png\" alt=\"img\" /></p>\n<h4 id=\"小结-2\"><a class=\"anchor\" href=\"#小结-2\">#</a> 小结</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/bio-aio-nio.png\" alt=\"BIO、NIO 和 AIO 对比\" /></p>\n<center>（BIO、NIO 和 AIO 对比）</center>\n<h3 id=\"面试题nio-是如何实现同步非阻塞的主线程是只有一个吗\"><a class=\"anchor\" href=\"#面试题nio-是如何实现同步非阻塞的主线程是只有一个吗\">#</a> 【面试题】NIO 是如何实现同步非阻塞的？主线程是只有一个吗？</h3>\n<p>NIO 底层是用  <code>Selector</code>  、  <code>Channel</code>  和  <code>Buffer</code>  来实现的。主线程在循环调用  <code>select()</code>  方法进行阻塞等待，当有 acceptable 、 readable 或者 writable 事件发生的时候，循环就会往下走，将对应的事件交给对应的事件处理器进行处理。</p>\n<p>它可以多线程的，可以有多个 accept () 线程和多个 worker 线程。</p>\n<blockquote>\n<p>补充：</p>\n<p>在 NIO 中，使用了多路复用器 Selector 来实现同步非阻塞的 IO 操作。 Selector 可以监控多个 Channel 是否需要 IO 处理，当一个或多个 Channel 准备好读或写时，Selector 会通知程序进行读写操作，而不像 BIO 一样阻塞等待 IO 操作完成。</p>\n<p>在 NIO 中，主线程通常只有一个，但是可以使用 Selector 来管理多个 Channel，实现多个连接的非阻塞读写操作。当有多个 Channel 需要进行 IO 操作时，Selector 会轮询这些 Channel，检查它们的状态是否可读或可写。如果有可读或可写的 Channel，就将其加入到一个已选择键集合中，等待程序处理。这样，一个线程就可以同时处理多个 Channel，提高了系统的并发处理能力。</p>\n</blockquote>\n<h3 id=\"面试题bionioaio的区别\"><a class=\"anchor\" href=\"#面试题bionioaio的区别\">#</a> 【面试题】BIO/NIO/AIO 的区别？</h3>\n<p><strong>BIO（同步阻塞 IO）</strong>：在进行 IO 操作时，<font color='red'>必须等待 IO 操作完成</font>后才能进行下一步操作，这时线程会被<font color='red'>阻塞</font>。适用于连接数比较小且固定的架构，由于线程阻塞等待 IO 操作，所以<font color='red'>并发处理能力不强</font>。</p>\n<p><strong>NIO（同步非阻塞 IO）</strong>：支持多个连接同时进行读写操作，因此可以<font color='red'>用较少的线程来处理大量的连接</font>。NIO 通过  <code>Selector</code>  来监听多个  <code>Channel</code>  的状态，当 Channel 中有数据可读或可写时，Selector 会通知程序进行读写操作。适用于连接数多且连接时间较短的场景。</p>\n<p><strong>AIO（异步非阻塞 IO）</strong>：与 NIO 不同的是，<font color='red'>AIO 不需要用户线程等待 IO 操作完成</font>，而是由操作系统来完成 IO 操作，操作系统完成 IO 操作后会利用<font color='red'>回调机制</font>通知用户线程处理。适用于连接数较多且连接时间较长的场景，如高性能网络服务器等。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231025210135977.png\" alt=\"image-20231025210135977\" /></p>\n<h1 id=\"消息队列\"><a class=\"anchor\" href=\"#消息队列\">#</a> 消息队列</h1>\n<blockquote>\n<p>特指分布式消息队列</p>\n</blockquote>\n<h2 id=\"消息队列基础知识\"><a class=\"anchor\" href=\"#消息队列基础知识\">#</a> 消息队列基础知识</h2>\n<h3 id=\"消息队列的定义\"><a class=\"anchor\" href=\"#消息队列的定义\">#</a> 消息队列的定义</h3>\n<p>可以把消息队列看作是<font color='red'>一个存放消息的容器</font>，当我们需要使用消息的时候，直接从容器中取出消息供自己使用即可。由于<font color='red'>队列 Queue</font> 是一种先进先出的数据结构，所以消费消息时也<font color='red'>按照顺序来消费</font>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/message-queue-small.png\" alt=\"img\" /></p>\n<p>消息队列是一种 <strong>Pub/Sub 模型（发布 / 订阅模型）</strong>，参与消息传递的双方称为<strong>生产者</strong>和<strong>消费者</strong>，生产者负责发送消息，消费者负责处理消息。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/message-queue-pub-sub-model-63a717b4.png\" alt=\"发布/订阅（Pub/Sub）模型\" /></p>\n<center>发布/订阅（Pub/Sub）模型</center>\n<p>我们知道操作系统中的进程通信的一种很重要的方式就是消息队列。我们这里提到的消息队列稍微有点区别，<font color='red'>更多指的是各个服务以及系统内部各个组件 / 模块之前的通信</font>，属于一种<strong>中间件</strong>。</p>\n<p>简单来说：<strong>中间件是一类服务于应用软件的软件，应用软件是为用户服务的，用户不会接触或者使用到中间件。</strong></p>\n<p>随着分布式和微服务系统的发展，消息队列在系统设计中有了更大的发挥空间，使用消息队列<font color='red'>可以降低系统耦合性、实现任务异步、有效地进行流量削峰</font>，是分布式和微服务系统中重要的组件之一。</p>\n<h3 id=\"消息队列的作用\"><a class=\"anchor\" href=\"#消息队列的作用\">#</a> 消息队列的作用</h3>\n<p>通常来说，使用消息队列能为我们的系统带来下面三点好处：</p>\n<ol>\n<li><strong>通过异步处理提高系统性能（减少响应所需时间）</strong></li>\n<li><strong>削峰 / 限流</strong></li>\n<li><strong>降低系统耦合性</strong></li>\n<li><strong>实现分布式事务</strong></li>\n</ol>\n<p>如果在面试的时候你被面试官问到这个问题的话，一般情况是你在你的简历上涉及到消息队列这方面的内容，这个时候推荐<font color='red'>结合自己的项目来回答</font>。</p>\n<h4 id=\"作用1通过异步处理提高系统性能减少响应所需时间\"><a class=\"anchor\" href=\"#作用1通过异步处理提高系统性能减少响应所需时间\">#</a> 作用 1：通过异步处理提高系统性能（减少响应所需时间）</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/Asynchronous-message-queue.png\" alt=\"通过异步处理提高系统性能\" /></p>\n<center>通过异步处理提高系统性能</center>\n<p><font color='red'>服务端将用户的请求数据存储到消息队列后，立即返回结果</font>。随后，系统再对消息进行消费。</p>\n<p>因为用户请求数据写入消息队列之后就立即返回给用户了，但是请求数据在后续的业务校验、写数据库等操作中可能失败。因此，<strong>使用消息队列进行异步处理之后，需要适当修改业务流程进行配合</strong>，比如用户在提交订单之后，订单数据写入消息队列，不能立即返回用户订单提交成功，需要在消息队列的订单消费者进程真正处理完该订单之后，甚至出库后，再通过电子邮件或短信通知用户订单成功，以免交易纠纷。这就类似我们平时手机订火车票和电影票。</p>\n<h4 id=\"作用2削峰限流\"><a class=\"anchor\" href=\"#作用2削峰限流\">#</a> 作用 2：削峰 / 限流</h4>\n<p><strong>先将短时间高并发产生的事务消息存储在消息队列中，然后后端服务再慢慢根据自己的能力去消费这些消息，这样就避免大量事务直接把后端服务冲垮。</strong></p>\n<p>举例：在电子商务一些秒杀、促销活动中，合理使用消息队列可以有效抵御促销活动刚开始大量订单涌入对系统的冲击。如下图所示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231025224518547.png\" alt=\"削峰\" /></p>\n<center>削峰</center>\n<h4 id=\"作用3降低系统的耦合性\"><a class=\"anchor\" href=\"#作用3降低系统的耦合性\">#</a> 作用 3：降低系统的耦合性</h4>\n<p>使用消息队列还可以降低系统耦合性。我们知道如果模块之间不存在直接调用，那么新增模块或者修改模块就对其他模块影响较小，这样系统的可扩展性无疑更好一些。还是直接上图吧：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231025224821246.png\" alt=\"image-20231025224821246\" /></p>\n<p>生产者（客户端）发送消息到消息队列中去，接受者（服务端）处理消息，需要消费的系统直接去消息队列获取消息进行消费即可，而不需要和其他系统有耦合，这显然也提高了系统的扩展性。</p>\n<p>** 消息队列使用 Pub/Sub 模式（发布 / 订阅模式）工作，生产者发布消息，一个或多个消费者订阅消息。** 从上图可以看到<font color='red'>生产者和消费者之间没有直接耦合</font>，</p>\n<ul>\n<li>生产者将消息发送至分布式消息队列即结束对消息的处理</li>\n<li>消费者从分布式消息队列获取该消息后进行后续处理，并不需要知道该消息从何而来。</li>\n</ul>\n<p><font color='red'>对新增业务，只要对该类消息感兴趣，即可订阅该消息，对原有系统和业务没有任何影响，从而实现网站业务的可扩展性设计</font>。</p>\n<p>消费者对消息进行过滤、处理、包装后，构造成一个新的消息类型，将消息继续发送出去，等待其他消费者订阅该消息。因此基于事件（消息对象）驱动的业务架构可以是一系列流程。</p>\n<p>另外，<font color='red'>为了避免 “消息队列服务器” 宕机造成消息丢失，会将成功发送到消息队列的消息存储在 “生产者服务器” 上，等消息真正被 “消费者服务器” 处理后才删除消息</font>。在消息队列服务器宕机后，生产者服务器会选择分布式消息队列服务器集群中的其他服务器发布消息。</p>\n<p>备注：不要认为消息队列只能利用发布 - 订阅模式工作，只不过在解耦这个特定业务环境下是使用发布 - 订阅模式的。除了发布 - 订阅模式，还有<strong>点对点订阅模式</strong>（一个消息只有一个消费者），我们比较常用的是发布 - 订阅模式。</p>\n<h4 id=\"作用4实现分布式事务\"><a class=\"anchor\" href=\"#作用4实现分布式事务\">#</a> 作用 4：实现分布式事务</h4>\n<p>分布式事务的解决方案之一就是 MQ 事务。</p>\n<p>RocketMQ、Kafka、Pulsar、QMQ 都提供了事务相关的功能。<font color='red'>事务允许事件流应用将生产、处理、消费消息的整个过程定义为一个原子操作</font>。</p>\n<p>详细介绍可以查看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qYXZhZ3VpZGUuY24vZGlzdHJpYnV0ZWQtc3lzdGVtL2Rpc3RyaWJ1dGVkLXRyYW5zYWN0aW9uLmh0bWw=\">分布式事务详解 (付费)</span> 这篇文章。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/07b338324a7d8894b8aef4b659b76d92.png\" alt=\"分布式事务详解 - MQ事务\" /></p>\n<center>分布式事务详解 - MQ事务</center>\n<h3 id=\"消息队列存在的问题\"><a class=\"anchor\" href=\"#消息队列存在的问题\">#</a> 消息队列存在的问题</h3>\n<p><strong>系统可用性降低</strong>：在加入 MQ 之前，你不用考虑<font color='red'>消息丢失、 MQ 挂掉</font>等等的情况，但是引入 MQ 之后你就需要去考虑了！</p>\n<p><strong>系统复杂性提高</strong>：加入 MQ 之后，你需要<font color='red'>保证消息没有被重复消费、处理消息丢失的情况、保证消息传递的顺序性</font>等等问题！</p>\n<p><strong>一致性问题</strong>：消息队列可以实现异步，确实可以提高系统响应速度。但是，万一消息的真正消费者并没有正确消费消息怎么办？这样就会导致<font color='red'>数据不一致</font>的情况了！</p>\n<h3 id=\"jms-和-amqp\"><a class=\"anchor\" href=\"#jms-和-amqp\">#</a> JMS 和 AMQP</h3>\n<h4 id=\"jms-定义\"><a class=\"anchor\" href=\"#jms-定义\">#</a> JMS 定义</h4>\n<p><strong>JMS（JAVA Message Service）是 Java 的消息服务，其 API 是一个消息服务的标准 / 规范</strong>。JMS 的客户端之间可以通过 JMS 服务进行异步的消息传输。它允许应用程序组件基于 JavaEE 平台创建、发送、接收和读取消息。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。</p>\n<p>JMS 定义了<font color='gree'>五种不同消息</font>的正文格式以及调用的消息类型，允许你发送并接收一些不同形式的数据：</p>\n<ul>\n<li><code>StreamMessage</code> ：Java 原始值的数据流</li>\n<li><code>MapMessage</code> ：一套名称 - 值对</li>\n<li><code>TextMessage</code> ：一个字符串对象</li>\n<li><code>ObjectMessage</code> ：一个序列化的 Java 对象</li>\n<li><code>BytesMessage</code> ：一个字节的数据流</li>\n</ul>\n<h4 id=\"jms-两种消息模型\"><a class=\"anchor\" href=\"#jms-两种消息模型\">#</a> JMS 两种消息模型</h4>\n<h5 id=\"点到点模型p2p\"><a class=\"anchor\" href=\"#点到点模型p2p\">#</a> 点到点模型（P2P）</h5>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/message-queue-queue-model-3aa809bf.png\" alt=\"队列模型\" /></p>\n<p>使用<strong>队列（Queue）<strong>作为消息通信载体，满足</strong>生产者与消费者模式</strong>，<strong><font color='red'>一条消息只能被一个消费者使用</font></strong>，未被消费的消息在队列中保留直到被消费或超时。比如：生产者发送 100 条消息的话，两个消费者来消费，一般情况下两个消费者会按照消息发送的顺序各自消费一半（也就是你一个我一个的消费）。</p>\n<h5 id=\"发布订阅模型pubsub\"><a class=\"anchor\" href=\"#发布订阅模型pubsub\">#</a> 发布 / 订阅模型（Pub/Sub）</h5>\n<p><img data-src=\"https://javaguide.cn/assets/message-queue-pub-sub-model-63a717b4.png\" alt=\"发布/订阅（Pub/Sub）模型\" /></p>\n<center>发布/订阅（Pub/Sub）模型</center>\n<p>使用<strong>主题（Topic）<strong>作为消息通信载体，类似于</strong>广播模式</strong>；发布者发布一条消息，<strong><font color='red'>该消息通过主题传递给所有的订阅者</font></strong>。</p>\n<h4 id=\"amqp-定义\"><a class=\"anchor\" href=\"#amqp-定义\">#</a> AMQP 定义</h4>\n<p>AMQP，即  <code>Advanced Message Queuing Protocol</code> ，一个提供统一消息服务的应用层标准<strong>高级消息队列协议</strong>（二进制应用层协议），是<font color='red'>应用层协议</font>的一个开放标准，为面向消息的中间件设计，兼容 JMS。<font color='red'>基于此协议的客户端与消息中间件可传递消息</font>，并不受客户端 / 中间件产品，不同的开发语言等条件的限制。</p>\n<p><strong>RabbitMQ 就是基于 AMQP 协议实现的。</strong></p>\n<h4 id=\"jms-vs-amqp\"><a class=\"anchor\" href=\"#jms-vs-amqp\">#</a> JMS vs AMQP</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\">JMS</th>\n<th style=\"text-align:left\">AMQP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">定义</td>\n<td style=\"text-align:left\"><strong>Java API</strong></td>\n<td style=\"text-align:left\">协议</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">跨语言</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\"><strong>是</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">跨平台</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\"><strong>是</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">支持消息类型</td>\n<td style=\"text-align:left\">提供两种消息模型：①P2P;②Pub/sub</td>\n<td style=\"text-align:left\">提供了五种消息模型：①direct exchange；②fanout exchange；③topic change；④headers exchange；⑤system exchange。本质来讲，后四种和 JMS 的 pub/sub 模型没有太大差别，仅是在路由机制上做了更详细的划分；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">支持消息类型</td>\n<td style=\"text-align:left\"><strong>多种消息类型</strong></td>\n<td style=\"text-align:left\"><strong>byte []（二进制）</strong></td>\n</tr>\n</tbody>\n</table>\n<p><strong>总结：</strong></p>\n<ul>\n<li>AMQP 为消息定义了线路层的协议，而 JMS 所定义的是 API 规范。在 Java 体系中，多个 client 均可以通过 JMS 进行交互，不需要应用修改代码，但是其对跨平台的支持较差。而 <strong>AMQP 天然具有跨平台、跨语言特性</strong>。</li>\n<li><strong>JMS 支持  <code>TextMessage</code> 、 <code>MapMessage</code>  等复杂的消息类型</strong>；而 <strong>AMQP 仅支持  <code>byte[]</code>  消息类型</strong>（复杂的类型可序列化后发送）。</li>\n<li>由于 Exchange 提供的路由算法，<strong>AMQP 可以提供多样化的路由方式</strong>来传递消息到消息队列，<strong>而 JMS 仅支持 P2P 和 Pub/Sub 方式两种</strong>。</li>\n</ul>\n<h3 id=\"rpc-和消息队列的区别\"><a class=\"anchor\" href=\"#rpc-和消息队列的区别\">#</a> RPC 和消息队列的区别</h3>\n<p>RPC 和消息队列都是分布式微服务系统中重要的组件之一，下面我们来简单对比一下两者：</p>\n<ul>\n<li><strong>用途</strong>：\n<ul>\n<li>RPC：主要用来解决两个服务的远程通信问题，不需要了解底层网络的通信机制。通过 RPC 可以帮助我们<font color='red'>远程调用某个服务的方法</font>，这个过程就像调用本地方法一样简单。</li>\n<li>消息队列：主要用来<font color='red'>降低系统耦合性、实现任务异步、流量削峰</font>。</li>\n</ul>\n</li>\n<li><strong>通信方式</strong>：\n<ul>\n<li>RPC：<font color='red'>双向直接网络通讯</font></li>\n<li>消息队列：<font color='red'>单向引入中间载体</font>的网络通讯</li>\n</ul>\n</li>\n<li><strong>架构</strong>：\n<ul>\n<li>RPC：<font color='red'>不需要存储消息</font>，因为是双向直接网络通讯</li>\n<li>消息队列：需要把消息存储起来</li>\n</ul>\n</li>\n<li><strong>请求处理的时效性</strong>：\n<ul>\n<li>通过 RPC 发出的调用一般会<font color='red'>立即被处理</font></li>\n<li>存放在消息队列中的消息<font color='red'>并不一定会立即被处理</font></li>\n</ul>\n</li>\n</ul>\n<p><font color='red'>RPC 和消息队列本质上是网络通讯的两种不同的实现机制，两者的用途不同</font>，万不可将两者混为一谈。</p>\n<h3 id=\"消息队列选型\"><a class=\"anchor\" href=\"#消息队列选型\">#</a> <mark>消息队列选型</mark></h3>\n<h4 id=\"常见的消息队列\"><a class=\"anchor\" href=\"#常见的消息队列\">#</a> 常见的消息队列</h4>\n<h5 id=\"kafka\"><a class=\"anchor\" href=\"#kafka\">#</a> Kafka</h5>\n<blockquote>\n<p>Kafka 官网：<span class=\"exturl\" data-url=\"aHR0cDovL2thZmthLmFwYWNoZS5vcmcv\">http://kafka.apache.org/</span></p>\n<p>Kafka 更新记录（可以直观看到项目是否还在维护）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYWZrYS5hcGFjaGUub3JnL2Rvd25sb2Fkcw==\">https://kafka.apache.org/downloads</span></p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/kafka-logo.png\" alt=\"img\" /></p>\n<p>Kafka 是 LinkedIn 开源的一个<font color='red'>分布式流式处理平台</font>，已经成为 Apache 顶级项目，早期被用来用于<font color='red'>处理海量的日志</font>，后面才慢慢发展成了一款功能全面的<font color='red'>高性能消息队列</font>。</p>\n<p>流式处理平台具有三个关键功能：</p>\n<ol>\n<li><strong>消息队列</strong>：<font color='red'>发布和订阅消息流</font>。</li>\n<li><strong>持久方式存储消息流</strong>：Kafka 会<font color='red'>把消息持久化到磁盘</font>，有效地避免了消息丢失的风险。</li>\n<li><strong>流式处理平台</strong>：在消息发布的时候进行处理，Kafka 提供了一个完整的流式处理类库。</li>\n</ol>\n<p>Kafka 是一个分布式系统，由通过高性能<font color='red'> TCP 网络协议</font>进行通信的服务器和客户端组成，可以部署在在本地和云环境中的裸机硬件、虚拟机和容器上。</p>\n<p>在 Kafka 2.8 之前，Kafka 最被大家诟病的就是其重度依赖于 Zookeeper 做元数据管理和集群的高可用。<font color='red'>在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构</font>。</p>\n<p>提示一下：<font color='red'>如果要使用 KRaft 模式的话，建议选择较高版本的 Kafka</font>，因为这个功能还在持续完善优化中。Kafka 3.3.1 版本是第一个将 KRaft（Kafka Raft）共识协议标记为生产就绪的版本。</p>\n<h5 id=\"rocketmq\"><a class=\"anchor\" href=\"#rocketmq\">#</a> RocketMQ</h5>\n<blockquote>\n<p>RocketMQ 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yb2NrZXRtcS5hcGFjaGUub3JnLw==\">https://rocketmq.apache.org/</span> （文档很详细，推荐阅读）</p>\n<p>RocketMQ 更新记录（可以直观看到项目是否还在维护）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcS9yZWxlYXNlcw==\">https://github.com/apache/rocketmq/releases</span></p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/rocketmq-logo.png\" alt=\"img\" /></p>\n<p>RocketMQ 是阿里开源的一款<font color='red'>云原生 “消息、事件、流” 实时数据处理平台</font>，借鉴了 Kafka，已经成为 Apache 顶级项目。</p>\n<p>RocketMQ 的核心特性（摘自 RocketMQ 官网）：</p>\n<ul>\n<li><strong>云原生</strong>：生与云，长与云，<font color='red'>无限弹性扩缩，K8s 友好</font></li>\n<li><strong>高吞吐</strong>：万亿级吞吐保证，同时满足微服务与大数据场景。</li>\n<li><strong>流处理</strong>：提供轻量、高扩展、高性能和丰富功能的流计算引擎。</li>\n<li><strong>金融级</strong>：金融级的稳定性，广泛用于交易核心链路。</li>\n<li><strong>架构极简</strong>：<font color='red'>零外部依赖</font>，Shared-nothing 架构。</li>\n<li><strong>生态友好</strong>：无缝对接微服务、实时计算、数据湖等周边生态。</li>\n</ul>\n<p>根据官网介绍：</p>\n<blockquote>\n<p>Apache RocketMQ 自诞生以来，因其架构简单、业务功能丰富、具备极强可扩展性等特点<font color='red'>被众多企业开发者以及云厂商广泛采用</font>。历经十余年的大规模场景打磨，RocketMQ 已经成为<font color='red'>业内共识的金融级可靠业务消息首选方案</font>，被广泛应用于互联网、大数据、移动互联网、物联网等领域的业务场景。</p>\n</blockquote>\n<h5 id=\"rabbitmq\"><a class=\"anchor\" href=\"#rabbitmq\">#</a> RabbitMQ</h5>\n<blockquote>\n<p>RabbitMQ 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tLw==\">https://www.rabbitmq.com/</span> 。</p>\n<p>RabbitMQ 更新记录（可以直观看到项目是否还在维护）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL25ld3MuaHRtbA==\">https://www.rabbitmq.com/news.html</span></p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/rabbitmq-logo.png\" alt=\"img\" /></p>\n<p>RabbitMQ 是采用 Erlang 语言实现 <font color='red'>AMQP (Advanced Message Queuing Protocol，高级消息队列协议）</font>的消息中间件，它最初起源于金融系统，用于在分布式系统中<font color='red'>存储转发消息</font>。</p>\n<p>RabbitMQ 发展到今天，被越来越多的人认可，这和它在易用性、扩展性、可靠性和高可用性等方面的卓著表现是分不开的。RabbitMQ 的具体特点可以概括为以下几点：</p>\n<ul>\n<li><strong>可靠性</strong>：RabbitMQ 使用一些机制来保证消息的可靠性，如<font color='red'>持久化、传输确认、发布确认</font>等。</li>\n<li><strong>灵活的路由</strong>：在消息进入队列之前，<font color='red'>通过交换器来路由消息</font>。对于典型的路由功能，RabbitMQ 己经提供了一些内置的交换器来实现。针对更复杂的路由功能，可以将多个交换器绑定在一起，也可以通过插件机制来实现自己的交换器。这个后面会在我们讲 RabbitMQ 核心概念的时候详细介绍到。</li>\n<li><strong>扩展性</strong>：多个 RabbitMQ 节点可以组成一个<font color='red'>集群</font>，也可以根据实际业务情况动态地扩展集群中节点。</li>\n<li><strong>高可用性</strong>：队列可以在集群中的机器上<font color='red'>设置镜像</font>，使得在部分节点出现问题的情况下队列仍然可用。</li>\n<li><strong>支持多种协议</strong>：RabbitMQ 除了原生支持 AMQP 协议，还支持 <font color='red'>STOMP、MQTT</font> 等多种消息中间件协议。</li>\n<li><strong>多语言客户端</strong>：RabbitMQ 几乎<font color='red'>支持所有常用语言</font>，比如 Java、Python、Ruby、PHP、C#、JavaScript 等。</li>\n<li><strong>易用的管理界面</strong>：RabbitMQ 提供了一个<font color='red'>易用的用户界面</font>，使得用户可以<font color='red'>监控和管理消息、集群中的节点</font>等。在安装 RabbitMQ 的时候会介绍到，安装好 RabbitMQ 就自带管理界面。</li>\n<li><strong>插件机制</strong>：RabbitMQ 提供了许多插件，以实现从多方面进行扩展，当然也可以编写自己的插件。感觉这个有点类似 Dubbo 的 SPI 机制。</li>\n</ul>\n<h5 id=\"activemq\"><a class=\"anchor\" href=\"#activemq\">#</a> ActiveMQ</h5>\n<p>目前已经被淘汰，不推荐使用，不建议学习。</p>\n<h4 id=\"对比\"><a class=\"anchor\" href=\"#对比\">#</a> 对比</h4>\n<blockquote>\n<p>参考《Java 工程师面试突击第 1 季 - 中华石杉老师》</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>对比方向</th>\n<th>概要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>吞吐量</td>\n<td>万级的 ActiveMQ 和 RabbitMQ 的吞吐量（ActiveMQ 的性能最差）要比十万级甚至是百万级的 <font color='red'>RocketMQ 和 Kafka</font> 低一个数量级。</td>\n</tr>\n<tr>\n<td>可用性</td>\n<td><font color='red'>都可以实现高可用</font>。ActiveMQ 和 RabbitMQ 都是基于<font color='red'>主从架构</font>实现高可用性。RocketMQ 基于<font color='red'>分布式架构</font>。 Kafka 也是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td>\n</tr>\n<tr>\n<td>时效性</td>\n<td><font color='red'>RabbitMQ</font> 基于 Erlang 开发，所以并发能力很强，性能极其好，延时很低，达到微秒级，其他几个都是 ms 级。</td>\n</tr>\n<tr>\n<td>功能支持</td>\n<td><font color='red'>Pulsar</font> 的功能更全面，支持多租户、多种消费模式和持久性模式等功能，是下一代云原生分布式消息流平台。</td>\n</tr>\n<tr>\n<td>消息丢失</td>\n<td>ActiveMQ 和 RabbitMQ 丢失的可能性非常低， <font color='red'>Kafka、RocketMQ 和 Pulsar</font> 理论上可以做到 0 丢失。</td>\n</tr>\n</tbody>\n</table>\n<p>总结：</p>\n<ul>\n<li>ActiveMQ 的社区算是比较成熟，但是较目前来说，ActiveMQ 的性能比较差，而且版本迭代很慢，不推荐使用，已经被淘汰了。</li>\n<li>RabbitMQ 在吞吐量方面虽然稍逊于 Kafka、RocketMQ 和 Pulsar，但是由于它基于 Erlang 开发，所以并发能力很强，性能极其好，延时很低，达到微秒级。但是也因为 RabbitMQ 基于 Erlang 开发，所以国内很少有公司有实力做 Erlang 源码级别的研究和定制。如果业务场景对并发量要求不是太高（十万级、百万级），那这几种消息队列中，RabbitMQ 或许是你的首选。</li>\n<li>RocketMQ 和 Pulsar 支持强一致性，对消息一致性要求比较高的场景可以使用。</li>\n<li>RocketMQ 阿里出品，Java 系开源项目，源代码我们可以直接阅读，然后可以定制自己公司的 MQ，并且 RocketMQ 有阿里巴巴的实际业务场景的实战考验。</li>\n<li>Kafka 仅仅提供较少的核心功能，但是提供超高的吞吐量，ms 级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展。同时 Kafka 最好是支撑较少的 topic 数量即可，保证其超高吞吐量。<font color='red'>Kafka 唯一的一点劣势是有可能消息重复消费</font>，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略这个特性天然适合大数据实时计算以及日志收集。如果是<font color='red'>大数据领域的实时计算、日志采集等场景</font>，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。</li>\n</ul>\n<h2 id=\"kafka-2\"><a class=\"anchor\" href=\"#kafka-2\">#</a> Kafka</h2>\n<h3 id=\"基础\"><a class=\"anchor\" href=\"#基础\">#</a> 基础</h3>\n<h4 id=\"功能-应用场景\"><a class=\"anchor\" href=\"#功能-应用场景\">#</a> 功能、应用场景</h4>\n<p>Kafka 是一个<strong>分布式流式处理平台</strong>，流平台具有三个关键功能：</p>\n<ol>\n<li><strong><font color='red'>消息队列</font></strong>：<font color='red'>发布和订阅消息流</font>，这个功能类似于消息队列，这也是 Kafka 也被归类为消息队列的原因。</li>\n<li><strong><font color='red'>容错的持久方式存储记录消息流</font></strong>：Kafka 会<font color='red'>把消息持久化到磁盘</font>，有效避免了消息丢失的风险。</li>\n<li>**<font color='red'>流式处理平台</font>：** 在消息发布的时候进行处理，Kafka 提供了一个<font color='red'>完整的流式处理类库</font>。</li>\n</ol>\n<p>Kafka 主要有两大应用场景：</p>\n<ol>\n<li><strong><font color='red'>消息队列</font></strong>：建立实时流数据管道，以可靠地在系统或应用程序之间获取数据。</li>\n<li>**<font color='red'>数据处理</font>：** 构建实时的流数据处理程序来转换或处理数据流。</li>\n</ol>\n<h4 id=\"相比其他-mq-的优势\"><a class=\"anchor\" href=\"#相比其他-mq-的优势\">#</a> 相比其他 MQ 的优势</h4>\n<p>Kafka 相比其他消息队列主要的优势如下：</p>\n<ol>\n<li><strong><font color='red'>极致的性能</font></strong>：基于 Scala 和 Java 语言开发，设计中大量使用了<font color='red'>批量处理</font>和<font color='red'>异步</font>的思想，最高<font color='red'>每秒可以处理千万级别的消息</font>。</li>\n<li><strong><font color='red'>生态系统兼容性无可匹敌</font></strong>：Kafka 与周边生态系统的兼容性是最好的没有之一，尤其在大数据和流计算领域。</li>\n</ol>\n<h4 id=\"消息模型\"><a class=\"anchor\" href=\"#消息模型\">#</a> 消息模型</h4>\n<blockquote>\n<p>题外话：早期的  <code>JMS</code>  和  <code>AMQP</code>  属于消息服务领域权威组织所做的相关的标准，但是这些标准的进化跟不上消息队列的演进速度，<font color='red'>这些标准实际上已经属于废弃状态</font>。所以，可能存在的情况是：<font color='red'>不同的消息队列都有自己的一套消息模型</font>。</p>\n</blockquote>\n<h5 id=\"队列模型p2p\"><a class=\"anchor\" href=\"#队列模型p2p\">#</a> 队列模型（P2P）</h5>\n<blockquote>\n<p>早期的消息模型</p>\n</blockquote>\n<p><img data-src=\"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/%E9%98%9F%E5%88%97%E6%A8%A1%E5%9E%8B23.png\" alt=\"队列模型\" /></p>\n<center>队列模型</center>\n<p>使用<strong>队列（Queue）<strong>作为消息通信载体，满足生产者与消费者模式，</strong><font color='red'>一条消息只能被一个消费者使用，未被消费的消息在队列中保留直到被消费或超时</font></strong>。比如：我们生产者发送 100 条消息的话，两个消费者来消费，一般情况下两个消费者会按照消息发送的顺序各自消费一半（也就是你一个我一个的消费。）</p>\n<p>队列模型存在的问题：<font color='red'>无法将生产者产生的消息分发给多个消费者，并保证每个消费者都能接收到完整的消息内容</font>。这种情况，队列模型就不好解决了。很多比较杠精的人就说：我们可以为每个消费者创建一个单独的队列，让生产者发送多份。这是一种非常愚蠢的做法，浪费资源不说，还违背了使用消息队列的目的。</p>\n<h5 id=\"发布-订阅模型pub-sub\"><a class=\"anchor\" href=\"#发布-订阅模型pub-sub\">#</a> 发布 - 订阅模型（Pub-Sub）</h5>\n<blockquote>\n<p><strong><font color='red'>Kafka 采用的消息模型</font></strong>，为了解决队列模型存在的问题</p>\n</blockquote>\n<p><img data-src=\"https://oss.javaguide.cn/java-guide-blog/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%9E%8B.png\" alt=\"发布订阅模型\" /></p>\n<center>发布订阅模型</center>\n<p>发布 - 订阅模型（Pub-Sub） 使用<strong>主题（Topic）<strong>作为消息通信载体，类似于</strong>广播模式</strong>。<strong>发布者发布一条消息，该消息通过主题传递给所有的订阅者，在一条消息广播之后才订阅的用户则是收不到该条消息的</strong>。</p>\n<p>在发布 - 订阅模型中，<font color='red'>如果只有一个订阅者，那它和队列模型就基本是一样的了</font>。所以说，发布 - 订阅模型在功能层面上是可以兼容队列模型的。</p>\n<blockquote>\n<p><strong>RocketMQ 的消息模型和 Kafka 基本是完全一样的。唯一的区别是 Kafka 中没有队列这个概念，与之对应的是 Partition（分区）。</strong></p>\n</blockquote>\n<h3 id=\"核心概念\"><a class=\"anchor\" href=\"#核心概念\">#</a> 核心概念</h3>\n<h4 id=\"producer-comsumer-broker-topic-partition\"><a class=\"anchor\" href=\"#producer-comsumer-broker-topic-partition\">#</a> Producer、Comsumer、Broker、Topic、Partition</h4>\n<p>Kafka 将生产者发布的消息发送到 **Topic（主题）** 中，需要这些消息的消费者可以订阅这些 Topic，如下图所示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/message-queue20210507200944439.png\" alt=\"img\" /></p>\n<p>上面这张图也为我们引出了，Kafka 比较重要的几个概念：</p>\n<ol>\n<li>\n<p>Producer（生产者）: 产生消息的一方。</p>\n</li>\n<li>\n<p>Consumer（消费者）: 消费消息的一方。</p>\n</li>\n<li>\n<p><strong>Broker（代理）</strong>: 可以看作是<font color='red'>一个独立的 Kafka 实例</font>。多个 Kafka Broker 组成一个 Kafka <strong>Cluster（集群）</strong>。每个 Broker 中又包含：</p>\n<ul>\n<li>\n<p><strong>Topic（主题）</strong>: Producer 将消息发送到特定的主题，Consumer 通过订阅特定的 Topic (主题) 来消费消息。</p>\n</li>\n<li>\n<p><strong>Partition（分区）</strong>: <font color='red'>属于 Topic 的一部分</font>。一个 Topic 可以有多个 Partition ，并且 **<font color='red'>同一 Topic 下的 Partition 可以分布在不同的 Broker 上，表明一个 Topic 可以横跨多个 Broker</font>**。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"多副本机制replica\"><a class=\"anchor\" href=\"#多副本机制replica\">#</a> 多副本机制（Replica）</h4>\n<blockquote>\n<p>类似于 <strong>Redis 中的主从复制（Replica）</strong></p>\n</blockquote>\n<p>Kafka 为分区（Partition）引入了<strong>多副本（Replica）机制</strong>。Partition 中的多个副本之间会有一个叫做  <code>leader</code>  的家伙，其他副本称为  <code>follower</code> 。<font color='red'>发送的消息先被发送到 leader 副本，然后 follower 副本才能从 leader 副本中拉取消息进行同步</font>。</p>\n<blockquote>\n<p><strong><font color='red'>生产者和消费者只与 leader 副本交互</font></strong>。可以理解为<font color='red'>其他副本只是 leader 副本的拷贝，它们的存在只是为了保证消息存储的安全性</font>。<font color='red'>当 leader 副本发生故障时会从 follower 中选举出一个 leader，前提是该 follower 和 leader 同步程度一致</font>。</p>\n</blockquote>\n<p>Kafka 多副本（Replica）机制的好处如下：</p>\n<ol>\n<li><strong><font color='red'>负载均衡</font></strong>：Kafka 通过给特定 Topic 指定多个 Partition，而各个 Partition 可以分布在不同的 Broker 上，这样便能提供比较好的<font color='red'>并发能力</font>。</li>\n<li><strong><font color='red'>数据容灾能力</font></strong>：Partition 可以指定对应的 Replica 数，极大地提高了消息存储的安全性与容灾能力，不过也相应地增加了所需要的存储空间。</li>\n</ol>\n<h3 id=\"kafka-与-zookeeper-的关系\"><a class=\"anchor\" href=\"#kafka-与-zookeeper-的关系\">#</a> Kafka 与 Zookeeper 的关系</h3>\n<h4 id=\"zookeeper-在-kafka-中的作用\"><a class=\"anchor\" href=\"#zookeeper-在-kafka-中的作用\">#</a> Zookeeper 在 Kafka 中的作用</h4>\n<p>下图就是我的本地 Zookeeper，它成功和我本地的 Kafka 关联上（以下文件夹结构借助 idea 插件 Zookeeper tool 实现）。</p>\n<img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/zookeeper-kafka.jpg\" alt=\"img\" style=\"zoom:50%;\" />\n<p>ZooKeeper 主要为 Kafka 提供<strong>元数据的管理</strong>的功能。</p>\n<p>从图中我们可以看出，Zookeeper 主要为 Kafka 做了下面这些事情：</p>\n<ol>\n<li><strong><font color='red'>Broker 注册</font></strong>：在 Zookeeper 上会有一个专门用来<font color='red'>记录 Broker 服务器列表</font>的节点。每个 Broker 在启动时，都会到 Zookeeper 上进行注册，即到  <code>/brokers/ids</code>  下创建属于自己的节点。每个 Broker 就会将自己的 IP 地址和端口等信息记录到该节点中去</li>\n<li><strong><font color='red'>Topic 注册</font></strong>：在 Kafka 中，<font color='red'>同一个 Topic 的消息会被分成多个 Partition</font>，并将其分布在多个 Broker 上。<font color='red'>这些 Partition 信息及与 Broker 的对应关系也都是由 Zookeeper 在维护</font>。比如我创建了一个名字为 my-topic 的 Topic 并且它有两个 Partition ，对应到 zookeeper 中会创建这些文件夹： <code>/brokers/topics/my-topic/Partitions/0</code> 、 <code>/brokers/topics/my-topic/Partitions/1</code></li>\n<li><strong><font color='red'>负载均衡</font></strong>：上面也说过了 Kafka 通过给特定 Topic 指定多个 Partition，而各个 Partition 可以分布在不同的 Broker 上，这样便能提供比较好的并发能力。<font color='red'>对于同一个 Topic 的不同 Partition，Kafka 会尽力将这些 Partition 分布到不同的 Broker 服务器上</font>。\n<ul>\n<li>当 Provider 产生消息时，会尽量投递到不同 Broker 的 Partition 里面。</li>\n<li>当 Consumer 消费消息时，Zookeeper 会可以根据当前的 Partition 数量以及 Consumer 数量来实现动态负载均衡。</li>\n</ul>\n</li>\n<li>……</li>\n</ol>\n<h4 id=\"kafka-不再依赖于-zookeeper\"><a class=\"anchor\" href=\"#kafka-不再依赖于-zookeeper\">#</a> Kafka 不再依赖于 Zookeeper</h4>\n<p>在 Kafka 2.8 之前，Kafka 最被大家诟病的就是其重度依赖于 Zookeeper。<font color='red'>在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构，让你可以以一种轻量级的方式来使用 Kafka</font>。</p>\n<p>不过，要提示一下：如果要使用 KRaft 模式的话，建议选择较高版本的 Kafka，因为这个功能还在持续完善优化中。Kafka 3.3.1 版本是第一个将 KRaft（Kafka Raft）共识协议标记为生产就绪的版本。</p>\n<p>![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vc3MuamF2YWd1aWRlLmNuL2dpdGh1Yi9qYXZhZ3VpZGUvaGlnaC1wZXJmb3JtYW5jZS9tZXNzYWdlLXF1ZXVlL2thZmthMy4zLjEta3JhZnQt\">https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/kafka3.3.1-kraft-</span> production-ready.png)</p>\n<h3 id=\"消费顺序-消息丢失-重复消费\"><a class=\"anchor\" href=\"#消费顺序-消息丢失-重复消费\">#</a> 消费顺序、消息丢失、重复消费</h3>\n<h4 id=\"如何保证消息的消费顺序\"><a class=\"anchor\" href=\"#如何保证消息的消费顺序\">#</a> 如何保证消息的消费顺序？</h4>\n<p>我们在使用消息队列的过程中经常有业务场景需要严格保证消息的消费顺序，比如我们同时发了 2 个消息，这 2 个消息对应的操作分别对应的数据库操作是：</p>\n<ol>\n<li>更改用户会员等级。</li>\n<li>根据会员等级计算订单价格。</li>\n</ol>\n<p>假如这两条消息的消费顺序不一样造成的最终结果就会截然不同。</p>\n<p>我们知道<font color='red'> Kafka 中 Partition (分区) 是真正保存消息的地方</font>，我们发送的消息都被放在了这里。而 Partition (分区) 又存在于 Topic (主题) 概念中，并且我们可以给特定 Topic 指定多个 Partition。</p>\n<p><img data-src=\"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/KafkaTopicPartionsLayout.png\" alt=\"img\" /></p>\n<p>每次添加消息到 Partition (分区) 的时候都会采用 **<font color='red'>尾加法</font>**，如上图所示。 <font color='red'>Kafka 只能为我们保证 Partition（分区）中的消息有序，通过 **offset（偏移量）** 实现</font>。</p>\n<blockquote>\n<p>消息在被追加到 Partition (分区) 的时候都会分配一个特定的偏移量（offset）。</p>\n</blockquote>\n<p>所以，我们就有一种很简单的保证消息消费顺序的方法：1 个 Topic 只对应一个 Partition。这样当然可以解决问题，但是破坏了 Kafka 的设计初衷。</p>\n<p>Kafka 中发送 1 条消息的时候，可以指定 topic、partition、key、data（数据）4 个参数。如果你发送消息的时候指定了 Partition 的话，所有消息都会被发送到指定的 Partition。并且，<font color='red'>同一个 key 的消息可以保证只发送到同一个 partition</font>，这个我们可以采用表 / 对象的 id 来作为 key 。</p>\n<p>总结一下，对于如何保证 Kafka 中消息消费的顺序，有了下面两种方法：</p>\n<ol>\n<li>1 个 Topic 只对应一个 Partition。</li>\n<li>（推荐）<strong>发送消息的时候指定 key/Partition</strong>。</li>\n</ol>\n<p>当然不仅仅只有上面两种方法，上面两种方法是我觉得比较好理解的。</p>\n<h4 id=\"如何保证消息不丢失\"><a class=\"anchor\" href=\"#如何保证消息不丢失\">#</a> 如何保证消息不丢失？</h4>\n<h5 id=\"情况1producer-丢失消息\"><a class=\"anchor\" href=\"#情况1producer-丢失消息\">#</a> 情况 1：Producer 丢失消息</h5>\n<p>Producer 调用  <code>send</code>  方法发送消息之后，消息可能因为网络问题并没有发送过去。所以，我们不能默认在调用  <code>send</code>  方法发送消息之后消息发送成功了。</p>\n<p>为了确定消息是发送成功，我们要判断消息发送的结果。但是要注意的是<font color='red'> Kafka 中 Producer 使用  <code>send</code>  方法发送消息实际上是异步的操作，可以通过  <code>get()</code>  方法获取调用结果，但是这样也让它变为了同步操作</font>，示例代码如下：</p>\n<blockquote>\n<p>详细代码见这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpnMk9UQTBOamswT0E9PSZhbXA7bWlkPTIyNDc0ODYyNjkmYW1wO2lkeD0yJmFtcDtzbj1lYzAwNDE3YWQ2NDFkZDhjM2QxNDVkNzRjYWZhMDljZSZhbXA7Y2hrc209Y2VhMjQ0ZjZmOWQ1Y2RlMGM4ZWIyMzNmY2M0Y2Y4MmUxMWFjZDA2NDQ2NzE5YTdhZjU1MjMwNjQ5ODYzYTNkZGQ5NWY3OGQxMTFkZSZhbXA7dG9rZW49MTYzMzk1NzI2MiZhbXA7bGFuZz16aF9DTiNyZA==\">Kafka 系列第三篇！10 分钟学会如何在 Spring Boot 程序中使用 Kafka 作为消息队列？</span></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">SendResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> sendResult <span class=\"token operator\">=</span> kafkaTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sendResult<span class=\"token punctuation\">.</span><span class=\"token function\">getRecordMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者成功发送消息到\"</span> <span class=\"token operator\">+</span> sendResult<span class=\"token punctuation\">.</span><span class=\"token function\">getProducerRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">topic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-> \"</span> <span class=\"token operator\">+</span> sendRe</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>              sult<span class=\"token punctuation\">.</span><span class=\"token function\">getProducerRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是<font color='red'>一般不推荐这么做</font>！可以<strong>借助  <code>ListenableFuture</code>  为 Producer 的  <code>send</code>  方法添加回调函数</strong>的形式，示例代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ListenableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SendResult</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> future <span class=\"token operator\">=</span> kafkaTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        future<span class=\"token punctuation\">.</span><span class=\"token function\">addCallback</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">-></span> logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者成功发送消息到topic:&#123;&#125; partition:&#123;&#125;的消息\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getRecordMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">topic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getRecordMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                ex <span class=\"token operator\">-></span> logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者发送消息失败，原因：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong><font color='red'>如果消息发送失败的话，我们检查失败的原因之后重新发送即可</font></strong>！</p>\n<ul>\n<li>\n<p>这里推荐<font color='red'>为 Producer 的  <code>retries</code> （重试次数）设置一个比较合理的值，一般是 3 </font>，但是为了保证消息不丢失的话一般会设置比较大一点。设置完成之后，当出现网络问题之后能够自动重试消息发送，避免消息丢失。</p>\n</li>\n<li>\n<p>另外，<font color='red'>建议还要设置重试间隔</font>，因为间隔太小的话重试的效果就不明显了，网络波动一次你 3 次一下子就重试完了。</p>\n</li>\n</ul>\n<h5 id=\"情况2consumer-丢失消息\"><a class=\"anchor\" href=\"#情况2consumer-丢失消息\">#</a> 情况 2：Consumer 丢失消息</h5>\n<p>我们知道消息在被追加到 Partition (分区) 的时候都会分配一个特定的 offset（偏移量）。<font color='red'>offset 表示 Consumer 当前消费到的 Partition (分区) 的所在位置</font>。Kafka 通过偏移量（offset）可以保证消息在分区内的顺序性。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/kafka-offset.jpg\" alt=\"kafka offset\" /></p>\n<center>kafka offset</center>\n<p><font color='red'>当 Consumer 拉取到了 Partition 的某个消息之后，Consumer 会自动提交了  offset </font>。自动提交的话会有一个问题，试想一下，当 Consumer 刚拿到这个消息准备进行真正消费的时候，突然挂掉了，消息实际上并没有被消费，但是 offset 却被自动提交了。</p>\n<p>解决办法也比较粗暴，我们 ** 关闭自动提交 offset，每次在真正消费完消息之后再手动提交 offset **。 但是，细心的朋友一定会发现，<font color='red'>这样会带来消息被重新消费的问题</font>。比如你刚刚消费完消息之后，还没提交 offset，结果自己挂掉了，那么这个消息理论上就会被消费两次。</p>\n<h5 id=\"情况3kafka-丢失消息\"><a class=\"anchor\" href=\"#情况3kafka-丢失消息\">#</a> 情况 3：Kafka 丢失消息</h5>\n<p>我们知道<font color='red'> Kafka 为 Partition 引入了多副本（Replica）机制</font>。Partition 中的多个副本之间会有一个叫做 leader 的家伙，其他副本称为 follower。我们发送的消息会被发送到 leader 副本，然后 follower 副本才能从 leader 副本中拉取消息进行同步。Producer 和 Comsumer 只与 leader 副本交互。可以理解为其他 follower 副本只是 leader 副本的拷贝，它们的存在只是为了保证消息存储的安全性。</p>\n<p>试想一种情况：<font color='red'>假如 leader 副本所在的 broker 突然挂掉，但是 leader 的数据还有一些没有被 follower 副本的同步的话，就会造成<strong>消息丢失</strong></font>。</p>\n<ul>\n<li>\n<p><strong>设置  <code>acks = all</code> </strong>：<font color='red'>acks 是 Kafka Producer 很重要的一个参数，其默认值为 1，代表我们的消息被 leader 副本接收之后就算被成功发送</font>。<strong><font color='red'>配置  <code>acks = all</code>  表示只有所有 ISR 列表的副本全部收到消息时，Producer 才会接收到来自服务器的响应</font></strong>。这种模式是<font color='red'>最高级别、最安全</font>的，可以确保不止一个 Broker 接收到了消息，但副作用是<font color='red'>延迟会很高</font>。</p>\n<blockquote>\n<p>Partition 中的所有副本统称为 <strong> <code>AR</code> </strong>（Assigned Repllicas）。所有与 leader 副本保持一定程度同步的副本（包括 Leader 本身）组成 <strong> <code>ISR</code> </strong>（In-Sync Replicas），ISR 集合是 AR 集合中的一个子集。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>设置  <code>replication.factor &gt;= 3</code> </strong>：为了保证 leader 副本能有 follower 副本能同步消息，可以 **<font color='red'>确保每个 Partition 至少有 3 个副本</font>**。虽然造成了数据冗余，但是带来了<font color='red'>数据的安全性</font>。</p>\n</li>\n<li>\n<p><strong>设置  <code>min.insync.replicas &gt; 1</code> </strong>：<strong><font color='red'>代表消息至少要被写入到 2 个副本才算是被成功发送</font></strong>。其默认值为 1 ，在实际生产中应尽量避免。</p>\n</li>\n<li>\n<p><strong>确保  <code>replication.factor &gt; min.insync.replicas</code> </strong>：<font color='red'>为了保证整个 Kafka 服务的高可用性</font>。设想一下假如两者相等的话，只要是有一个副本挂掉，整个 Partition 就无法正常工作了。这明显违反高可用性！<font color='red'>一般推荐设置成  <code>replication.factor = min.insync.replicas + 1</code> </font>。</p>\n</li>\n<li>\n<p><strong>设置  <code>unclean.leader.election.enable = false</code> </strong>：</p>\n<blockquote>\n<p>Kafka 从 0.11.0.0 版本开始， <code>unclean.leader.election.enable</code>  参数的默认值改为 false</p>\n</blockquote>\n<p>我们最开始也说了我们发送的消息会被发送到 leader 副本，然后 follower 副本才能从 leader 副本中拉取消息进行同步，多个 follower 副本之间的消息同步情况不一样。当我们配置了 unclean.leader.election.enable = false 的话，<strong><font color='red'>当 leader 副本发生故障时，就不会从同步程度达不到要求的 follower 副本中选择出 leader</font></strong>，降低了消息丢失的可能性。</p>\n</li>\n</ul>\n<h4 id=\"如何保证消息不被重复消费\"><a class=\"anchor\" href=\"#如何保证消息不被重复消费\">#</a> 如何保证消息不被重复消费？</h4>\n<p>kafka 出现消息重复消费的原因：</p>\n<ul>\n<li>\n<p><strong><font color='red'>根本原因：Consumer 已经消费了消息，但没有成功提交 offset</font></strong></p>\n</li>\n<li>\n<p>直接原因：Consumer 由于处理业务时间长或者网络链接等原因，<font color='red'>让 Kafka 认为服务假死，触发了 Partition  <code>rebalance</code> </font>。</p>\n</li>\n</ul>\n<p>解决方案：</p>\n<ul>\n<li><strong>Consumer 消费消息服务做幂等校验</strong>，比如 Redis 的 set、MySQL 的主键等天然的幂等功能，这种方法最有效。</li>\n<li><strong>将  <code>enable.auto.commit</code>  参数设置为 false，关闭 offset 的自动提交，开发者在代码中手动提交 offset</strong>。那么这里会有个问题：什么时候提交 offset 合适？\n<ul>\n<li>处理完消息再提交：依旧有消息重复消费的风险，和自动提交一样</li>\n<li><strong>拉取到消息即提交</strong>：会有消息丢失的风险。允许消息延时的场景，一般会采用这种方式。然后，通过定时任务在业务不繁忙（比如凌晨）的时候做数据兜底。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"重试机制\"><a class=\"anchor\" href=\"#重试机制\">#</a> 重试机制</h3>\n<blockquote>\n<p>在 Kafka 如何保证消息不丢失中提到了 Kafka 的重试机制。</p>\n<p>网上关于 Spring Kafka 的默认重试机制文章很多，但大多都是过时的，和实际运行结果完全不一样。以下是根据 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdm5yZXBvc2l0b3J5LmNvbS9hcnRpZmFjdC9vcmcuc3ByaW5nZnJhbWV3b3JrLmthZmthL3NwcmluZy1rYWZrYS8yLjkuMw==\">spring-kafka-2.9.3</span> 源码重新梳理一下。</p>\n</blockquote>\n<h4 id=\"消费失败后会先重试多次重试失败后会跳过\"><a class=\"anchor\" href=\"#消费失败后会先重试多次重试失败后会跳过\">#</a> 消费失败后会先重试，多次重试失败后会跳过</h4>\n<p>Producer 代码：</p>\n<pre><code class=\"language-Java\"> for (int i = 0; i &lt; 10; i++) &#123;\n   kafkaTemplate.send(KafkaConst.TEST_TOPIC, String.valueOf(i))\n &#125;\n</code></pre>\n<p>Comsumer 代码：</p>\n<pre><code class=\"language-Java\">   @KafkaListener(topics = &#123;KafkaConst.TEST_TOPIC&#125;,groupId = &quot;apple&quot;)\n   private void customer(String message) throws InterruptedException &#123;\n       log.info(&quot;kafka customer:&#123;&#125;&quot;,message);\n       Integer n = Integer.parseInt(message);\n       if (n%5==0)&#123; // 当n为0和5时抛出异常\n           throw new  RuntimeException();\n       &#125;\n   &#125;\n</code></pre>\n<p><strong>在默认配置下，当消费异常会进行重试，重试多次后会跳过当前消息，继续进行后续消息的消费，不会一直卡在当前消息</strong>。</p>\n<p>下面是一段消费的日志，可以看出当  <code>test-0@95</code>  重试多次后会被跳过。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2023</span><span class=\"token operator\">-</span><span class=\"token number\">08</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token number\">12</span><span class=\"token operator\">:</span><span class=\"token number\">03</span><span class=\"token operator\">:</span><span class=\"token number\">32.918</span> <span class=\"token constant\">DEBUG</span> <span class=\"token number\">9700</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>ntainer#<span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token class-name\">C</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">o<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>listener<span class=\"token punctuation\">.</span></span>DefaultErrorHandler</span>   <span class=\"token operator\">:</span> <span class=\"token class-name\">Skipping</span> seek of<span class=\"token operator\">:</span> test<span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token annotation punctuation\">@95</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2023</span><span class=\"token operator\">-</span><span class=\"token number\">08</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token number\">12</span><span class=\"token operator\">:</span><span class=\"token number\">03</span><span class=\"token operator\">:</span><span class=\"token number\">32.918</span> <span class=\"token constant\">TRACE</span> <span class=\"token number\">9700</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>ntainer#<span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token class-name\">C</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">o<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>listener<span class=\"token punctuation\">.</span></span>DefaultErrorHandler</span>   <span class=\"token operator\">:</span> <span class=\"token class-name\">Seeking</span><span class=\"token operator\">:</span> test<span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token keyword\">to</span><span class=\"token operator\">:</span> <span class=\"token number\">96</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2023</span><span class=\"token operator\">-</span><span class=\"token number\">08</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token number\">12</span><span class=\"token operator\">:</span><span class=\"token number\">03</span><span class=\"token operator\">:</span><span class=\"token number\">32.918</span>  <span class=\"token constant\">INFO</span> <span class=\"token number\">9700</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>ntainer#<span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token class-name\">C</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">o<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>k<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">.</span></span>KafkaConsumer</span>     <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Consumer</span> clientId<span class=\"token operator\">=</span>consumer<span class=\"token operator\">-</span>apple<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> groupId<span class=\"token operator\">=</span>apple<span class=\"token punctuation\">]</span> <span class=\"token class-name\">Seeking</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">offset</span> <span class=\"token number\">96</span> <span class=\"token keyword\">for</span> partition test<span class=\"token operator\">-</span><span class=\"token number\">0</span></pre></td></tr></table></figure><h4 id=\"默认重试-10-次时间间隔为-0\"><a class=\"anchor\" href=\"#默认重试-10-次时间间隔为-0\">#</a> 默认重试 10 次，时间间隔为 0</h4>\n<blockquote>\n<p>源码略了</p>\n</blockquote>\n<p>总结：<strong>Kafka Comsumer 在默认配置下会进行最多 10 次重试，每次重试的时间间隔为 0，即立即重试。如果在 10 次重试后仍然无法成功消费消息，则不再进行重试，该消息将被视为消费失败</strong>。</p>\n<h4 id=\"自定义重试次数-时间间隔\"><a class=\"anchor\" href=\"#自定义重试次数-时间间隔\">#</a> 自定义重试次数、时间间隔</h4>\n<p>从上面的代码可以知道，默认错误处理器的重试次数以及时间间隔是由  <code>FixedBackOff</code>  控制的， <code>FixedBackOff</code>  是  <code>DefaultErrorHandler</code>  初始化时默认的。</p>\n<p>所以自定义重试次数以及时间间隔，<strong>只需要在  <code>DefaultErrorHandler</code>  初始化的时候传入自定义的  <code>FixedBackOff</code>  即可</strong>。</p>\n<p>重新实现一个  <code>KafkaListenerContainerFactory</code>  ，调用  <code>setCommonErrorHandler</code>  设置新的自定义的错误处理器就可以实现。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">KafkaListenerContainerFactory</span> <span class=\"token function\">kafkaListenerContainerFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> consumerFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ConcurrentKafkaListenerContainerFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentKafkaListenerContainerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 自定义重试时间间隔以及次数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">FixedBackOff</span> fixedBackOff <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FixedBackOff</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">setCommonErrorHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultErrorHandler</span><span class=\"token punctuation\">(</span>fixedBackOff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    factory<span class=\"token punctuation\">.</span><span class=\"token function\">setConsumerFactory</span><span class=\"token punctuation\">(</span>consumerFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"重试失败后如何告警\"><a class=\"anchor\" href=\"#重试失败后如何告警\">#</a> 重试失败后，如何告警？</h4>\n<p>重试失败后逻辑需要手动实现，以下是一个简单的例子。<strong>继承  <code>DefaultErrorHandler</code>  并重写  <code>handleRemaining</code>  函数，加上自定义的告警等操作</strong>。</p>\n<pre><code class=\"language-Java\">@Slf4j\npublic class DelErrorHandler extends DefaultErrorHandler &#123;\n\n    public DelErrorHandler(FixedBackOff backOff) &#123;\n        super(null,backOff);\n    &#125;\n\n    @Override\n    public void handleRemaining(Exception thrownException, List&lt;ConsumerRecord&lt;?, ?&gt;&gt; records, Consumer&lt;?, ?&gt; consumer, MessageListenerContainer container) &#123;\n        super.handleRemaining(thrownException, records, consumer, container);\n        log.info(&quot;重试多次失败&quot;);\n        // 自定义操作\n    &#125;\n&#125;\n</code></pre>\n<p><code>DefaultErrorHandler</code>  只是默认的一个错误处理器，Spring Kafka 还提供了  <code>CommonErrorHandler</code>  接口。手动实现  <code>CommonErrorHandler</code>  就可以实现更多的自定义操作，有很高的灵活性。例如根据不同的错误类型，实现不同的重试逻辑以及业务逻辑等。</p>\n<h4 id=\"重试最大次数失败后如何再次处理该消息\"><a class=\"anchor\" href=\"#重试最大次数失败后如何再次处理该消息\">#</a> 重试最大次数失败后，如何再次处理该消息？</h4>\n<p>当达到最大重试次数后，消息数据会被直接跳过，继续向后进行。当代码修复后，如何重新消费这些重试失败的消息数据呢？</p>\n<p><strong>死信队列（Dead Letter Queue，简称 DLQ）</strong> 是消息中间件中的一种特殊队列。它主要 **<font color='red'>用于处理无法被 Comsumer 正确处理的消息</font>**，通常是因为<font color='red'>消息格式错误、处理失败、消费超时</font>等情况导致的消息被 &quot;丢弃&quot; 或 &quot;死亡&quot; 的情况。</p>\n<p>当消息进入队列后，消费者会尝试处理它。如果处理失败，或者超过一定的重试次数仍无法被成功处理，消息可以发送到死信队列中，而不是被永久性地丢弃。<font color='red'>在死信队列中，可以进一步分析、处理这些无法正常消费的消息，以便定位问题、修复错误，并采取适当的措施</font>。</p>\n<h4 id=\"重试注解-retryabletopic\"><a class=\"anchor\" href=\"#重试注解-retryabletopic\">#</a> 重试注解  <code>@RetryableTopic</code></h4>\n<p>这是 Spring Kafka 中的一个注解，<strong><font color='red'>用于配置某个 Topic 支持消息重试</font></strong>，更推荐使用这个注解来完成重试。</p>\n<pre><code class=\"language-Java\">// 重试 5 次，重试间隔 100 毫秒,最大间隔 1 秒\n@RetryableTopic(\n        attempts = &quot;5&quot;,\n        backoff = @Backoff(delay = 100, maxDelay = 1000)\n)\n@KafkaListener(topics = &#123;KafkaConst.TEST_TOPIC&#125;, groupId = &quot;apple&quot;)\nprivate void customer(String message) &#123;\n    log.info(&quot;kafka customer:&#123;&#125;&quot;, message);\n    Integer n = Integer.parseInt(message);\n    if (n % 5 == 0) &#123;\n        throw new RuntimeException();\n    &#125;\n    System.out.println(n);\n&#125;\n</code></pre>\n<p>当达到最大重试次数后，如果仍然无法成功处理消息，消息会被发送到对应的死信队列中。<font color='red'>对于死信队列的处理，既可以用  <code>@DltHandler</code>  处理，也可以使用  <code>@KafkaListener</code>  重新消费</font>。</p>\n<h3 id=\"面试题kafka-消费组有什么特性\"><a class=\"anchor\" href=\"#面试题kafka-消费组有什么特性\">#</a> 【面试题】kafka 消费组有什么特性？</h3>\n<p>Kafka 消费组：是 Kafka 提供的<font color='red'>可扩展、具有容错性的 Comsumer 机制</font>。同一个消费组的多个 Comsumer 能分布到多个物理机器上<font color='red'>加速消费</font>，同时也可以实现<font color='red'>负载均衡</font>。</p>\n<p>当某个 Comsumer 宕机时，其他 Comsumer 可以继续消费该 Partition 的数据，从而保证了<font color='red'>数据的可靠性和持久性</font>。</p>\n<p>因此，Kafka 消费组有以下特性：</p>\n<ul>\n<li>同一个消费组内的<font color='red'>所有 Comsumer 共享一个公共 ID</font>。</li>\n<li>消费组内的<font color='red'>每个 Comsumer 都有自己的 offset (偏移量)</font>，用于记录已经消费过的消息位置。</li>\n<li>消费组内的<font color='red'>每个 Comsumer 可以处理 Partition 中的所有消息</font>。</li>\n</ul>\n<h3 id=\"面试题kafka-多-topic-为什么有性能问题\"><a class=\"anchor\" href=\"#面试题kafka-多-topic-为什么有性能问题\">#</a> 【面试题】kafka 多 topic 为什么有性能问题？</h3>\n<p>kafka 多 topic 可能会导致性能问题的<font color='gree'>原因</font>：</p>\n<ul>\n<li><strong>Partition 数量增加</strong>：每个 topic 都会被分成多个 Partition，当有大量的 topic 存在时， Partition 数量也会相应增加。这会导致 Kafka 需要处理更多的 Partition，增加了系统的负载和资源消耗。</li>\n<li><strong>网络开销增加</strong>：Kafka 的多 topic 会导致更多的网络通信开销。当一个 Producer 同时向多个 topic 发送消息时，需要建立多个网络连接，并且需要维护多个网络通信的状态。这增加了网络开销和延迟。</li>\n<li><strong>资源竞争</strong>：多个 topic 同时进行读写操作时，会引起资源的竞争。例如，多个 Comsumer 同时消费不同的 topic，会导致 Comsumer 之间的竞争和争夺资源的情况，从而影响系统的性能。</li>\n<li><strong>数据分布不均衡</strong>：当有大量的 topic 存在时，数据的分布可能会不均衡。某些 topic 可能会有更多的数据量，而某些 topic 可能会有较少的数据量。这会<font color='red'>导致某些 broker 负载过重</font>，而其他 broker 负载较轻，从而影响整个系统的性能。</li>\n</ul>\n<p>为了解决这些性能问题，可以采取以下<font color='gree'>措施</font>：</p>\n<ul>\n<li><strong>合并 topic</strong>：如果有多个 topic 的数据量较小，可以考虑将它们合并为一个 topic，减少分区数量和网络开销。</li>\n<li><strong>增加资源</strong>：<font color='red'>增加 Kafka 集群的 broker 数量和 C omsumer 数量</font>，以便更好地处理多 topic 的负载。</li>\n<li><strong>均衡数据分布</strong>：通过调整 Partition 分配策略，使得数据在各个 broker 上均衡分布，避免负载不均的情况。</li>\n<li><strong>使用分区策略</strong>：根据业务需求，合理地选择分区策略，避免数据集中在某个 Partition 或某个 broker 上。</li>\n<li><strong>优化网络通信</strong>：通过合理的网络配置和优化，减少网络开销和延迟，提高系统的性能。</li>\n</ul>\n<h2 id=\"rocketmq-2\"><a class=\"anchor\" href=\"#rocketmq-2\">#</a> RocketMQ</h2>\n<p>RocketMQ 是一款功能强大的<strong>分布式消息系统</strong>，广泛应用于多个领域，包括异步通信解耦、企业解决方案、金融支付、电信、电子商务、快递物流、广告营销、社交、即时通信、移动应用、手游、视频、物联网、车联网等。</p>\n<p>RocketMQ 源码地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcQ==\">https://github.com/apache/rocketmq</span></p>\n<p>RocketMQ 官方网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yb2NrZXRtcS5hcGFjaGUub3JnL3poLw==\">https://rocketmq.apache.org</span></p>\n<p>文章描述 RocketMQ 相关概念和知识，如无特别声明，均是  <code>Apache RocketMQ 4.x</code>  版本。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vbmFnZW9mZmVyL3NwcmluZ2Jvb3QtbGFkZGVy\">🔥SpringBoot Ladder</span>：从零到一学习 SpringBoot 各种组件框架实战的项目，让 Demo 变得简单。咱们文章中的 RocketMQ 示例也在这个项目。</p>\n<h3 id=\"使用场景\"><a class=\"anchor\" href=\"#使用场景\">#</a> 使用场景</h3>\n<h4 id=\"异步解耦\"><a class=\"anchor\" href=\"#异步解耦\">#</a> <mark>异步解耦</mark></h4>\n<p>最常见的一个场景是用户注册后，需要发送注册邮件和短信通知，以告知用户注册成功。传统的做法有以下两种：</p>\n<h5 id=\"串行方式\"><a class=\"anchor\" href=\"#串行方式\">#</a> 串行方式</h5>\n<p>串行方式下的注册流程如下图所示。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/p429262.png\" alt=\"img\" /></p>\n<p>数据流动如下所述：</p>\n<ol>\n<li>您在注册页面填写账号和密码并提交注册信息，这些注册信息首先会被写入注册系统。</li>\n<li>注册信息写入注册系统成功后，再发送请求至邮件通知系统。邮件通知系统收到请求后向用户发送邮件通知。</li>\n<li>邮件通知系统接收注册系统请求后再向下游的短信通知系统发送请求。短信通知系统收到请求后向用户发送短信通知。</li>\n</ol>\n<p>以上三个任务全部完成后，才返回注册结果到客户端，用户才能使用账号登录。</p>\n<p>假设每个任务耗时分别为 50ms，则用户需要在注册页面等待总共 150ms 才能登录。</p>\n<h5 id=\"并行方式\"><a class=\"anchor\" href=\"#并行方式\">#</a> 并行方式</h5>\n<p>并行方式下的注册流程如下图所示。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/p429331.png\" alt=\"img\" /></p>\n<p>数据流动如下所述：</p>\n<ol>\n<li>用户在注册页面填写账号和密码并提交注册信息，这些注册信息首先会被写入注册系统。</li>\n<li>注册信息写入注册系统成功后，再<font color='red'>同时发送请求至邮件和短信通知系统</font>。邮件和短信通知系统收到请求后分别向用户发送邮件和短信通知。</li>\n</ol>\n<p>以上两个任务全部完成后，才返回注册结果到客户端，用户才能使用账号登录。</p>\n<p>假设每个任务耗时分别为 50ms，其中，邮件和短信通知并行完成，则用户需要在注册页面等待总共 100ms 才能登录。</p>\n<h5 id=\"异步解耦-2\"><a class=\"anchor\" href=\"#异步解耦-2\">#</a> 异步解耦</h5>\n<p>对于用户来说，注册功能实际只需要注册系统存储用户的账户信息后，该用户便可以登录，后续的注册短信和邮件不是即时需要关注的步骤。</p>\n<p>对于注册系统而言，发送注册成功的短信和邮件通知并不一定要绑定在一起同步完成，所以实际<font color='red'>当数据写入注册系统后，注册系统就可以把其他的操作放入对应的 RocketMQ 中然后马上返回用户结果，由 RocketMQ 异步地进行这些操作</font>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/p429333.png\" alt=\"img\" /></p>\n<p>数据流动如下所述：</p>\n<ol>\n<li>用户在注册页面填写账号和密码并提交注册信息，这些注册信息首先会被写入注册系统。</li>\n<li><font color='red'>注册信息写入注册系统成功后，再发送消息至 RocketMQ。RocketMQ 会马上返回响应给注册系统，注册完成。用户可立即登录。</font></li>\n<li><font color='red'>下游的邮件和短信通知系统订阅 RocketMQ 的此类注册请求消息</font>，即可向用户发送邮件和短信通知，完成所有的注册流程。</li>\n</ol>\n<p>用户只需在注册页面等待注册数据写入注册系统和 RocketMQ 的时间，即等待 55ms 即可登录。</p>\n<h4 id=\"流量削峰\"><a class=\"anchor\" href=\"#流量削峰\">#</a> <mark>流量削峰</mark></h4>\n<p>流量削峰也是 RocketMQ 的常用场景，一般在<font color='red'>秒杀或团队抢购</font>活动中使用广泛。</p>\n<p>在秒杀或团队抢购活动中，由于<font color='red'>用户请求量较大</font>，导致流量暴增，秒杀的应用在处理如此大量的访问流量后，下游的通知系统无法承载海量的调用量，甚至会导致系统崩溃等问题而发生漏通知的情况。为解决这些问题，<font color='red'>可在应用和下游通知系统之间加入 RocketMQ</font>。</p>\n<p><img data-src=\"https://images-machen.oss-cn-beijing.aliyuncs.com/p429350.png\" alt=\"img\" /></p>\n<p>秒杀处理流程如下所述：</p>\n<ol>\n<li>用户发起海量秒杀请求到秒杀业务处理系统。</li>\n<li>秒杀处理系统按照秒杀处理逻辑<font color='red'>将满足秒杀条件的请求发送 RocketMQ</font>。</li>\n<li><font color='red'>下游的通知系统订阅 RocketMQ 的秒杀相关消息</font>，再将秒杀成功的消息发送到相应用户。</li>\n<li>用户收到秒杀成功的通知。</li>\n</ol>\n<h4 id=\"顺序消息\"><a class=\"anchor\" href=\"#顺序消息\">#</a> 顺序消息</h4>\n<blockquote>\n<p>详细请见 “消息类型 - 顺序消息” 小节</p>\n</blockquote>\n<p>顺序消息是 RocketMQ 提供的<strong>一种对消息发送、消费顺序有严格要求的消息</strong>。</p>\n<h4 id=\"分布式模缓存同步\"><a class=\"anchor\" href=\"#分布式模缓存同步\">#</a> 分布式模缓存同步</h4>\n<p>双十一大促时，各个分会场会有琳琅满目的商品，每件商品的价格都会实时变化。使用缓存技术也无法满足对商品价格的访问需求，缓存服务器网卡满载。访问较多次商品价格查询影响会场页面的打开速度。</p>\n<p>此时需要提供一种广播机制，一条消息本来只可以被集群的一台机器消费，如果使用 RocketMQ 的<strong>广播消费模式</strong>，那么<font color='red'>这条消息会被所有节点消费一次，相当于把价格信息同步到需要的每台机器上，取代缓存的作用</font>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/TB1ki7KXgMPMeJjy1XdXXasrXXa-1530-1140.png\" alt=\"img\" /></p>\n<h4 id=\"分布式定时延时调度\"><a class=\"anchor\" href=\"#分布式定时延时调度\">#</a> 分布式定时 / 延时调度</h4>\n<blockquote>\n<p>详细请见 “消息类型 - 定时消息” 小节</p>\n</blockquote>\n<p>RocketMQ 提供<strong>精确度到秒级的分布式定时消息能力</strong>（5.0 架构后），可广泛应用于<font color='red'>订单超时中心处理、分布式延时调度系统</font>等场景。</p>\n<h3 id=\"消息类型\"><a class=\"anchor\" href=\"#消息类型\">#</a> 消息类型</h3>\n<h4 id=\"普通消息\"><a class=\"anchor\" href=\"#普通消息\">#</a> 普通消息</h4>\n<p>普通消息一般应用于微服务解耦、事件驱动、数据集成等场景，这些场景大多数要求数据传输通道具有可靠的传输能力，且<font color='red'>对消息的处理时机、处理顺序没有特别要求</font>。</p>\n<p>以在线的电商交易场景为例，上游订单系统将用户下单支付这一业务事件封装成独立的普通消息并发送至 RocketMQ 服务端，下游按需从服务端订阅消息，并按照本地消费逻辑处理下游任务。<font color='red'>每个消息之间都是相互独立的，且不需要产生关联</font>。</p>\n<p>另外还有日志系统，以离线的日志收集场景为例，通过埋点组件收集前端应用的相关操作日志，并转发到 RocketMQ 。</p>\n<p><font color='gree'>普通消息的生命周期</font>：</p>\n<p><img data-src=\"https://rocketmq.apache.org/zh/assets/images/lifecyclefornormal-e8a2a7e42a0722f681eb129b51e1bd66.png\" alt=\"img\" /></p>\n<ul>\n<li><font color='cornflowerblue'>初始化（Initialized）</font>：消息被 Producer 构建并完成初始化，<font color='red'>待发送到服务端</font>的状态。</li>\n<li><font color='cornflowerblue'>待消费（Ready）</font>：<font color='red'>消息被发送到服务端</font>，对 Consumer 可见，等待消费的状态。</li>\n<li><font color='cornflowerblue'>消费中（Inflight）</font>：<font color='red'>消息被 Consumer 获取</font>，并按照其本地的业务逻辑进行处理的过程。此时服务端会等待 Consumer 完成消费并提交消费结果，如果一定时间后没有收到 Consumer 的响应，RocketMQ 会对消息进行<font color='red'>重试</font>处理。</li>\n<li><font color='cornflowerblue'>消费提交（Acked）</font>：Consumer 完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被处理（包括消费成功和失败）。RocketMQ 默认支持保留所有消息，此时消息数据并不会立即被删除，<font color='red'>只是逻辑标记已消费</font>。消息在保存时间到期或存储空间不足被删除前，<font color='red'>Consumer 仍然可以回溯消息，重新消费</font>。</li>\n<li><font color='cornflowerblue'>消息删除（Deleted）</font>：RocketMQ 按照消息保存机制滚动清理最早的消息数据，<font color='red'>将消息从物理文件中删除</font>。</li>\n</ul>\n<h4 id=\"定时消息\"><a class=\"anchor\" href=\"#定时消息\">#</a> 定时消息</h4>\n<p>在分布式定时调度触发、任务超时处理等场景，需要实现精准、可靠的定时事件触发。使用 RocketMQ 的定时消息可以<font color='red'>简化定时调度任务的开发逻辑</font>，实现高性能、可扩展、高可靠的定时触发能力。</p>\n<p><strong><font color='red'>定时消息仅支持在 MessageType 为 Delay 的 Topic 内使用</font></strong>，即定时消息只能发送至类型为定时消息的 Topic 中，发送的消息的类型必须和 Topic 的类型一致。</p>\n<p>基于定时消息的超时任务处理具备如下优势：</p>\n<ul>\n<li><font color='red'>定时精度高、开发门槛低</font>：消息定时时间不存在阶梯间隔，可以轻松实现任意精度事件触发，无需业务去重。</li>\n<li><font color='red'>高性能、可扩展</font>：传统的定时实现方案较为复杂，需要进行数据库扫描，容易遇到性能瓶颈的问题，RocketMQ 可以基于定时消息特性完成事件驱动，实现百万级消息 TPS 能力。</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/p433720.png\" alt=\"img\" /></p>\n<p><font color='gree'>定时消息的生命周期</font>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/lifecyclefordelay-2ce8278df69cd026dd11ffd27ab09a17.png\" alt=\"img\" /></p>\n<ul>\n<li><font color='cornflowerblue'>初始化（Initialized）</font>：消息被生产者构建并完成初始化，待发送到服务端的状态。</li>\n<li><strong><font color='cornflowerblue'>定时中（In timing）</font></strong>：消息被发送到服务端，和普通消息不同的是，<strong>服务端不会直接构建消息索引，而是会将定时消息单独存储在定时存储系统中，等待定时时刻到达</strong>。</li>\n<li><font color='cornflowerblue'>待消费（Ready）</font>：<strong>定时时刻到达后，服务端将定时消息重新写入普通存储引擎，对下游消费者可见</strong>，等待消费者消费的状态。</li>\n<li><font color='cornflowerblue'>消费中（Inflight）</font>：消息被消费者获取，并按照消费者本地的业务逻辑进行处理的过程。此时服务端会等待消费者完成消费并提交消费结果，如果一定时间后没有收到消费者的响应，RocketMQ 会对消息进行重试处理。</li>\n<li><font color='cornflowerblue'>消费提交（Acked）</font>：消费者完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被处理（包括消费成功和失败）。RocketMQ 默认支持保留所有消息，此时消息数据并不会立即被删除，只是逻辑标记已消费。消息在保存时间到期或存储空间不足被删除前，消费者仍然可以回溯消息重新消费。</li>\n<li><font color='cornflowerblue'>消息删除（Deleted）</font>：Apache RocketMQ 按照消息保存机制滚动清理最早的消息数据，将消息从物理文件中删除。</li>\n</ul>\n<p>定时消息的实现逻辑：先经过定时存储等待触发，<font color='red'>定时时间到达后才会被投递给 Consumer</font>。因此，如果将大量定时消息的定时时间设置为同一时刻，则到达该时刻后会有大量消息同时需要被处理，会造成系统压力过大，导致消息分发延迟，影响定时精度。</p>\n<h4 id=\"顺序消息-2\"><a class=\"anchor\" href=\"#顺序消息-2\">#</a> 顺序消息</h4>\n<p>顺序消息是 RocketMQ 提供的<strong>一种对消息发送、消费顺序有严格要求的消息</strong>。<strong><font color='red'>顺序消息仅支持在 MessageType 为 FIFO 的 Topic 内使用</font></strong>，对于一个指定的 Topic，消息严格按照<font color='red'>先进先出（FIFO）</font>的原则进行消息发布和消费，即先发布的消息先消费，后发布的消息后消费。</p>\n<p>顺序消息分为分区顺序消息和全局顺序消息。</p>\n<ul>\n<li><strong><font color='cornflowerblue'>分区顺序消息</font></strong>：对于指定的一个 Topic，所有消息<font color='red'>根据 Sharding Key 进行区块分区</font>，同一个 Partition 内的消息按照严格的先进先出（FIFO）原则进行发布和消费。<strong><font color='red'>同一 Partition 内的消息保证顺序，不同 Partition 之间的消息顺序不做要求</font></strong>。\n<ul>\n<li>适用场景：适用于性能要求高，以 Sharding Key 作为分区字段，在同一个区块中严格地按照先进先出（FIFO）原则进行消息发布和消费的场景。</li>\n<li>示例\n<ul>\n<li>用户注册需要<font color='red'>发送验证码</font>，以用户 ID 作为 Sharding Key，那么同一个用户发送的消息都会按照发布的先后顺序来消费。</li>\n<li>电商的<font color='red'>订单创建</font>，以订单 ID 作为 Sharding Key，那么同一个订单相关的创建订单消息、订单支付消息、订单退款消息、订单物流消息都会按照发布的先后顺序来消费。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><font color='cornflowerblue'>全局顺序消息</font></strong>：<strong><font color='red'>对于指定的一个 Topic，所有消息按照严格的先入先出（FIFO）的顺序来发布和消费</font></strong>。\n<ul>\n<li>适用场景：适用于性能要求不高，所有的消息严格按照 FIFO 原则来发布和消费的场景。</li>\n<li>示例：在证券处理中，以人民币兑换美元为 Topic，在价格相同的情况下，先出价者优先处理，则可以按照 FIFO 的方式发布和消费全局顺序消息。</li>\n</ul>\n</li>\n</ul>\n<p><strong><font color='red'>全局顺序消息实际上是一种特殊的分区顺序消息，即 Topic 中只有一个分区</font></strong>，因此全局顺序和分区顺序的实现原理相同。因为分区顺序消息有多个分区，所以<font color='red'>分区顺序消息比全局顺序消息的并发度和性能更高</font>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/p326576.png\" alt=\"img\" /></p>\n<p>和普通消息发送相比，<font color='red'>顺序消息发送必须要设置消息组</font>（推荐实现 MessageQueueSelector 的方式，见下文）。要保证消息的顺序性需要单一 Producer 串行发送。</p>\n<p>单线程使用 MessageListenerConcurrently 可以顺序消费，多线程环境下使用 MessageListenerOrderly 才能顺序消费。</p>\n<h4 id=\"事务消息\"><a class=\"anchor\" href=\"#事务消息\">#</a> 事务消息</h4>\n<h3 id=\"基础概念\"><a class=\"anchor\" href=\"#基础概念\">#</a> 基础概念</h3>\n<blockquote>\n<p>RocketMQ 消息模型：<strong>在一个  <code>Topic</code>  中配置多个  <code>Queue</code> ，并且每个  <code>Queue</code>  维护每个  <code>Consumer组</code>  的  <code>offset</code> （消费位置）</strong> 实现了 <strong>主题模式 / 发布订阅模式</strong>。</p>\n</blockquote>\n<h4 id=\"topic-主题\"><a class=\"anchor\" href=\"#topic-主题\">#</a> Topic 主题</h4>\n<p><strong>Topic 是消息传输和存储的顶层容器，用于标识同一类业务逻辑的消息</strong>。Topic 的作用主要如下：</p>\n<ul>\n<li><strong>定义数据的分类隔离</strong>：在 Apache RocketMQ 的方案设计中，<font color='red'>建议将不同业务类型的数据拆分到不同的 Topic 中管理，实现存储的隔离性和订阅隔离性</font>。</li>\n<li><strong>定义数据的身份和权限</strong>：Apache RocketMQ 的消息本身是匿名无身份的<font color='red'>，同一分类的消息使用相同的 Topic 来做身份识别和权限管理</font>。</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/archifortopic-ef512066703a22865613ea9216c4c300.png\" alt=\"img\" /></p>\n<h4 id=\"queue-队列\"><a class=\"anchor\" href=\"#queue-队列\">#</a> Queue 队列</h4>\n<blockquote>\n<p>类似于 **Kafka 中的 Partition（分区）** 这一概念？</p>\n</blockquote>\n<p><strong>Queue 是消息存储和传输的实际容器，也是消息的最小存储单元</strong>。<font color='red'>每个 Topic 都是由多个 Queue 组成的</font>，以此实现 Queue 数量的水平拆分和 Queue 内部的流式存储。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/archiforqueue-dd6788b33bf2fc96b4a1dab83a1b0d71.png\" alt=\"img\" /></p>\n<h4 id=\"message-消息\"><a class=\"anchor\" href=\"#message-消息\">#</a> Message 消息</h4>\n<p><strong>Message 是最小数据传输单元</strong>。Producer 将业务数据的负载和拓展属性包装成 Message 发送到 Apache RocketMQ 服务端，服务端按照相关语义将 Message 投递到消费端进行消费。</p>\n<h4 id=\"producer-生产者\"><a class=\"anchor\" href=\"#producer-生产者\">#</a> Producer 生产者</h4>\n<p>发布消息的角色。<strong>Producer 通过 MQ 的负载均衡模块选择相应的 Broker 集群队列进行消息投递，投递的过程支持快速失败和重试</strong>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/archiforproducer-ebb8ff832f6e857cbebc2c17c2044a3b.png\" alt=\"img\" /></p>\n<h4 id=\"consumer-消费者\"><a class=\"anchor\" href=\"#consumer-消费者\">#</a> Consumer 消费者</h4>\n<p>消息消费的角色。</p>\n<ul>\n<li>支持以 ** 推（push）、拉（pull）** 两种模式对消息进行消费。</li>\n<li>同时也支持<strong>集群方式</strong>和<strong>广播方式</strong>的消费。</li>\n<li>提供<strong>实时消息订阅机制</strong>，可以满足大多数用户的需求。</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/archiforconsumer-24914573add839fdf2ba2cbc0fcab7c4.png\" alt=\"img\" /></p>\n<h4 id=\"broker-代理服务器\"><a class=\"anchor\" href=\"#broker-代理服务器\">#</a> <mark>Broker 代理服务器</mark></h4>\n<p><strong>Broker 负责消息的存储、投递和查询，并保证服务高可用</strong>。其实 Broker 就是 MQ 服务器，Producer 生产消息到 Broker，Consumer 从 Broker 拉取并消费消息。</p>\n<p><font color='gree'>Broker、Topic、Queue 的关系</font>：</p>\n<ul>\n<li>一个 Topic 中存在多个 Queue</li>\n<li>一个 Topic 分布在多个 Broker 上，而一个 Broker 可以配置多个 Topic，即 <font color='red'>Topic 和 Broker 之间是多对多的关系</font></li>\n</ul>\n<p>如果某个 Topic 消息量很大，应该给它多配置几个 Queue (提高并发能力)，并且<strong>尽量多分布在不同 Broker 上，以减轻某个 Broker 的压力</strong>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef38687488a5a4.jpg\" alt=\"img\" /></p>\n<p>Broker 集群遵从 <strong>Master-Slave 架构</strong> ：</p>\n<ul>\n<li>Broker 分为 Master 与 Slave</li>\n<li>一个 Master 可以对应多个 Slave，但是一个 Slave 只能对应一个 Master</li>\n<li>Master 与 Slave 的对应关系通过指定相同的 BrokerName，不同的 BrokerId 来定义，<font color='red'>BrokerId 为 0 表示 Master</font>，非 0 表示 Slave</li>\n<li>Master 也可以部署多个</li>\n</ul>\n<h4 id=\"nameserver-名字服务器\"><a class=\"anchor\" href=\"#nameserver-名字服务器\">#</a> <mark>NameServer 名字服务器</mark></h4>\n<blockquote>\n<p>为 Broker 和 Producer、Consumer 解耦，类似于 SpringCloud 中的 Eureka / Nacos</p>\n</blockquote>\n<p>NameServer 是一个简单的 <strong>Broker 路由注册中心</strong>，支持 Broker 的注册与发现，主要提供两个功能：</p>\n<ul>\n<li><strong>Broker 管理</strong>：\n<ul>\n<li><font color='red'>NameServer 接受并保存 Broker 所提交的注册信息，作为 Broker 路由表的基本数据</font></li>\n<li><font color='red'>提供心跳检测机制，检查 Broker 是否还存活</font></li>\n</ul>\n</li>\n<li><strong>路由信息管理</strong>：\n<ul>\n<li>每个 NameServer 保存了关于 Broker 集群的整个路由信息、用于客户端查询的 Queue 信息</li>\n<li><font color='red'>Producer 和 Consumer 通过 NameServer 中的 Broker 路由表就可以知道整个 Broker 集群的路由信息，从而和对应的 Broker 进行消息的投递和消费</font>（Producer 和 Consumer 定期会向 NameServer 查询相关的 Broker 信息）</li>\n</ul>\n</li>\n</ul>\n<p><font color='red'>NameServer 通常会有多个实例部署，各实例间相互不进行信息通讯</font>。<font color='red'>Broker 向每一台 NameServer 注册自己的路由信息</font>，所以每一个 NameServer 实例上面都保存一份完整的路由信息。当某个 NameServer 因某种原因下线了，客户端仍然可以向其它 NameServer 获取路由信息。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef386c6d1e8bdb.jpg\" alt=\"img\" /></p>\n<center>Producer、Consumer、Broker、NameServer</center>\n<blockquote>\n<p>上图中的四个角色实际上都需要做集群。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef386fa3be1e53.jpg\" alt=\"img\" /></p>\n<center>官方架构图</center>\n<ul>\n<li><strong> <code>Broker</code>  做了集群，并且还进行了主从部署</strong>：由于消息分布在各个  <code>Broker</code>  上，一旦某个  <code>Broker</code>  宕机，则该  <code>Broker</code>  上的消息读写都会受到影响。所以  <code>RocketMQ</code>  提供了  <code>master/slave</code>  的结构， <code>salve</code>  定时从  <code>master</code>  同步数据 (同步刷盘或者异步刷盘)，<strong>如果  <code>master</code>  宕机，则  <code>slave</code>  提供消费服务，但是不能写入消息</strong> (后面我还会提到哦)。</li>\n<li><strong>为了保证高可用  <code>HA</code> ， <code>NameServer</code>  也做了集群部署，但它是去中心化的</strong>：意味着  <code>NameServer</code>  没有 master 节点，在  <code>RocketMQ</code>  中是通过 <strong>单个 Broker 和所有 NameServer 保持长连接</strong> ，并且  <code>Broker</code>  会定期向所有  <code>Nameserver</code>  发送心跳，其中包含了自身的  <code>Topic</code>  配置信息，这个步骤就对应图中的  <code>Routing Info</code> 。</li>\n<li>在  <code>Producer</code>  需要向  <code>Broker</code>  发送消息的时候，<strong>需要先从  <code>NameServer</code>  获取关于  <code>Broker</code>  的路由信息</strong>，然后通过 <strong>轮询</strong> 的方式向每个 Queue 中生产数据，以达到<strong>负载均衡</strong>的效果。</li>\n<li><code>Comsumer</code>  通过  <code>NameServer</code>  获取所有  <code>Broker</code>  的路由信息后，向  <code>Broker</code>  发送  <code>Pull</code>  请求来获取消息数据。 <code>Consumer</code>  可以以两种模式启动 —— <strong>广播（Broadcast）和集群（Cluster）</strong>：\n<ul>\n<li>广播模式下，一条消息会发送给 <strong>同一个消费组中的所有消费者</strong></li>\n<li>集群模式下消息只会发送给一个消费者</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"部署模型小结\"><a class=\"anchor\" href=\"#部署模型小结\">#</a> 部署模型小结</h4>\n<ul>\n<li>\n<p>每个 Broker 与 NameServer 集群中的所有节点建立长连接，定时将 Topic 信息注册到所有 NameServer。</p>\n</li>\n<li>\n<p>Producer 与 NameServer 集群中的其中一个节点建立长连接，定期从 NameServer 获取 Topic/Broker 路由信息。并向提供 Topic 服务的 Broker Master 建立长连接，且定时向 Broker Master 发送心跳。Producer 完全无状态。</p>\n</li>\n<li>\n<p>Consumer 与 NameServer 集群中的其中一个节点建立长连接，定期从 NameServer 获取 Topic/Broker 路由信息，并向提供 Topic 服务的 Broker Master、Broker Slave 建立长连接，且定时向 Broker Master、Broker Slave 发送心跳。</p>\n<blockquote>\n<p><font color='red'>Consumer 既可以从 Broker Master 订阅消息，也可以从 Broker Slave 订阅消息</font>。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"工作原理\"><a class=\"anchor\" href=\"#工作原理\">#</a> 工作原理</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/p68921.png\" alt=\"img\" /></p>\n<h4 id=\"1-启动-nameserver\"><a class=\"anchor\" href=\"#1-启动-nameserver\">#</a> 1、启动 NameServer</h4>\n<p>启动 NameServer。NameServer 启动后监听端口，等待 Broker、Producer、Consumer 连接，相当于一个<font color='red'>路由控制中心</font>。</p>\n<h4 id=\"2-启动-broker\"><a class=\"anchor\" href=\"#2-启动-broker\">#</a> 2、启动 Broker</h4>\n<p>启动 Broker。<font color='red'>与所有 NameServer 保持长连接，定时发送心跳包</font>（包含当前 Broker 信息以及存储的所有 Topic 信息）。注册成功后，NameServer 集群中就有 Topic 跟 Broker 的映射关系。</p>\n<h4 id=\"3-创建-topic\"><a class=\"anchor\" href=\"#3-创建-topic\">#</a> 3、创建 Topic</h4>\n<p><font color='red'>创建 Topic 时需要指定该 Topic 要存储在哪些 Broker 上</font>，也可以在发送消息时自动创建 Topic。</p>\n<h4 id=\"4-producer-发送消息\"><a class=\"anchor\" href=\"#4-producer-发送消息\">#</a> 4、Producer 发送消息</h4>\n<p>Producer 发送消息。启动时先跟 NameServer 集群中的其中一台建立长连接，并从 NameServer 中查询当前发送的 Topic 存在于哪些 Broker 上，轮询从对应 Broker 上的 Queue 列表中选择一个 Queue，然后与该 Queue 所在的 Broker 建立长连接，从而向 Broker 发消息。</p>\n<h4 id=\"5-consumer-接收消息\"><a class=\"anchor\" href=\"#5-consumer-接收消息\">#</a> 5、Consumer 接收消息</h4>\n<p>Consumer 接受消息。跟其中一台 NameServer 建立长连接，获取当前订阅 Topic 存在于哪些 Broker 上，然后直接跟 Broker 建立连接通道，然后开始消费消息。</p>\n<h3 id=\"如何正确发送消息\"><a class=\"anchor\" href=\"#如何正确发送消息\">#</a> 如何正确发送消息</h3>\n<h4 id=\"不建议单一进程创建大量-producer\"><a class=\"anchor\" href=\"#不建议单一进程创建大量-producer\">#</a> 不建议单一进程创建大量 Producer</h4>\n<p>Apache RocketMQ 的 Producer 和 Topic 是多对多的关系，支持同一个 Producer 向多个 Topic 发送消息。<font color='red'>对于 Producer 的创建和初始化，建议遵循够用即可、最大化复用原则</font>，如果有需要发送消息到多个 Topic 的场景，无需为每个 Topic 都创建一个 Producer。</p>\n<h4 id=\"不建议频繁创建和销毁-producer\"><a class=\"anchor\" href=\"#不建议频繁创建和销毁-producer\">#</a> 不建议频繁创建和销毁 Producer</h4>\n<p>Apache RocketMQ 的 <font color='red'>Producer 是可以重复利用的底层资源</font>，类似数据库的连接池。因此不需要在每次发送消息时动态创建 Producer，且在发送结束后销毁 Producer。这样频繁的创建销毁会在服务端产生大量短连接请求，严重影响系统性能。</p>\n<p>正确示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Producer</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\">ProducerBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Message</span> m<span class=\"token operator\">=</span> <span class=\"token class-name\">MessageBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"consumer-分类\"><a class=\"anchor\" href=\"#consumer-分类\">#</a> Consumer 分类</h3>\n<ul>\n<li>PushConsumer</li>\n<li>SimpleConsumer</li>\n<li>PullConsumer</li>\n</ul>\n<h3 id=\"producer-和-consumer-分组\"><a class=\"anchor\" href=\"#producer-和-consumer-分组\">#</a> Producer 和 Consumer 分组</h3>\n<h4 id=\"producer-分组\"><a class=\"anchor\" href=\"#producer-分组\">#</a> Producer 分组</h4>\n<p>RocketMQ 服务端 5.x 版本开始，<strong>Producer 是匿名的，无需管理 Producer 分组（ProducerGroup）</strong>。</p>\n<p>对于历史版本服务端 3.x 和 4.x 版本，已经使用的 ProducerGroup 可以废弃无需再设置，且不会对当前业务产生影响。</p>\n<h4 id=\"consumer-分组\"><a class=\"anchor\" href=\"#consumer-分组\">#</a> Consumer 分组</h4>\n<p><strong>Consumer 分组是多个消费行为一致的 Consumer 的负载均衡分组</strong>。Consumer  分组不是具体实体而是一个逻辑资源。通过 Consumer 分组实现消费性能的水平扩展以及高可用容灾。</p>\n<p>Consumer 分组中的订阅关系、投递顺序性、消费重试策略是一致的。</p>\n<ul>\n<li>订阅关系：Apache RocketMQ 以 Consumer 分组的粒度管理订阅关系，实现订阅关系的管理和追溯。</li>\n<li>投递顺序性：Apache RocketMQ 的服务端将消息投递给 Consumer 消费时，支持顺序投递和并发投递，投递方式在 Consumer 分组中统一配置。</li>\n<li>消费重试策略：Consumer 消费消息失败时的重试策略，包括重试次数、死信队列设置等。</li>\n</ul>\n<p>RocketMQ 服务端 5.x 版本：上述 Consumer 的消费行为从关联的 Consumer 分组中统一获取，因此同一分组内所有 Consumer 的消费行为必然是一致的，客户端无需关注。</p>\n<p>RocketMQ 服务端 3.x/4.x 历史版本：上述消费逻辑由消费者客户端接口定义，因此，您需要自己在消费者客户端设置时保证同一分组下的消费者的消费行为一致。[来自官方网站]</p>\n<h3 id=\"如何解决顺序消费-重复消费\"><a class=\"anchor\" href=\"#如何解决顺序消费-重复消费\">#</a> 如何解决顺序消费、重复消费？</h3>\n<p>其实  <code>RocketMQ</code>  的架构基本和  <code>Kafka</code>  类似，只不过：</p>\n<ul>\n<li>RocketMQ 的注册中心是  <code>NameServer</code> ，而 Kafka 的是  <code>Zookeeper</code></li>\n<li>RocketMQ 的 **Queue（队列）** 相当于是 Kafka 的 <strong>Partition（分区）</strong></li>\n</ul>\n<h4 id=\"顺序消费\"><a class=\"anchor\" href=\"#顺序消费\">#</a> 顺序消费</h4>\n<blockquote>\n<p>可以参考 “消息类型 - 顺序消息” 小节</p>\n</blockquote>\n<p><strong> <code>RocketMQ</code>  在 Topic 上是无序的、它只有在 Queue 层面才保证有序</strong>：</p>\n<ul>\n<li><font color='cornflowerblue'>普通顺序（分区顺序消息）</font>：对于一个 Topic，同一 Queue 内的消息保证顺序，不同 Queue 之间的消息顺序不做要求。</li>\n<li><font color='cornflowerblue'>严格顺序（全局顺序消息）</font>：对于指定的一个 Topic，所有消息按照严格的先入先出（FIFO）的顺序来发布和消费。</li>\n</ul>\n<p>严格顺序的代价巨大，而 MQ 一般能容忍短暂的乱序，所以<font color='red'>推荐使用普通顺序模式！</font></p>\n<hr />\n<p>在 Producer 生产消息的时候，会轮询同一 Topic 的不同 Queue 来发送消息。那么如果此时我有几个消息分别是同一个订单的创建、支付、发货，<font color='red'>在轮询的策略下这<strong>三个消息会被发送到不同的 Queue</strong>，那么此时就无法使用  <code>RocketMQ</code>  的队列有序特性来保证消息有序性了</font>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef3874585e096e.jpg\" alt=\"img\" /></p>\n<p>解决方法很简单，<strong>只需要将同一语义下的消息放入同一个队列</strong>（比如这里是同一个订单)，那我们就可以使用 <strong><font color='red'>Hash 取模法</font></strong> 来保证同一个订单在同一个队列中就行了。</p>\n<p>RocketMQ 实现了两种<font color='gree'> Queue 选择算法</font>：</p>\n<ul>\n<li>\n<p><font color='cornflowerblue'>轮询算法</font></p>\n<ul>\n<li><font color='red'>向消息指定的 Topic 所在 Queue 中依次发送消息</font>，保证消息均匀分布</li>\n<li>是 RocketMQ <font color='red'>默认</font>队列选择算法</li>\n</ul>\n</li>\n<li>\n<p><font color='cornflowerblue'>最小投递延迟算法</font></p>\n<ul>\n<li>\n<p>每次消息投递的时候统计消息投递的延迟，<font color='red'>优先选择消息延时小的 Queue</font>，导致消息分布不均匀，按照如下设置即可。</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>producer<span class=\"token punctuation\">.</span><span class=\"token function\">setSendLatencyFaultEnable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><font color='cornflowerblue'>继承  <code>MessageQueueSelector</code>  实现自定义的选择算法</font></p>\n<ul>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">SendResult</span> sendResult <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageQueueSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MessageQueue</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MessageQueue</span><span class=\"token punctuation\">></span></span> mqs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Message</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 从 mqs 中选择一个队列，可以根据 msg 特点选择</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"特殊情况\"><a class=\"anchor\" href=\"#特殊情况\">#</a> 特殊情况</h4>\n<h5 id=\"发送异常\"><a class=\"anchor\" href=\"#发送异常\">#</a> 发送异常</h5>\n<p>选择 Queue 后会与 Broker 建立连接，通过网络请求将消息发送到 Broker 上，如果 Broker 挂了或者网络波动发送消息超时，此时 RocketMQ 会进行重试。</p>\n<p>重新选择其他 Broker 中的 Queue 进行发送，默认重试两次，可以手动设置。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>producer<span class=\"token punctuation\">.</span><span class=\"token function\">setRetryTimesWhenSendFailed</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"消息过大\"><a class=\"anchor\" href=\"#消息过大\">#</a> 消息过大</h5>\n<p>消息超过 4k 时 RocketMQ 会将消息压缩后再发送到 Broker 上，减少网络资源的占用。</p>\n<h4 id=\"重复消费\"><a class=\"anchor\" href=\"#重复消费\">#</a> 重复消费</h4>\n<p>需求：有一个订单的处理积分的系统 FrancisQ，每当来一个消息的时候它就负责为创建这个订单的用户的积分加上相应的数值。可是有一次，消息队列发送给订单系统 FrancisQ 的订单信息，其要求是给 FrancisQ 的积分加上 500。但是积分系统在收到 FrancisQ 的订单信息处理完成之后返回给消息队列处理成功的信息的时候出现了网络波动 (当然还有很多种情况，比如 Broker 意外重启等等)，这条回应没有发送成功。那么，消息队列没收到积分系统的回应会不会尝试重发这个消息？问题就来了，我再发这个消息，万一它又给 FrancisQ 的账户加上 500 积分怎么办呢？</p>\n<hr />\n<p>解决方法：<strong>让 Consumer 实现幂等校验</strong>！即<font color='red'>对同一个消息的处理结果，执行多少次都不变</font>。</p>\n<blockquote>\n<p>幂等操作的特点：其执行任意多次所产生的影响，均与执行一次的影响相同。</p>\n</blockquote>\n<p>那么如何给业务实现幂等呢？这个还是需要结合具体的业务的。</p>\n<ul>\n<li>可以使用 **<font color='cornflowerblue'>写入  <code>Redis</code> </font>** 来保证，因为  <code>Redis</code>  的  <code>key</code>  和  <code>value</code>  就是天然支持幂等的。</li>\n<li>可以使用 **<font color='cornflowerblue'>数据库插入法</font>**，基于数据库的<font color='red'>唯一键</font>来保证重复数据不会被插入多条。</li>\n</ul>\n<p>需要根据特定场景使用特定的解决方案，你要知道你的消息消费是否是完全不可重复消费还是可以忍受重复消费的，然后再选择强校验和弱校验的方式。毕竟在 CS 领域还是很少有技术银弹的说法。</p>\n<hr />\n<p>而在互联网领域，幂等不仅仅适用于 **<font color='red'>消息队列的重复消费问题</font><strong>，也同样适用于在其他场景中来解决</strong><font color='red'>重复请求或者重复调用的问题</font>**：</p>\n<ul>\n<li>比如将 HTTP 服务设计成幂等的<font color='red'>解决前端或者 APP 重复提交表单数据的问题</font></li>\n<li>可以将一个微服务设计成幂等的，解决  <code>RPC</code>  框架<font color='red'>自动重试导致的重复调用问题</font>。</li>\n</ul>\n<h3 id=\"如何实现分布式事务\"><a class=\"anchor\" href=\"#如何实现分布式事务\">#</a> 如何实现分布式事务？</h3>\n<p>事务指的是要么都执行，要么都不执行。在分布式架构中，很多服务是部署在不同系统之间的，那么如何实现分布式事务呢？常见的分布式事务实现有：</p>\n<ul>\n<li><font color='cornflowerblue'>2PC（两阶段提交）</font>：优点是简单，缺点是同步阻塞、中心化问题、数据不一致、太过保守...</li>\n<li><font color='cornflowerblue'>TCC（Try Confirm/Cancel）</font>：也是 2PC 的一种。</li>\n<li><font color='cornflowerblue'>事务消息（half 半消息机制）</font>：RocketMQ 支持这种类型的消息。</li>\n</ul>\n<p>这三种实现都有特定的使用场景和各自的局限，并不完美。</p>\n<hr />\n<p>RocketMQ 中使用的是<strong>事务消息（half 半消息机制） + 事务反查机制</strong>来解决分布式事务问题的，可以对照着图进行理解。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef38798d7a987f.png\" alt=\"img\" /></p>\n<p>在第 1 步发送的 half 消息，它的意思是<font color='red'>在事务提交之前，对于 Consumer 来说这个消息是不可见的</font>。</p>\n<blockquote>\n<p>那么，如何做到写入消息但是对 Consumer 不可见呢？RocketMQ 事务消息的做法是：</p>\n<ol>\n<li>如果消息是 half 消息，将备份原消息的 Topic 与消息消费队列</li>\n<li>然后<strong>改变 Topic 为 RMQ_SYS_TRANS_HALF_TOPIC</strong>，由于 Consumer 未订阅该 Topic，故无法消费 half 类型的消息。</li>\n<li>然后 <strong>RocketMQ 会开启一个定时任务，从该 Topic 中拉取消息进行消费</strong>，根据 Producer 组获取一个服务提供者，发送回查事务状态请求，根据事务状态来决定是提交或回滚消息。</li>\n</ol>\n</blockquote>\n<p>如果没有从第 5 步开始的<font color='red'>事务反查机制</font>，如果出现网路波动第 4 步没有发送成功，这样就会产生 MQ 不知道是不是需要给 Consumer 消费的问题。在  <code>RocketMQ</code>  中就是使用的上述的事务反查来解决的，而在  <code>Kafka</code>  中通常是直接抛出一个异常让用户来自行解决。</p>\n<p>你还需要注意的是， <code>MQ Server</code>  指向系统 B 的操作已经和系统 A 不相关了，也就是说在消息队列中的分布式事务是：<strong><font color='red'>本地事务和存储消息到消息队列才是同一个事务</font></strong>。这样也就产生了事务的<font color='red'>最终一致性</font>，因为整个过程是异步的，<strong><font color='red'>每个系统只要保证它自己那一部分的事务就行了</font></strong>。</p>\n<h3 id=\"如何解决消息堆积问题\"><a class=\"anchor\" href=\"#如何解决消息堆积问题\">#</a> 如何解决消息堆积问题？</h3>\n<p>在上面我们提到了消息队列的一个很重要的功能 ——<strong> 削峰</strong>。那么如果这个峰值太大了导致消息堆积在队列中怎么办呢？</p>\n<p>其实这个问题可以将它广义化，因为产生消息堆积的根源其实就只有两个：</p>\n<ul>\n<li>\n<p>Producer 生产太快：<strong>限流降级</strong>，或者<strong>增加 Consumer 实例</strong>以水平扩展消费能力（<font color='red'>同时还需要增加每个 Topic 的 Queue 数量</font>）。</p>\n<blockquote>\n<p>别忘了在  <code>RocketMQ</code>  中，<strong>一个 Queue 只会被一个 Consumer 消费</strong> ，如果你仅仅是增加 Consumer 实例就会出现我一开始给你画的架构图的那种情况：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef387d939ab66d.jpg\" alt=\"img\" /></p>\n</blockquote>\n</li>\n<li>\n<p>Consumer 消费太慢：先检查 <strong>Consumer 是否出现了大量的消费错误</strong>，或者打印日志查看是否有哪一个线程卡死，导致了锁资源不释放等问题。</p>\n</li>\n</ul>\n<h3 id=\"回溯消费\"><a class=\"anchor\" href=\"#回溯消费\">#</a> 回溯消费</h3>\n<p>回溯消费是指  <code>Consumer</code>  已经消费成功的消息，由于业务上需求需要重新消费。在  <code>RocketMQ</code>  中， <code>Broker</code>  在向  <code>Consumer</code>  投递成功消息后，<font color='red'>消息仍然需要保留</font>。并且重新消费一般是按照时间维度，例如由于  <code>Consumer</code>  系统故障，恢复后需要重新消费 1 小时前的数据，那么  <code>Broker</code>  要提供一种机制，可以按照时间维度来回退消费进度。 <code>RocketMQ</code>  支持按照时间回溯消费，时间维度精确到毫秒。</p>\n<h3 id=\"如何保证高性能读写\"><a class=\"anchor\" href=\"#如何保证高性能读写\">#</a> 如何保证高性能读写？</h3>\n<blockquote>\n<p>可参考 “Java IO - IO 模型 - NIO” 小节，略了。</p>\n</blockquote>\n<ul>\n<li>传统 IO 方式：即  <code>read + write</code> ，整个过程会发生 4 次上下文切换和 4 次数据的拷贝，这在高并发场景下会严重影响读写性能，故引入了零拷贝技术。\n<ul>\n<li>用户调用 read () 方法，开始读取数据，此时发生一次上下文从用户态到内核态的切换，也就是图示的切换 1</li>\n<li>将磁盘数据通过 DMA 拷贝到内核缓存区</li>\n<li>将内核缓存区的数据拷贝到用户缓冲区，这样用户，也就是我们写的代码就能拿到文件的数据</li>\n<li>read () 方法返回，此时就会从内核态切换到用户态，也就是图示的切换 2</li>\n<li>当我们拿到数据之后，就可以调用 write () 方法，此时上下文会从用户态切换到内核态，即图示切换 3</li>\n<li>CPU 将用户缓冲区的数据拷贝到 Socket 缓冲区</li>\n<li>将 Socket 缓冲区数据拷贝至网卡</li>\n<li>write () 方法返回，上下文重新从内核态切换到用户态，即图示切换 4</li>\n</ul>\n</li>\n<li>零拷贝技术\n<ul>\n<li><code>mmap</code> ：</li>\n<li><code>sendfile</code> ：</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"刷盘机制\"><a class=\"anchor\" href=\"#刷盘机制\">#</a> 刷盘机制</h3>\n<h4 id=\"同步刷盘-异步刷盘\"><a class=\"anchor\" href=\"#同步刷盘-异步刷盘\">#</a> 同步刷盘、异步刷盘</h4>\n<blockquote>\n<p>在单个节点层面</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef387fba311cda-20230814005009889.jpg\" alt=\"img\" /></p>\n<p><font color='cornflowerblue'>同步刷盘</font>：<strong><font color='red'>需要等待一个刷盘成功的  <code>ACK</code> </font></strong> ，对<font color='red'>消息可靠性</font>来说是一种不错的保障，但是<font color='red'>性能上会有较大影响</font>，一般适用于金融等特定业务场景。</p>\n<p><font color='cornflowerblue'>异步刷盘</font>：<strong><font color='red'>开启一个线程去异步地执行刷盘操作</font></strong>。消息刷盘采用后台异步线程提交的方式进行，<font color='red'>降低了读写延迟</font>，<font color='red'>提高了  <code>MQ</code>  的性能和吞吐量</font>，一般适用于如发验证码等<font color='red'>对于消息保证要求不太高</font>的业务场景。</p>\n<p>一般地，<strong>异步刷盘只有在  <code>Broker</code>  意外宕机的时候会丢失部分数据</strong>，你可以设置  <code>Broker</code>  的参数  <code>FlushDiskType</code>  来调整你的刷盘策略 (ASYNC_FLUSH 或者 SYNC_FLUSH)。</p>\n<h4 id=\"同步复制-异步复制\"><a class=\"anchor\" href=\"#同步复制-异步复制\">#</a> 同步复制、异步复制</h4>\n<blockquote>\n<p>在 Broker 主从模式下，master 返回消息给客户端时是否需要同步 slave</p>\n</blockquote>\n<p><font color='cornflowerblue'>同步复制</font>：也叫 “同步双写”，即<strong>只有消息同步双写到主从节点上时，才返回写入成功</strong>。</p>\n<p><font color='cornflowerblue'>异步复制</font>：<strong>消息写入主节点之后，直接返回写入成功</strong>。</p>\n<p>然而，很多事情是没有完美的方案的，就比如我们进行消息写入的节点越多就更能保证消息的可靠性，但是随之的性能也会下降，所以需要程序员根据特定业务场景去选择适应的主从复制方案。</p>\n<p><font color='red'>异步复制不会像异步刷盘那样影响消息的可靠性</font>，因为两者是不同的概念，对于消息可靠性是通过不同的刷盘策略保证的，而像异步同步复制策略<font color='red'>仅仅是影响到了可用性</font>。为什么呢？其主要原因是 <strong> <code>RocketMQ</code>  是不支持自动主从切换的，当 master 节点挂掉之后，Producer 就不能再给这个 master 节点生产消息了</strong>。</p>\n<p>比如这个时候采用异步复制的方式，在主节点还未发送完需要同步的消息的时候主节点挂掉了，这个时候从节点就少了一部分消息。但是此时生产者无法再给主节点生产消息了，<strong>消费者可以自动切换到从节点进行消费</strong> (仅仅是消费)，所以在主节点挂掉的时间只会产生主从结点短暂的消息不一致的情况，降低了可用性，而当主节点重启之后，从节点那部分未来得及复制的消息还会继续复制。</p>\n<p>在单主从架构中，如果一个主节点挂掉了，那么也就意味着整个系统不能再生产了。那么这个可用性的问题能否解决呢？<strong>一个主从不行那就多个主从的呗</strong>，别忘了在我们最初的架构图中，每个  <code>Topic</code>  是分布在不同  <code>Broker</code>  中的。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/16ef38687488a5asadasfg4.jpg\" alt=\"img\" /></p>\n<p>但是这种复制方式同样也会带来一个问题，那就是无法保证 <strong>严格顺序</strong> 。在上文中我们提到了如何保证的消息顺序性是通过将一个语义的消息发送在同一个队列中，使用  <code>Topic</code>  下的队列来保证顺序性的。如果此时我们主节点 A 负责的是订单 A 的一系列语义消息，然后它挂了，这样其他节点是无法代替主节点 A 的，如果我们任意节点都可以存入任何消息，那就没有顺序性可言了。</p>\n<p>而在  <code>RocketMQ</code>  中采用了  <code>Dledger</code>  解决这个问题。他要求在写入消息的时候，要求<strong>至少消息复制到半数以上的节点之后</strong>，才给客⼾端返回写⼊成功，并且它是⽀持通过选举来动态切换主节点的。这里我就不展开说明了，读者可以自己去了解。</p>\n<blockquote>\n<p>也不是说  <code>Dledger</code>  是个完美的方案，至少在  <code>Dledger</code>  选举过程中是无法提供服务的，而且他必须要使用三个节点或以上，如果多数节点同时挂掉他也是无法保证可用性的，而且要求消息复制半数以上节点的效率和直接异步复制还是有一定的差距的。</p>\n</blockquote>\n<h4 id=\"存储机制\"><a class=\"anchor\" href=\"#存储机制\">#</a> 存储机制</h4>\n<h3 id=\"动手发一条消息\"><a class=\"anchor\" href=\"#动手发一条消息\">#</a> 动手发一条消息</h3>\n<h4 id=\"1-启动-rocketmq\"><a class=\"anchor\" href=\"#1-启动-rocketmq\">#</a> 1、启动 RocketMQ</h4>\n<p><font color='gree'>安装 NameServer</font></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9876</span>:9876 <span class=\"token parameter variable\">--name</span> rmqnamesrv foxiswho/rocketmq:server-4.5.1</pre></td></tr></table></figure><p><font color='gree'>安装 Broker</font></p>\n<p>1）新建配置目录。</p>\n<p>如果是 Windows 需要替换为 Windows 的电脑路径，和 Linux 还是有点差异。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> <span class=\"token variable\">$&#123;<span class=\"token environment constant\">HOME</span>&#125;</span>/docker/software/rocketmq/conf</pre></td></tr></table></figure><p>2）新建配置文件 broker.conf。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>brokerClusterName <span class=\"token operator\">=</span> DefaultCluster</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>brokerName <span class=\"token operator\">=</span> broker-a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>brokerId <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>deleteWhen <span class=\"token operator\">=</span> 04</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fileReservedTime <span class=\"token operator\">=</span> <span class=\"token number\">48</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>brokerRole <span class=\"token operator\">=</span> ASYNC_MASTER</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>flushDiskType <span class=\"token operator\">=</span> ASYNC_FLUSH</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 此处为本地 ip, 如果部署服务器，需要填写服务器外网 ip</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>brokerIP1 <span class=\"token operator\">=</span> xx.xx.xx.xx</pre></td></tr></table></figure><p>3）创建容器。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">-p</span> <span class=\"token number\">10911</span>:10911 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">-p</span> <span class=\"token number\">10909</span>:10909 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">--name</span> rmqbroker <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">--link</span> rmqnamesrv:namesrv <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter variable\">-v</span> <span class=\"token variable\">$&#123;<span class=\"token environment constant\">HOME</span>&#125;</span>/docker/software/rocketmq/conf/broker.conf:/etc/rocketmq/broker.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"NAMESRV_ADDR=namesrv:9876\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"JAVA_OPTS=-Duser.home=/opt\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"JAVA_OPT_EXT=-server -Xms512m -Xmx512m\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>foxiswho/rocketmq:broker-4.5.1</pre></td></tr></table></figure><p><font color='gree'>安装 RocketMQ 控制台</font></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull pangliang/rocketmq-console-ng</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">--link</span> rmqnamesrv:namesrv <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"JAVA_OPTS=-Drocketmq.config.namesrvAddr=namesrv:9876 -Drocketmq.config.isVIPChannel=false\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">--name</span> rmqconsole <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter variable\">-p</span> <span class=\"token number\">8088</span>:8080 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token parameter variable\">-t</span> pangliang/rocketmq-console-ng</pre></td></tr></table></figure><p>运行成功，稍等几秒启动时间，浏览器输入  <code>localhost:8088</code>  查看控制台。</p>\n<h4 id=\"2-发送普通消息\"><a class=\"anchor\" href=\"#2-发送普通消息\">#</a> 2、发送普通消息</h4>\n<p>下述完整 Demo 详情查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vbmFnZW9mZmVyL3NwcmluZ2Jvb3QtbGFkZGVyL3RyZWUvbWFpbi9tcS1yb2NrZXRtcS00eA==\"> springboot-ladder/mq-rocketmq-4x</span> 项目模块。</p>\n<h5 id=\"21-引入-rocketmq-依赖\"><a class=\"anchor\" href=\"#21-引入-rocketmq-依赖\">#</a> 2.1、引入 RocketMQ 依赖</h5>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt;\n    &lt;artifactId&gt;rocketmq-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;2.2.3&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h5 id=\"22-启动自动装配\"><a class=\"anchor\" href=\"#22-启动自动装配\">#</a> 2.2、启动自动装配</h5>\n<p>因为咱们 Demo 中使用的是 SpringBoot3，RocketMQ 最新版本 2.2.3 没有适配 SpringBoot3，所以需要手动搞定自动装配。</p>\n<blockquote>\n<p>如果 SpringBoot2 版本，就不需要执行这一步。</p>\n</blockquote>\n<p>resources 目录下创建 META-INF/spring 目录，并创建 <code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>  文件。</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># RocketMQ 2.2.3 version does not adapt to SpringBoot3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>org.apache.rocketmq.spring.autoconfigure.RocketMQAutoConfiguration</pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230924172750462.png\" alt=\"img\" /></p>\n<h5 id=\"23-producer\"><a class=\"anchor\" href=\"#23-producer\">#</a> 2.3、Producer</h5>\n<p>配置文件中引入 RocketMQ 相关配置定义，比如连接 NameServer 地址等。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6060</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">rocketmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">name-server</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">9876</span> <span class=\"token comment\"># NameServer 地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">producer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> rocketmq<span class=\"token punctuation\">-</span>4x<span class=\"token punctuation\">-</span>service_common<span class=\"token punctuation\">-</span>message<span class=\"token punctuation\">-</span>execute_pg <span class=\"token comment\"># 全局发送者组定义</span></pre></td></tr></table></figure><p>定义消息生产者，通过  <code>RocketMQTemplate</code>  向 RocketMQ 发送普通常规消息。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hutool<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StrUtil</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSON</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>nageoffer<span class=\"token punctuation\">.</span>springbootladder<span class=\"token punctuation\">.</span>rocketmq4x<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GeneralMessageEvent</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequiredArgsConstructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>rocketmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SendResult</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>rocketmq<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageConst</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>rocketmq<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RocketMQTemplate</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Message</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageBuilder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * 普通消息发送者</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @公众号：马丁玩编程，回复：加群，添加马哥微信（备注：ladder）获取更多项目资料</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GeneralMessageDemoProduce</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RocketMQTemplate</span> rocketMQTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * 发送普通消息</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @param topic            消息发送主题，用于标识同一类业务逻辑的消息</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @param tag              消息的过滤标签，消费者可通过 Tag 对消息进行过滤，仅接收指定标签的消息。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * @param keys             消息索引键，可根据关键字精确查找某条消息</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * @param messageSendEvent 普通消息发送事件，自定义对象，最终都会序列化为字符串</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * @return 消息发送 RocketMQ 返回结果</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SendResult</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> tag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> keys<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GeneralMessageEvent</span> messageSendEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">SendResult</span> sendResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">StringBuilder</span> destinationBuilder <span class=\"token operator\">=</span> <span class=\"token class-name\">StrUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StrUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                destinationBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> message <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageBuilder</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>messageSendEvent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageConst</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPERTY_KEYS</span><span class=\"token punctuation\">,</span> keys<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageConst</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPERTY_TAGS</span><span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            sendResult <span class=\"token operator\">=</span> rocketMQTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">syncSend</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    destinationBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    message<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token number\">2000L</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[普通消息] 消息发送结果：&#123;&#125;，消息ID：&#123;&#125;，消息Keys：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> sendResult<span class=\"token punctuation\">.</span><span class=\"token function\">getSendStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sendResult<span class=\"token punctuation\">.</span><span class=\"token function\">getMsgId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[普通消息] 消息发送失败，消息体：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>messageSendEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> sendResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"24-consumer\"><a class=\"anchor\" href=\"#24-consumer\">#</a> 2.4、Consumer</h5>\n<p>定义消息消费者，从 RocketMQ Broker 拉取对应 Topic Tag 的消息列表。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSON</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>nageoffer<span class=\"token punctuation\">.</span>springbootladder<span class=\"token punctuation\">.</span>rocketmq4x<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GeneralMessageEvent</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequiredArgsConstructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>rocketmq<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RocketMQMessageListener</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>rocketmq<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RocketMQListener</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 普通消息消费者</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @公众号：马丁玩编程，回复：加群，添加马哥微信（备注：ladder）获取更多项目资料</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@RocketMQMessageListener</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        topic <span class=\"token operator\">=</span> <span class=\"token string\">\"rocketmq-demo_common-message_topic\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        selectorExpression <span class=\"token operator\">=</span> <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        consumerGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"rocketmq-demo_general-message_cg\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GeneralMessageDemoConsume</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RocketMQListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GeneralMessageEvent</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GeneralMessageEvent</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接到到RocketMQ消息，消息体：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"25-发送一条消息\"><a class=\"anchor\" href=\"#25-发送一条消息\">#</a> 2.5、发送一条消息</h5>\n<p>定义消息发送程序，这里为了避免类过多，直接写在 SpringBoot 的启动程序里。发送普通消息的方法返回值就是发送 RocketMQ Broker 返回的状态码，成功的话就是  <code>SEND_OK</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>nageoffer<span class=\"token punctuation\">.</span>springbootladder<span class=\"token punctuation\">.</span>rocketmq4x<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GeneralMessageEvent</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>nageoffer<span class=\"token punctuation\">.</span>springbootladder<span class=\"token punctuation\">.</span>rocketmq4x<span class=\"token punctuation\">.</span>produce<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GeneralMessageDemoProduce</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>swagger<span class=\"token punctuation\">.</span>v3<span class=\"token punctuation\">.</span>oas<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Operation</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>swagger<span class=\"token punctuation\">.</span>v3<span class=\"token punctuation\">.</span>oas<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Tag</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequiredArgsConstructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>rocketmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SendResult</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PostMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UUID</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@Tag</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"RocketMQ发送示例\"</span><span class=\"token punctuation\">,</span> description <span class=\"token operator\">=</span> <span class=\"token string\">\"RocketMQ发送示例启动器\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RocketMQDemoApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">GeneralMessageDemoProduce</span> generalMessageDemoProduce<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/send/general-message\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Operation</span><span class=\"token punctuation\">(</span>summary <span class=\"token operator\">=</span> <span class=\"token string\">\"发送RocketMQ普通消息\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sendGeneralMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> keys <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">GeneralMessageEvent</span> generalMessageEvent <span class=\"token operator\">=</span> <span class=\"token class-name\">GeneralMessageEvent</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息具体内容，可以是自定义对象，最终都会序列化为字符串。如果是取消订单，这里应该是订单ID或者相关联的信息\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">SendResult</span> sendResult <span class=\"token operator\">=</span> generalMessageDemoProduce<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token string\">\"rocketmq-demo_common-message_topic\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                keys<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                generalMessageEvent</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> sendResult<span class=\"token punctuation\">.</span><span class=\"token function\">getSendStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RocketMQDemoApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>项目中引入了 Swagger3，通过界面 UI 发送一条消息测试效果。访问  <code>http://127.0.0.1:6060/swagger-ui/index.html</code> ，调用定义的发送 RocketMQ 普通消息方法。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230924173811738.png\" alt=\"img\" /></p>\n<p>点击 Execute 执行方法调用。</p>\n<p><img data-src=\"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20230924173837160.png\" alt=\"img\" /></p>\n<p>通过方法调用得知，返回数据为成功。</p>\n<p><img data-src=\"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20230924173948187.png\" alt=\"img\" /></p>\n<p>也能看到 RocketMQ 对应的生产者和消费者对应日志。</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>2023-09-24T17:38:57.457+08:00  INFO 48437 --- [nio-6060-exec-6] c.n.s.r.p.GeneralMessageDemoProduce      : [普通消息] 消息发送结果：SEND_OK，消息ID：7F000001BD35251A69D77A3BC5280002，消息Keys：7a60c853-08dc-46cd-a647-398d45b54966</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>2023-09-24T17:38:57.459+08:00  INFO 48437 --- [al-message_cg_3] c.n.s.r.c.GeneralMessageDemoConsume      : 接到RocketMQ消息，消息体：&#123;\"body\":\"消息具体内容，可以是自定义对象，最终都会序列化为字符串。如果是取消订单，这里应该是订单ID或者相关联的信息\",\"keys\":\"7a60c853-08dc-46cd-a647-398d45b54966\"&#125;</pre></td></tr></table></figure><h4 id=\"3-扩展框架-springcloud-stream\"><a class=\"anchor\" href=\"#3-扩展框架-springcloud-stream\">#</a> 3、扩展框架 SpringCloud Stream</h4>\n<p>Spring Cloud Stream 是一个<strong>用于构建基于消息的微服务应用</strong>框架。它基于 SpringBoot 来创建具有生产级别的单机 Spring 应用，并且使用  <code>Spring Integration</code>  与 Broker 进行连接。</p>\n<p>Spring Cloud Stream 提供了消息中间件配置的统一抽象，推出了 publish-subscribe、consumer groups、partition 这些统一的概念。</p>\n<p>Spring Cloud Stream 内部有两个概念：Binder 和 Binding。</p>\n<ul>\n<li><code>Binder</code> ：跟外部消息中间件集成的组件，用来创建 Binding，各消息中间件都有自己的 Binder 实现。</li>\n</ul>\n<p>比如  <code>Kafka</code>  的实现  <code>KafkaMessageChannelBinder</code> ， <code>RabbitMQ</code>  的实现  <code>RabbitMessageChannelBinder</code>  以及  <code>RocketMQ</code>  的实现  <code>RocketMQMessageChannelBinder</code> 。</p>\n<ul>\n<li><code>Binding</code> ：包括 Input Binding 和 Output Binding。</li>\n</ul>\n<p>Binding 在消息中间件与应用程序提供的 Provider 和 Consumer 之间提供了一个桥梁，实现了开发者只需使用应用程序的 Provider 或 Consumer 生产或消费数据即可，屏蔽了开发者与底层消息中间件的接触。</p>\n<p>下图是 Spring Cloud Stream 的架构设计。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/68747470733a2f2f646f63732e737072696e672e696f2f737072696e672d636c6f75642d73747265616d2f646f63732f63757272656e742f7265666572656e63652f68746d6c2f696d616765732f534353742d776974682d62696e6465722e706e67.png\" alt=\"img\" /></p>\n<p>SpringCloud Stream RocketMQ 不是咱们本次介绍的重点，所以只是抛砖引玉，大家需要了解详情参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvc3ByaW5nLWNsb3VkLWFsaWJhYmEvYmxvYi8yLjIueC9zcHJpbmctY2xvdWQtYWxpYmFiYS1leGFtcGxlcy9yb2NrZXRtcS1leGFtcGxlL3JlYWRtZS16aC5tZA==\">RocketMQ Example</span></p>\n<h3 id=\"部署架构\"><a class=\"anchor\" href=\"#部署架构\">#</a> 部署架构</h3>\n<h4 id=\"本地部署\"><a class=\"anchor\" href=\"#本地部署\">#</a> 本地部署</h4>\n<h5 id=\"单组节点单副本模式\"><a class=\"anchor\" href=\"#单组节点单副本模式\">#</a> 单组节点单副本模式</h5>\n<p>这种方式风险较大，因为 Broker 只有一个节点，一旦 Broker 重启或者宕机时，会导致整个服务不可用。不建议线上环境使用，可以用于本地测试。</p>\n<h5 id=\"多组节点集群单副本模式\"><a class=\"anchor\" href=\"#多组节点集群单副本模式\">#</a> 多组节点（集群）单副本模式</h5>\n<p>一个集群内全部部署 Master 角色，不部署 Slave 副本，例如 2 个 Master 或者 3 个 Master，这种模式的优缺点如下：</p>\n<ul>\n<li>优点：配置简单，单个 Master 宕机或重启维护对应用无影响，在磁盘配置为 RAID10 时，即使机器宕机不可恢复情况下，由于 RAID10 磁盘非常可靠，消息也不会丢（异步刷盘丢失少量消息，同步刷盘一条不丢），性能最高；</li>\n<li>缺点：单台机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息实时性会受到影响。</li>\n</ul>\n<h4 id=\"生产部署\"><a class=\"anchor\" href=\"#生产部署\">#</a> 生产部署</h4>\n<h5 id=\"多节点集群多副本模式异步复制\"><a class=\"anchor\" href=\"#多节点集群多副本模式异步复制\">#</a> 多节点（集群）多副本模式：异步复制</h5>\n<p><font color='red'>每个 Master 配置一个 Slave</font>，有多组 Master-Slave，HA 采用<strong>异步复制</strong>方式，主备有短暂消息延迟（毫秒级），这种模式的优缺点如下：</p>\n<ul>\n<li>优点：即使磁盘损坏，消息丢失的非常少，且消息实时性不会受影响，同时 Master 宕机后，消费者仍然可以从 Slave 消费，而且此过程对应用透明，不需要人工干预，性能同多 Master 模式几乎一样；</li>\n<li>缺点：Master 宕机，磁盘损坏情况下会丢失少量消息。</li>\n</ul>\n<h5 id=\"多节点集群多副本模式同步双写\"><a class=\"anchor\" href=\"#多节点集群多副本模式同步双写\">#</a> 多节点（集群）多副本模式：同步双写</h5>\n<p><font color='red'>每个 Master 配置一个 Slave</font>，有多对 Master-Slave，HA 采用<strong>同步双写</strong>方式，即只有主备都写成功，才向应用返回成功，这种模式的优缺点如下：</p>\n<ul>\n<li>优点：数据与服务都无单点故障，Master 宕机情况下，消息无延迟，服务可用性与数据可用性都非常高；</li>\n<li>缺点：性能比异步复制模式略低（大约低 10% 左右），发送单个消息的 RT 会略高，且目前版本在主节点宕机后，备机不能自动切换为主机。</li>\n</ul>\n",
            "tags": [
                "Java",
                "JUC"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC18%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88JDK8-17%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC18%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88JDK8-17%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%89/",
            "title": "宋红康_第18章：JDK8-17新特性",
            "date_published": "2023-11-12T03:06:50.211Z",
            "content_html": "<h1 id=\"第18章随堂复习与企业真题jdk8-17新特性\"><a class=\"anchor\" href=\"#第18章随堂复习与企业真题jdk8-17新特性\">#</a> 第 18 章：随堂复习与企业真题（JDK8-17 新特性）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-jdk新特性的概述\"><a class=\"anchor\" href=\"#1-jdk新特性的概述\">#</a> 1. JDK 新特性的概述</h3>\n<ul>\n<li>几个重要的版本\n<ul>\n<li>jdk 5.0 /jdk 8.0 ：里程碑式的版本</li>\n<li>jdk9.0 开始每 6 个月发布一个新的版本</li>\n<li>LTS : jdk8 、 jdk 11 、 jdk 17</li>\n</ul>\n</li>\n<li>如何学习新特性\n<ul>\n<li>\n<p>新的语法规则 （多关注）：自动装箱、自动拆箱、注解、enum、Lambda 表达式、方法引用、switch 表达式、try-catch 变化、record 等</p>\n</li>\n<li>\n<p>增加、过时、删除 API：StringBuilder、ArrayList、新的日期时间的 API、Optional 等</p>\n</li>\n<li>\n<p>底层的优化、JVM 参数的调整、GC 的变化、内存结构（永久代 ---&gt; 元空间）</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-jdk8lambda表达式\"><a class=\"anchor\" href=\"#2-jdk8lambda表达式\">#</a> 2. JDK8:<mark>lambda 表达式</mark></h3>\n<h4 id=\"21-什么情况下可以使用lambda表达式\"><a class=\"anchor\" href=\"#21-什么情况下可以使用lambda表达式\">#</a> 2.1 什么情况下可以使用 lambda 表达式</h4>\n<ul>\n<li><strong>在给函数式接口提供实例时</strong>，都可以考虑使用 lambda 表达式。</li>\n<li>基本语法的使用（重要）</li>\n</ul>\n<h4 id=\"22-函数式接口\"><a class=\"anchor\" href=\"#22-函数式接口\">#</a> 2.2 <strong>函数式接口</strong></h4>\n<ul>\n<li>\n<p>常见的函数式接口。Comparator \\ Runnable \\ java.util.function 下定义的丰富的函数式接口</p>\n<pre><code>消费型接口：Consumer&lt;T&gt;     void accept(T t)\n供给型接口：Supplier&lt;T&gt;     T get()\n函数型接口：Function&lt;T,R&gt;   R apply(T t)\n判断型接口：Predicate&lt;T&gt;    boolean test(T t)\n</code></pre>\n</li>\n</ul>\n<h4 id=\"23-方法引用-构造器引用-数组引用\"><a class=\"anchor\" href=\"#23-方法引用-构造器引用-数组引用\">#</a> 2.3 方法引用、构造器引用、数组引用</h4>\n<ul>\n<li>\n<p>方法引用、构造器引用、数组引用：看做是 lambda 表达式的进一步刻画、表达。</p>\n</li>\n<li>\n<p>（掌握）方法引用、构造器引用、数组引用的使用场景。</p>\n</li>\n</ul>\n<h3 id=\"3-jdk8stream-api的使用\"><a class=\"anchor\" href=\"#3-jdk8stream-api的使用\">#</a> 3. JDK8:<mark>Stream API</mark> 的使用</h3>\n<ul>\n<li>Stream 关注于内存中的多个数据的运算。</li>\n<li>使用步骤：\n<ul>\n<li>Stream 的<font color='red'>实例化</font></li>\n<li>一系列的<font color='red'>中间操作</font></li>\n<li><font color='red'>终止操作</font></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-jdk8之后的新特性语法层面\"><a class=\"anchor\" href=\"#4-jdk8之后的新特性语法层面\">#</a> 4. JDK8 之后的新特性：语法层面</h3>\n<ul>\n<li>jShell 工具</li>\n<li><font color='red'>try-catch 结构的变化，资源自动关闭</font>。try(...)</li>\n<li><font color='red'>局部变量的类型推断：var</font></li>\n<li>instanceof 的模式匹配</li>\n<li><font color='red'>switch 表达式</font>、<font color='red'>switch 的模式匹配</font></li>\n<li>文本块的使用：&quot;&quot;&quot;文本块&quot;&quot;&quot;</li>\n<li>新的引用数据类型：<font color='red'>record (记录)</font></li>\n<li>密封类： <code>sealed</code>  class</li>\n</ul>\n<h3 id=\"5-jdk8之后的新特性其它\"><a class=\"anchor\" href=\"#5-jdk8之后的新特性其它\">#</a> 5. JDK8 之后的新特性：其它</h3>\n<ul>\n<li><code>Optional类</code> 的使用</li>\n<li>其他：了解</li>\n</ul>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"21-jdk8新特性\"><a class=\"anchor\" href=\"#21-jdk8新特性\">#</a> 2.1 JDK8 新特性</h3>\n<h4 id=\"1-谈谈java8新特性京旗下-时代宇信必-招信诺中外包金软件-阿巴\"><a class=\"anchor\" href=\"#1-谈谈java8新特性京旗下-时代宇信必-招信诺中外包金软件-阿巴\">#</a> 1. <mark>谈谈 java8 新特性</mark> (京 * 旗下、时代 * 宇，信必 *、招 * 信诺，中 * 外包，金 * 软件、阿 ** 巴)</h4>\n<pre><code>类似问题\n&gt; JDK1.8相较于JDK1.7有什么不一样？（惠*）\n&gt; JDK1.8的新特性有哪些？Stream API + Lambda表达式，还有吗？（久*国际物流）\n</code></pre>\n<ol>\n<li>\n<p><strong>Lambda 表达式</strong>：在给函数式接口提供实例时使用，可简化函数式编程的语法形式。</p>\n</li>\n<li>\n<p>方法引用：用于直接引用已有的方法、构造函数来提供更简洁的 Lambda 表达式。</p>\n</li>\n<li>\n<p><strong>Stream API</strong>：用于对集合进行处理和操作的 API，可以在集合中进行过滤、排序、映射等操作。</p>\n</li>\n<li>\n<p>时间日期 API（ <code>java.time包</code> ）：引入了全新的时间日期 API，解决了旧有的日期时间类库的许多问题，如线程安全、设计缺陷等。</p>\n</li>\n<li>\n<p><font color='red'>接口默认方法和私有方法</font>：允许在接口中定义默认的实现方法、私有方法，避免影响原有的继承关系。</p>\n</li>\n<li>\n<p>可重复注解：允许同一个注解在同一个元素上使用多次，并且不会产生冲突。</p>\n</li>\n<li>\n<p>新的类型注解：允许开发者对类型进行注释，提高代码可读性和可靠性。</p>\n</li>\n<li>\n<p>CompletableFuture 类：用于执行异步任务，可以轻松管理并发操作。</p>\n</li>\n<li>\n<p>内存结构：Java 8 引入了 <code>元空间（Metaspace）</code> ，代替了旧版的永久代（PermGen Space）。元空间是 JVM 中<font color='red'>存储类元数据（Class Metadata）</font>的区域，能够动态的调整大小，并且可以设置元空间最大值。这对于需要动态生成类的应用程序而言，更为灵活和安全。</p>\n</li>\n<li>\n<p><font color='red'>HashMap 底层结构</font>:Java 8 的 HashMap 实现中，链表长度超过一定阈值时，链表会转换成 <code>红黑树</code> 。在红黑树中查询、插入、删除的时间复杂度均为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，相较于链表更为高效。该变化使得 HashMap 对于冲突较多的场景效率更高。</p>\n</li>\n</ol>\n<p>此外，还有 ArrayList、ConcurrentHashMap、Collections 等相关数据结构也做出了一些优化和改进。</p>\n<h4 id=\"2-jdk18在数据结构上发生了哪些变化银数据\"><a class=\"anchor\" href=\"#2-jdk18在数据结构上发生了哪些变化银数据\">#</a> 2. JDK1.8 在数据结构上发生了哪些变化？（银 * 数据）</h4>\n<ul>\n<li>\n<p>内存结构：Java 8 引入了 <code>元空间（Metaspace）</code> ，代替了旧版的永久代（PermGen Space）。元空间是 JVM 中<font color='red'>存储类元数据（Class Metadata）</font>的区域，<font color='red'>能够动态的调整大小</font>，并且可以设置元空间最大值。这对于需要动态生成类的应用程序而言，更为灵活和安全。</p>\n<ul>\n<li>对于 HotSpot，方法区在 jdk7 中是：永久代（PermGen Space）</li>\n<li>对于 HotSpot，方法区在 jdk8 中是：元空间（Metaspace）</li>\n</ul>\n</li>\n<li>\n<p><font color='red'>HashMap 底层结构</font>:Java 8 的 HashMap 实现中，链表长度超过一定阈值时，链表会转换成 <code>红黑树</code> 。在红黑树中查询、插入、删除的时间复杂度均为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，相较于链表更为高效。该变化使得 HashMap 对于冲突较多的场景效率更高。</p>\n</li>\n</ul>\n<h4 id=\"3-jdk18用的是哪个垃圾回收器oo\"><a class=\"anchor\" href=\"#3-jdk18用的是哪个垃圾回收器oo\">#</a> 3. JDK1.8 用的是哪个垃圾回收器？（O**O）</h4>\n<p><code>Parallel GC</code>  --&gt; jdk9：默认使用 <code>G1GC</code>   --&gt; <strong> <code>ZGC</code> </strong> （低延迟）</p>\n<h3 id=\"22-lambda表达式\"><a class=\"anchor\" href=\"#22-lambda表达式\">#</a> 2.2 Lambda 表达式</h3>\n<h4 id=\"1-lambda表达式有了解吗说说如何使用的oo\"><a class=\"anchor\" href=\"#1-lambda表达式有了解吗说说如何使用的oo\">#</a> 1. <mark>Lambda 表达式有了解吗，说说如何使用的</mark>（O**O）</h4>\n<pre><code>类似问题：\n&gt; Lambda的理解（国*）\n</code></pre>\n<p><strong>在给函数式接口提供实例时</strong>，都可以考虑使用 lambda 表达式。</p>\n<p>Lambda 表达式是 Java 8 中引入的一种新特性，它本质上是<font color='red'>一个匿名函数</font>，用于表示将一个功能传递给某个方法。Lambda 表达式可以看作是函数式编程的核心思想，它是可传递的代码块，实现了代码的重复利用和简化。</p>\n<p>使用 Lambda 表达式的语法如下：</p>\n<p>(parameter1, parameter2, ...) -&gt; expression</p>\n<p>或者</p>\n<p statement1;=\"\" statement2;=\"\" css-module=\".\">(parameter1, parameter2, ...) -&gt;</p>\n<p>其中，</p>\n<ul>\n<li><code>参数列表</code>  parameter1, parameter2 指定了 Lambda 表达式中的参数。</li>\n<li>箭头符号 -&gt; 将参数列表和 Lambda 表达式的主体分开。</li>\n<li><code>表达式</code>  expression 或语句块组成了 Lambda 表达式的主体。</li>\n</ul>\n<p>Lambda 表达式可以被赋值给一个变量，也可以像参数一样传递到方法中去。在 Java 中，Lambda 通常会关联<strong>函数式接口（Functional Interface），即只包含一个抽象方法的接口</strong>。例如，Runnable 接口只有一个 run () 方法，可以将一个 Lambda 表达式作为 Runnable 对象进行调用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Runnable</span> r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>除此之外，Lambda 表达式还可以<strong>与集合框架中的 Stream API 结合使用</strong>来对数据流进行过滤、映射等处理操作，从而简化操作实现。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nums <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapToInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：15</span></pre></td></tr></table></figure><p>Lambda 表达式的使用，让 Java 语言有了更多的编程方式和更好的代码可读性，它是 Java 8 中最具有代表性的新特性之一。</p>\n<h4 id=\"2-什么是函数式接口有几种函数式接口阿巴\"><a class=\"anchor\" href=\"#2-什么是函数式接口有几种函数式接口阿巴\">#</a> 2. <mark>什么是函数式接口？有几种函数式接口</mark>（阿 ** 巴）</h4>\n<p>** 函数式接口（functional interface）** 是 Java 8 中引入的一种新类型接口，它<font color='red'>只包含一个抽象方法</font>，用于支持 Lambda 表达式和方法引用等函数式编程特性。当声明一个函数式接口时，可以使用  <code>@FunctionalInterface</code>  注解标记以便在编译时进行验证，确保该接口只有一个抽象方法。</p>\n<p>在 Java 8 中的 <code>java.util.function包</code> 下，已经为常见的函数式接口提供了内置支持，比如：</p>\n<table>\n<thead>\n<tr>\n<th>称谓</th>\n<th>函数式接口</th>\n<th>参数类型</th>\n<th>说明</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>消费</code> 型接口</td>\n<td><code>Consumer&lt;T&gt;  </code></td>\n<td>T</td>\n<td>有参数输入 T，没有输出</td>\n<td>对类型为 T 的对象应用操作，包含方法：   <code>void accept(T t)  </code></td>\n</tr>\n<tr>\n<td><code>供给</code> 型接口</td>\n<td><code>Supplier&lt;T&gt;  </code></td>\n<td>无</td>\n<td>无参数输入，返回一个 T 类型结果</td>\n<td>返回类型为 T 的对象，包含方法： <code>T get()  </code></td>\n</tr>\n<tr>\n<td><code>函数</code> 型接口</td>\n<td><code>Function&lt;T, R&gt;  </code></td>\n<td>T</td>\n<td>有一个 T 类型的输入参数，输出 R 类型的结果</td>\n<td>对类型为 T 的对象应用操作，并返回结果。结果是 R 类型的对象。包含方法： <code>R apply(T t)  </code></td>\n</tr>\n<tr>\n<td><code>判断</code> 型接口</td>\n<td><code>Predicate&lt;T&gt;  </code></td>\n<td>T</td>\n<td>输入 T，返回一个布尔值结果</td>\n<td>确定类型为 T 的对象是否满足某约束，并返回 boolean 值。包含方法： <code>boolean test(T t)  </code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"23-stream-api\"><a class=\"anchor\" href=\"#23-stream-api\">#</a> 2.3 Stream API</h3>\n<h4 id=\"1-创建stream的方式阿巴\"><a class=\"anchor\" href=\"#1-创建stream的方式阿巴\">#</a> 1. 创建 Stream 的方式（阿 ** 巴）</h4>\n<p>Stream 操作分 3 个步骤：</p>\n<ul>\n<li>\n<p>创建 Stream 实例（3 种主要方式）</p>\n<ul>\n<li>\n<p><strong>通过集合 (Collection)</strong></p>\n<blockquote>\n<p>Java8 中的 Collection 接口被扩展，提供了两个获取流的方法：</p>\n<ul>\n<li>\n<p>default Stream<E>  <code>stream</code>  () : 返回一个<font color='red'>顺序流</font></p>\n</li>\n<li>\n<p>default Stream<E>  <code>parallelStream</code>  () : 返回一个<font color='red'>并行流</font></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//JDK1.8 中，Collection 系列集合增加了方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li>\n<p><strong>通过数组</strong></p>\n<blockquote>\n<p>Java8 中的  <code>Arrays.stream(T[] array)</code>  可以获取数组流，这里的 T 既可以是引用数据类型，也可以是基本数据类型：</p>\n<ul>\n<li>static <T> Stream<T> stream (T [] array): 返回一个流</li>\n<li>public static IntStream stream(int[] array)</li>\n<li>public static LongStream stream(long[] array)</li>\n<li>public static DoubleStream stream(double[] array)</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">IntStream</span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li>\n<p><strong>通过 Stream 类的静态方法 of ()</strong></p>\n<blockquote>\n<p>可以调用 <code>Stream.of(T... values)</code> , 通过显示值创建一个流。它可以接收<font color='red'>任意数量的参数</font>。</p>\n<ul>\n<li>public static<T> Stream<T> of (T... values) : 返回一个流</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test04</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    stream<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>一系列的中间操作</p>\n</li>\n<li>\n<p>终止操作</p>\n</li>\n</ul>\n<h4 id=\"2-你讲讲stream表达式是咋用的干啥的中国际上海网络\"><a class=\"anchor\" href=\"#2-你讲讲stream表达式是咋用的干啥的中国际上海网络\">#</a> 2. 你讲讲 stream 表达式是咋用的，干啥的？（中 * 国际，上海 ** 网络）</h4>\n<pre><code>&gt; Stream API 关注的是多个数据的计算（排序、查找、过滤、映射、遍历等），面向CPU的。\n  集合关注的数据的存储，面向内存的。\n&gt; Stream API 之于集合，类似于SQL之于数据表的查询。\n</code></pre>\n<p>在 Java 8 中，Stream 是<font color='red'>一种新的集合处理方式</font>，它是用来对集合或者数组进行一系列操作的。Stream API 简化了对集合数据的处理，使代码更易读、更短。</p>\n<p>stream 表达式通常由三个部分构成： <code>源</code> 、 <code>零个或多个中间操作</code> ，以及 <code>一个终止操作</code> 。其中，<font color='red'>中间操作可有可无，终止操作是不可缺少的</font>，只有<font color='red'>在调用终止操作时才开始执行 stream 表达式中的各种操作</font>，从而提高效率。</p>\n<p>Stream 的使用步骤：</p>\n<ul>\n<li>创建 Stream 实例（3 种主要方式）\n<ul>\n<li><strong>通过集合 (Collection)</strong></li>\n<li><strong>通过数组</strong></li>\n<li><strong>通过 Stream 类的静态方法 of ()</strong></li>\n</ul>\n</li>\n<li>一系列的中间操作</li>\n<li>终止操作</li>\n</ul>\n<p>stream 表达式提供了一种简洁、灵活的集合处理方式，使得<font color='red'>代码更加清晰、易读</font>，同时使用 stream <font color='red'>可以将数据处理部分代码进行函数式抽象</font>，避免重复代码。</p>\n<h4 id=\"3-集合用stream流怎么实现过滤润软件\"><a class=\"anchor\" href=\"#3-集合用stream流怎么实现过滤润软件\">#</a> 3. 集合用 Stream 流怎么实现过滤？（润 * 软件）</h4>\n<p>filter (Predicate predicate) 方法</p>\n<h4 id=\"4-用stream怎么选出list里想要的数据惠\"><a class=\"anchor\" href=\"#4-用stream怎么选出list里想要的数据惠\">#</a> 4. 用 Stream 怎么选出 List 里想要的数据？（惠 *）</h4>\n<p>使用 Stream 选出 List 中我们想要的数据通常可以通过过滤（ <code>filter</code> ）操作来实现，例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"grape\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"peach\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                          <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">-></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                          <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出：[apple, banana, grape, peach]</span></pre></td></tr></table></figure><p>在这个例子中，我们首先通过 Arrays.asList () 方法初始化一个字符串列表，然后使用 stream () 方法将其转换为一个流对象。接着调用 filter () 方法，使用 Lambda 表达式实现一个简单的条件判断，该条件将保留包含字符 “a” 的字符串。最后使用 collect () 方法将过滤后的结果收集回 List 对象。</p>\n<p>在 filter () 中，我们可以根据实际需求自定义过滤条件。例如，可以使用正则表达式、时间戳等其他方式进行过滤操作，只留下符合条件的元素。无论具体的过滤条件是什么，Stream 应该是处理集合或数组数据集的良好选择，并且在许多常见的情况下可以提供比传统循环更加清晰和简洁的代码实现方式。</p>\n<h3 id=\"24-其它版本新特性\"><a class=\"anchor\" href=\"#24-其它版本新特性\">#</a> 2.4 其它版本新特性</h3>\n<h4 id=\"1-说说jdk15-jdk16-jdk17中的新特性都有什么银数据\"><a class=\"anchor\" href=\"#1-说说jdk15-jdk16-jdk17中的新特性都有什么银数据\">#</a> 1. 说说 JDK15、JDK16、JDK17 中的新特性都有什么？(银 * 数据)</h4>\n<p>Java SE 15</p>\n<ul>\n<li>\n<p><code>Sealed Classes（密封类）</code> ：通过<font color='red'>限制子类</font>，增强类的封装性和安全性。</p>\n</li>\n<li>\n<p>Hidden Classes（隐式类）：让开发人员在运行时动态创建类，并加强对于执行代码的保护。</p>\n</li>\n<li>\n<p><code>Text Blocks（文本块）</code> ：为多行字符串提供了一种更加可读性和可写性的表示方式，优化了文本处理操作。</p>\n</li>\n<li>\n<p><code>Record Classes（记录类）</code> ：声明用于存储数据并带有标识性的类。</p>\n</li>\n</ul>\n<p>Java SE 16</p>\n<ul>\n<li>\n<p><code>Records</code> ：进一步完善记录类（Record Classes），使得构造函数等细节更加灵活。</p>\n</li>\n<li>\n<p><code>instanceof的模式匹配</code> ：简化了 instanceof 操作符的使用，使得<font color='red'>当匹配成功时可以直接将类型转换</font>。</p>\n</li>\n<li>\n<p>Foreign Function &amp; Memory API：为 Java 应用程序提供了与外部应用程序交互的基础设施，方便实现本地方法。</p>\n</li>\n<li>\n<p>Vector API（预览）：为处理向量形式数据提供了一个类库，从而提高处理性能。</p>\n</li>\n</ul>\n<p>Java SE 17</p>\n<ul>\n<li>\n<p>Sealed Classes 和 Hidden Classes 的迭代升级。</p>\n</li>\n<li>\n<p><code>switch的模式匹配 (预览)</code> ：扩展了模式匹配功能，支持在 switch 语句中使用模式匹配，增强了代码的可读性和可维护性。</p>\n</li>\n<li>\n<p><code>接口中默认方法的隐式继承</code> ：使得接口的默认方法可以隐式继承自其他接口，而不需要进行实现。</p>\n</li>\n<li>\n<p>Enhanced Pseudo-Random Number Generators：升级并扩展了 Java 中的随机数生成器 API，支持更多的数据类型和方式。</p>\n</li>\n</ul>\n",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC17%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC17%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%EF%BC%89/",
            "title": "宋红康_第17章：反射机制",
            "date_published": "2023-11-12T03:06:50.202Z",
            "content_html": "<h1 id=\"第17章随堂复习与企业真题反射机制\"><a class=\"anchor\" href=\"#第17章随堂复习与企业真题反射机制\">#</a> 第 17 章：随堂复习与企业真题（反射机制）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-反射的概述熟悉\"><a class=\"anchor\" href=\"#1-反射的概述熟悉\">#</a> 1. 反射的概述（熟悉）</h3>\n<ul>\n<li>Java 给我们提供了一套 API，使用这套 API 我们可以<font color='red'>在运行时动态的获取指定对象所属的类，创建运行时类的对象，调用指定的结构（属性、方法）等</font>。</li>\n<li>API：\n<ul>\n<li><code>java.lang.Class</code> ：代表一个类</li>\n<li>java.lang.reflect.Method：代表类的方法</li>\n<li>java.lang.reflect.Field：代表类的成员变量</li>\n<li>java.lang.reflect.Constructor：代表类的构造器</li>\n<li>… …</li>\n</ul>\n</li>\n<li>反射的优点和缺点\n<ul>\n<li><strong>优点：</strong>\n<ul>\n<li>\n<p>提高了 Java 程序的灵活性和扩展性， <code>降低了耦合性</code> ，提高 <code>自适应</code> 能力</p>\n</li>\n<li>\n<p>允许程序创建和控制任何类的对象，无需提前 <code>硬编码</code> 目标类</p>\n</li>\n</ul>\n</li>\n<li><strong>缺点：</strong>\n<ul>\n<li>反射的 <code>性能较低</code> 。\n<ul>\n<li>反射机制主要应用在对灵活性和扩展性要求很高的系统框架上</li>\n</ul>\n</li>\n<li>反射会 <code>模糊</code> 程序内部逻辑， <code>可读性较差</code> 。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>反射，平时开发中，我们使用并不多。主要是<font color='red'>在框架的底层使用</font>。</li>\n</ul>\n<h3 id=\"2-class反射的源头\"><a class=\"anchor\" href=\"#2-class反射的源头\">#</a> 2. Class: 反射的源头</h3>\n<img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230414145938600.png\" alt=\"image-20230414145938600\" style=\"zoom:67%;\" />\n<ul>\n<li>\n<p>Class 的理解 （掌握）</p>\n<pre><code>针对于编写好的.java源文件进行编译(使用javac.exe)，会生成一个或多个.class字节码文件。接着，我们使用\njava.exe命令对指定的.class文件进行解释运行。这个解释运行的过程中，我们需要将.class字节码文件加载(使用类的加载器)到内存中(存放在方法区)。加载到内存中的.class文件对应的结构即为Class的一个实例。\n</code></pre>\n</li>\n<li>\n<p><strong>获取 Class 的实例的几种方式</strong>（前三种）</p>\n<ul>\n<li><code>类.class</code></li>\n<li>对象.getClass ()</li>\n<li>（使用较多） <code>Class.forName(String className)</code></li>\n<li>(了解) 使用 ClassLoader 的方法 loadClass (String className)</li>\n</ul>\n</li>\n<li>\n<p>Class 可以指向哪些结构。</p>\n<pre><code>简言之，所有Java类型！\n（1）class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类\n（2）interface：接口\n（3）[]：数组\n（4）enum：枚举\n（5）annotation：注解@interface\n（6）primitive type：基本数据类型\n（7）void\n</code></pre>\n</li>\n</ul>\n<h3 id=\"3-类的加载过程-类的加载器理解\"><a class=\"anchor\" href=\"#3-类的加载过程-类的加载器理解\">#</a> 3. 类的加载过程、类的加载器（理解）</h3>\n<img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220417171411631.png\" alt=\"image-20220417171411631\" style=\"zoom: 50%;\" />\n<ul>\n<li>\n<p>类的加载过程</p>\n<pre><code>过程1：类的装载(loading)\n将类的class文件读入内存，并为之创建一个java.lang.Class对象。此过程由类加载器完成\n\n过程2：链接(linking)\n&gt; 验证(Verify):确保加载的类信息符合JVM规范，例如：以cafebabe开头，没有安全方面的问题。\n&gt; 准备(Prepare):正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。\n&gt; 解析(Resolve):虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。\n\n过程3：初始化(initialization)\n执行类构造器&lt;clinit&gt;()方法的过程。\n类构造器&lt;clinit&gt;()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。\n</code></pre>\n</li>\n<li>\n<p>类的加载器</p>\n<pre><code>5.1 作用：负责类的加载，并对应于一个Class的实例。\n\n5.2 分类（分为两种）：\n&gt; BootstrapClassLoader:引导类加载器、启动类加载器\n     &gt; 使用C/C++语言编写的，不能通过Java代码获取其实例\n     &gt; 负责加载Java的核心库（JAVA_HOME/jre/lib/rt.jar或sun.boot.class.path路径下的内容）\n\n&gt; 继承于ClassLoader的类加载器\n    &gt; ExtensionClassLoader:扩展类加载器\n            &gt; 负责加载从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre/lib/ext子目录下加载类库\n    &gt; SystemClassLoader/ApplicationClassLoader:系统类加载器、应用程序类加载器\n            &gt; 我们自定义的类，默认使用的类的加载器。\n    &gt; 用户自定义类的加载器\n            &gt; 实现应用的隔离（同一个类在一个应用程序中可以加载多份）；数据的加密。\n</code></pre>\n</li>\n</ul>\n<h3 id=\"4-反射的应用1创建运行时类的对象重点\"><a class=\"anchor\" href=\"#4-反射的应用1创建运行时类的对象重点\">#</a> 4. 反射的应用 1：<mark>创建运行时类的对象</mark>（重点）</h3>\n<p><strong>方法 1：Class 实例的 newInstance () 方法</strong></p>\n<pre><code>Class clazz = Person.class;\n\n//创建Person类的实例\nPerson per = (Person) clazz.newInstance();\n\nSystem.out.println(per);\n</code></pre>\n<pre><code>要想创建对象成功，需要满足：\n条件1：要求运行时类中必须提供一个空参的构造器\n条件2：要求提供的空参的构造器的权限要足够。\n</code></pre>\n<p><strong>方法 2：Constructor 实例的 newInstance (Object ... objs) 方法</strong></p>\n<h3 id=\"5-反射的应用2获取运行时类所有的结构\"><a class=\"anchor\" href=\"#5-反射的应用2获取运行时类所有的结构\">#</a> 5. 反射的应用 2：获取运行时类所有的结构</h3>\n<pre><code>（了解）获取运行时类的内部结构1：所有属性、所有方法、所有构造器\n（熟悉）获取运行时类的内部结构2：父类、接口们、包、带泛型的父类、父类的泛型等\n</code></pre>\n<h3 id=\"6-反射的应用3调用指定的结构重点\"><a class=\"anchor\" href=\"#6-反射的应用3调用指定的结构重点\">#</a> 6. 反射的应用 3：<mark>调用指定的结构</mark>（重点）</h3>\n<ul>\n<li>属性</li>\n<li>方法</li>\n<li>构造器</li>\n</ul>\n<pre><code>3.1 调用指定的属性（步骤）\n步骤1.通过Class实例调用getDeclaredField(String fieldName)，获取运行时类指定名的属性\n步骤2. setAccessible(true)：确保此属性是可以访问的\n步骤3. 通过Filed类的实例调用get(Object obj) （获取的操作）\n                  或 set(Object obj,Object value) （设置的操作）进行操作。\n\n3.2 调用指定的方法（步骤）\n步骤1.通过Class的实例调用getDeclaredMethod(String methodName,Class ... args),获取指定的方法\n步骤2. setAccessible(true)：确保此方法是可访问的\n步骤3.通过Method实例调用invoke(Object obj,Object ... objs),即为对Method对应的方法的调用。\n     invoke()的返回值即为Method对应的方法的返回值\n     特别的：如果Method对应的方法的返回值类型为void，则invoke()返回值为null\n\n3.3 调用指定的构造器（步骤）\n步骤1.通过Class的实例调用getDeclaredConstructor(Class ... args)，获取指定参数类型的构造器\n步骤2.setAccessible(true)：确保此构造器是可以访问的\n步骤3.通过Constructor实例调用newInstance(Object ... objs),返回一个运行时类的实例。\n</code></pre>\n<h3 id=\"7-反射的应用4注解的使用了解\"><a class=\"anchor\" href=\"#7-反射的应用4注解的使用了解\">#</a> 7. 反射的应用 4：注解的使用（了解）</h3>\n<p>略</p>\n<h3 id=\"8-体会反射的动态性\"><a class=\"anchor\" href=\"#8-体会反射的动态性\">#</a> 8. 体会：反射的动态性</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 体会：静态性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 体会：反射的动态性</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 举例 1：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Constructor</span> con <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        con<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> <span class=\"token string\">\"com.atguigu04.other.dynamic.Person\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Person</span> per1 <span class=\"token operator\">=</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>per1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">String</span> className1 <span class=\"token operator\">=</span> <span class=\"token string\">\"java.util.Date\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Date</span> date1 <span class=\"token operator\">=</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>className1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 体会：反射的动态性</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 举例 2：</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//1. 创建全类名对应的运行时类的对象</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">Constructor</span> con <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        con<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">//2. 获取运行时类中指定的方法，并调用</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        method<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> <span class=\"token string\">\"com.atguigu04.other.dynamic.Person\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> <span class=\"token string\">\"show\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">Object</span> returnValue <span class=\"token operator\">=</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">,</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"21-反射概述\"><a class=\"anchor\" href=\"#21-反射概述\">#</a> 2.1 反射概述</h3>\n<h4 id=\"1-对反射了解吗反射有什么好处为什么需要反射微银行\"><a class=\"anchor\" href=\"#1-对反射了解吗反射有什么好处为什么需要反射微银行\">#</a> 1. 对反射了解吗？反射有什么好处？为什么需要反射？（微 * 银行）</h4>\n<pre><code>类似问题：\n&gt; Java反射的作用是什么？(三*重工、上海*和网络)\n&gt; Java反射机制的作用有什么？(上海明*物联网)\n&gt; 反射的具体用途？（阿***芝*信用项目组）\n</code></pre>\n<p><strong>Java 的反射机制</strong>：<font color='red'>在程序<u>运行时</u>，能够<u>动态加载并获取任意一个类的内部结构</u>，并能够直接<u>操作任意一个对象的属性和方法</u></font>。本质上，JVM 得到 class 对象之后，再通过 class 对象进行反编译，从而获取对象的各种信息。</p>\n<p><strong>好处</strong>：<font color='red'>可以在运行时动态地：<u>创建对象</u>、<u>调用指定结构</u>（属性、方法、构造器、父类、接口等）</font>，这样可以大大提高程序的灵活性和扩展性。</p>\n<p>Java 中使用反射机制是为了<strong>解决以下问题</strong>：</p>\n<ol>\n<li>\n<p>在程序<font color='red'>运行时动态获取类信息</font>，实现程序的灵活性和扩展性。</p>\n</li>\n<li>\n<p><font color='red'>编写通用代码</font>，无需针对每个具体的类编写特定的代码，提高了代码的重用率和通用性。</p>\n</li>\n<li>\n<p>实现一些特殊场景的需求，如<font color='red'>动态代理、自定义类加载器、工厂模式</font>等。</p>\n</li>\n</ol>\n<p>总之，反射机制允许程序在运行时动态地加载类和对类进行操作，从而增强了 Java 语言的灵活性和功能性，同时也带来一些设计和实现上的风险。</p>\n<h4 id=\"2-反射的使用场合和作用-及其优缺点软国际\"><a class=\"anchor\" href=\"#2-反射的使用场合和作用-及其优缺点软国际\">#</a> 2. 反射的使用场合和作用、及其优缺点（* 软国际）</h4>\n<pre><code>类似问题：\n&gt; 反射机制的优缺点(君*科技)\n&gt; Java反射你怎么用的？（吉*航空）\n</code></pre>\n<p>反射机制在 Java 中被广泛应用于以下<strong>使用场合</strong>：</p>\n<ol>\n<li><code>框架开发</code> ：在框架中，需要通过反射机制来加载和使用一些外部未知的类和对象，实现灵活性和扩展性。</li>\n<li><code>插件式开发</code> ：在 Java 应用程序中，可以使用反射机制动态地加载和调用其他模块的类和方法，从而实现插件化的设计。</li>\n<li><code>动态代理</code> ：通过反射机制，可以实现动态代理模式，为对象提供运行时的处理逻辑。</li>\n<li><code>单元测试</code> ：在 JUnit 等测试框架中，可以使用反射机制获取私有成员、构造器、方法，进行单元测试。</li>\n<li><code>JavaBean编程</code> ：在 JavaBean 编程中，可以使用反射机制获取 Bean 的属性和方法，实现通用的数据操作和转换。</li>\n</ol>\n<p>反射机制的<strong>作用</strong>：在运行时获取任意一个类的内部信息，并能够直接操作任意一个对象的内部属性和方法。</p>\n<ol>\n<li><code>动态加载类</code> ：通过反射机制，可以在运行时动态地加载其他模块或外部类，这对于框架开发、插件式编程等场合非常有用。</li>\n<li><code>调用构造器、属性和方法</code> ：通过反射机制，可以获取类的构造器、属性和方法，并且直接操作他们，比如修改私有属性、调用私有方法等。</li>\n<li>泛型编程：使用反射机制，可以在运行时获取泛型信息，从而实现指定类型的通用代码编写。</li>\n<li>动态代理：通过反射机制，可以在运行时动态生成代理对象，并在调用代理对象的方法时动态地执行相关逻辑。</li>\n<li>生成动态代码：通过反射机制，可以在运行时动态生成新的类和代码，从而增强应用程序的灵活性和可扩展性。</li>\n</ol>\n<p>反射机制的<strong>优点</strong>：</p>\n<ol>\n<li><code>动态性</code> ：通过反射机制，可以在运行时获取、操作任意一个类的内部信息，增强了 Java 语言的动态性和灵活性。</li>\n<li><code>通用性</code> ：通过反射机制，可以编写通用代码，并且不需要提前知道具体的类名和方法名，提高了代码的通用性和重用性。</li>\n<li><code>扩展性</code> ：通过反射机制，可以实现一些特殊场景的需求，如自定义类加载器、动态代理等，增强了程序的扩展性和功能性。</li>\n</ol>\n<p>反射机制的<strong>缺点</strong>：</p>\n<ol>\n<li><code>性能损失</code> ：使用反射机制会带来一定的性能损失，比直接调用代码要更慢。</li>\n<li><code>安全性风险</code> ：通过反射机制，可以打破访问修饰符（如 private、final 等），从而影响程序的安全性。</li>\n<li><code>代码可读性降低</code> ：使用反射机制，由于不确定操作的实体是什么，因此可能导致代码的可读性降低。</li>\n</ol>\n<h4 id=\"3-实现java反射的类有什么君科技\"><a class=\"anchor\" href=\"#3-实现java反射的类有什么君科技\">#</a> 3. 实现 Java 反射的类有什么？(君 * 科技)</h4>\n<pre><code>类似问题：\n&gt; Java反射 API 有几类？(北京*蓝)\n</code></pre>\n<p>Java 反射 API 主要包含以下几个核心的类和接口：</p>\n<p><code>java.lang.Class类</code> ：表示一个 Java 类，可以通过该类获取类名、类修饰符、构造器、方法、注解等信息，并实例化对象。</p>\n<p><code>java.lang.reflect包</code> 下：</p>\n<ul>\n<li>\n<p><code>Field类</code> ：表示一个类的属性或字段，可以通过该类获取属性的类型、修饰符、值并进行修改操作。</p>\n</li>\n<li>\n<p><code>Method类</code> ：表示一个类的方法，可以通过该类获取方法的返回值、参数、修饰符等信息，并且调用方法。</p>\n</li>\n<li>\n<p><code>Constructor类</code> ：表示一个类的构造器，可以通过该类获取构造器的修饰符、参数、并使用 newInstance 方法来创建对象。</p>\n</li>\n<li>\n<p><code>Modifier类</code> ：表示 Java 中的修饰符，可以通过该类判断某个成员是否具有某种修饰符，如 public、static、final 等等。</p>\n</li>\n</ul>\n<p>总之，这些类和接口提供了 Java 语言中反射机制的基础 API，开发者可以借助这些接口来操作和查询任意一个类的属性、方法和注解等信息。</p>\n<h4 id=\"4-反射是怎么实现的上海立网络\"><a class=\"anchor\" href=\"#4-反射是怎么实现的上海立网络\">#</a> 4. 反射是怎么实现的？（上海立 * 网络）</h4>\n<img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230414145938600.png\" alt=\"image-20230414145938600\" style=\"zoom:67%;\" />\n<p>Java 的反射机制是基于<strong> Java 虚拟机</strong>实现的。</p>\n<p>具体来说，Java 反射机制主要实现了以下几个步骤：</p>\n<ol start=\"0\">\n<li>\n<p>对于编写好的 <code>.java源文件</code> 使用<font color='red'>javac.exe 进行编译</font>，会生成一个或多个 <code>.class字节码文件</code> 。接着使用<font color='red'>java.exe 进行解释运行</font>，该过程中会使用<font color='red'>类的加载器</font>将.class 字节码文件加载到内存 (方法区) 中，对应的结构即为 <code>Class的一个实例</code> 。</p>\n<blockquote>\n<p>在 Java 程序<font color='red'>运行时，每个类都会被虚拟机加载，并转换成一个 Class 对象，这个 Class 对象保存了这个类的所有信息</font>，包括类名、继承关系、方法、变量等。因此，在运行时可以通过这个 Class 对象来访问和操作类的信息。</p>\n<p>Java 反射机制就是<font color='red'>利用这个 Class 对象</font>来实现的。通过反射，我们可以获得一个类的 Class 对象，并访问和操作这个类的所有信息，还可以根据需要动态地创建对象、调用方法和改变变量值等操作。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>获取 Class 对象</strong>：使用 <code>Class.forName()</code>  方法或直接使用 <code>运行时类.class</code>  来获取一个类的 Class 对象。</p>\n</li>\n<li>\n<p><strong>获取运行时类的信息</strong>：通过 Class 对象可以获取类的名称、修饰符、父类、接口、构造函数、成员变量等信息。</p>\n</li>\n<li>\n<p><strong>创建对象</strong>：使用 <code>Class对象的newInstance()</code>  或 ** <code>Constructor对象的newInstance()</code> ** 方法来创建一个类的对象。</p>\n</li>\n<li>\n<p><strong>调用方法</strong>：使用 <code>Method对象的invoke()</code>  方法来调用一个对象的方法。</p>\n</li>\n<li>\n<p><strong>调用属性值</strong>：使用 <code>Field对象的get()/set()</code>  方法来读取 / 修改一个对象的属性值。</p>\n</li>\n</ol>\n<p>总之，Java 反射机制的实现依赖于 Java 虚拟机的能力，使得程序可以在运行时获得类的全部信息并进行操作。但在使用反射时需要注意性能、类型安全和访问权限等问题。</p>\n<h3 id=\"22-class的理解\"><a class=\"anchor\" href=\"#22-class的理解\">#</a> 2.2 Class 的理解</h3>\n<h4 id=\"1-class类的作用生成class对象的方法有哪些顺\"><a class=\"anchor\" href=\"#1-class类的作用生成class对象的方法有哪些顺\">#</a> 1. Class 类的作用？生成 Class 对象的方法有哪些？(顺 *)</h4>\n<p>Class 类表示一个 Java 类或接口，<strong>存放类的结构信息</strong>，是<strong> Java 反射机制的起源和入口</strong>，<strong>提供了获取类信息的相关方法</strong>。类信息包括：属性、方法、构造方法、父类、接口、注解、类名、包名等各种元数据信息。</p>\n<p>生成 Class 对象的方法主要有三种：</p>\n<ol>\n<li>\n<p><code>运行时类.class</code> ：如 String.class 就表示 String 类的 Class 对象，该方法是<font color='red'>最简单、最安全、最常见</font>的一种方式。</p>\n</li>\n<li>\n<p><code>运行时类实例.getClass()</code> ：例如 Object obj = new String (); Class&lt;?&gt; cls = obj.getClass (); 该方法适用于<font color='red'>已经获取到对象</font>的情况下，可以方便地获取该对象所属的类类型。</p>\n</li>\n<li>\n<p><code>Class.forName(className)</code> ：根据类的完整路径（全类名 = 包名 + 类名）来获取 Class 对象，例如 Class&lt;?&gt; cls = Class.forName (&quot;java.lang.String&quot;); 该方法适用于需要<font color='red'>动态加载类</font>的情况下，可以在<font color='red'>运行时加载并获取类的 Class 对象</font>。</p>\n</li>\n</ol>\n<p>总之，Java 中的 Class 类可以让我们在运行时动态地操作和访问类的变量、方法、构造器等各种元数据信息，是 Java 反射机制的基础。</p>\n<h4 id=\"2-classforname全路径-会调用哪些方法会调用构造方法吗加载的类会放在哪上银行外包\"><a class=\"anchor\" href=\"#2-classforname全路径-会调用哪些方法会调用构造方法吗加载的类会放在哪上银行外包\">#</a> 2. Class.forName (&quot;全路径&quot;) 会调用哪些方法？会调用构造方法吗？加载的类会放在哪？（上 * 银行外包）</h4>\n<img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220417171411631.png\" alt=\"image-20220417171411631\" style=\"zoom: 50%;\" />\n<p>Class.forName (&quot;全路径&quot;) 是为了<font color='red'>将指定了全类名的类加载到内存中</font>。在类的加载过程中，会经历三个阶段：</p>\n<ul>\n<li>\n<p><code>装载（Loading）</code></p>\n</li>\n<li>\n<p><code>链接（Linking）</code></p>\n<ul>\n<li>验证（Verify）</li>\n<li>准备（Prepare）</li>\n<li>解析（Resolve）</li>\n</ul>\n</li>\n<li>\n<p><code>初始化（Initialization）</code> ：执行<strong>类构造器<clinit>() 方法</strong>。</p>\n<blockquote>\n<p><code>类构造器 &lt;clinit&gt;() 方法</code> 是一种特殊的类方法，用于编译器在编译时自动为每个 Java 类生成并插入的隐式构造代码块。主要有以下几个特点：</p>\n<ol>\n<li>\n<p>该方法<font color='red'>由编译器自动生成</font>；通常称之为 “类构造器” 或 “类初始化方法”，其名称中的 “&lt;” 和 “&gt;&quot; 符号表示该方法不是用户程序员定义的方法。</p>\n</li>\n<li>\n<p>该方法的访问修饰符是默认级别的（即 package-private），因为它<font color='red'>只能被 JVM 执行</font>，不能被程序显式调用。</p>\n</li>\n<li>\n<p><clinit>() 方法<font color='red'>是静态方法</font>，没有参数和返回值。</p>\n</li>\n<li>\n<p><font color='red'>在一个类第一次被使用时（加载类、创建实例等操作），JVM 会自动执行一次该类的 <clinit>() 方法</font>，并保证<font color='red'>线程安全</font>。</p>\n</li>\n<li>\n<p>该方法主要作用是 **<font color='red'>对类的 static 属性和 static 代码块进行初始化</font>**，确保类在第一次使用时被正确地初始化。</p>\n</li>\n<li>\n<p>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要<font color='red'>先触发其父类的初始化</font>。</p>\n</li>\n</ol>\n<p>总之，Java 中的类构造器 <clinit>() 方法是编译器生成的一个特殊方法，主要用于对一个类的静态属性和静态代码块进行初始化，确保类在第一次使用时被正确地初始化。</p>\n<p>注：<strong><font color='red'>类构造器是构造类信息的，不是构造该类对象的构造器，因此不会调用构造方法</font></strong>。</p>\n</blockquote>\n</li>\n</ul>\n<p>加载的类放在 **<font color='red'>内存的方法区</font>**。</p>\n<h3 id=\"23-类的加载\"><a class=\"anchor\" href=\"#23-类的加载\">#</a> 2.3 类的加载</h3>\n<h4 id=\"1-类加载流程汇通-同顺-凡科技\"><a class=\"anchor\" href=\"#1-类加载流程汇通-同顺-凡科技\">#</a> 1. 类加载流程（汇 ** 通、同 * 顺、凡 * 科技）</h4>\n<img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220417171411631.png\" alt=\"image-20220417171411631\" style=\"zoom: 50%;\" />\n<p>Java 类加载流程主要分为装载、链接和初始化三个阶段。</p>\n<ul>\n<li>\n<p><strong>装载（Loading）</strong>：<font color='red'>通过 <code>类加载器</code> 将 .class 字节码文件加载到 JVM 内存中</font>，在这个过程中会<font color='red'>生成一个对应的 Class 对象</font>，并<font color='red'>在 <code>方法区</code> 中存储类加载器、类变量以及常量池等信息</font>。</p>\n</li>\n<li>\n<p><strong>链接（Linking）</strong>：</p>\n<ul>\n<li>\n<p><font color='#B32015'>验证（Verify）</font>：确保类文件的字节流<font color='red'>符合 JVM 规范</font>，并能够安全地被执行。</p>\n</li>\n<li>\n<p><font color='#B32015'>准备（Prepare）</font>：<font color='red'>为类中的 <code>静态变量</code> 分配内存空间，并赋予默认初始值</font>（例如，int 类型变量默认值为 0）。</p>\n</li>\n<li>\n<p><font color='#B32015'>解析（Resolve）</font>：<font color='red'>将类文件中的<u>符号引用</u>替换成<u>直接引用</u></font>，例如将类中使用的其他类的符号引用映射为对应的直接引用。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>初始化（Initialization）</strong>：JVM 在准备完毕后，会按照代码中的定义，对类进行初始化（即 **<font color='red'>执行 <code>类构造器（&lt;clinit&gt;() 方法）</code> </font><strong>的过程），主要是</strong><font color='red'>对 <code>静态属性</code> 进行赋值和 <code>静态代码块</code> 的执行</font>**。</p>\n</li>\n</ul>\n<p>需要注意的是：</p>\n<ol>\n<li>\n<p>如果父类还没有被初始化，则<font color='red'>父类先被初始化</font>；</p>\n</li>\n<li>\n<p>接口在初始化时<font color='red'>不会初始化其父接口</font>；</p>\n</li>\n<li>\n<p>当一个类被加载、链接和初始化后，就可以把它的实例对象创建出来了（通过 new 关键字）。</p>\n</li>\n</ol>\n<p>总之，Java 类的加载流程是一个复杂而紧密的过程，多个类加载器共同完成，它为 Java 虚拟机提供了动态连接能力，<font color='red'>使得程序运行时才装载这些类</font>，从而实现了更高效、安全和灵活的编程模式。</p>\n<h3 id=\"24-创建对象\"><a class=\"anchor\" href=\"#24-创建对象\">#</a> 2.4 创建对象</h3>\n<h4 id=\"1-说一下创建对象的几种方法华油集团-科软-凡科技\"><a class=\"anchor\" href=\"#1-说一下创建对象的几种方法华油集团-科软-凡科技\">#</a> 1. 说一下创建对象的几种方法？（华油 *** 集团、* 科软、凡 * 科技）</h4>\n<pre><code>类似问题：\n&gt; 除了使用new创建对象之外，还可以用什么方法创建对象？(*云网络)\n</code></pre>\n<p><img data-src=\"images/image-20221214145240412.png\" alt=\"image-20221214145240412\" /></p>\n<p>Java 中创建对象的方法有很多种，以下是其中的 5 种方式:</p>\n<ol>\n<li><code>new</code>  关键字<br />\n这是最常见的，也是最简单的创建对象的方式，通过这种方式我们还可以调用任意的构造器（无参的和有参的）。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Person</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Person</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>Class实例.newInstance()</code> <br />\n 这是运用<font color='red'>反射</font>创建对象时最常用的方法，只能调用<font color='red'>无参构造器</font>，且<font color='red'>必须是 public 的</font>。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.example.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><code>Constructor实例.newInstance()</code> <br />\n 这是运用<font color='red'>反射</font>创建对象时最常用的方法之一，可以调用<font color='red'>任何构造器</font>。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> constructor <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><code>Clone()</code> <br />\n 这种方式不调用任何构造器，但是当前类需要实现 Cloneable 接口，并实现 clone ()，是通过调用 Object 类中的 clone () 方法来创建一个新的对象。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><code>反序列化</code> <br />\n这种方式是通过将一个对象序列化成<font color='red'>二进制流</font>到一个文件或网络中，然后再从文件 / 网络中反序列化出来得到一个新的对象。借助<font color='red'>对象流（ObjectOutputStream、ObjectInputStream）</font>，以及<font color='red'>writeObject()、readObject()</font>方法。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person.obj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        oos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person.obj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ois<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"2-如何找到对象实际类的度\"><a class=\"anchor\" href=\"#2-如何找到对象实际类的度\">#</a> 2. 如何找到对象实际类的？（* 度）</h4>\n<p>可以使用 <code>getClass()</code>  方法来获取对象的实际类。</p>\n<p>例如，如果有一个名为 obj 的对象，可以使用以下代码获取它的实际类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"3-java反射创建对象效率高还是通过new创建对象的效率高为什么三重工\"><a class=\"anchor\" href=\"#3-java反射创建对象效率高还是通过new创建对象的效率高为什么三重工\">#</a> 3. Java 反射创建对象效率高还是通过 new 创建对象的效率高？为什么？(三 * 重工)</h4>\n<p>通过 <code>new</code>  创建对象的效率比较高。原因是，通过反射时，<font color='red'>先获取运行时类的 Class 对象</font>，<font color='red'>再获取构造函数</font>，<font color='red'>最后调用构造函数创建对象</font>，这个过程比较繁琐，所以效率较低。</p>\n<ol>\n<li>使用 new 关键字创建对象的示例代码：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// other methods and fields</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">MyClass</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>使用反射方式创建对象的示例代码：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Constructor</span> constructor <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">MyClass</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">)</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在上面的示例代码中，首先<font color='red'>通过反射获取 MyClass 类的 Class 对象</font>，并<font color='red'>通过 Class 对象获取参数类型为 int 的构造函数</font>后，<font color='red'>再通过反射调用该构造函数创建对象</font>。</p>\n<h3 id=\"25-调用属性-方法\"><a class=\"anchor\" href=\"#25-调用属性-方法\">#</a> 2.5 调用属性、方法</h3>\n<h4 id=\"1-如何利用反射机制来访问一个类的方法神州软件\"><a class=\"anchor\" href=\"#1-如何利用反射机制来访问一个类的方法神州软件\">#</a> 1. 如何利用反射机制来访问一个类的方法？（神州 ** 软件）</h4>\n<pre><code>调用指定的方法（步骤）\n步骤1.通过Class的实例调用getDeclaredMethod(String methodName,Class ... args),获取指定的方法\n步骤2. setAccessible(true)：确保此方法是可访问的\n步骤3.通过Method实例调用invoke(Object obj,Object ... objs),即为对Method对应的方法的调用。\n     invoke()的返回值即为Method对应的方法的返回值\n     特别的：如果Method对应的方法的返回值类型为void，则invoke()返回值为null\n</code></pre>\n<p>利用反射机制来访问一个类的方法，可以通过以下步骤实现：</p>\n<ol>\n<li>\n<p><strong>获取运行时类的 Class 对象</strong>：使用 <code>Class.forName()</code>  或 <code>运行时类.class</code>  或 <code>运行时类的实例.getClass()</code>  方法。</p>\n</li>\n<li>\n<p><strong>获取目标方法的 Method 对象</strong>：通过 Class 的实例调用 <code>getDeclaredMethod(String methodName,Class ... args)</code>  方法。</p>\n</li>\n<li>\n<p><strong>确保方法可访问</strong>：如果目标方法是私有方法，还需要通过 <code>setAccessible(true)</code>  设置 Method 对象为可访问的。</p>\n</li>\n<li>\n<p><strong>调用目标方法</strong>：通过 Method 对象的 <code>invoke(Object obj,Object ... objs)</code>  方法。</p>\n</li>\n</ol>\n<p>下面提供一个示例代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个测试类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 调用 Test 类中的 sayHello 方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sayHello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>method<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在上述示例代码中，首先通过 <code>Class.forName()</code>  方法获取 Test 类的 Class 对象，然后通过该对象获取 sayHello 方法的 Method 对象。由于 sayHello 方法是公共方法，因此无需设置 Method 对象为可访问的。最后通过 Method 对象的 <code>invoke()</code>  方法调用 sayHello 方法并输出结果。</p>\n<h4 id=\"2-如何利用反射机制来访问一个类的私有属性\"><a class=\"anchor\" href=\"#2-如何利用反射机制来访问一个类的私有属性\">#</a> 2. 如何利用反射机制来访问一个类的私有属性？</h4>\n<p>利用反射机制来访问一个类的私有属性，可以通过以下步骤实现：</p>\n<ol>\n<li>\n<p><strong>获取运行时类的 Class 对象</strong>：使用 <code>Class.forName()</code>  或 <code>object.getClass()</code>  方法。</p>\n</li>\n<li>\n<p><strong>获取指定属性的 Field 对象</strong>：通过 Class 对象的 <code>getDeclaredField(String fieldName)</code>  等方法。</p>\n</li>\n<li>\n<p><strong>设置 Field 对象为可访问的</strong>：使用 <code>setAccessible()</code>  方法设置为 true。</p>\n</li>\n<li>\n<p><strong>获取或者修改属性的值</strong>：使用 Field 对象的 <code>get(Object obj)</code>  和 <code>set(Object obj,Object value)</code>  方法。</p>\n</li>\n</ol>\n<p>下面是一个示例代码，用于演示如何使用反射机制访问一个类的私有属性。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// other methods and fields</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchFieldException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 创建需要反射操作的对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">MyClass</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 获取 MyClass 类中的 name 私有字段</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Field</span> field <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 设置访问标志位，使得私有字段可访问</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        field<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 获取 name 字段的值</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> nameValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 输出 name 字段的值</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nameValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 修改 name 字段的值</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        field<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"new_test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 获取修改后的 name 字段值</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        nameValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 输出修改后的 name 字段值</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nameValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上述示例代码中，我们首先创建一个名为 MyClass 的类，并定义了一个私有的属性 name。在 MainClass 中，我们首先通过 <code>getClass()</code>  方法获取对象所属类的 Class 对象，然后使用 <code>getDeclaredField()</code>  方法获取 name 属性，由于 name 是私有属性，所以需要设置 <code>setAccessible(true)</code>  使其可被访问。接着，我们调用 <code>get()</code>  方法获取 name 属性的值，并输出验证是否正确获取。最后，我们修改 name 属性的值，再次使用 <code>get()</code>  方法获取修改后的 name 属性值，输出验证是否修改成功。需要注意的是，访问私有属性需要抛出 NoSuchFieldException 和 IllegalAccessException 异常。</p>\n<h4 id=\"3-说一下java反射获取私有属性如何改变值阿麻信用项目组\"><a class=\"anchor\" href=\"#3-说一下java反射获取私有属性如何改变值阿麻信用项目组\">#</a> 3. 说一下 Java 反射获取私有属性，如何改变值？（阿 **** 麻信用项目组）</h4>\n<pre><code>调用指定的属性（步骤）\n步骤1.通过Class实例调用getDeclaredField(String fieldName)，获取运行时类指定名的属性\n步骤2. setAccessible(true)：确保此属性是可以访问的\n步骤3. 通过Filed类的实例调用get(Object obj) （获取的操作）\n                       或 set(Object obj,Object value) （设置的操作）进行操作。\n</code></pre>\n<pre><code>针对于核心源码的api，内部的私有的结构在jdk17中就不可以通过反射调用了。\n</code></pre>\n<p>使用 Java 反射机制可以获取私有属性，并通过反射修改其值。下面是一个示例代码，可以帮助理解反射如何获取私有属性并修改属性值。</p>\n<ul>\n<li>首先通过对象的 <code>getClass()</code>  方法获取对象所属类的 Class 对象</li>\n<li>然后使用 <code>getDeclaredField()</code>  方法获取 name 字段</li>\n<li>由于 name 是私有字段，所以需要设置 <code>setAccessible(true)</code>  来使其可被访问</li>\n<li>接着，我们调用 <code>set()</code>  方法对 name 字段进行赋值操作</li>\n<li>最后，我们再使用 <code>get()</code>  方法获取修改后的 name 字段值，输出验证是否修改成功</li>\n</ul>\n<p>需要注意的是，访问私有属性需要抛出 NoSuchFieldException 和 IllegalAccessException 异常。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// getter and setter methods</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchFieldException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 创建需要反射操作的对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">MyClass</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 获取 MyClass 类中的 name 私有字段</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Field</span> field <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 设置访问标志位，使得私有字段可访问</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        field<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 修改 name 字段的值</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        field<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"new_test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 获取修改后的 name 字段值</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> nameValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 输出修改后的 name 字段值</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nameValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC16%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC16%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%89/",
            "title": "宋红康_第16章：网络编程",
            "date_published": "2023-11-12T03:06:50.192Z",
            "content_html": "<h1 id=\"第16章随堂复习与企业真题网络编程\"><a class=\"anchor\" href=\"#第16章随堂复习与企业真题网络编程\">#</a> 第 16 章：随堂复习与企业真题（网络编程）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-网络编程概述\"><a class=\"anchor\" href=\"#1-网络编程概述\">#</a> 1. 网络编程概述</h3>\n<ul>\n<li>计算机网络：略</li>\n<li>网络编程的目的：直接或间接地通过网络协议与其它计算机实现数据交换，进行通讯。</li>\n<li>需要解决的三个问题：\n<ul>\n<li>问题 1：如何准确地<font color='red'>定位网络上一台或多台主机</font></li>\n<li>问题 2：如何<font color='red'>定位主机上的特定的应用</font></li>\n<li>问题 3：找到主机后，<font color='red'>如何可靠、高效地进行数据传输</font></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-要素1ip地址\"><a class=\"anchor\" href=\"#2-要素1ip地址\">#</a> 2. 要素 1：<strong>IP 地址</strong></h3>\n<ul>\n<li>使用具体的一个 ip 地址对应具体的一个互联网上的主机</li>\n<li>IP 分类：\n<ul>\n<li>角度一：IPv4、IPv6</li>\n<li>角度二：公网地址、私网地址（或局域网)</li>\n</ul>\n</li>\n<li>使用 InetAddress 类表示 IP 地址\n<ul>\n<li>实例化：<font color='gree'>getByName</font>(String host) 、<font color='gree'>getLocalHost</font>()</li>\n<li>常用方法：getHostName () 、getHostAddress ()</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-要素2端口号\"><a class=\"anchor\" href=\"#3-要素2端口号\">#</a> 3. 要素 2：<strong>端口号</strong></h3>\n<ul>\n<li>用于<font color='red'>区分同一台主机上的不同的进程</font></li>\n<li>不同的进程分配不同的端口号</li>\n<li>范围：0-65535</li>\n</ul>\n<h3 id=\"4-要素3网络通信协议\"><a class=\"anchor\" href=\"#4-要素3网络通信协议\">#</a> 4. 要素 3：<strong>网络通信协议</strong></h3>\n<ul>\n<li>这里有两套参考模型\n<ul>\n<li><code>OSI参考模型</code> ：模型过于理想化，未能在因特网上进行广泛推广</li>\n<li><code>TCP/IP参考模型(或TCP/IP协议)</code> ：事实上的国际标准。</li>\n</ul>\n</li>\n<li>在传输层中涉及到两个协议：TCP、UDP。二者的对比\n<ul>\n<li><code>TCP</code> ：可靠的连接（发送数据前，需要三次握手、四次挥手），进行大数据量的传输，效率低。</li>\n<li><code>UDP</code> ：不可靠的连接（发送前，不需要确认对方是否在）、使用数据报传输（限制在 64kb 以内）、效率高。</li>\n</ul>\n</li>\n<li>TCP 的三次握手、四次挥手（了解）</li>\n</ul>\n<h3 id=\"5-tcp网络编程\"><a class=\"anchor\" href=\"#5-tcp网络编程\">#</a> 5. TCP 网络编程</h3>\n<blockquote>\n<p>例题 1：客户端发送内容给服务端，服务端将内容打印到控制台上。</p>\n<p>例题 2：客户端发送文件给服务端，服务端将文件保存在本地。</p>\n<p>例题 3：从客户端发送文件给服务端，服务端保存到本地。并返回 “发送成功” 给客户端。并关闭相应的连接。</p>\n</blockquote>\n<h3 id=\"6-udp网络编程\"><a class=\"anchor\" href=\"#6-udp网络编程\">#</a> 6. UDP 网络编程</h3>\n<p>简单的理解 UDP 的数据传输。</p>\n<h3 id=\"7-url编程\"><a class=\"anchor\" href=\"#7-url编程\">#</a> 7. URL 编程</h3>\n<ul>\n<li>\n<p>Java 后台：将写好的 Java 程序部署在 Tomcat 服务器。启动 Tomcat 服务器。</p>\n</li>\n<li>\n<p>前台：使用浏览器进行访问。需要使用 url。（HTML+CSS+JavaScript）</p>\n</li>\n<li>\n<p>URL 的作用：<font color='red'>定位互联网上某一资源的地址</font>。</p>\n</li>\n<li>\n<p>URL 的格式：</p>\n</li>\n</ul>\n<pre><code>http://192.168.21.107:8080/examples/abcd.jpg?name=Tom   ---&gt; &quot;万事万物皆对象&quot;\n应用层协议 ip地址       端口号  资源地址   参数列表\n</code></pre>\n<ul>\n<li>使用 URL 实现数据的下载（了解）</li>\n</ul>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h4 id=\"1-tcp协议和udp协议的区别华为\"><a class=\"anchor\" href=\"#1-tcp协议和udp协议的区别华为\">#</a> 1. TCP 协议和 UDP 协议的区别（华 ** 为）</h4>\n<p>TCP（传输控制协议）和 UDP（用户数据报协议）是互联网中用于数据传输的两个主要的传输层协议。它们的区别如下：</p>\n<ol>\n<li>\n<p><strong>连接方式</strong>：TCP 是基于连接的可靠协议，需要在通信前通过三次握手建立连接。而 UDP 不需要建立连接，可以直接发送数据包。</p>\n</li>\n<li>\n<p><strong>数据传输方式</strong>：TCP 是面向 <code>字节流</code> 的协议，将应用程序传来的数据拆分为小的数据段，并在确认收到所有数据后按照应用程序的要求进行重组。UDP 是面向 <code>数据报</code> 的协议，把数据打包成数据报，一次发送，一次接收。</p>\n</li>\n<li>\n<p><strong>可靠性</strong>：TCP 提供可靠性，利用 <code>序号、确认应答、重传等机制</code> 保证数据传输的可靠性。UDP 没有此类机制，传输数据时不保证可靠性。</p>\n</li>\n<li>\n<p><strong>效率</strong>：TCP 比 UDP 慢，因为 TCP 有较多的开销用于 <code>维护连接和保证可靠性</code> ；UDP 比 TCP 快，因为不需要进行连接状态的维护及重传机制等操作。</p>\n</li>\n<li>\n<p><strong>使用场景</strong>：TCP 适用于 <code>对数据可靠性要求较高</code> 的环境，例如文件传输、电子邮件和网页浏览。UDP 适用于 <code>实时性要求较高</code> 而且丢失一些数据也没有太大的影响的环境，例如在线游戏和视频流媒体。</p>\n</li>\n</ol>\n<h4 id=\"2-简单说说tcp协议的三次握手与四次挥手机制-科软\"><a class=\"anchor\" href=\"#2-简单说说tcp协议的三次握手与四次挥手机制-科软\">#</a> 2. 简单说说 TCP 协议的三次握手与四次挥手机制 （* 科软）</h4>\n<p>TCP 协议的三次握手和四次挥手是 TCP 连接建立和断开过程中的重要步骤，分别如下：</p>\n<ol>\n<li>\n<p><strong>三次握手</strong>：<br />\na. 客户端向服务器发送 SYN 包（SYN=1，ACK=0），表示 <code>请求建立连接</code> ；<br />\nb. 服务器收到客户端的 SYN 包后，回复一个 SYN 包（SYN=1，ACK=1），表示 <code>同意连接</code> ，并通过 ACK 字段确认客户端的请求；<br />\nc. 客户端收到来自服务器的 SYN-ACK 包后，再回复一个 ACK 包（SYN=0，ACK=1），表示 <code>连接建立成功</code> 。</p>\n</li>\n<li>\n<p><strong>四次挥手</strong>：<br />\na. 客户端向服务器发送 FIN 包（FIN=1，ACK=0），表示 <code>要关闭连接</code> ；<br />\nb. 服务器收到客户端的 FIN 包后，回复一个 ACK 包（ACK=1），表示 <code>已经接收到关闭请求</code> ；<br />\nc. 服务器回复一个 FIN 包（FIN=1，ACK=1），表示服务器 <code>已经准备好关闭连接</code> ；<br />\nd. 客户端收到服务器的 FIN 包后，再回复一个 ACK 包（ACK=1），表示 <code>已经接受到关闭请求</code> 。</p>\n</li>\n</ol>\n<p>这样，TCP 连接就成功地断开了。</p>\n",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC15%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88File%E7%B1%BB%E4%B8%8EIO%E6%B5%81%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC15%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88File%E7%B1%BB%E4%B8%8EIO%E6%B5%81%EF%BC%89/",
            "title": "宋红康_第15章：File类与IO流",
            "date_published": "2023-11-12T03:06:50.184Z",
            "content_html": "<h1 id=\"第15章随堂复习与企业真题file类与io流\"><a class=\"anchor\" href=\"#第15章随堂复习与企业真题file类与io流\">#</a> 第 15 章：随堂复习与企业真题（File 类与 IO 流）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-file类的使用\"><a class=\"anchor\" href=\"#1-file类的使用\">#</a> 1. File 类的使用</h3>\n<ul>\n<li>File 类的一个实例对应着 <code>磁盘上的一个文件或文件目录</code> 。  ----&gt; “万事万物皆对象”</li>\n<li>（熟悉）File 的实例化、常用的方法</li>\n<li>File 类中 <code>只有新建、删除、获取路径等方法，不包含读写文件的方法，此时需要使用IO流</code></li>\n</ul>\n<h3 id=\"2-io流的概述\"><a class=\"anchor\" href=\"#2-io流的概述\">#</a> 2. IO 流的概述</h3>\n<ul>\n<li>IO 流的分类\n<ul>\n<li>流向：输入流、输出流</li>\n<li>处理数据单位：字节流、字符流</li>\n<li>流的角色： <code>节点流</code> 、 <code>处理流</code></li>\n</ul>\n</li>\n<li>IO 的 4 个抽象基类： <code>InputStream</code>  \\  <code>OutputStream</code>  \\  <code>Reader</code>  \\  <code>Writer</code></li>\n</ul>\n<img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230411183512545.png\" alt=\"image-20230411183512545\" style=\"zoom:50%;\" />\n<h3 id=\"3-节点流之文件流\"><a class=\"anchor\" href=\"#3-节点流之文件流\">#</a> 3. 节点流之：文件流</h3>\n<ul>\n<li><code>FileInputStream</code>  \\  <code>FileOutputStream</code>  \\  <code>FileReader</code>  \\  <code>FileWriter</code></li>\n<li>（掌握）读写数据的过程。\n<ul>\n<li>步骤 1：创建 File 类的对象，作为读取或写出数据的端点</li>\n<li>步骤 2：创建相关的流的对象</li>\n<li>步骤 3：读取、写出数据的过程</li>\n<li>步骤 4：关闭流资源</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-处理流之一缓冲流\"><a class=\"anchor\" href=\"#4-处理流之一缓冲流\">#</a> 4. 处理流之一：缓冲流</h3>\n<ul>\n<li><code>BufferedInputStream</code>  \\  <code>BufferedOutputStream</code>  \\  <code>BufferedReader</code>  \\  <code>BufferedWriter</code></li>\n<li>作用：实现更高效的读写数据的操作</li>\n</ul>\n<h3 id=\"5-处理流之二转换流\"><a class=\"anchor\" href=\"#5-处理流之二转换流\">#</a> 5. 处理流之二：转换流</h3>\n<ul>\n<li>层次 1：熟悉转换流的使用\n<ul>\n<li><code>InputStreamReader</code> 、 <code>OutputStreamWriter</code></li>\n</ul>\n</li>\n<li>层次 2：（掌握）字符的编码和解码的过程、常用的字符集\n<ul>\n<li>解决相关的问题：读写字符出现乱码！本质问题：使用的解码集与编码集不一致。</li>\n</ul>\n</li>\n</ul>\n<img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230411195403807.png\" style=\"zoom:80%;\" />\n<h3 id=\"6-处理流之三对象流\"><a class=\"anchor\" href=\"#6-处理流之三对象流\">#</a> 6. 处理流之三：对象流</h3>\n<ul>\n<li>层次 1：熟悉对象流的使用\n<ul>\n<li><code>ObjectInputStream</code> :<font color='red'>反序列化</font>时需要使用的 api</li>\n<li><code>ObjectOutputStream</code> :<font color='red'>序列化</font>时需要使用的 api</li>\n</ul>\n</li>\n<li>层次 2：对象的序列化机制\n<ul>\n<li>使用场景：不同的进程之间通信、客户端（或浏览器端）与服务器端传输数据</li>\n<li>自定义类要想实现序列化机制需要满足的要求及注意点。</li>\n</ul>\n</li>\n</ul>\n<img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230411144529975.png\" alt=\"image-20230411144529975\" style=\"zoom: 80%;\" />\n<h3 id=\"7-其它流的使用\"><a class=\"anchor\" href=\"#7-其它流的使用\">#</a> 7. 其它流的使用</h3>\n<ul>\n<li>了解：数据流：DataInputStream 、DataOutputStream</li>\n<li>了解：标准的输入流、标准的输出流： <code>System.in</code>  、 <code>System.out</code></li>\n<li>了解：打印流： <code>PrintStream</code> 、 <code>PrintWriter</code></li>\n</ul>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"21-io流概述\"><a class=\"anchor\" href=\"#21-io流概述\">#</a> 2.1 IO 流概述</h3>\n<h4 id=\"1-谈谈java-io里面的常用类字节流字符流银数据\"><a class=\"anchor\" href=\"#1-谈谈java-io里面的常用类字节流字符流银数据\">#</a> 1. 谈谈 Java IO 里面的常用类，字节流，字符流 (银 * 数据)</h4>\n<img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230411183512545.png\" alt=\"image-20230411183512545\" style=\"zoom: 50%;\" />\n<p>按 <code>操作数据单位</code> 的不同分为：</p>\n<ul>\n<li>** 字节流（8bit）** 用于处理<font color='red'>二进制数据</font>，常用的类有 <code>InputStream</code>  和 <code>OutputStream</code> 。\n<ul>\n<li>常用的类有 <code>FileInputStream</code>  和 <code>FileOutputStream</code> ，它们分别用于从文件中读取和写入 <code>字节</code> 数据。</li>\n</ul>\n</li>\n<li>** 字符流（16bit）** 用于处理<font color='red'>文本数据</font>，常用的类有 <code>Reader</code>  和 <code>Writer</code> 。\n<ul>\n<li>常用的类有 <code>FileReader</code>  和 <code>FileWriter</code> ，它们分别用于从文件中读取和写入 <code>字符</code> 数据。</li>\n</ul>\n</li>\n</ul>\n<p>根据 <code>IO流的角色</code> 不同分为：<strong>节点流</strong>和<strong>处理流</strong>。</p>\n<ul>\n<li>\n<p><strong>节点流</strong>：直接从<font color='red'>数据源</font>或<font color='red'>目的地</font>读写数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220412230745170.png\" alt=\"image-20220412230745170\" /></p>\n</li>\n<li>\n<p><strong>处理流</strong>：不直接连接到数据源或目的地，而是<font color='red'>“连接” 在已存在的流</font>（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220412230751461.png\" alt=\"image-20220412230751461\" /></p>\n<ul>\n<li>\n<p><strong>缓冲流</strong>（ <code>BufferedInputStream</code> ,  <code>BufferedOutputStream</code> ,  <code>BufferedReader</code> ,  <code>BufferedWriter</code> ）</p>\n</li>\n<li>\n<p><strong>数据流</strong>（ <code>DataInputStream</code> ,  <code>DataOutputStream</code> ）等</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-java-中有几种类型的流jdk为每种类型的流提供一些抽象类以供继承请说出他们分别是哪些类上海厦联网-极科技\"><a class=\"anchor\" href=\"#2-java-中有几种类型的流jdk为每种类型的流提供一些抽象类以供继承请说出他们分别是哪些类上海厦联网-极科技\">#</a> 2. Java 中有几种类型的流？JDK 为每种类型的流提供一些抽象类以供继承，请说出他们分别是哪些类？（上海 * 厦 * 联网、极 * 科技）</h4>\n<p>在 Java 中，有四种类型的流：<strong>字节输入流</strong>、<strong>字节输出流</strong>、<strong>字符输入流</strong>和<strong>字符输出流</strong>。JDK 为每种类型的流都提供了抽象类以供继承。</p>\n<p>字节输入流的抽象类是 <code>InputStream</code> ，它定义了读取字节数据的方法。字节输出流的抽象类是 <code>OutputStream</code> ，它定义了写入字节数据的方法。</p>\n<p>字符输入流的抽象类是 <code>Reader</code> ，它定义了读取字符数据的方法。字符输出流的抽象类是 <code>Writer</code> ，它定义了写入字符数据的方法。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230410101610691.png\" alt=\"image-20230410101610691\" /></p>\n<h4 id=\"3-流一般需不需要关闭如果关闭的话用什么方法处理流是怎么关闭的银数据\"><a class=\"anchor\" href=\"#3-流一般需不需要关闭如果关闭的话用什么方法处理流是怎么关闭的银数据\">#</a> 3. 流一般需不需要关闭？如果关闭的话用什么方法？处理流是怎么关闭的？(银 * 数据)</h4>\n<p>是的，流在使用完毕后通常 <code>需要关闭</code> 。这样可以释放系统资源， <code>防止资源泄漏</code> 。可以使用 <code>close()</code>  方法来关闭流。</p>\n<p>在处理流时，只需要 <code>关闭最外层的流即可</code> 。当最外层的流被关闭时，它内部包装的所有流都会被自动关闭。</p>\n<p>例如，如果我们使用 <code>BufferedReader</code>  来包装 <code>FileReader</code> ，那么只需要调用 <code>BufferedReader</code>  的 <code>close()</code>  方法即可，它会自动关闭内部的 <code>FileReader</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭 BufferedReader，同时也会关闭内部的 FileReader</span></pre></td></tr></table></figure><p>在 Java 7 及以上版本中，还可以使用 <code>try-with-resources</code>  语句来自动关闭流。只需将流的声明放在 try 语句的括号中，当 try 语句块执行完毕后，流会被自动关闭。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 当 try 语句块执行完毕后，br 会被自动关闭</span></pre></td></tr></table></figure><h4 id=\"4-outputstream里面的write是什么意思君科技\"><a class=\"anchor\" href=\"#4-outputstream里面的write是什么意思君科技\">#</a> 4. OutputStream 里面的 write () 是什么意思？(君 * 科技)</h4>\n<p><code>OutputStream</code>  类中的 <code>write()</code>  方法用于<font color='red'>将指定的<strong>字节</strong>数据写出到输出流</font>。它有三种重载形式：</p>\n<ul>\n<li><code>write(int b)</code> ：将指定的字节（ <code>b</code> ）写出到输出流。</li>\n<li><code>write(byte[] b)</code> ：将指定字节数组（ <code>b</code> ）中的所有字节写出到输出流。</li>\n<li><code>write(byte[] b, int off, int len)</code> ：将指定字节数组（ <code>b</code> ）中从偏移量（ <code>off</code> ）开始的 <code>len</code>  个字节写出到输出流。</li>\n</ul>\n<p>例如，下面的代码演示了如何使用 <code>FileOutputStream</code>  将字符串写入文件：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"22-缓冲流\"><a class=\"anchor\" href=\"#22-缓冲流\">#</a> 2.2 缓冲流</h3>\n<h4 id=\"1-bufferedreader属于哪种流他主要是用来做什么的国电网\"><a class=\"anchor\" href=\"#1-bufferedreader属于哪种流他主要是用来做什么的国电网\">#</a> 1. BufferedReader 属于哪种流？他主要是用来做什么的？(国 * 电网)</h4>\n<p>属于 <code>字符输入流</code> ，它继承自 <code>Reader</code>  类。它的主要作用是<strong>为其他字符输入流（如 <code>FileReader</code> ）提供缓冲功能，以提高读取效率</strong>。</p>\n<p>当我们从 <code>BufferedReader</code>  中读取数据时，它会<font color='red'>一次性从底层输入流中读取多个字符并存储在 <code>内部缓冲区</code> 中</font>。这样，当我们<font color='red'>再次读取数据时，就可以直接从缓冲区中获取，而不需要再次访问底层输入流</font>。</p>\n<p>此外， <code>BufferedReader</code>  还提供了一些方便的方法，如 <code>readLine()</code> ，用于<font color='red'>读取一行文本，不包括换行符</font>。</p>\n<p>例如，下面的代码演示了如何使用 <code>BufferedReader</code>  来读取文件中的文本：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"2-什么是缓冲区有什么作用北京中油\"><a class=\"anchor\" href=\"#2-什么是缓冲区有什么作用北京中油\">#</a> 2. 什么是缓冲区？有什么作用？(北京中油 **)</h4>\n<p>内部缓冲区是指<strong>缓冲流</strong>类（如 <code>BufferedInputStream</code> 、 <code>BufferedOutputStream</code>  和 <code>BufferedReader</code> 、 <code>BufferedWriter</code> ）内部<strong>用于临时存储数据的数组</strong>，类型为 <code>byte[]</code>  或 <code>char[]</code> ，大小默认是 <code>8192</code> ，当达到一定程度时，集中性的写出。它的作用是<strong>减少与磁盘的交互次数，从而提高读写效率</strong>。</p>\n<p>例如，在使用 <code>BufferedReader</code>  读取数据时，它会一次性从底层输入流中读取多个字符（char）并存储在内部缓冲区中。这样，当我们再次读取数据时，就可以直接从缓冲区中获取，而不需要再次访问底层输入流。这样可以减少对底层输入流的访问次数，从而提高读取效率。</p>\n<p>同理，在使用 <code>BufferedWriter</code>  写入数据时，它会先将数据写入内部缓冲区。当缓冲区满时，才会将数据一次性写入底层输出流。这样可以减少对底层输出流的访问次数，从而提高写入效率。</p>\n<h3 id=\"23-转换流\"><a class=\"anchor\" href=\"#23-转换流\">#</a> 2.3 转换流</h3>\n<h4 id=\"1-字节流和字符流是什么怎么转换北京蓝-海供应链管理\"><a class=\"anchor\" href=\"#1-字节流和字符流是什么怎么转换北京蓝-海供应链管理\">#</a> 1. 字节流和字符流是什么？怎么转换？(北京蓝 *、* 海 * 供应链管理）</h4>\n<p><strong>字节流</strong>用于处理 <code>二进制数据</code> ，常用的类有 <code>InputStream</code>  和 <code>OutputStream</code> 。</p>\n<p><strong>字符流</strong>用于处理 <code>文本数据</code> ，常用的类有 <code>Reader</code>  和 <code>Writer</code> 。</p>\n<p>在某些情况下，我们需要将字节流和字符流进行转换。例如，当我们从网络套接字（ <code>Socket</code> ）中读取文本数据时，需要将套接字的输入流（字节流）转换为字符流。</p>\n<p>可以使用处理流中的<strong>转换流</strong>来实现，常用的类有 <code>InputStreamReader</code>  和 <code>OutputStreamWriter</code> ，<font color='red'>用于实现字节流和字符流之间的转换</font>。这两个类分别继承自 <code>Reader</code>  和 <code>Writer</code> ，它们可以将字节流转换为字符流，或将字符流转换为字节流。</p>\n<p>例如，下面的代码演示了如何使用 <code>InputStreamReader</code>  将套接字的输入流（字节流）转换为字符流：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230411195403807.png\" style=\"zoom:80%;\" />\n<h3 id=\"24-序列化\"><a class=\"anchor\" href=\"#24-序列化\">#</a> 2.4 序列化</h3>\n<h4 id=\"1-什么是java序列化如何实现君科技-上海厦物联网\"><a class=\"anchor\" href=\"#1-什么是java序列化如何实现君科技-上海厦物联网\">#</a> 1. 什么是 Java 序列化，如何实现 (君 * 科技、上海 * 厦物联网)</h4>\n<p>** <code>对象序列化机制</code>  ** 允许<font color='red'><strong>把<u>内存中的 Java 对象</u>转换成<u>平台无关的二进制流（字节序列）</u></strong>，以便将其存储在文件中或通过网络传输</font>。与之相反的过程称为反序列化，即从字节序列中恢复对象。当其它程序获取了这种二进制流，就可以恢复成原来的 Java 对象。</p>\n<p>要实现 Java 序列化，需要满足以下条件：</p>\n<ul>\n<li><strong>对象所属的类</strong>必须实现 <code>Serializable</code>  接口。这个接口是一个 <code>标记接口</code> ，没有任何方法，只是用来标识一个类是否支持序列化。</li>\n<li>对象中<strong>所有需要序列化的字段</strong>都必须是可序列化的。如果有不可序列化的字段，则需要将其声明为 <code>transient</code> ，以便在序列化时跳过该字段。</li>\n</ul>\n<p>可以使用 <code>ObjectOutputStream</code>  类来实现对象的序列化。它继承自 <code>OutputStream</code> ，提供了 <code>writeObject()</code>  方法用于将对象写入输出流。</p>\n<p>例如，下面的代码演示了如何使用 <code>ObjectOutputStream</code>  将一个对象序列化并写入文件：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">MyObject</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>与之相反，可以使用 <code>ObjectInputStream</code>  类来实现对象的反序列化。它继承自 <code>InputStream</code> ，提供了 <code>readObject()</code>  方法用于从输入流中读取对象。</p>\n<p>例如，下面的代码演示了如何使用 <code>ObjectInputStream</code>  从文件中读取并反序列化一个对象：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">MyObject</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyObject</span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>序列化机制的实现步骤如下：</p>\n<ol>\n<li>\n<p>自定义<strong>类</strong>需要实现 <code>java.io.Serializable标识接口</code> ，否则在序列化时报错 <code>NotSerializableException</code></p>\n</li>\n<li>\n<p>自定义类需要显示声明一个静态常量： <code>static final long serialVersionUID</code> ，用来唯一标识当前类，值可以任意指定</p>\n<blockquote>\n<p>如果类没有显示定义 serialVersionUID，它的值是 Java 运行时环境根据类的内部细节 <code>自动生成</code> 的。若序列化后，类的实例变量做了修改， serialVersionUID  <code>可能发生变化</code> ，在反序列化时会因为序列版本号不匹配，导致反序列化时报错 <code>InvalidClassException</code> 。</p>\n<p>如果声明了 serialVersionUID ，即使在序列化完成之后修改了类，导致类重新编译，则原来的数据也能正常反序列化，只是新增的字段值是默认值而已。</p>\n<p>因此，建议显式声明 serialVersionUID 。</p>\n</blockquote>\n</li>\n<li>\n<p>自定义类的各个<strong>属性</strong>如果也要序列化的话</p>\n<ol>\n<li>对于基本数据类型，默认是可序列化的</li>\n<li>对于<strong>引用数据类型</strong>，要求实现 Serializable 接口，否则报错 <code>NotSerializableException</code></li>\n</ol>\n<blockquote>\n<ul>\n<li>\n<p>如果有一个属性不需要可序列化的，则该属性必须注明是<strong>瞬态</strong>的，使用  <code>transient</code>  关键字修饰</p>\n</li>\n<li>\n<p>静态（ <code>static</code> ）变量的值不会序列化，因为静态变量的值不属于某个对象</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230411144529975.png\" alt=\"image-20230411144529975\" style=\"zoom: 80%;\" />\n<h4 id=\"2-java有些类中为什么需要实现serializable接口阿校招\"><a class=\"anchor\" href=\"#2-java有些类中为什么需要实现serializable接口阿校招\">#</a> 2. Java 有些类中为什么需要实现 Serializable 接口？（阿 * 校招）</h4>\n<p><strong>便于此类的对象实现<u>序列化</u>操作</strong>。</p>\n<p>当一个类需要支持序列化时，它必须实现 <code>Serializable</code>  接口。序列化是指将对象转换为字节序列的过程，以便将其存储在文件中或通过网络传输。只有实现了 <code>Serializable</code>  接口的类才能被序列化。</p>\n<p><code>Serializable</code>  接口是一个标记接口，没有任何方法。它只是用来标识一个类是否支持序列化。当我们试图序列化一个未实现 <code>Serializable</code>  接口的对象时，会抛出 <code>NotSerializableException</code>  异常。</p>\n<p>许多 Java 类都实现了 <code>Serializable</code>  接口，以便支持序列化。例如，Java 集合框架中的许多类（如 <code>ArrayList</code> ,  <code>HashMap</code>  等）都实现了这个接口。</p>\n",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC14%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC14%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%EF%BC%89/",
            "title": "宋红康_第14章：数据结构与集合源码",
            "date_published": "2023-11-12T03:06:50.174Z",
            "content_html": "<h1 id=\"第14章随堂复习与企业真题数据结构与集合源码\"><a class=\"anchor\" href=\"#第14章随堂复习与企业真题数据结构与集合源码\">#</a> 第 14 章：随堂复习与企业真题（数据结构与集合源码）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-数据结构\"><a class=\"anchor\" href=\"#1-数据结构\">#</a> 1. 数据结构</h3>\n<ul>\n<li>\n<p>数据结构的研究对象：</p>\n<ul>\n<li>① 数据间的 <code>逻辑关系</code> （集合关系、一对一、一对多、多对多）</li>\n<li>② 数据的 <code>存储结构</code> （或物理结构）\n<ul>\n<li>角度一：顺序结构、链式结构、索引结构、哈希结构</li>\n<li>角度二： <code>线性表</code> （一维数组、链表、栈、队列）、 <code>树</code> （二叉树、B + 树）、 <code>图</code> （多对多）、 <code>哈希表</code> （HashMap、HashSet)</li>\n</ul>\n</li>\n<li>③ 相关运算</li>\n</ul>\n</li>\n<li>\n<p>树（了解）</p>\n</li>\n<li>\n<p>相关数据结构的核心 <code>Node的设计</code> （单向链表、双向链表、二叉树、栈、队列）（理解）</p>\n</li>\n</ul>\n<h3 id=\"2-list接口下的实现类的源码剖析\"><a class=\"anchor\" href=\"#2-list接口下的实现类的源码剖析\">#</a> 2. List 接口下的实现类的源码剖析</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">List 接口的实现类</th>\n<th style=\"text-align:center\"><em>ArrayList</em></th>\n<th style=\"text-align:center\"><s>Vector</s></th>\n<th style=\"text-align:center\">LinkedList</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">地位</td>\n<td style=\"text-align:center\">新版的动态数组</td>\n<td style=\"text-align:center\">旧版的动态数组</td>\n<td style=\"text-align:center\">链表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">底层实现</td>\n<td style=\"text-align:center\">Object 数组，但可以扩容</td>\n<td style=\"text-align:center\">Object 数组</td>\n<td style=\"text-align:center\"><font color='red'>双向链表</font></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">默认的初始容量</td>\n<td style=\"text-align:center\">JDK6.0 及之前是 10；JDK8.0 之后是 <code>0</code> ，之后在添加第一个元素时，再创建长度为 10 的数组</td>\n<td style=\"text-align:center\"><code>10</code></td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">扩容机制</td>\n<td style=\"text-align:center\">默认扩容为原来的 <code>1.5倍</code></td>\n<td style=\"text-align:center\">默认扩容增加为原来的 <code>2倍</code></td>\n<td style=\"text-align:center\">不需要扩容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">特点</td>\n<td style=\"text-align:center\">线程不安全、效率高</td>\n<td style=\"text-align:center\"><font color='red'>线程安全</font>、效率低</td>\n<td style=\"text-align:center\">线程不安全</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">使用场景</td>\n<td style=\"text-align:center\"><font color='red'>频繁追加、查找数据</font></td>\n<td style=\"text-align:center\">避免使用</td>\n<td style=\"text-align:center\"><font color='red'>频繁插入、删除数据</font></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">说明</td>\n<td style=\"text-align:center\">对于频繁访问列表中的某一个元素，只需要在列表末尾进行添加和删除元素操作的情况下</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">元素是通过指针相互连接的，在插入 / 删除元素时，只需要改动前后元素的指针即可</td>\n</tr>\n</tbody>\n</table>\n<p>【面试题】ArrayList、Vector、LinkedList 的三者的对比？</p>\n<ul>\n<li>\n<p>层次 1：</p>\n<ul>\n<li>Collection 接口的子接口 List: 存储有序的、可重复的数据 (&quot;动态&quot; 数组)\n<ul>\n<li>ArrayList: 主要实现类；线程不安全的、效率高；底层使用 Object [] 数组存储；添加数据、查找数据时，效率较高；在插入、删除数据时，效率较低</li>\n<li>LinkedList: 底层使用双向链表的方式进行存储；在对集合中的数据进行频繁的删除、插入操作时，建议使用此类在插入、删除数据时，效率较高；在添加数据、查找数据时，效率较低；</li>\n<li>Vector: 古老实现类；线程安全的、效率低；底层使用 Object [] 数组存储</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>层次 2：查看相关 api 的源码（见笔记，略）</p>\n</li>\n</ul>\n<h3 id=\"3-map接口下的实现类的源码剖析\"><a class=\"anchor\" href=\"#3-map接口下的实现类的源码剖析\">#</a> 3. Map 接口下的实现类的源码剖析</h3>\n<ul>\n<li><strong>（掌握）HashMap 的底层源码的剖析</strong></li>\n<li>（熟悉）LinkedHashMap 的底层源码的剖析</li>\n<li>（了解）HashSet、LinkedHashSet 的底层源码的剖析</li>\n</ul>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"21-数据结构相关\"><a class=\"anchor\" href=\"#21-数据结构相关\">#</a> 2.1 数据结构相关</h3>\n<h4 id=\"1-链表和数组有什么区别腾\"><a class=\"anchor\" href=\"#1-链表和数组有什么区别腾\">#</a> 1. 链表和数组有什么区别？（腾 *）</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">数组</th>\n<th style=\"text-align:center\">链表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">存储方式</td>\n<td style=\"text-align:center\">连续</td>\n<td style=\"text-align:center\">分散</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">内存分配方式</td>\n<td style=\"text-align:center\">静态分配</td>\n<td style=\"text-align:center\">动态分配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">访问元素</td>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">插入 / 删除元素</td>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-栈是如何运行的西信息技术\"><a class=\"anchor\" href=\"#2-栈是如何运行的西信息技术\">#</a> 2. 栈是如何运行的？(西 * 信息技术)</h4>\n<p>栈特点是 <code>先进后出（FILO）</code> ，数据只能在 <code>栈顶</code> 进行压入（push）和弹出（pop）操作。</p>\n<p>栈是种抽象数据结构 <code>ADT</code>  (abstract data type)，可以使用 <code>数组</code> 、 <code>链表</code> 实现栈结构。</p>\n<p>在 <code>计算机系统中</code> ，栈是一个具有以上属性的 <code>动态内存区域</code> ，程序可以将数据压入栈中，也可以将数据从栈中弹出，压栈操作时栈增大，弹出操作是栈减小</p>\n<h3 id=\"22-list集合源码相关\"><a class=\"anchor\" href=\"#22-list集合源码相关\">#</a> 2.2 List 集合源码相关</h3>\n<h4 id=\"1-arraylist的默认大小是多少以及扩容机制顺-凡科技\"><a class=\"anchor\" href=\"#1-arraylist的默认大小是多少以及扩容机制顺-凡科技\">#</a> 1. <mark>ArrayList 的默认大小是多少，以及扩容机制</mark>（顺 *、凡 * 科技）</h4>\n<pre><code>类似问题：\n&gt; 说说ArrayList的扩容机制吧(国*电网)\n&gt; 讲一下ArrayList的扩容机制（*实在）\n&gt; ArrayList的扩容机制，为什么是10，为什么是1.5倍（*软国际）\n</code></pre>\n<p>Java 中的 ArrayList 类实例化时如果不指定长度，底层数组初始化为 <code>&#123;&#125;</code> ，只有在 <code>首次添加元素时</code> 才会创建默认容量为 <code>10</code>  的数组。当元素数量超过 ArrayList 的容量时，ArrayList 会自动扩容到原来的 <code>1.5倍</code> 。ArrayList 的<mark>扩容机制</mark>如下：</p>\n<ol>\n<li>当添加新元素时，如果当前容量不足以容纳新元素，则会调用 <code>grow()</code>  方法进行扩容。</li>\n<li>grow () 方法会 <code>计算新容量newCapacity</code> ，其中 newCapacity = oldCapacity + (oldCapacity&gt;&gt; 1)，也就是<font color='red'>原有容量的 1.5 倍</font>。</li>\n<li>如果 newCapacity 仍然小于新添加元素后的数量，那么 newCapacity 就会被设置为<font color='red'>新添加元素后的数量</font>。</li>\n<li>然后，ArrayList 会调用 <code>copyOf(T[] original, int newLength)</code>  创建一个新的数组，并<font color='red'>将<u>原有元素</u>拷贝到新数组中</font>。</li>\n<li>最后，<font color='red'><u>新元素</u>会被添加到新数组的尾部</font>。</li>\n</ol>\n<p>需要注意的是，由于<font color='red'>扩容会涉及到数组的拷贝操作</font>，因此在实际开发中，尽量<font color='red'>避免频繁对 ArrayList 进行扩容</font>，以提高程序的性能。为了避免频繁扩容，<font color='red'>可以在创建 ArrayList 对象时，指定一个足够大的初始容量，以便能够容纳预期数量的元素</font>。</p>\n<h4 id=\"2-arraylist的底层是怎么实现的腾\"><a class=\"anchor\" href=\"#2-arraylist的底层是怎么实现的腾\">#</a> 2. ArrayList 的底层是怎么实现的？（腾 *）</h4>\n<pre><code>类似问题：\n集合类的ArrayList底层（安全不安全，扩容，初始大小，添加删除查询是怎么操作的，底层是什么组成的）\n（湖**利软件、汇*云通、猎*、苏州***动、上海*进天下、北京博*软件、*科软、大连*点科技、中*亿达、德*物流、天*伟业、猫*娱乐）\n</code></pre>\n<p>ArrayList 的底层实现是基于 <code>Object[]数组</code> 的。我们可以在集合中存储任意类型的数据，但是它是 <code>线程不安全</code> 的。由于它底层是基于数组实现的，所以它非常适合用于对元素进行查找， <code>查找效率非常高</code> 。</p>\n<p>当我们实例化一个 ArrayList 时，无参数构造函数默认将数组初始化为 <code>&#123;&#125;</code> ，只有在首次添加元素时为数组初始化长度为 <code>10</code> 。如果增加的元素个数超过了 10 个，那么 ArrayList 底层会新生成一个数组，长度为原数组的 <code>1.5倍</code> ，然后将原数组的内容 <code>复制</code> 到新数组当中，并且后续增加的内容都会 <code>追加</code> 到新数组。</p>\n<blockquote>\n<p>开发建议： <code>ArrayList(int capacity)&#123;&#125;</code>  创建指定长度的数组：开发中，如果能大体确认数组长度，推荐使用这种带参构造器，因为 <code>避免了扩容、复制数组带来的时空消耗</code> 。</p>\n</blockquote>\n<h4 id=\"3-在arraylist中remove后面几个元素该怎么做惠-中亿达\"><a class=\"anchor\" href=\"#3-在arraylist中remove后面几个元素该怎么做惠-中亿达\">#</a> 3. 在 ArrayList 中 remove 后面几个元素该怎么做？（惠 *、中 * 亿达）</h4>\n<p>前移。</p>\n<h4 id=\"4-arraylist17和18的区别拓思\"><a class=\"anchor\" href=\"#4-arraylist17和18的区别拓思\">#</a> 4. <mark>ArrayList1.7 和 1.8 的区别</mark>（拓 * 思）</h4>\n<p>JDK 1.8 和 1.7 中 ArrayList 最明显的区别就是<strong>底层数组的初始化方式</strong>。</p>\n<p>在 <code>JDK1.8</code>  中，如果不指定长度，使用 <code>无参构造方法</code>  ArrayList list = new ArrayList () 创建 List 集合时，底层的 Object [] elementData 初始化为 <code>&#123;&#125;（空的数组）</code> ，并没有直接创建长度为 10 的数组。而在第一次调用 <code>add()</code>  方法时，底层才创建了长度为 <code>10</code>  的数组，并将本次要添加的元素添加进去。这样做可<font color='red'>节省内存消耗</font>，因为在添加元素时，数组名将指针指向了新的数组，且老数组 {} 是一个空数组，这样有利于 System.gc ()，并不会一直占据内存。</p>\n<p>相比之下，在 <code>JDK1.7</code>  中，使用 <code>无参构造方法</code> 创建 List 集合时，底层直接创建了长度是 <code>10</code>  的 Object [] 数组 elementData。后续的添加和扩容操作与 JDK1.8 无异。</p>\n<h4 id=\"5-数组和-arraylist-的区别阿-科软\"><a class=\"anchor\" href=\"#5-数组和-arraylist-的区别阿-科软\">#</a> 5. <mark>数组和 ArrayList 的区别</mark>（阿 *、* 科软）</h4>\n<p>ArrayList 看做是对数组的常见操作的封装。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">数组</th>\n<th style=\"text-align:center\">ArrayList</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">长度</td>\n<td style=\"text-align:center\">创建时确定，且长度固定</td>\n<td style=\"text-align:center\">长度是 <code>动态</code> 的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">存储类型</td>\n<td style=\"text-align:center\">基本数据类型、引用数据类型</td>\n<td style=\"text-align:center\"><code>引用数据类型</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">操作</td>\n<td style=\"text-align:center\">基本的读写操作</td>\n<td style=\"text-align:center\">插入、删除、查找等 <code>高级操作</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">性能</td>\n<td style=\"text-align:center\"><code>随机访问</code> 性能更优</td>\n<td style=\"text-align:center\"><code>插入和删除</code> 性能更优</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">随机访问性能的说明</td>\n<td style=\"text-align:center\">可以直接通过 <code>索引</code> 来访问元素，<font color='red'>O(1)$</font></td>\n<td style=\"text-align:center\"><font color='red'>需要先检查索引是否越界，</font>这会增加一些开销</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">插入删除性能的说明</td>\n<td style=\"text-align:center\">需要 <code>创建一个新数组</code> ，然后将原数组中的元素复制到新数组中</td>\n<td style=\"text-align:center\">只需要 <code>移动元素</code> ，而不需要创建新的数组</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6-什么是线程安全的list平金服\"><a class=\"anchor\" href=\"#6-什么是线程安全的list平金服\">#</a> 6. 什么是线程安全的 List？(平 * 金服)</h4>\n<p>线程安全的 List 是指可以在多线程环境下安全使用的 List。这意味着，当多个线程同时访问和修改同一个 List 时，它能够保证 <code>数据的一致性</code> 和正确性。</p>\n<p>Java 中提供了几种线程安全的 List 实现，包括 <code>Vector</code>  和 <code>CopyOnWriteArrayList</code> 。此外，我们还可以使用 <code>Collections.synchronizedList()</code>  方法来将任意一个 List 包装成线程安全的 List。</p>\n<p>需要注意的是，虽然线程安全的 List 可以在多线程环境下安全使用，但它们通常比非线程安全的 List（如 ArrayList） <code>性能低</code> 一些。因此，在选择使用哪种 List 时，应该根据实际情况进行权衡。</p>\n<h3 id=\"23-hashmap集合源码相关\"><a class=\"anchor\" href=\"#23-hashmap集合源码相关\">#</a> 2.3 HashMap 集合源码相关</h3>\n<h4 id=\"1-说说hahmap底层实现新股份-顺-猫娱乐\"><a class=\"anchor\" href=\"#1-说说hahmap底层实现新股份-顺-猫娱乐\">#</a> 1. <mark>说说 HahMap 底层实现</mark> (新 * 股份、顺 *、猫 * 娱乐)</h4>\n<pre><code>类似问题：\n&gt; HashMap的实现讲一下？（腾*，上海**网络）\n&gt; 说说HashMap的底层执行原理？（滴*，纬*软件，上海*想，*昂，*蝶**云，宇*科技，*东数科，猎*网）\n&gt; 详细说一下 HashMap 的 put 过程（*度）\n&gt; Java中的HashMap的工作原理是什么？（北京中**译咨询）\n&gt; 集合类的HashMap底层（安全不安全，扩容，初始大小，添加删除查询是怎么操作的，底层是什么组成的）（湖**利软件）\n&gt; HashMap 的存储过程（爱*信、杭州*智）\n&gt; Hashmap底层实现及构造（汇**通、猎*、苏州博*讯动、上海*进天下、北京博*软件、*科软、大连*点科技、中*亿达、德*物流、天*伟业、猫*娱乐）\n&gt; HashMap的实现原理（腾*、阿*）\n&gt; HaspMap底层讲一讲（*米）\n&gt; 说一下HashMap的实现，扩容机制？（*节）\n&gt; 讲一下 HashMap 中 put 方法过程？（阿*）\n</code></pre>\n<p><strong>HashMap 的底层实现原理</strong></p>\n<p>HashMap 是 Java 中一种常用的数据结构，它实现了 Map 接口，能够以 <code>键值对</code> 的形式存储数据。它的底层实现是基于 <code>哈希表</code> 的，具体来说，它是通过 <code>数组+单向链表+红黑树</code> 的形式来实现的。</p>\n<p><strong>HashMap 的 put (key,value) 过程</strong></p>\n<ol>\n<li>\n<p>计算 key 的哈希值，并将其映射到数组下标</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220514190454633-1661448231965.png\" alt=\"image-20220514190454633\" /></p>\n<p>调用 <code>hashCode()</code>  和 <code>hash()</code>  计算 key 的哈希值 hash。</p>\n<p>并根据 <code>下式</code> 计算该键值对被分配到数组中的索引位置 index，</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>capacity <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>其中 hash 是键的哈希值，capacity 是数组的长度，<font color='red'>&amp; 运算符是按位与运算</font>，运算结果的取值范围是 [0,capacity-1]，刚好对应数组的各个下标。</p>\n<p>下标位置称为 <code>桶（bucket）</code> 或 <code>槽（slot）</code> 。</p>\n<img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220514190904009-1661448231966.png\" alt=\"image-20220514190904009\" style=\"zoom: 50%;\" />\n</li>\n<li>\n<p>检查该 bucket 是否为空</p>\n<p>如果空，就直接将键值对添加到该 bucket 上，然后返回 null。</p>\n<blockquote>\n<p>添加情况 1</p>\n</blockquote>\n<p>如果该 bucket 不为空，执行下一步。</p>\n</li>\n<li>\n<p>处理哈希冲突，采用链表或红黑树的方式将多个键值对存储在同一个槽中</p>\n<p>如果该槽中存在一个键值对 (k,v)， <code>其键k的hash与当前键key的hash相同</code> ，<strong>并且</strong>， <code>key.equals(k)返回ture</code> ，则将该键值对的值 v 替换为当前值 value，并返回旧值 v。</p>\n<blockquote>\n<p>修改 value</p>\n</blockquote>\n<p>若二者的 <code>hash不相同</code> ，<strong>或者</strong>， <code>key.equals(k)返回false</code> ，则将当前键值对先采用 <code>单向链式存储（尾插法）</code> 的方式添加到该 bucket 链表中，（当一个 bucket 中的链表长度超过一定 <code>阈值</code> （默认为 8）时，Java 会将该链表转化为 <code>红黑树</code> 。这是因为链表的查找时间复杂度是 O (n)，而<font color='red'>红黑树的查找时间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></font>，所以对于较长的链表，使用红黑树可以<font color='red'>提高查询效率</font>。）</p>\n<blockquote>\n<p>添加情况 2、3</p>\n</blockquote>\n</li>\n<li>\n<p>扩容</p>\n<p>当 HashMap 中的元素数量达到一定 <code>阈值</code> （即负载因子与容量的乘积）时会触发扩容操作，步骤如下：</p>\n<ul>\n<li>创建一个 <code>2倍长度的新数组</code></li>\n<li>将原数组中的元素 <code>重新计算哈希值</code> ，并 <code>重新分配</code> 到新数组中，会导致元素在新数组中的 <code>位置可能发生变化</code> 。</li>\n<li><code>释放原数组的空间</code> ，将新数组设置为当前数组。</li>\n</ul>\n<p>注意：</p>\n<p>HashMap 中 <code>负载因子默认是0.75</code> ，这意味着当 HashMap 中的元素数量达到数组长度的 75% 时，就会触发扩容操作。每次扩容时，它都会将数组的长度 <code>增加一倍</code> 。</p>\n<p>由于扩容操作需要重新计算所有元素的哈希值，并将它们添加到新数组中，这个过程需要大量的时间和内存。在创建 HashMap 时，如果我们能够预估元素数量，可以通过 <code>指定初始容量</code> 来 <code>避免不必要的扩容操作</code> ，从而提高性能。</p>\n</li>\n<li>\n<p>返回结果</p>\n<p>如果添加成功，返回 <code>null</code> 。</p>\n<p>如果修改成功，返回该键对应的 <code>旧值</code> 。</p>\n</li>\n</ol>\n<h4 id=\"2-hashmap初始值16临界值12是怎么算的软力\"><a class=\"anchor\" href=\"#2-hashmap初始值16临界值12是怎么算的软力\">#</a> 2. HashMap 初始值 16，临界值 12 是怎么算的（软 ** 力）</h4>\n<p>底层源码中定义的成员变量 “ <code>默认初始容量</code> ”：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span></pre></td></tr></table></figure><p>底层源码中定义的成员变量 “ <code>默认加载因子</code> ”：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.75f</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>临界值 = 数组的长度 * 加载因子</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>newThr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">*</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16 * 0.75 = 12</span></pre></td></tr></table></figure><h4 id=\"3-hashmap长度为什么是2的幂次方国时代\"><a class=\"anchor\" href=\"#3-hashmap长度为什么是2的幂次方国时代\">#</a> 3. <mark>HashMap 长度为什么是 2 的幂次方？</mark>(国 * 时代)</h4>\n<p><strong>能保证哈希值能够均匀分布在数组中，从而减少哈希冲突</strong></p>\n<p>将 key 的哈希值 hash 映射到数组下标 i 的计算如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash</pre></td></tr></table></figure><p>其中 n 就是 HashMap 的长度，当 n 是 2 的幂次方时， <code>n-1的二进制是一个全为1的二进制数</code> 。这样，哈希值与数组长度减 1 的 <code>按位与运算</code> 结果的取值范围就在 <code>[0,table.length-1]</code>  上，对应数组的每个下标。这样可以减少哈希冲突，提高 HashMap 的性能。</p>\n<h4 id=\"4-hashmap怎么计算哈希值和索引扩容机制怎么解决hash冲突软国际-中软腾\"><a class=\"anchor\" href=\"#4-hashmap怎么计算哈希值和索引扩容机制怎么解决hash冲突软国际-中软腾\">#</a> 4. <mark>HashMap 怎么计算哈希值和索引？扩容机制？怎么解决 hash 冲突？</mark>（* 软国际、中软 * 腾）</h4>\n<pre><code>类似问题：\n&gt; HashMap key的哈希冲突了怎么做（新*股份）\n&gt; HashMap的默认大小是多少，以及扩容机制（顺*、凡*科技）\n&gt; 讲一下HashMap的扩容机制？（好实*）\n</code></pre>\n<p><strong>计算哈希值、索引</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20220514190454633-1661448231965.png\" alt=\"image-20220514190454633\" /></p>\n<p>在 HashMap 中，计算哈希值的方式是先调用键对象的 <code>hashCode()</code>  方法得到哈希值，然后再对哈希值进行一些额外的计算 <code>hash()</code> ，以增强哈希值的随机性，通过一些位运算（例如使用异或和移位等）来消除高位的影响，以此来得到最终的哈希值。</p>\n<p>计算哈希桶索引时，HashMap 会使用<u>哈希值</u>和<u>哈希桶长度减 1</u>的值进行 <code>按位与运算</code> ，得到一个<u>哈希桶索引</u>，计算公式如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash</pre></td></tr></table></figure><p><strong>扩容机制</strong></p>\n<p>当 HashMap 中的元素数量达到一定 <code>阈值</code> （即负载因子与容量的乘积）时会触发扩容操作，步骤如下：</p>\n<ul>\n<li>创建一个 <code>2倍长度的新数组</code></li>\n<li>将原数组中的元素 <code>重新计算哈希值</code> ，并 <code>重新分配</code> 到新数组中，会导致元素在新数组中的 <code>位置可能发生变化</code> 。</li>\n<li><code>释放原数组的空间</code> ，将新数组设置为当前数组。</li>\n</ul>\n<p>注意：</p>\n<p>HashMap 中 <code>负载因子默认是0.75</code> ，这意味着当 HashMap 中的元素数量达到数组长度的 75% 时，就会触发扩容操作。每次扩容时，它都会将数组的长度 <code>增加一倍</code> 。</p>\n<p>由于扩容操作需要重新计算所有元素的哈希值，并将它们添加到新数组中，这个过程需要大量的时间和内存。在创建 HashMap 时，如果我们能够预估元素数量，可以通过 <code>指定初始容量</code> 来 <code>避免不必要的扩容操作</code> ，从而提高性能。</p>\n<p><strong>处理哈希冲突</strong></p>\n<p>哈希冲突是指不同的键，其哈希值映射到同一个数组下标上。HashMap 使用 <code>链表</code> 或 <code>红黑树</code> 来存储哈希桶中的元素，以解决哈希冲突。</p>\n<ul>\n<li>\n<p>当添加一个键值对时，如果该键值对的哈希桶位置已经存在一个或多个键值对，那么 HashMap 就需要在这些键值对中查找具有相同键的键值对。</p>\n</li>\n<li>\n<p>在查找过程中，HashMap 会 <code>先比较键的哈希值</code> ，</p>\n<ul>\n<li>\n<p>如果不同，则说明这个键在哈希桶中不存在，可以将新的键值对添加到链表或红黑树中。</p>\n</li>\n<li>\n<p>如果哈希值相同，HashMap 会 <code>再比较键是否相等</code> ，</p>\n<ul>\n<li>\n<p>如果相等，则说明这个键在哈希桶中已经存在，需要用新的值替换旧的值。</p>\n</li>\n<li>\n<p>如果键不相等，则说明发生了哈希冲突，需要将新的键值对添加到链表或红黑树中。</p>\n<blockquote>\n<p>如果 <code>链表的长度超过8</code> ，且 <code>数组长度达到64</code>  时，则会将链表转化为红黑树。这是因为当链表长度较长时，查找键值对的时间复杂度可能会变为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>，而红黑树的查找时间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>，因此<font color='red'>可以提高 HashMap 的查询性能</font>。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-hashmap底层是数组链表有数组很快了为什么加链表润软件\"><a class=\"anchor\" href=\"#5-hashmap底层是数组链表有数组很快了为什么加链表润软件\">#</a> 5. HashMap 底层是数组 + 链表，有数组很快了，为什么加链表？（润 * 软件）</h4>\n<p>HashMap 底层使用链表是 <code>为了解决哈希冲突</code> 。</p>\n<p>当我们向 HashMap 中添加一个键值对时，它会先计算键的哈希值，然后根据哈希值确定这个键值对在数组中的位置。如果两个不同的键具有相同的哈希值，那么它们会被存储在同一个 bucket 中。这种情况被称为哈希冲突。</p>\n<p>为了解决哈希冲突，HashMap 会使用链表、红黑树来存储同一个 bucket 中的多个键值对。<font color='red'>每个 bucket 都可以看作是一个<u>链表的头节点</u>或<u>红黑树的根节点</u></font>。如果遇到哈希冲突，就将新的键值对<font color='red'>添加到链表或红黑树的<u>末尾</u></font>。</p>\n<p>但是，由于<font color='red'>链表和红黑树本身需要占用额外的空间</font>，因此在 HashMap 的设计中需要进行权衡。通常来说，<font color='red'>当哈希桶中的元素数量比较小时，使用链表就足够了</font>，而<font color='red'>当元素数量比较大时，使用红黑树可以更好地平衡时间和空间的开销</font>。为了提高 HashMap 的性能， <code>JDK8</code>  开始引入了一种基于 “ <code>链表和红黑树的自适应存储方式</code> ”，也就是说，</p>\n<ul>\n<li><strong><font color='red'>当链表中的元素数量超过 8 个，且数组长度达到 64 时，会将链表转换为红黑树</font></strong></li>\n<li><strong><font color='red'>当红黑树中的元素数量小于 6 个时，会将红黑树转换为链表</font></strong></li>\n</ul>\n<h4 id=\"6-hashmap为什么长度达到一定的长度要转化为红黑树度\"><a class=\"anchor\" href=\"#6-hashmap为什么长度达到一定的长度要转化为红黑树度\">#</a> 6. HashMap 为什么长度达到一定的长度要转化为红黑树（* 度）</h4>\n<pre><code>类似问题：\n&gt; HashMap为什么用红黑树（*软国际）\n</code></pre>\n<ul>\n<li>因为 <code>红黑树的增删改查操作的时间复杂度为O(logn)</code> ，比单向链表的 O (n) 效率高。</li>\n<li>可以 <code>避免出现极长的单链表</code> ，导致空间浪费，提高了空间利用率</li>\n</ul>\n<h4 id=\"7-hashmap什么时候扩充为红黑树什么时候又返回到链表汉\"><a class=\"anchor\" href=\"#7-hashmap什么时候扩充为红黑树什么时候又返回到链表汉\">#</a> 7. HashMap 什么时候扩充为红黑树，什么时候又返回到链表？（汉 *）</h4>\n<pre><code>类似问题：\n&gt; HashMap什么时候转换为红黑树（杭州*智公司）\n&gt; 当HashMap中相同hashcode值的数据超过多少时会转变成红黑树？（百*云创）\n&gt; 什么时候是数据+链表，什么时候是红黑树（*软国际）\n</code></pre>\n<p>链表 -&gt; 红黑树：当同一个 bucket 中的 <code>链表元素数量超过8</code> ，且 <code>数组长度达到64</code>  时，该 bucket 的链表需要转换为红黑树，这是为了<font color='red'>提高增删改查的性能</font>。</p>\n<p>红黑树 -&gt; 链表：当同一个 bucket 中的 <code>红黑树元素数量减少到6</code>  时，那么该 bucket 的红黑树转换回链表，这是为了<font color='red'>节省内存空间</font>。</p>\n<h4 id=\"8-在-jdk18中hashmap的数据结构与17相比有什么变化这些变化的好处在哪里海科\"><a class=\"anchor\" href=\"#8-在-jdk18中hashmap的数据结构与17相比有什么变化这些变化的好处在哪里海科\">#</a> 8. <mark>在 JDK1.8 中，HashMap 的数据结构与 1.7 相比有什么变化，这些变化的好处在哪里</mark>？（海 * 科）</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">HashMap 的变化</th>\n<th style=\"text-align:center\">JDK7</th>\n<th style=\"text-align:center\">JDK8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">table 数组类型</td>\n<td style=\"text-align:center\">Entry&lt;K,V&gt;[]</td>\n<td style=\"text-align:center\"><code>Node&lt;K,V&gt;</code> []</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">创建 HashMap 实例时</td>\n<td style=\"text-align:center\">默认初始化数组的容量是 16（饿汉式）</td>\n<td style=\"text-align:center\">没有初始化 table 数组（当首次添加映射元素时才将数组的容量初始化为 16）（ <code>懒汉式</code> ）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据结构（七上八下）</td>\n<td style=\"text-align:center\">数组 + 单向链表（ <code>头插法</code> ）</td>\n<td style=\"text-align:center\">数组 + 单向链表（ <code>尾插法</code> ） +  <code>红黑树</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">单向链表←→红黑树</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">当某个索引位置 i 上的<font color='red'>链表的长度达到 8，且数组的长度超过 64</font>时，此索引位置上的元素要从单向链表改为红黑树，<font color='orange'>将增删改查的时间复杂度从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 降到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></font>。<br/>如果索引 i 位置是红黑树的结构，当不断删除元素的情况下，<font color='red'>当前索引 i 位置上的元素的个数低于 6 时</font>，要从红黑树改为单向链表，<font color='orange'>节省内存空间</font>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">扩容条件</td>\n<td style=\"text-align:center\">size 达到 threshold，且 table [i]!=null</td>\n<td style=\"text-align:center\">size 达到 threshold，且 table [i]!=null；<br/>或者，<font color='red'>链表的长度达到 8，但数组的长度未超过 64</font></td>\n</tr>\n</tbody>\n</table>\n<p><strong>数据结构的变化</strong></p>\n<ul>\n<li>\n<p>JDK1.8 中的 HashMap 仍然使用数组和链表结构，但是 <code>当链表长度达到一定阈值时，会将链表转换成红黑树</code> ，好处：</p>\n<ul>\n<li><font color='red'>可以提高增删改查的性能</font>，因为红黑树在最坏情况也也能保证<font color='red'><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span></font>的时间复杂度</li>\n<li>可以<font color='red'>避免出现极长的单链表</font>，导致空间浪费，提高了空间利用率</li>\n</ul>\n</li>\n<li>\n<p>此外，链表的插入方法从 jdk1.7 的头插法变成了 jdk1.8 的 <code>尾插法</code> ，好处：</p>\n<ul>\n<li><font color='red'>可以避免 JDK1.7 中，并发情况下，扩容，形成环状链表，造成死循环的问题</font>。</li>\n</ul>\n</li>\n</ul>\n<p><strong>其他变化</strong></p>\n<ul>\n<li>jdk1.7 中的 Entry 内部类，在 jdk1.8 中改名为 <code>Node</code></li>\n<li>HashMap 调用无参构造器进行实例化时，在 jdk1.7 中会将数组的容量初始化为 16（饿汉式），在 jdk1.8 中不会初始化数组（懒汉式：只在首次添加元素时，才将数组容量初始化为 16），好处是：\n<ul>\n<li><font color='red'>减少内存的浪费</font>：在实例化 HashMap 对象时，如果立即初始化底层数组的大小，可能会导致数组过大或过小，从而浪费内存</li>\n</ul>\n</li>\n<li>jdk1.7 的扩容条件是 <code>size达到threshold，且table[i]!=null</code> ，jdk1.8 在此基础上增加了一个可以触发扩容操作的条件：遇到哈希冲突时，如果 <code>链表的长度达到8，但数组的长度未超过64</code> ，也需要扩容。</li>\n</ul>\n<h4 id=\"9-hashmap的get方法的原理顺\"><a class=\"anchor\" href=\"#9-hashmap的get方法的原理顺\">#</a> 9. HashMap 的 get () 方法的原理？（顺 *）</h4>\n<ol>\n<li>计算键的哈希值。</li>\n<li>使用哈希值来确定键值对在 HashMap 内部数组中的索引位置。</li>\n<li>检查该索引位置是否为空。如果为空，则返回 null。</li>\n<li>如果该索引位置不为空，则检查该位置的第一个元素是否与给定键匹配。如果匹配，则返回与该键关联的值。</li>\n<li>如果第一个元素与给定键不匹配，则遍历该位置处的链表（或红黑树），直到找到与给定键匹配的元素或到达链表末尾。</li>\n<li>如果找到匹配项，则返回与该键关联的值；否则，返回 null。</li>\n</ol>\n<h4 id=\"10-hashmap的remove方法的原理\"><a class=\"anchor\" href=\"#10-hashmap的remove方法的原理\">#</a> 10. HashMap 的 remove () 方法的原理？</h4>\n<ol>\n<li>计算键的哈希值。</li>\n<li>使用哈希值来确定键值对在 HashMap 内部数组中的索引位置。</li>\n<li>检查该索引位置是否为空。如果为空，则返回 null。</li>\n<li>如果该索引位置不为空，则检查该位置的第一个元素是否与给定键匹配。如果匹配，则删除该元素并返回与该键关联的值。</li>\n<li>如果第一个元素与给定键不匹配，则遍历该位置处的链表（或红黑树），直到找到与给定键匹配的元素或到达链表末尾。</li>\n<li>如果找到匹配项，则删除该元素并返回与该键关联的值；否则，返回 null。</li>\n</ol>\n<h3 id=\"24-hashcode和equals\"><a class=\"anchor\" href=\"#24-hashcode和equals\">#</a> 2.4 hashCode 和 equals</h3>\n<h4 id=\"1-hashcode和equals的区别海供应链管理\"><a class=\"anchor\" href=\"#1-hashcode和equals的区别海供应链管理\">#</a> 1. <mark>hashCode () 和 equals () 的区别？</mark>（海 * 供应链管理）</h4>\n<p>hashCode () 和 equals () 都是 Java 中 Object 类中定义的方法，用于 <code>判断对象是否相等</code> 。它们通常被重写，并且一起使用，用于在集合类（如 HashMap）中确定对象的唯一性。</p>\n<ul>\n<li>hashCode()： <code>根据对象的属性计算对象的哈希码值</code> ，是一个整数。哈希码值通常用于快速确定对象在集合中的位置。例如，在 HashMap 中，hashCode () 方法用于确定键值对在内部数组中的索引位置。\n<ul>\n<li><font color='red'>如果两个对象的哈希码不相等，则它们肯定不相等</font></li>\n<li>反之，<font color='red'>如果两个对象的哈希码相等，则它们不一定相等，还需要调用 equals () 进一步判断</font></li>\n</ul>\n</li>\n<li>equals()：\n<ul>\n<li><font color='cornflowerblue'>默认情况下</font>，equals () 方法 <code>比较的是两个对象的引用值</code> ，即它们是否指向同一个内存地址。</li>\n<li>但<font color='cornflowerblue'>通常被重写</font>，用于 <code>比较两个对象（的属性）是否相等</code> 。</li>\n<li>在 HashMap 中，如果两个键具有相同的哈希码值，则会调用 equals () 方法来确定它们是否真正相等。</li>\n</ul>\n</li>\n<li>二者之间有一个重要的关系：如果两个对象使用 equals () 方法比较相等，则它们必须具有相同的哈希码值。这意味着，<font color='red'>如果重写了 equals () 方法，则也必须重写 hashCode () 方法</font>，以确保它们之间的 <code>一致性</code> 。</li>\n</ul>\n<h4 id=\"2-hashcode-与-equals-生成算法-方法怎么重写阿校招\"><a class=\"anchor\" href=\"#2-hashcode-与-equals-生成算法-方法怎么重写阿校招\">#</a> 2. <mark>hashCode () 与 equals () 生成算法、方法怎么重写？</mark>（阿 * 校招）</h4>\n<p><strong>省流版</strong></p>\n<p><code>equals()判断中使用的属性，通常也都会参与到hashCode()的计算中</code> 。</p>\n<p>重写时可以借助 <code>Objects.equals</code>  和 <code>Objects.hash()</code> 。</p>\n<p><strong>详细版</strong></p>\n<p>hashCode () 方法用于返回对象的哈希码，重写该方法时需要满足以下 <code>规则</code> ：</p>\n<ul>\n<li>如果两个对象使用 equals () 方法比较返回 true，那么它们的 hashCode () 方法返回的值必须相等；</li>\n<li>如果两个对象使用 equals () 方法比较返回 false，那么它们的 hashCode () 方法返回的值可以相等，也可以不相等；</li>\n<li>如果两个对象使用 equals () 方法比较返回 false，但是它们的 hashCode () 方法返回的值相等，那么它们被称为<font color='red'>哈希冲突</font>，可能会影响散列表等数据结构的性能。</li>\n</ul>\n<p>常见的 hashCode () 方法 <code>实现方式</code> 有：</p>\n<ul>\n<li>对象的属性值的异或和；</li>\n<li>乘法因子法；</li>\n<li>幂和积法等。</li>\n</ul>\n<p>具体实现可以根据业务需求和对象的属性值来选择。</p>\n<p>equals () 方法用于比较两个对象是否相等，重写该方法时需要满足以下 <code>规则</code> ：</p>\n<ul>\n<li>自反性：对于任意非空的引用值 x，x.equals (x) 必须返回 true；</li>\n<li>对称性：对于任意非空的引用值 x 和 y，如果 x.equals (y) 返回 true，那么 y.equals (x) 也必须返回 true；</li>\n<li>传递性：对于任意非空的引用值 x、y 和 z，如果 x.equals (y) 返回 true，并且 y.equals (z) 返回 true，那么 x.equals (z) 也必须返回 true；</li>\n<li>一致性：对于任意非空的引用值 x 和 y，在对象的属性值没有改变的情况下，多次调用 x.equals (y) 的结果必须一致；</li>\n<li>对于任意非空的引用值 x，x.equals (null) 必须返回 false。</li>\n</ul>\n<p>常见的 equals () 方法 <code>实现方式</code> 有：</p>\n<ul>\n<li>比较两个对象的引用值是否相等；</li>\n<li>比较两个对象的属性值是否相等；</li>\n<li>比较两个对象的类型是否相等等。</li>\n</ul>\n<p>具体实现可以根据业务需求和对象的属性值来选择。</p>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 方式一：乘法因子法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// int result = 17;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// result = 31 * result + name.hashCode();</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// result = 31 * result + age;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// return result;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 方式二：借助 Objects.hash ()</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 判断传入的对象是否为当前对象的引用</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 判断传入的对象是否属于当前类型</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 如果传入的对象属于当前类型，则进行强制转换</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 方式一：</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// return age == person.age &amp;&amp; name.equals(person.name);</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 方式二：借助 Integer.compare ()、Objects.equals ()</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span>person<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"3-说一下equals和的区别equals相等hash值一定相等吗hash值相等equals一定相等吗南电网-上海智网络\"><a class=\"anchor\" href=\"#3-说一下equals和的区别equals相等hash值一定相等吗hash值相等equals一定相等吗南电网-上海智网络\">#</a> 3. 说一下 equals 和 == 的区别，equals 相等 hash 值一定相等吗？hash 值相等 equals 一定相等吗？（南 * 电网、上海 * 智网络）</h4>\n<p>首先， <code>==</code>  是一个运算符，而 <code>equals()</code>  是一个方法。</p>\n<p>其次，二者都可用于比较两个对象。 <code>==</code>  运算符用于比较两个对象的引用是否相等，即<strong>比较的是两个对象的内存地址</strong>，与 <code>equals()</code>  方法一样。</p>\n<p>但是 <code>equals()</code>  通常被重写，例如 String、Integer、Date 等类对 <code>equals()</code>  方法进行了重写，所以在这些类中， <code>equals()</code> <strong> 比较的是两个对象的内容</strong>。</p>\n<p>如果两个对象通过 equals () 方法比较相等，那么它们的 hash 值也应该相等。但是，如果两个对象的 hash 值相等，并不意味着它们通过 equals () 方法比较也一定相等，这是<font color='red'>因为不同的对象可能会产生相同的 hash 值</font>。</p>\n<h3 id=\"25-set集合源码相关\"><a class=\"anchor\" href=\"#25-set集合源码相关\">#</a> 2.5 Set 集合源码相关</h3>\n<h4 id=\"1-hashset存放数据的方式拓软件\"><a class=\"anchor\" href=\"#1-hashset存放数据的方式拓软件\">#</a> 1. <mark>HashSet 存放数据的方式？</mark>（拓 * 软件）</h4>\n<p>HashSet 实际上是基于 HashMap 实现的，内部有一个 HashMap 类型的成员变量，用于存储元素。当向 HashSet 中添加一个元素时，实际上是将该元素添加到 <code>HashMap的键</code> 中，而该键对应的 <code>值则是一个固定的Object对象</code> 。</p>\n<blockquote>\n<p>由于 HashMap 中的键不能重复，所以当你向 HashSet 中添加重复元素时，实际上是向 HashMap 中添加重复键，这样就能<font color='red'>保证 HashSet 中不会有重复元素</font>。此外，由于 HashMap 允许键为 null，所以<font color='red'>HashSet 也允许有 null 值</font>。</p>\n</blockquote>\n<h4 id=\"2-set是如何实现元素的唯一性湖利软件\"><a class=\"anchor\" href=\"#2-set是如何实现元素的唯一性湖利软件\">#</a> 2. Set 是如何实现元素的唯一性？（湖 ** 利软件）</h4>\n<p><strong>Set 的元素存储在 Map 的键中</strong></p>\n<p>因为 Set 实际上是基于 Map 实现的，Set 的元素实际上存储在 Map 的键中，而<font color='red'>Map 的键是唯一的，不能重复的，因此 Set 的元素是唯一的</font>。</p>\n<p><strong>Map 如何实现键的唯一性？</strong></p>\n<p>Map 接口的不同实现类使用不同的数据结构和算法来<font color='red'>保证键的唯一性</font>。</p>\n<ul>\n<li>\n<p>HashMap：依赖于 <code>键的哈希值</code> 和 <code>equals()</code> 。通过哈希值来快速定位 key 所在的位置，再通过比较函数判断 key 是否相等。因此，<font color='orange'>在使用 Map 时，我们需要保证键对象的 hashCode () 和 equals () 方法都正确实现，才能保证 Map 中的 key 唯一性</font>。</p>\n<blockquote>\n<p>例如，HashMap 是基于 <code>哈希表</code> 实现的。当你向 HashMap 中添加一个键值对时，它会根据键的哈希码值来确定该键值对在哈希表中的存储位置。如果该位置已经有一个键值对，那么 HashMap 会调用 <code>equals()</code>  方法来检查新添加的键与已有的键是否相等。如果 <code>equals()</code>  方法返回 <code>true</code> ，则新添加的键与已有的<u>键重复</u>，新添加的键值对将<u>替换</u>已有的键值对。如果 <code>equals()</code>  方法返回 <code>false</code> ，则新添加的键与已有的<u>键不重复</u>，新添加的键值对将被<u>添加</u>到哈希表中。</p>\n</blockquote>\n</li>\n<li>\n<p>TreeMap：依赖于 <code>键的自然排序</code> 或者 <code>指定的比较器</code></p>\n<blockquote>\n<p>对于 TreeMap，它是基于 <code>红黑树</code> 实现的。当你向 TreeMap 中添加一个键值对时，它<font color='red'>会根据键的自然顺序或者指定的比较器来确定该键值对在红黑树中的位置</font>。<font color='red'>如果你尝试向 TreeMap 中添加<u>重复键</u>，那么新添加的键值对将<u>不会被添加</u>到红黑树中</font>。</p>\n</blockquote>\n</li>\n</ul>\n<p>总之，Map 接口的不同实现类通过使用不同的数据结构和算法来保证键的唯一性。</p>\n<h4 id=\"3-用哪两种方式来实现集合的排序凡科技\"><a class=\"anchor\" href=\"#3-用哪两种方式来实现集合的排序凡科技\">#</a> 3. 用哪两种方式来实现集合的排序（凡 * 科技）</h4>\n<pre><code>类似问题：\n&gt; 集合怎么排序？（北京中**信科技）\n</code></pre>\n<p>在 Java 中，可以使用以下两种方式来实现集合的排序：</p>\n<ol>\n<li><font color='cornflowerblue'>自然排序</font>：<font color='red'>集合元素实现了 <code> Comparable 接口</code> ，通过重写 <code> compareTo() 方法</code> 来定义元素之间的排序关系</font>。Java 中的一些内置类型（如 Integer、String 等）已经实现了 Comparable 接口，可以直接使用自然排序。例如，可以使用 Collections.sort () 方法对实现了 Comparable 接口的 List 进行排序。</li>\n<li><font color='cornflowerblue'>定制排序</font>：使用一个比较器（Comparator）对象来定义元素之间的排序关系。<font color='red'>需要创建一个实现了 <code> Comparator 接口</code> 的比较器对象，并实现了 <code> compare() 方法</code> 来定义元素之间的排序关系</font>。通过<font color='red'>在集合类的构造器的排序方法参数中传入比较器对象</font>，可以实现自定义排序。例如，可以使用 Collections.sort () 方法对实现了 Comparator 接口的 List 进行排序。</li>\n</ol>\n",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC13%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E6%B3%9B%E5%9E%8B%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC13%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E6%B3%9B%E5%9E%8B%EF%BC%89/",
            "title": "宋红康_第13章：泛型",
            "date_published": "2023-11-12T03:06:50.167Z",
            "content_html": "<h1 id=\"第13章随堂复习与企业真题泛型\"><a class=\"anchor\" href=\"#第13章随堂复习与企业真题泛型\">#</a> 第 13 章：随堂复习与企业真题（泛型）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-泛型的理解\"><a class=\"anchor\" href=\"#1-泛型的理解\">#</a> 1. 泛型的理解</h3>\n<ul>\n<li><E> ，泛型参数，使用引用数据类型来赋值。</li>\n</ul>\n<h3 id=\"2-泛型在集合-比较器中的使用重点\"><a class=\"anchor\" href=\"#2-泛型在集合-比较器中的使用重点\">#</a> 2. <mark>泛型在集合、比较器中的使用（重点）</mark></h3>\n<ul>\n<li>集合：ArrayList、HashMap、Iterator</li>\n<li>比较器：Comparable、Comparator</li>\n</ul>\n<h3 id=\"3-自定义泛型类泛型接口-泛型方法熟悉\"><a class=\"anchor\" href=\"#3-自定义泛型类泛型接口-泛型方法熟悉\">#</a> 3. 自定义泛型类 / 泛型接口、泛型方法（熟悉）</h3>\n<ul>\n<li>class Order<T></li>\n<li>public <E> 返回值类型 方法名 (形参列表){}</li>\n<li>具体的细节，见 IDEA 中的笔记。</li>\n</ul>\n<h3 id=\"4-泛型在继承上的体现\"><a class=\"anchor\" href=\"#4-泛型在继承上的体现\">#</a> 4. 泛型在继承上的体现</h3>\n<pre><code>1. 类SuperA是类A的父类，则G&lt;SuperA&gt; 与 G&lt;A&gt;的关系：G&lt;SuperA&gt; 和 G&lt;A&gt;是并列的两个类，没有任何子父类的关系。\n\n比如：ArrayList&lt;Object&gt; 、ArrayList&lt;String&gt;没有关系\n\n2. 类SuperA是类A的父类或接口，SuperA&lt;G&gt; 与 A&lt;G&gt;的关系：SuperA&lt;G&gt; 与A&lt;G&gt; 有继承或实现的关系。\n即A&lt;G&gt;的实例可以赋值给SuperA&lt;G&gt;类型的引用（或变量）\n\n比如：List&lt;String&gt; 与 ArrayList&lt;String&gt;\n</code></pre>\n<h3 id=\"5-通配符的使用\"><a class=\"anchor\" href=\"#5-通配符的使用\">#</a> 5. <mark>通配符的使用</mark></h3>\n<ul>\n<li>? 的使用 （重点）\n<ul>\n<li>以集合为例：可以读取数据、不能写入数据（例外：null）</li>\n</ul>\n</li>\n<li>? extends A\n<ul>\n<li>以集合为例：可以读取数据、不能写入数据（例外：null）</li>\n</ul>\n</li>\n<li>? super A\n<ul>\n<li>以集合为例：可以读取数据、可以写入 A 类型或 A 类型子类的数据（例外：null）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h4 id=\"1-java-的泛型是什么有什么好处和优点jdk-不同版本的泛型有什么区别软动力\"><a class=\"anchor\" href=\"#1-java-的泛型是什么有什么好处和优点jdk-不同版本的泛型有什么区别软动力\">#</a> 1. <mark>Java 的泛型是什么？有什么好处和优点？JDK 不同版本的泛型有什么区别？</mark>（软 * 动力）</h4>\n<p>答：</p>\n<p>泛型的核心思想：把集合中的内容限制为一个特定的数据类型（虽然暂时未知）</p>\n<p>泛型的概念：Java 的泛型是  <code>JDK 1.5</code>  的新特性，泛型的本质是参数化类型，即 <code>不确定的类型</code> ，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为 <code>泛型类</code> 、 <code>泛型接口</code> 、 <code>泛型方法</code> 。</p>\n<p>泛型的优点：包括 <code>提高类型安全</code> 和 <code>消除强制类型转换</code> 。</p>\n<ul>\n<li>泛型的主要目标是提高 Java 程序的类型安全。通过知道使用泛型定义的变量的类型限制，编译器可以在一个高得多的程度上验证类型假设。没有泛型，这些假设就只存在于程序员的头脑中（或者如果幸运的话，还存在于代码注释中）</li>\n<li>泛型的一个附带好处是，消除源代码中的许多强制类型转换。这使得代码更加可读，并且减少了出错机会。</li>\n</ul>\n<p>JDK 不同版本之间泛型的区别：</p>\n<ul>\n<li>jdk7.0 新特性：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型推断</span></pre></td></tr></table></figure><ul>\n<li>后续版本的新特性：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> comparator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 类型推断</span></pre></td></tr></table></figure><h4 id=\"2-说说你对泛型的了解软国际\"><a class=\"anchor\" href=\"#2-说说你对泛型的了解软国际\">#</a> 2. 说说你对泛型的了解（* 软国际）</h4>\n<p>泛型是  <code>JDK 1.5</code>  的新特性，它允许在定义类、接口和方法时使用类型参数。类型参数提供了一种方法来 <code>重用相同的代码，处理不同类型的对象</code> 。泛型的主要优点是 <code>提高类型安全</code> 和 <code>消除强制类型转换</code> 。</p>\n<p>例如，在没有泛型之前，如果您想编写一个可以接受任何类型对象的列表，您可能会定义一个 List 类，其中元素被存储为 Object 类型。当您从列表中检索元素时，您必须将其强制转换为正确的类型。这不仅容易出错，而且还会使代码难以阅读。</p>\n<p>使用泛型创建 <code>泛型类</code> ，您可以定义一个 List 类，其中元素的类型由类型参数指定。这样，当您从列表中检索元素时，就不需要进行强制类型转换。编译器会自动检查类型，并在必要时插入强制类型转换。</p>\n<p>泛型还可以用于创建 <code>泛型方法</code> 和 <code>泛型接口</code> 。它们提供了一种灵活的方法来重用代码，并且可以与不同类型的对象一起使用。</p>\n",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC12%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC12%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%89/",
            "title": "宋红康_第12章：集合框架",
            "date_published": "2023-11-12T03:06:50.157Z",
            "content_html": "<h1 id=\"第12章随堂复习与企业真题集合框架\"><a class=\"anchor\" href=\"#第12章随堂复习与企业真题集合框架\">#</a> 第 12 章：随堂复习与企业真题（集合框架）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-数组存储数据方面的特点和弊端\"><a class=\"anchor\" href=\"#1-数组存储数据方面的特点和弊端\">#</a> 1. 数组存储数据方面的特点和弊端</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">数组</th>\n<th style=\"text-align:center\">集合</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">长度</td>\n<td style=\"text-align:center\">长度固定</td>\n<td style=\"text-align:center\">动态长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可存储的元素类型</td>\n<td style=\"text-align:center\">基本数据类型、引用数据类型</td>\n<td style=\"text-align:center\">引用数据类型 / 映射</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">元素类型要求</td>\n<td style=\"text-align:center\">元素的类型必须相同</td>\n<td style=\"text-align:center\">元素的类型可以不同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">是否连续存储</td>\n<td style=\"text-align:center\">连续存储</td>\n<td style=\"text-align:center\">非连续存储</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">元素特点</td>\n<td style=\"text-align:center\">有序、可重复</td>\n<td style=\"text-align:center\">List：有序、可重复；Set：无序、不可重复；Map：无序、不可重复；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">查找速度</td>\n<td style=\"text-align:center\">快（通过索引值，复杂度为 O (1)）</td>\n<td style=\"text-align:center\">慢（复杂度为 O (n)）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">增、删、插速度</td>\n<td style=\"text-align:center\">慢</td>\n<td style=\"text-align:center\">快</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">举例</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">List、Set、Map</td>\n</tr>\n</tbody>\n</table>\n<pre><code>   数组存储多个数据方面的特点：\n   &gt; 数组一旦初始化，其长度就是确定的。\n   &gt; 数组中的多个元素是依次紧密排列的，有序的，可重复的\n   &gt; (优点) 数组一旦初始化完成，其元素的类型就是确定的。不是此类型的元素，就不能添加到此数组中。\n      int[] arr = new int[10];\n      arr[0] = 1;\n      arr[1] = &quot;AA&quot;;//编译报错\n\n      Object[] arr1 = new Object[10];\n      arr1[0] = new String();\n      arr1[1] = new Date();\n   &gt; (优点)元素的类型既可以是基本数据类型，也可以是引用数据类型。\n\n   数组存储多个数据方面的弊端：\n   &gt; 数组一旦初始化，其长度就不可变了。\n   &gt; 数组中存储数据特点的单一性。对于无序的、不可重复的场景的多个数据就无能为力了。\n   &gt; 数组中可用的方法、属性都极少。具体的需求，都需要自己来组织相关的代码逻辑。\n   &gt; 针对于数组中元素的删除、插入操作，性能较差。\n</code></pre>\n<h3 id=\"2-集合框架概述\"><a class=\"anchor\" href=\"#2-集合框架概述\">#</a> 2. 集合框架概述</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20231112105809219.png\" alt=\"集合框架概述\" /></p>\n<pre><code>java.util.Collection:存储一个一个的数据\n    |-----子接口：List:存储有序的、可重复的数据 (&quot;动态&quot;数组)\n           |---- ArrayList(主要实现类)、LinkedList、Vector\n\n    |-----子接口：Set:存储无序的、不可重复的数据(高中学习的集合)\n           |---- HashSet(主要实现类)、LinkedHashSet、TreeSet\n\n\njava.util.Map:存储一对一对的数据(key-value键值对，(x1,y1)、(x2,y2) --&gt; y=f(x),类似于高中的函数)\n    |---- HashMap(主要实现类)、LinkedHashMap、TreeMap、Hashtable、Properties\n</code></pre>\n<pre><code>学习的程度把握：\n层次1：针对于具体特点的多个数据，知道选择相应的适合的接口的主要实现类，会实例化，会调用常用的方法。\n层次2：区分接口中不同的实现类的区别。\n*****************\n层次3：① 针对于常用的实现类，需要熟悉底层的源码 ② 熟悉常见的数据结构 （第14章讲）\n</code></pre>\n<h3 id=\"3-collection的常用方法\"><a class=\"anchor\" href=\"#3-collection的常用方法\">#</a> 3. Collection 的常用方法</h3>\n<h4 id=\"31-常用方法\"><a class=\"anchor\" href=\"#31-常用方法\">#</a> 3.1 常用方法</h4>\n<pre><code>add(Object obj)\naddAll(Collection coll)\nclear()\nisEmpty()\nsize()\ncontains(Object obj)\ncontainsAll(Collection coll)\nretainAll(Collection coll)\nremove(Object obj)\nremoveAll(Collection coll)\nhashCode()\nequals()\ntoArray()\n**************\niterator() ---&gt; 引出了迭代器接口\n</code></pre>\n<pre><code>向Collection中添加元素的要求：\n&gt; 要求元素所属的类一定要重写equals()!\n</code></pre>\n<pre><code>集合与数组的相互转换：\n集合 ---&gt; 数组：toArray()\n数组 ---&gt; 集合：调用Arrays的静态方法asList(Object ... objs)，返回一个List\n</code></pre>\n<h4 id=\"32-迭代器接口\"><a class=\"anchor\" href=\"#32-迭代器接口\">#</a> 3.2 迭代器接口</h4>\n<ul>\n<li>设计模式的一种</li>\n<li>迭代器不负责数据的存储；负责对集合类的遍历</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 如何获取迭代器<span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">)</span>对象？</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Iterator</span> iterator <span class=\"token operator\">=</span> coll<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span> 如何实现遍历<span class=\"token punctuation\">(</span>代码实现<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//next ():①指针下移 ② 将下移以后集合位置上的元素返回</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"4-collection的子接口list\"><a class=\"anchor\" href=\"#4-collection的子接口list\">#</a> 4. Collection 的子接口：List</h3>\n<img data-src=\"https://gitee.com/jayhee/picture-bed/raw/master/img/image-20220407203244029.png\" alt=\"image-20220407203244029\" style=\"zoom: 67%;\" />\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">List 接口的实现类</th>\n<th style=\"text-align:center\"><em>ArrayList</em></th>\n<th style=\"text-align:center\">LinkedList</th>\n<th style=\"text-align:center\"><s>Vector</s></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">地位</td>\n<td style=\"text-align:center\">主要实现类</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">古老实现类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">底层实现</td>\n<td style=\"text-align:center\">Object 数组，但可以扩容</td>\n<td style=\"text-align:center\"><font color='red'>双向链表</font></td>\n<td style=\"text-align:center\">Object 数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">特点</td>\n<td style=\"text-align:center\">线程不安全、效率高</td>\n<td style=\"text-align:center\">线程不安全</td>\n<td style=\"text-align:center\"><font color='red'>线程安全</font>、效率低</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">使用场景</td>\n<td style=\"text-align:center\"><font color='red'>频繁追加、查找数据</font></td>\n<td style=\"text-align:center\"><font color='red'>频繁插入、删除数据</font></td>\n<td style=\"text-align:center\">避免使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">说明</td>\n<td style=\"text-align:center\">对于频繁访问列表中的某一个元素，只需要在列表末尾进行添加和删除元素操作的情况下</td>\n<td style=\"text-align:center\">元素是通过指针相互连接的，在插入 / 删除元素时，只需要改动前后元素的指针即可</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>常用方法</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>小结：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    增</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span> coll<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    删</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    改</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> ele<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    查</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    插</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> ele<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collection</span> eles<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    长度</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    遍历</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> ：使用迭代器进行遍历</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        增强<span class=\"token keyword\">for</span>循环</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        一般的<span class=\"token keyword\">for</span>循环</pre></td></tr></table></figure><pre><code>List及其实现类特点\njava.util.Collection:存储一个一个的数据\n    |-----子接口：List:存储有序的、可重复的数据 (&quot;动态&quot;数组)\n           |---- ArrayList:List的主要实现类；线程不安全的、效率高；底层使用Object[]数组存储\n                           在添加数据、查找数据时，效率较高；在插入、删除数据时，效率较低\n           |---- LinkedList:底层使用双向链表的方式进行存储；在对集合中的数据进行频繁的删除、插入操作时，建议\t\t\t\t\t\t\t使用此类在插入、删除数据时，效率较高；在添加数据、查找数据时，效率较低；\n           |---- Vector:List的古老实现类；线程安全的、效率低；底层使用Object[]数组存储\n\n[面试题] ArrayList、Vector的区别？  ArrayList、LinkedList的区别？\n</code></pre>\n<h3 id=\"5-collection的子接口set\"><a class=\"anchor\" href=\"#5-collection的子接口set\">#</a> 5. Collection 的子接口：Set</h3>\n<img data-src=\"https://gitee.com/jayhee/picture-bed/raw/master/img/image-20220407203244029.png\" alt=\"image-20220407203244029\" style=\"zoom: 67%;\" />\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Set 接口的实现类</th>\n<th style=\"text-align:center\"><em>HashSet</em></th>\n<th style=\"text-align:center\">LinkedHashSet</th>\n<th style=\"text-align:center\">TreeSet</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">地位</td>\n<td style=\"text-align:center\">主要实现类</td>\n<td style=\"text-align:center\">HashSet 的子类</td>\n<td style=\"text-align:center\">了解即可</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">底层实现（存储在 key 中）</td>\n<td style=\"text-align:center\">HashMap</td>\n<td style=\"text-align:center\">LinkedHashMap</td>\n<td style=\"text-align:center\">TreeMap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据结构</td>\n<td style=\"text-align:center\">数组 + 单向链表 + 红黑树</td>\n<td style=\"text-align:center\">数组 + 单向链表 + 红黑树 + <font color='red'>双向链表</font></td>\n<td style=\"text-align:center\">红黑树</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">对添加的元素的要求</td>\n<td style=\"text-align:center\">所在类要<font color='orange'>重写 <code>equals()</code>  和 <code>hashCode()</code> </font>，同时要求二者保持一致性</td>\n<td style=\"text-align:center\">与 HashSet 相同</td>\n<td style=\"text-align:center\"><font color='red'><strong>属于同一个类</strong></font>，且要求<font color='orange'>该类实现 <code>Comparable接口</code> 并重写 <code>compareTo(Object obj)</code> ，或者定义一个 <code>Comparator接口</code> 的实现类实例，并重写 <code>compare(Object o1,Object o2)</code> ，将实例作为参数传递给 TreeSet 的构造器</font></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">遍历顺序</td>\n<td style=\"text-align:center\">与添加顺序不同</td>\n<td style=\"text-align:center\">与添加顺序相同（得益于双向链表）</td>\n<td style=\"text-align:center\"><font color='red'>按照指定属性的大小顺序</font></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">判断两个元素相等的标准</td>\n<td style=\"text-align:center\"><font color='red'> <code>hashCode()</code>  返回的哈希值相等，且 <code>equals()</code>  返回 true</font></td>\n<td style=\"text-align:center\">与 HashSet 相同</td>\n<td style=\"text-align:center\">两个对象通过 <font color='red'> <code>compareTo(Object obj) 或compare(Object o1,Object o2)</code>  方法的返回值为 0</font></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">特点</td>\n<td style=\"text-align:center\"><font color='red'>线程不安全</font>，元素可以是 null</td>\n<td style=\"text-align:center\"><font color='red'> <code>插入性能略低</code> 于 HashSet，但在 <code>迭代访问</code>  Set 里的全部元素时有很好的性能</font></td>\n<td style=\"text-align:center\">可以实现<font color='red'>自然排序、定制排序</font></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Set 中的常用的方法都是 Collection 中声明的方法，<font color='red'>没有新增的方法</font></li>\n<li>常见的实现类的对比</li>\n</ul>\n<pre><code>java.util.Collection:存储一个一个的数据\n    |-----子接口：Set:存储无序的、不可重复的数据(高中学习的集合)\n           |---- HashSet：主要实现类；底层使用的是HashMap，即使用数组+单向链表+红黑树结构进行存储。（jdk8中）\n                |---- LinkedHashSet：是HashSet的子类；在现有的数组+单向链表+红黑树结构的基础上，又添加了\n                                     一组双向链表，用于记录添加元素的先后顺序。即：我们可以按照添加元素的顺\t\t\t\t\t\t\t\t\t序实现遍历。便于频繁的查询操作。\n           |---- TreeSet：底层使用红黑树存储。可以按照添加的元素的指定的属性的大小顺序进行遍历。\n</code></pre>\n<ul>\n<li>难点： Set 中无序性、不可重复性的理解（以 HashSet 及其子类为例说明）</li>\n</ul>\n<pre><code>&gt;无序性： != 随机性。\n         添加元素的顺序和遍历元素的顺序不一致,是不是就是无序性呢？ No!\n         到底什么是无序性？与添加的元素的位置有关，不像ArrayList一样是依次紧密排列的。\n         这里是根据添加的元素的哈希值，计算的其在数组中的存储位置。此位置不是依次排列的，表现为无序性。\n\n&gt;不可重复性：添加到Set中的元素是不能相同的。\n          比较的标准，需要判断hashCode()得到的哈希值以及equals()得到的boolean型的结果。\n          哈希值相同且equals()返回true，则认为元素是相同的。\n</code></pre>\n<pre><code>添加到HashSet/LinkedHashSet中元素的要求:\n&gt;要求元素所在的类要重写两个方法：equals() 和 hashCode()。\n&gt;同时，要求equals() 和 hashCode()要保持一致性！我们只需要在IDEA中自动生成两个方法的重写即可，即能保证两个方法的一致性。\n</code></pre>\n<ul>\n<li>了解 TreeSet 的使用</li>\n</ul>\n<h3 id=\"6-map接口\"><a class=\"anchor\" href=\"#6-map接口\">#</a> 6. Map 接口</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230402211251010.png\" alt=\"image-20230402211251010\" /></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Map 接口的实现类</th>\n<th style=\"text-align:center\"><em>HashMap</em></th>\n<th style=\"text-align:center\">LinkedHashMap</th>\n<th style=\"text-align:center\">TreeMap</th>\n<th style=\"text-align:center\"><s>Hashtable</s></th>\n<th style=\"text-align:center\">Properties</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">地位</td>\n<td style=\"text-align:center\">主要实现类</td>\n<td style=\"text-align:center\">HashMap 的子类</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">古老实现类</td>\n<td style=\"text-align:center\"><s>Hashtable</s> 的子类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">底层实现</td>\n<td style=\"text-align:center\">哈希表</td>\n<td style=\"text-align:center\">哈希表 + <font color='red'>双向链表</font></td>\n<td style=\"text-align:center\">红黑树</td>\n<td style=\"text-align:center\">哈希表</td>\n<td style=\"text-align:center\">哈希表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据结构</td>\n<td style=\"text-align:center\">一维数组 + 单向链表（+ 红黑树）</td>\n<td style=\"text-align:center\">一维数组 + 单向链表（+ 红黑树） + <font color='red'>双向链表</font></td>\n<td style=\"text-align:center\">红黑树</td>\n<td style=\"text-align:center\">一维数组 + 单向链表</td>\n<td style=\"text-align:center\">一维数组 + 单向链表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">键、值是否允许为 null</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\"><font color='red'>键不能为 null</font>，值可以为 null</td>\n<td style=\"text-align:center\">键和值都不能为 null</td>\n<td style=\"text-align:center\">键和值都不能为 null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">是否线程安全</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\"><font color='red'>是，因此效率低</font></td>\n<td style=\"text-align:center\"><font color='red'>是，因此效率低</font></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">特点</td>\n<td style=\"text-align:center\">查找、插入、删除速度快，但不保证元素的顺序</td>\n<td style=\"text-align:center\">保证元素的<font color='red'>插入 / 访问顺序</font></td>\n<td style=\"text-align:center\"><font color='red'>可以按照<strong> key 中的指定属性</strong>的大小顺序进行遍历</font>：①自然排序；②定制排序</td>\n<td style=\"text-align:center\"><font color='red'>线程安全</font>，效率低</td>\n<td style=\"text-align:center\"><font color='red'>键和值都是 String 类型</font></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">性能</td>\n<td style=\"text-align:center\">①<font color='red'>查找、插入、删除速度快</font>；②迭代遍历速度慢（因为和容量有关，需要遍历底层数组，以及每个数组元素对应的链表 / 红黑树，数组的长度就是 HashMap 的容量）</td>\n<td style=\"text-align:center\">①<font color='red'>插入、删除速度慢</font>；②迭代遍历比 HashMap 快（因为只和实际数据有关，和容量无关）</td>\n<td style=\"text-align:center\">查找、插入、删除速度慢（<font color='red'>因为要维护红黑树的平衡、顺序</font>）</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">内存</td>\n<td style=\"text-align:center\">占用大，保存数组</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">占用小，保存节点</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">使用场景</td>\n<td style=\"text-align:center\">快速的查找和插入，不要求元素的顺序</td>\n<td style=\"text-align:center\">需要保持元素的插入顺序或者访问顺序</td>\n<td style=\"text-align:center\">适用于需要<font color='red'>有序</font>的键值对集合</td>\n<td style=\"text-align:center\">适用于需要线程安全的场景</td>\n<td style=\"text-align:center\">以键值对的方式存储<font color='red'>配置信息</font></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">补充说明</td>\n<td style=\"text-align:center\"><font color='red'>在 JDK8 引入红黑树</font></td>\n<td style=\"text-align:center\">双向链表: <font color='red'>记录元素的添加顺序</font></td>\n<td style=\"text-align:center\"><font color='red'>①自然排序</font>（key 所在类实现了 Comparable 接口）；<font color='red'>②定制排序</font>（在创建 TreeMap 时传入 Comparator 对象）；</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">要求 key</td>\n<td style=\"text-align:center\"><font color='red'>key 所在类要重写 <code>hashCode()</code>  和 <code>equals()</code> </font></td>\n<td style=\"text-align:center\">与 HashMap 相同</td>\n<td style=\"text-align:center\"><font color='red'>key 必须是同一个类的对象</font></td>\n<td style=\"text-align:center\">与 HashMap 相同</td>\n<td style=\"text-align:center\">key 是 String 类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">要求 value</td>\n<td style=\"text-align:center\"><font color='red'>value 所在类要重写 <code>equals()</code> </font></td>\n<td style=\"text-align:center\">与 HashMap 相同</td>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">与 HashMap 相同</td>\n<td style=\"text-align:center\">value 是 String 类</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>常用的方法</li>\n</ul>\n<pre><code>增：\n    put(Object key,Object value)\n    putAll(Map m)\n删：\n    Object remove(Object key)\n改：\n    put(Object key,Object value)\n    putAll(Map m)\n查：\n    Object get(Object key)\n长度：\n    size()\n遍历：\n   遍历key集：Set keySet()\n   遍历value集：Collection values()\n   遍历entry集：Set entrySet()\n</code></pre>\n<ul>\n<li>常用的实现类</li>\n</ul>\n<pre><code>java.util.Map:存储一对一对的数据(key-value键值对，(x1,y1)、(x2,y2) --&gt; y=f(x),类似于高中的函数)\n    |---- HashMap:主要实现类;线程不安全的，效率高;可以添加null的key和value值;底层使用数组+单向链表+红黑树结构存储（jdk8）\n        |---- LinkedHashMap:是HashMap的子类；在HashMap使用的数据结构的基础上，增加了一对双向链表，用于记录添加的元素的先后顺序，进而我们在遍历元素时，就可以按照添加的顺序显示。开发中，对于频繁的遍历操作，建议使用此类。\n    |---- TreeMap:底层使用红黑树存储;可以按照添加的key-value中的key元素的指定的属性的大小顺序进行遍历。需要考虑使用①自然排序 ②定制排序。\n    |---- Hashtable:古老实现类;线程安全的，效率低;不可以添加null的key或value值;底层使用数组+单向链表结构存储（jdk8）\n        |---- Properties:其key和value都是String类型。常用来处理属性文件。\n\n\n[面试题] 区别HashMap和Hashtable、区别HashMap和LinkedHashMap、HashMap的底层实现（① new HashMap() ② put(key,value)）\n</code></pre>\n<pre><code>HashMap中元素的特点:\n&gt; HashMap中的所有的key彼此之间是不可重复的、无序的。所有的key就构成一个Set集合。---&gt;key所在的类要重写hashCode()和equals()\n&gt; HashMap中的所有的value彼此之间是可重复的、无序的。所有的value就构成一个Collection集合。---&gt;value所在的类要重写equals()\n&gt; HashMap中的一个key-value,就构成了一个entry。\n&gt; HashMap中的所有的entry彼此之间是不可重复的、无序的。所有的entry就构成了一个Set集合。\n</code></pre>\n<ul>\n<li>\n<p>（了解）TreeMap 的使用</p>\n</li>\n<li>\n<p>（重要）Properties 的使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PropertiesTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 注意：因为设计到流的操作，为了确保流能关闭，建议使用 try-catch-finally</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 方式 1：数据和代码耦合度高；如果修改的话，需要重写的编译代码、打包发布，繁琐</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//        String name = \"Tom\";</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//        String password = \"abc123\";</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 代码：用于操作 name,password</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 方式 2：将数据封装到具体的配置文件中，在程序中读取配置文件中的信息。实现了</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 数据和代码的解耦；由于我们没有修改代码，就省去了重新编译和打包的过程。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意，要提前创建好</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//        System.out.println(file.getAbsolutePath());</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Properties</span> pros <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        pros<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>fis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 加载流中的文件中的数据</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 读取数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> pros<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">String</span> pwd <span class=\"token operator\">=</span> pros<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> pwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"7-collections工具类的使用\"><a class=\"anchor\" href=\"#7-collections工具类的使用\">#</a> 7. Collections 工具类的使用</h3>\n<pre><code>区分Collection 和 Collections\nCollection：集合框架中的用于存储一个一个元素的接口，又分为List和Set等子接口。\nCollections：用于操作集合框架的一个工具类。此时的集合框架包括：Set、List、Map\n</code></pre>\n<ul>\n<li>熟悉常用的 Collections 中的方法即可。</li>\n</ul>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"21-集合概述\"><a class=\"anchor\" href=\"#21-集合概述\">#</a> 2.1 集合概述</h3>\n<h4 id=\"1-listsetmap是否继承自collection接口北京中译咨询-思贸易\"><a class=\"anchor\" href=\"#1-listsetmap是否继承自collection接口北京中译咨询-思贸易\">#</a> 1. List，Set，Map 是否继承自 collection 接口？（北京中 * 译咨询、思 * 贸易）</h4>\n<p>Map 不是。</p>\n<h4 id=\"2-说说listsetmap的区别民银行\"><a class=\"anchor\" href=\"#2-说说listsetmap的区别民银行\">#</a> 2. 说说 List,Set,Map 的区别 (民 * 银行)</h4>\n<pre><code>类似问题：\n&gt; Map与Set、List的区别（纬*）\n</code></pre>\n<p>List、Set 是存储<font color='red'>单列数据</font>集合，都继承与 Collection 接口。Map 是存储<font color='red'>键值对</font>这样的<font color='red'>双列数据</font>的集合，是个独立接口。</p>\n<p>List 中存储的数据是有序的，可以是重复的。</p>\n<p>Set 中存储的数据是无序的，且不允许重复。</p>\n<p>Map 中存储的数据是无序的，他的键是不允许重复的，值是可以重复的。</p>\n<h4 id=\"3-写出list-map-set接口的实现类并说出其特点华为\"><a class=\"anchor\" href=\"#3-写出list-map-set接口的实现类并说出其特点华为\">#</a> 3. <mark>写出 list、map、set 接口的实现类，并说出其特点</mark>（华 ** 为）</h4>\n<pre><code>类似问题：\n&gt; 集合有哪些， 各自有哪些特点， 各自的API有哪些？（湖**利软件）\n&gt; List Map Set三个接口在存储元素时个有什么特点（*软）\n</code></pre>\n<ul>\n<li>List 接口的实现类\n<ul>\n<li>ArrayList\n<ul>\n<li>动态数组，可扩容的 Object 数组</li>\n<li>支持随机访问元素，适用于频繁访问元素的场景</li>\n<li>插入和删除操作效率较低</li>\n</ul>\n</li>\n<li>LinkedList\n<ul>\n<li>双向链表</li>\n<li>随机访问元素效率较低</li>\n<li>支持快速的插入和删除操作，适用于频繁插入和删除元素的场景</li>\n</ul>\n</li>\n<li><s>Vector</s>\n<ul>\n<li>与 ArrayList 类似，底层也是可扩容的 Object 数组</li>\n<li>线程安全，支持同步访问，也因此效率低，不适用于高并发场景</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Set 接口的实现类\n<ul>\n<li>HashSet\n<ul>\n<li>哈希表</li>\n<li>不保证元素的顺序</li>\n</ul>\n</li>\n<li>LinkedHashSet\n<ul>\n<li>哈希表 + 双向链表</li>\n<li>保证元素有序</li>\n</ul>\n</li>\n<li>TreeSet\n<ul>\n<li>红黑树</li>\n<li>要求元素属于同一个类</li>\n<li>可以按照指定属性的大小顺序进行遍历</li>\n<li>可以实现自然排序 / 定制排序</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Map 接口的实现类\n<ul>\n<li>HashMap\n<ul>\n<li>哈希表</li>\n<li>快速的查找和插入，不保证元素的顺序</li>\n</ul>\n</li>\n<li>LinkedHashMap\n<ul>\n<li>哈希表 + 双向链表</li>\n<li>保证元素有序</li>\n</ul>\n</li>\n<li>TreeMap\n<ul>\n<li>红黑树</li>\n<li>要求 key 都属于同一个类</li>\n<li>可以按照<strong> key 中的指定属性</strong>的大小顺序进行遍历</li>\n<li>适用于需要<font color='red'>有序</font>的键值对集合</li>\n</ul>\n</li>\n<li>Hashtable\n<ul>\n<li>哈希表</li>\n<li>线程安全</li>\n</ul>\n</li>\n<li>Properties\n<ul>\n<li>哈希表</li>\n<li><font color='red'>键和值都是 String 类型</font></li>\n<li>适用于以键值对的方式存储<font color='red'>配置信息</font></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-常见集合类的区别和适用场景饿\"><a class=\"anchor\" href=\"#4-常见集合类的区别和适用场景饿\">#</a> 4. <mark>常见集合类的区别和适用场景</mark>（饿 **）</h4>\n<p>Java 中常见的集合类有 List、Set、Map。</p>\n<p>区别（元素特点）：</p>\n<ul>\n<li>List 中的元素是有序，可重复的；</li>\n<li>Set 中的元素是无序，不可重复的；</li>\n<li>Map 是由键值对组成的，键不可以重复，值可以重复。</li>\n</ul>\n<p>区别（实现类的底层数据结构）：</p>\n<ul>\n<li>\n<p>List 的实现类</p>\n<ul>\n<li>ArrayList 是一个动态数组</li>\n<li>LinkedList 是一个双向链表</li>\n<li>Vector 是一个线程安全的动态数组</li>\n</ul>\n</li>\n<li>\n<p>Set 的实现类</p>\n<ul>\n<li>HashSet 是基于哈希表实现的</li>\n<li>LinkedHashSet 是基于哈希表、双向链表实现的</li>\n<li>TreeSet 是基于红黑树实现的</li>\n</ul>\n</li>\n<li>\n<p>Map 的实现类</p>\n<ul>\n<li>HashMap 是基于哈希表实现的</li>\n<li>LinkedHashMap 是基于哈希表、双向链表实现的</li>\n<li>TreeMap 是基于红黑树实现的</li>\n</ul>\n</li>\n</ul>\n<p>适用场景：</p>\n<ul>\n<li>\n<p>List</p>\n<ul>\n<li>ArrayList：需要<font color='red'>频繁访问元素</font>时使用</li>\n<li>LinkedList：需要<font color='red'>频繁插入或删除元素</font>时使用</li>\n<li>Vector：需要<font color='red'>线程安全</font>时使用</li>\n</ul>\n</li>\n<li>\n<p>Set</p>\n<ul>\n<li>HashSet：需要<font color='red'>去重</font>时使用，不保证元素的顺序</li>\n<li>TreeSet：需要<font color='red'>排序</font>时使用</li>\n</ul>\n</li>\n<li>\n<p>Map</p>\n<ul>\n<li>HashMap：需要<font color='red'>快速的查找和插入</font>，不要求元素的顺序时使用</li>\n<li>LinkedHashMap：需要<font color='red'>保证键值对元素的顺序</font>时使用</li>\n<li>TreeMap：需要<font color='red'>排序</font>时使用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-集合的父类是谁哪些安全的北京中信\"><a class=\"anchor\" href=\"#5-集合的父类是谁哪些安全的北京中信\">#</a> 5. <mark>集合的父类是谁？哪些安全的？</mark>（北京中 ** 信）</h4>\n<p>Collection、List、Set、Map 都是接口，不是类。</p>\n<p>（线程）不安全：ArrayList、HashSet、HashMap</p>\n<blockquote>\n<p>这些都是常用的，当需要线程安全时，调用 Collections 工具类中的同步方法对集合进行包装</p>\n</blockquote>\n<p>（线程） 安全：Vector、Hashtable</p>\n<blockquote>\n<p>反而不常用，因为效率低</p>\n</blockquote>\n<h4 id=\"6-集合说一下哪些是线程不安全的科软\"><a class=\"anchor\" href=\"#6-集合说一下哪些是线程不安全的科软\">#</a> 6. 集合说一下哪些是线程不安全的（* 科软）</h4>\n<p>除了 Vector 和 Hashtable。</p>\n<h4 id=\"7-遍历集合的方式有哪些恒电子\"><a class=\"anchor\" href=\"#7-遍历集合的方式有哪些恒电子\">#</a> 7. 遍历集合的方式有哪些？（恒 * 电子）</h4>\n<ul>\n<li>\n<p>迭代器 Iterator 用来遍历 Collection，不能用来遍历 Map！</p>\n<blockquote>\n<p><code>map.keySet().iterator()</code> 、 <code>map.values().iterator()</code> 、 <code>map.entrySet().iterator()</code>  本质上都是迭代器对 Set、Collection 进行遍历</p>\n</blockquote>\n</li>\n<li>\n<p>增强 for</p>\n<blockquote>\n<p>for (Object obj : 集合对象)</p>\n</blockquote>\n</li>\n<li>\n<p>一般的 for：可以用来遍历 List</p>\n</li>\n</ul>\n<h3 id=\"22-list接口\"><a class=\"anchor\" href=\"#22-list接口\">#</a> 2.2 List 接口</h3>\n<h4 id=\"1-list下面有哪些实现软力\"><a class=\"anchor\" href=\"#1-list下面有哪些实现软力\">#</a> 1. List 下面有哪些实现（软 ** 力）</h4>\n<p>ArrayList、LinkedList、Vector</p>\n<h4 id=\"2-arraylist与linkedlist区别oo-滴-汇天下-拓软件-博纳软件-上海进天下北京永生信息-联-在途游\"><a class=\"anchor\" href=\"#2-arraylist与linkedlist区别oo-滴-汇天下-拓软件-博纳软件-上海进天下北京永生信息-联-在途游\">#</a> 2. <mark>ArrayList 与 LinkedList 区别</mark>？(O**O、滴 *、汇 * 天下、拓 * 软件、博纳 ** 软件、上海 * 进天下，北京永生 ** 信息、* 联、在 * 途游)</h4>\n<pre><code>类似问题：\n&gt; ArrayList跟LinkedList的区别详细说出？（阿*校招、*东）\n</code></pre>\n<p>ArrayList 和 LinkedList 的区别如下：</p>\n<ul>\n<li>ArrayList 是基于<font color='red'>动态数组</font>实现的，而 LinkedList 是基于<font color='red'>双向链表</font>实现的。</li>\n<li><font color='red'>对于随机访问 get 和 set，ArrayList 更快</font>，因为 ArrayList 可以根据<strong>下标</strong>以 O (1) 时间复杂度对元素进行随机访问；而 LinkedList 需要<strong>移动指针遍历</strong>每个元素直到找到为止。</li>\n<li><font color='red'>对于新增和删除操作 add 和 remove，LinkedList 更快</font>，因为 ArrayList 在新增和删除元素时，可能需要<strong>扩容和复制数组</strong>；而 LinkedList 除了<strong>实例化对象</strong>需要时间外，只需要<strong>修改指针</strong>即可。</li>\n</ul>\n<p>补充上第 14 章中的源码（底层的数据结构）</p>\n<h4 id=\"3-arraylist与vector区别呢为什么要用arraylist取代vector呢湖利软件\"><a class=\"anchor\" href=\"#3-arraylist与vector区别呢为什么要用arraylist取代vector呢湖利软件\">#</a> 3. ==ArrayList 与 Vector 区别呢？== 为什么要用 ArrayList 取代 Vector 呢？(湖 ** 利软件)</h4>\n<p>ArrayList 和 Vector 的区别如下：</p>\n<ul>\n<li>ArrayList 不是同步的，而<font color='red'>Vector 是线程安全的</font>，也就是说是同步的。</li>\n<li><font color='red'>ArrayList 在性能方面更优</font>，因为 ArrayList 没有使用 synchronized 加锁，不加锁，所以处理速度会快一些。</li>\n<li>扩容：ArrayList 和 Vector 都会根据实际的需要动态的调整容量，只不过在<font color='red'>Vector 扩容每次会增加 1 倍，而 ArrayList 只会增加 50%</font>。</li>\n</ul>\n<p>因此，如果不需要线程安全的话，建议使用 ArrayList。</p>\n<h4 id=\"4-javautilarraylist常用的方法有哪些华为\"><a class=\"anchor\" href=\"#4-javautilarraylist常用的方法有哪些华为\">#</a> 4. Java.util.ArrayList 常用的方法有哪些？（华 ** 为）</h4>\n<ul>\n<li>Collection 接口中的方法</li>\n<li><font color='gree'>List 接口中的方法</font></li>\n<li><font color='purple'>ArrayList 类特有的方法</font></li>\n</ul>\n<p>例如：</p>\n<ul>\n<li>增\n<ul>\n<li>add (E obj)：在列表的<font color='red'>末尾</font>添加指定元素</li>\n<li>addAll(Collection other)</li>\n</ul>\n</li>\n<li>删\n<ul>\n<li>clear()</li>\n<li>remove (Object obj)：移除列表中<font color='red'>首次出现</font>的指定元素，如果存在，返回 true，否则返回 false</li>\n<li>removeAll(Collection coll)</li>\n<li>retainAll(Collection coll)</li>\n<li><font color='gree'><strong>remove</strong>(int index)</font></li>\n</ul>\n</li>\n<li>改\n<ul>\n<li><font color='gree'><strong>set</strong>(int index, Object ele)</font></li>\n</ul>\n</li>\n<li>查\n<ul>\n<li><font color='gree'><strong>get</strong>(int index)</font></li>\n<li><font color='gree'>subList(int fromIndex, int toIndex):</font></li>\n<li><font color='gree'>indexOf(Object obj)</font></li>\n<li><font color='gree'>lastIndexOf(Object obj)</font></li>\n</ul>\n</li>\n<li>插\n<ul>\n<li><font color='gree'><strong>add</strong>(int index, Object ele)</font></li>\n<li><font color='gree'>addAll(int index, Collection eles)</font></li>\n</ul>\n</li>\n<li>长度\n<ul>\n<li>size ()：返回列表中<font color='red'>实际存储的元素个数</font></li>\n</ul>\n</li>\n<li>遍历\n<ul>\n<li>iterator()</li>\n<li>增强 for 循环</li>\n<li>普通 for 循环</li>\n</ul>\n</li>\n<li>其他\n<ul>\n<li>isEmpty()</li>\n<li>contains(Object obj)</li>\n<li>containsAll(Collection coll)</li>\n<li>equals(Object obj)</li>\n<li>toArray()</li>\n<li>hashCode()</li>\n</ul>\n</li>\n<li>ArrayList 类特有\n<ul>\n<li><font color='purple'>ensureCapacity(int minCapacity)</font>：确保列表的容量至少等于指定的最小值</li>\n<li><font color='purple'>trimToSize()</font>：将列表的容量调整为列表的当前大小</li>\n<li><font color='purple'>clone()</font>：返回一个 ArrayList 对象的浅拷贝</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-arraylist-是有序还是无序为什么蜜信息\"><a class=\"anchor\" href=\"#5-arraylist-是有序还是无序为什么蜜信息\">#</a> 5. Arraylist 是有序还是无序？为什么？（蜜 * 信息）</h4>\n<p>有序；底层使用数组：Object []</p>\n<h3 id=\"23-set接口\"><a class=\"anchor\" href=\"#23-set接口\">#</a> 2.3 Set 接口</h3>\n<h4 id=\"1set集合有哪些实现类分别有什么特点拓软件\"><a class=\"anchor\" href=\"#1set集合有哪些实现类分别有什么特点拓软件\">#</a> 1.<mark>Set 集合有哪些实现类，分别有什么特点？</mark>（拓 * 软件）</h4>\n<pre><code>类似问题：\n&gt; Set的实现类有哪些？（博*科技）\n</code></pre>\n<ul>\n<li>\n<p>HashSet</p>\n<ul>\n<li>主要实现类</li>\n<li>基于哈希表</li>\n<li>存取速度快</li>\n<li>不保证元素的顺序</li>\n<li>允许 null</li>\n</ul>\n</li>\n<li>\n<p>LinkedHashSet</p>\n<ul>\n<li>\n<p>HashSet 的子类</p>\n</li>\n<li>\n<p>基于哈希表 + <font color='red'>双向链表</font></p>\n</li>\n<li>\n<p>记录了元素的添加顺序，便于频繁查询</p>\n</li>\n<li>\n<p><font color='red'> <code>插入性能略低</code> 于 HashSet，但 <code>迭代访问性能</code>  优于 HashSet</font></p>\n<blockquote>\n<p>LinkedHashSet 的插入性能低于 HashSet，是因为 LinkedHashSet 除了维护一个哈希表外，还要维护一个双向链表来记录元素的插入顺序 ²³。这样<font color='red'>在插入元素时，需要额外的操作来<strong>更新链表的指针</strong>，而 HashSet 不需要这样做</font>¹²。</p>\n<p>LinkedHashSet 的迭代性能优于 HashSet，是因为<font color='red'>LinkedHashSet 可以直接<strong>按照链表的顺序来遍历元素</strong>，而不需要对哈希表进行排序或者查找</font>²⁴。而<font color='red'>HashSet 在遍历时，需要<strong>根据哈希值来确定元素的位置</strong>，可能会遇到哈希冲突或者空桶的情况，导致性能下降</font>¹²。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>TreeSet</p>\n<ul>\n<li>基于红黑树</li>\n<li>要求元素属于同一个类，不允许 null</li>\n<li>可以按照元素的指定属性的大小顺序进行排序（自然排序 / 定制排序）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-list集合和set集合的区别亚科技-海翼科技华电系统达贷\"><a class=\"anchor\" href=\"#2-list集合和set集合的区别亚科技-海翼科技华电系统达贷\">#</a> 2. <mark>List 集合和 Set 集合的区别？</mark>（亚 * 科技、* 海 * 翼科技，* 华电 * 系统，达 * 贷）</h4>\n<p>List 集合和 Set 集合的区别有以下几点 ¹²：</p>\n<ul>\n<li><font color='red'>List 集合<strong>是有序的</strong></font>，可以按照元素的插入顺序（LinkedList）或者指定的索引（ArrayList）来访问元素，而<font color='red'>Set 集合是无序的</font>，不能通过索引来访问元素 ¹²。</li>\n<li><font color='red'>List 集合<strong>可以包含重复的元素</strong>，也可以包含多个 null 元素</font>，而<font color='red'>Set 集合不允许包含重复的元素，最多只能包含一个 null 元素</font>¹²。</li>\n<li><font color='red'>List 集合继承了 Collection 接口，并提供了一些<strong>额外的方法</strong></font>，如 get (int index), set (int index, E element), add (int index, E element), remove (int index) 等，而<font color='red'>Set 集合没有提供这些方法</font>¹²。</li>\n<li><font color='red'>List 集合的<strong>实现类</strong>有 ArrayList, LinkedList 和 Vector</font>，而<font color='red'>Set 集合的实现类有 HashSet, LinkedHashSet 和 TreeSet</font>¹²。</li>\n</ul>\n<h4 id=\"3-set里的元素是不能重复的那么用什么方法来区分重复与否呢-是用还是equals-它们有何区别鸿网络\"><a class=\"anchor\" href=\"#3-set里的元素是不能重复的那么用什么方法来区分重复与否呢-是用还是equals-它们有何区别鸿网络\">#</a> 3. <mark>Set 里的元素是不能重复的，那么用什么方法来区分重复与否呢？是用</mark>还是 equals ()? 它们有何区别？==（鸿 * 网络）</h4>\n<pre><code>类似问题：\n&gt; 1.HashSet如何检查重复(创*科技)\n&gt; 3.Set使用哪个区分不能重复的元素的？（北京创**荣信息）\n</code></pre>\n<p>Set 里的元素是不能重复的，它是通过调用元素的<font color='orange'> <code>equals()</code>  和 <code>hashCode()</code> </font>方法来判断两个元素是否相等的 ¹²。<font color='red'>如果两个元素的 equals () 方法返回 true，并且它们的 hashCode () 方法返回相同的值，那么它们就被认为是相等的</font>，Set 就不会存储重复的元素 ¹²。</p>\n<p><code>==</code>  和 <code>equals()</code>  都是用来比较两个对象是否相等的，但它们有以下区别 ³：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">==</th>\n<th style=\"text-align:center\">equals()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">比较的数据类型</td>\n<td style=\"text-align:center\">基本数据类型、引用数据类型</td>\n<td style=\"text-align:center\">引用数据类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">对于引用数据类型</td>\n<td style=\"text-align:center\">比较的是内存地址，是否指向同一个对象</td>\n<td style=\"text-align:center\">比较的是对象的内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">比较规则</td>\n<td style=\"text-align:center\">固定</td>\n<td style=\"text-align:center\">可以重写</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><font color='red'> <code>==</code>  是一个运算符，它可以用来比较<u>基本数据类型</u>和<u>引用数据类型</u></font>，而<font color='red'> <code>equals()</code>  是一个方法，它只能用来比较<u>引用数据类型</u></font>。</li>\n<li><font color='red'> <code>==</code>  比较的是两个对象的<u>内存地址</u>，即它们是否指向同一个对象</font>，而<font color='red'> <code>equals()</code>  比较的是两个<u>对象的内容</u>，即它们是否逻辑上相等</font>³。</li>\n<li><font color='red'> <code>==</code>  的<u>比较规则是固定的</u></font>，而<font color='red'> <code>equals()</code>  的<u>比较规则可以根据不同的类来重写</u></font>，例如 String 类就重写了 equals () 方法，使得它可以比较两个字符串的值是否相同 ³。</li>\n</ul>\n<h4 id=\"4-treeset两种排序方式在使用的时候怎么起作用拓软件\"><a class=\"anchor\" href=\"#4-treeset两种排序方式在使用的时候怎么起作用拓软件\">#</a> 4. TreeSet 两种排序方式在使用的时候怎么起作用？（拓 * 软件）</h4>\n<p>在<font color='red'>添加新的元素</font>时，需要<font color='red'>调用 <code>compareTo()</code>  或 <code> compare()</code> </font>。</p>\n<p><font color='red'>TreeSet 是一个基于<strong>红黑树</strong>实现的<strong>有序</strong>集合，它可以按照<strong>元素中的指定属性</strong>的<u>自然排序</u>或者<u>定制排序</u>来存储和遍历元素</font>¹²。它的两种排序方式在使用的时候有以下区别：</p>\n<ul>\n<li>自然排序：如果元素实现了 Comparable 接口，那么 TreeSet 会调用元素的 compareTo () 方法来比较元素的大小，并按照升序排列 ¹²³。例如，String 类就实现了 Comparable 接口，它的 compareTo () 方法是按照字典顺序比较字符串的 ¹²。</li>\n<li>指定排序：如果元素没有实现 Comparable 接口，或者想要使用不同的排序规则，那么可以在构造 TreeSet 时传入一个 Comparator 对象，它是一个比较器接口，可以自定义比较元素的方法 ¹²⁴。这种方式可以覆盖元素的自然顺序，也可以对没有自然顺序的元素进行排序 ¹²。例如，Student 类没有实现 Comparable 接口，但是可以通过传入一个 Comparator 对象来按照学号或者姓名等属性进行排序</li>\n</ul>\n<h4 id=\"5-treeset的数据结构米\"><a class=\"anchor\" href=\"#5-treeset的数据结构米\">#</a> 5. <mark>TreeSet 的数据结构</mark>（* 米）</h4>\n<p>TreeSet 是一个有序集合，它的内部实现是<font color='orange'>基于一个红黑树的 TreeMap</font>。<font color='red'>TreeMap 是一个键值对的映射，它的键是按照自然顺序或者指定的比较器顺序来排序的</font>。<font color='red'>TreeSet 只使用了 TreeMap 的键，而把值设置为一个固定的常量</font>。</p>\n<p>红黑树是一种<font color='orange'>自平衡的二叉搜索树</font>，它满足以下性质：</p>\n<p><img data-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/450px-Red-black_tree_example.svg.png\" alt=\"img\" /></p>\n<ul>\n<li>每个节点要么是红色，要么是黑色</li>\n<li>根节点是黑色</li>\n<li>每个叶子节点（空节点）是黑色</li>\n<li>如果一个节点是红色，那么它的两个子节点都是黑色</li>\n<li>从任意一个节点到其每个叶子节点的所有路径都包含相同数目的黑色节点</li>\n</ul>\n<p>这些性质<font color='red'>保证了红黑树的高度近似于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">log(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，从而使得插入、删除和查找操作的时间复杂度都是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></font>。</p>\n<p>TreeSet 使用红黑树的意义是<font color='red'>为了保证集合中的元素可以按照<strong>一定的顺序</strong>进行存储和遍历</font>，同时也为了<font color='red'>提高集合中的插入、删除和查找操作的效率</font>¹²³。</p>\n<p>TreeSet 使用红黑树的好处有以下几点 ¹²³：</p>\n<ul>\n<li>红黑树是一种 **<font color='red'>自平衡的二叉搜索树</font>**，它<font color='red'>可以保证在最坏情况下，插入、删除和查找操作的时间复杂度都是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>，而不会退化成链表或者倾斜树</font></li>\n<li>红黑树<font color='red'><strong>可以按照元素的自然顺序或者指定的比较器顺序来排序</strong></font>，这样可以<font color='red'>方便地对集合中的元素进行遍历、查找、范围查询等操作</font></li>\n<li>红黑树<font color='red'><strong>可以利用节点的颜色信息来维持树的平衡</strong>，这样可以减少旋转和重构的次数，提高操作的性能</font></li>\n</ul>\n<h3 id=\"24-map接口\"><a class=\"anchor\" href=\"#24-map接口\">#</a> 2.4 Map 接口</h3>\n<h4 id=\"1-说一下java的集合map有哪些实现类奥医药\"><a class=\"anchor\" href=\"#1-说一下java的集合map有哪些实现类奥医药\">#</a> 1. <mark>说一下 Java 的集合 Map 有哪些实现类？</mark>（奥 * 医药）</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Map 接口的实现类</th>\n<th style=\"text-align:center\"><em>HashMap</em></th>\n<th style=\"text-align:center\">LinkedHashMap</th>\n<th style=\"text-align:center\">TreeMap</th>\n<th style=\"text-align:center\"><s>Hashtable</s></th>\n<th style=\"text-align:center\">Properties</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">地位</td>\n<td style=\"text-align:center\">主要实现类</td>\n<td style=\"text-align:center\">HashMap 的子类</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">古老实现类</td>\n<td style=\"text-align:center\"><s>Hashtable</s> 的子类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">底层实现</td>\n<td style=\"text-align:center\">哈希表</td>\n<td style=\"text-align:center\">哈希表 + <font color='red'>双向链表</font></td>\n<td style=\"text-align:center\">红黑树</td>\n<td style=\"text-align:center\">哈希表</td>\n<td style=\"text-align:center\">哈希表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据结构</td>\n<td style=\"text-align:center\">一维数组 + 单向链表（+ 红黑树）</td>\n<td style=\"text-align:center\">一维数组 + 单向链表（+ 红黑树） + <font color='red'>双向链表</font></td>\n<td style=\"text-align:center\">红黑树</td>\n<td style=\"text-align:center\">一维数组 + 单向链表</td>\n<td style=\"text-align:center\">一维数组 + 单向链表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">键、值是否允许为 null</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\"><font color='red'>键不能为 null</font>，值可以为 null</td>\n<td style=\"text-align:center\">键和值都不能为 null</td>\n<td style=\"text-align:center\">键和值都不能为 null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">是否线程安全</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\"><font color='red'>是，因此效率低</font></td>\n<td style=\"text-align:center\"><font color='red'>是，因此效率低</font></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">特点</td>\n<td style=\"text-align:center\">查找、插入、删除速度快，但不保证元素的顺序</td>\n<td style=\"text-align:center\">保证元素的<font color='red'>插入 / 访问顺序</font></td>\n<td style=\"text-align:center\"><font color='red'>可以按照<strong> key 中的指定属性</strong>的大小顺序进行遍历</font>：①自然排序；②定制排序</td>\n<td style=\"text-align:center\"><font color='red'>线程安全</font>，效率低</td>\n<td style=\"text-align:center\"><font color='red'>键和值都是 String 类型</font></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">性能</td>\n<td style=\"text-align:center\">①<font color='red'>查找、插入、删除速度快</font>；②迭代遍历速度慢（因为和容量有关，需要遍历底层数组，以及每个数组元素对应的链表 / 红黑树，数组的长度就是 HashMap 的容量）</td>\n<td style=\"text-align:center\">①<font color='red'>插入、删除速度慢</font>；②迭代遍历比 HashMap 快（因为只和实际数据有关，和容量无关）</td>\n<td style=\"text-align:center\">查找、插入、删除速度慢（<font color='red'>因为要维护红黑树的平衡、顺序</font>）</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">内存</td>\n<td style=\"text-align:center\">占用大，保存数组</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">占用小，保存节点</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">使用场景</td>\n<td style=\"text-align:center\">快速的查找和插入，不要求元素的顺序</td>\n<td style=\"text-align:center\">需要保持元素的插入顺序或者访问顺序</td>\n<td style=\"text-align:center\">适用于需要<font color='red'>有序</font>的键值对集合</td>\n<td style=\"text-align:center\">适用于需要线程安全的场景</td>\n<td style=\"text-align:center\">以键值对的方式存储<font color='red'>配置信息</font></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">补充说明</td>\n<td style=\"text-align:center\"><font color='red'>在 JDK8 引入红黑树</font></td>\n<td style=\"text-align:center\">双向链表: <font color='red'>记录元素的添加顺序</font></td>\n<td style=\"text-align:center\"><font color='red'>①自然排序</font>（key 所在类实现了 Comparable 接口）；<font color='red'>②定制排序</font>（在创建 TreeMap 时传入 Comparator 对象）；</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">要求 key</td>\n<td style=\"text-align:center\"><font color='red'>key 所在类要重写 <code>hashCode()</code>  和 <code>equals()</code> </font></td>\n<td style=\"text-align:center\">与 HashMap 相同</td>\n<td style=\"text-align:center\"><font color='red'>key 必须是同一个类的对象</font></td>\n<td style=\"text-align:center\">与 HashMap 相同</td>\n<td style=\"text-align:center\">key 是 String 类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">要求 value</td>\n<td style=\"text-align:center\"><font color='red'>value 所在类要重写 <code>equals()</code> </font></td>\n<td style=\"text-align:center\">与 HashMap 相同</td>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">与 HashMap 相同</td>\n<td style=\"text-align:center\">value 是 String 类</td>\n</tr>\n</tbody>\n</table>\n<p>Java 的集合 Map 有以下几种常见的实现类：</p>\n<ul>\n<li>HashMap：基于哈希表的 Map 接口的实现，允许使用 null 键和 null 值，不保证映射的顺序，是线程不安全的，支持快速的插入、删除和查找操作</li>\n<li>TreeMap：基于红黑树的 Map 接口的实现，按照键的自然顺序或者指定的比较器顺序来排序，不允许使用 null 键，但可以使用 null 值，是线程不安全的，支持有序的插入、删除和查找操作</li>\n<li>LinkedHashMap：基于哈希表和双向链表的 Map 接口的实现，按照插入顺序或者访问顺序来排序，允许使用 null 键和 null 值，是线程不安全的，结合了 HashMap 的查询速度和 LinkedHashSet 的插入顺序</li>\n<li>Hashtable：基于哈希表的 Map 接口的旧版本实现，不允许使用 null 键和 null 值，保证映射的顺序，是线程安全的，但效率低于 HashMap 和 ConcurrentHashMap</li>\n<li>ConcurrentHashMap：基于哈希表和分段锁或者 CAS 技术的 Map 接口的实现，不允许使用 null 键和 null 值，不保证映射的顺序，是线程安全的，并发性能高于 Hashtable</li>\n</ul>\n<h4 id=\"2-final怎么用修饰map可以继续添加数据吗深蓝\"><a class=\"anchor\" href=\"#2-final怎么用修饰map可以继续添加数据吗深蓝\">#</a> 2. <mark>final 怎么用，修饰 Map 可以继续添加数据吗？</mark>（* 深蓝）</h4>\n<p>final 是一个关键字，可以用来修饰类、方法、变量等。final 的作用有以下几点：</p>\n<ul>\n<li>修饰类：表示该类不能被继承，如 String 类</li>\n<li>修饰方法：表示该方法不能被重写，如 Object 类的 getClass () 方法</li>\n<li>修饰变量：表示该变量是一个常量，只能被赋值一次，如 Math 类的 PI 常量</li>\n</ul>\n<p><font color='red'>final 修饰 Map 时，表示该 Map 的引用是一个常量，不能再指向其他的对象。但是，<strong>这并不影响 Map 中的键值对的添加、删除和修改</strong>。因为 final 只保证了引用的不变性，而不保证了引用指向的对象的不变性</font>。</p>\n<p><font color='red'>如果想要让 Map 中的键值对也不能被修改，可以使用 <code>Collections.unmodifiableMap()</code>  方法来返回一个不可修改的 Map 视图</font>。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个普通的 HashMap</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;a=1, b=2&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 使用 final 修饰 map 的引用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> finalMap <span class=\"token operator\">=</span> map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//finalMap = new HashMap&lt;> (); // 编译错误，不能再赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>finalMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以添加数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>finalMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;a=1, b=2, c=3&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 使用 Collections.unmodifiableMap () 返回一个不可修改的 Map 视图</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> unmodifiableMap <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableMap</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//unmodifiableMap.put (\"d\", 4); // 运行时异常，不能添加数据</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>unmodifiableMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;a=1, b=2, c=3&#125;</span></pre></td></tr></table></figure><h4 id=\"3-set和map的比较亚科技\"><a class=\"anchor\" href=\"#3-set和map的比较亚科技\">#</a> 3. <mark>Set 和 Map 的比较</mark>（亚 * 科技）</h4>\n<p>HashSet 底层就是 HashMap</p>\n<p>LinkedHashSet 底层就是 LinkedHashMap</p>\n<p>TreeSet 底层就是 TreeMap</p>\n<p>Set 和 Map 是 Java 中两种不同的集合接口，它们有以下几点区别：</p>\n<ul>\n<li>\n<p>元素特点</p>\n<ul>\n<li>Set 是一个<font color='red'>不包含重复元素</font>的集合，它只存储键，而不存储值</li>\n<li>Map 是一个键值对的映射，它存储键和值，且<font color='red'>键不能重复，但值可以重复</font></li>\n</ul>\n</li>\n<li>\n<p>无序性</p>\n<ul>\n<li>Set 是一个无序的集合，它不保证元素的存储顺序，除非使用有序的实现类如 TreeSet 或 LinkedHashSet</li>\n<li>Map 也是一个无序的映射，它不保证键或值的存储顺序，除非使用有序的实现类如 TreeMap 或 LinkedHashMa</li>\n</ul>\n</li>\n<li>\n<p>遍历方式</p>\n<ul>\n<li>Set<font color='red'>可以直接遍历</font>其元素，使用 iterator () 方法或 foreach 循环</li>\n<li>Map 不能直接遍历其元素，需要使用 keySet ()、values () 或 entrySet () 方法<font color='red'>先获取其键集、值集或键值对集</font>，然后再使用 iterator () 方法或 foreach 循环遍历</li>\n</ul>\n</li>\n<li>\n<p>null</p>\n<ul>\n<li>Set<font color='red'>最多只能存储一个 null 元素</font></li>\n<li>Map<font color='red'>最多只能有一个 null 键和任意个 null 值</font></li>\n</ul>\n</li>\n<li>\n<p>实现类的特点、用途</p>\n<ul>\n<li>\n<p>Set</p>\n<ul>\n<li>HashSet 是基于哈希表的 Set 实现类，它提供了快速的插入和查找操作，但不保证元素的顺序</li>\n<li>LinkedHashSet 是基于哈希表和双向链表的 Set 实现类，它按照元素的插入顺序来排序，同时也保持了 HashSet 的查询速度</li>\n<li>TreeSet 是基于红黑树的 Set 实现类，它按照<font color='red'>元素</font>的自然顺序或指定的比较器顺序来排序，但插入和查找操作较慢</li>\n</ul>\n</li>\n<li>\n<p>Map</p>\n<ul>\n<li>HashMap 是基于哈希表的 Map 实现类，它提供了快速的插入、删除和查找操作，但不保证键或值的顺序</li>\n<li>LinkedHashMap 是基于哈希表和双向链表的 Map 实现类，它按照键的插入顺序或访问顺序来排序，同时也保持了 HashMap 的查询速度</li>\n<li>TreeMap 是基于红黑树的 Map 实现类，它按照<font color='red'>键</font>的自然顺序或指定的比较器顺序来排序，但插入、删除和查找操作较慢</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-介绍一下hashmap是线程安全的吗米\"><a class=\"anchor\" href=\"#4-介绍一下hashmap是线程安全的吗米\">#</a> 4. <mark>介绍一下 HashMap，是线程安全的吗？</mark>（* 米）</h4>\n<pre><code>类似问题：\n&gt; HashMap为什么线程不安全？（微*银行）\n&gt; HashMap是线程安全的吗？为什么不安全？（*团、*东、顺*）\n</code></pre>\n<p>HashMap 是一种基于<font color='gree'><strong>哈希表</strong></font>的 Map 接口实现，它可以存储<font color='red'><strong>键值对 (key-value) 映射</strong></font>，具有以下特点:</p>\n<ul>\n<li>\n<p>HashMap 是<font color='gree'><strong>无序的</strong></font>，也就是说它不会记录插入的顺序，而是<font color='red'>根据键的哈希值来决定元素在数组中的位置</font></p>\n</li>\n<li>\n<p>HashMap 是<font color='gree'><strong>线程不安全</strong></font>的，也就是说如果多个线程同时对 HashMap 进行修改操作，可能会导致数据丢失、死循环或数据覆盖等问题。<font color='orange'>如果需要线程安全的 Map 实现，可以使用 Hashtable、 <code>Collections.synchronizedMap()</code>  或 ConcurrentHashMap</font></p>\n</li>\n<li>\n<p>HashMap<font color='red'>最多一个 null 键，任意个 null 值</font></p>\n</li>\n<li>\n<p>HashMap 有<font color='gree'>两个重要的参数</font>：</p>\n<ul>\n<li><font color='cornflowerblue'>初始容量大小</font>是创建时给数组分配的容量大小，默认值为 16，<font color='cornflowerblue'>加载因子</font>默认 0.75f，<font color='red'>用数组容量大小乘以加载因子得到一个值，一旦数组中存储的元素个数超过该值就会调用 <code>resize()</code>  将数组容量增加到原来的两倍</font>，专业术语叫做<font color='gree'>扩容</font>。<font color='red'>扩容的操作非常消耗性能，因为需要重新计算所有元素的哈希值并重新分配到新的数组中</font></li>\n</ul>\n</li>\n<li>\n<p>HashMap 的<font color='gree'>数据结构</font>是 **<font color='orange'>数组 + 链表 + 红黑树</font>**。</p>\n<ul>\n<li>数组是主要的数据结构，<font color='red'>每个数组元素又是一个链表或红黑树的头节点</font>。</li>\n<li>当通过键的哈希值计算出数组下标时，\n<ul>\n<li>如果该位置没有元素，则直接插入</li>\n<li>如果该位置有元素，则需要判断该元素与插入元素的<font color='red'>hashCode 是否相等</font>\n<ul>\n<li>如果相等则覆盖</li>\n<li>如果不等则<font color='red'>以链表或红黑树的形式插入到该位置</font>，<font color='red'>当链表的长度超过 8 时，会将链表转换为红黑树，以提高查找效率</font></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>HashMap 的<font color='gree'>主要操作</font>有 put () 和 get () 方法，它们的实现原理如下:</p>\n<ul>\n<li>\n<p><font color='cornflowerblue'>put()</font></p>\n<ul>\n<li>首先将键和值封装成一个 Node 对象</li>\n<li>然后调用键的 hashCode () 方法得到哈希值，并通过哈希函数转换成数组下标\n<ul>\n<li>\n<p>如果该下标位置没有元素，则直接插入</p>\n</li>\n<li>\n<p>如果该位置有元素，则遍历该位置的链表或红黑树，比较每个节点的键是否与插入元素的键相等</p>\n<ul>\n<li>如果相等则覆盖</li>\n<li>如果不等则插入到链表尾部或红黑树中</li>\n</ul>\n</li>\n<li>\n<p>最后判断是否需要扩容</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><font color='cornflowerblue'>get()</font></p>\n<ul>\n<li>首先调用键的 hashCode () 方法得到哈希值，并通过哈希函数转换成数组下标</li>\n<li>然后根据下标找到对应的链表或红黑树头节点，遍历该链表或红黑树，比较每个节点的键是否与查找元素的键相等\n<ul>\n<li>如果相等则返回该节点的值</li>\n<li>如果不等则继续查找，如果遍历完毕没有找到，则返回 null</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-hashmap和hashtable的区别银数据-阿巴芝麻信用-众银行-爱信-杭州智公司\"><a class=\"anchor\" href=\"#5-hashmap和hashtable的区别银数据-阿巴芝麻信用-众银行-爱信-杭州智公司\">#</a> 5. <mark>HashMap 和 Hashtable 的区别？</mark>(银 * 数据、阿 ** 巴芝麻信用、* 众银行、爱 * 信、杭州 * 智公司)</h4>\n<pre><code>类似问题：\n&gt; HashMap 和 HashTable 有什么区别，以及如何使用，以及他的一些方法？（阿*校招、*东、*度校招、顺*）\n</code></pre>\n<p>HashMap 和 Hashtable 都是实现了 Map 接口的类，它们都可以存储键值对 (key-value) 映射，但是它们之间也有一些区别:</p>\n<ul>\n<li>\n<p><font color='red'>HashMap 是线程不安全的</font>，也就是说如果多个线程同时对 HashMap 进行修改操作，可能会导致数据丢失、死循环或数据覆盖等问题。<font color='red'>Hashtable 是线程安全的</font>，它的方法都使用了 synchronized 关键字来保证同步，但是这也降低了效率</p>\n</li>\n<li>\n<p><font color='red'>HashMap 允许键和值都为 null，但是最多只能有一个键为 null 的元素</font>。<font color='red'>Hashtable 不允许键和值为 null</font>，否则会抛出 NullPointerException 异常</p>\n<blockquote>\n<ul>\n<li>\n<p>HashMap 是在 JDK1.2 中引入的，它是为了提供更高效和灵活的 Map 实现，而不考虑线程安全和兼容性。<font color='red'>HashMap 允许键值为 null，是因为它使用了特殊的处理逻辑来处理 null 键值，比如使用 0 作为 null 键的哈希值，使用 equals 方法而不是 == 来比较 null 值等</font>。这样做的好处是可以使得 HashMap 更通用和灵活，可以适应不同的场景和需求。</p>\n</li>\n<li>\n<p>Hashtable 是在 JDK1.0 中引入的，它是为了提供一个线程安全和兼容性较好的 Map 实现，而不考虑效率和灵活性。<font color='red'>Hashtable 不允许键值为 null，是因为它直接使用了键值的 hashCode () 方法和 == 运算符来计算哈希值和比较对象，如果键值为 null，就会抛出 NullPointerException 异常</font>。这样做的好处是可以使得 Hashtable 更简单和稳定，可以避免一些潜在的错误和异常 。</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><font color='red'>HashMap 的底层数组长度必须为 2 的幂次方，这样可以利用 &amp; 运算代替 % 运算提高效率，并且使得元素分布更均匀</font>。<font color='red'>Hashtable 的底层数组长度可以为任意值</font>，但是一般使用质数来减少哈希冲突</p>\n</li>\n<li>\n<p>HashMap 的哈希函数使用了键的 hashCode () 方法和高低位异或运算来计算哈希值，并且在链表长度超过 8 时会转换为红黑树来提高查找效率。Hashtable 的哈希函数只使用了键的 hashCode () 方法，并且一直使用链表来解决冲突</p>\n</li>\n</ul>\n<h4 id=\"6-hashtable是怎么实现的为什么线程安全迪创新\"><a class=\"anchor\" href=\"#6-hashtable是怎么实现的为什么线程安全迪创新\">#</a> 6. <mark>Hashtable 是怎么实现的，为什么线程安全？</mark>（迪 * 创新）</h4>\n<p>哈希表（数组 + 单向链表）；底层方法使用 synchronized 修饰。</p>\n<p>Hashtable 是一种基于哈希表的 Dictionary 的子类，它实现了 Map 接口，可以存储键值对 (key-value) 映射：</p>\n<ul>\n<li>Hashtable 的内部数据结构是<font color='orange'>一个 Entry 数组，每个 Entry 是一个单向链表的头节点，用来解决哈希冲突</font>。当插入或查找一个元素时，首先根据键的 hashCode () 方法和取模运算计算出数组下标，然后遍历对应位置的链表，比较每个节点的键是否与目标元素的键相等，如果相等则返回或覆盖，如果不等则插入或继续查找</li>\n<li>Hashtable 的<font color='orange'>所有方法都使用了 <code>synchronized</code>  关键字来修饰</font>，这意味着它是线程安全的，多个线程可以共享一个 Hashtable 对象。但是<font color='red'>这也导致了它的效率较低，因为每次操作都需要获取锁和释放锁</font></li>\n<li>Hashtable<font color='red'>不允许键和值为 null，否则会抛出 NullPointerException 异常</font>。这是因为它直接使用了键和值的 hashCode () 方法和 equals () 方法来计算哈希值和比较对象，如果键或值为 null，就会导致空指针异常</li>\n<li>Hashtable 有两个重要的参数：<font color='cornflowerblue'>初始容量大小</font>和<font color='cornflowerblue'>加载因子</font>。初始容量大小是创建时给数组分配的容量大小，默认值为 11，加载因子默认 0.75f，用数组容量大小乘以加载因子得到一个值，一旦数组中存储的元素个数超过该值就会调用 rehash 方法将数组容量增加到原来的两倍加一（通常为质数），专业术语叫做<font color='red'>扩容</font>。扩容的操作非常消耗性能，因为需要重新计算所有元素的哈希值并重新分配到新的数组中</li>\n</ul>\n<h4 id=\"7-hashmap和linkedhashmap的区别北京晨阳光\"><a class=\"anchor\" href=\"#7-hashmap和linkedhashmap的区别北京晨阳光\">#</a> 7. <mark>HashMap 和 LinkedHashMap 的区别</mark>（北京 * 晨阳光）</h4>\n<p>HashMap 和 LinkedHashMap 都是实现了 Map 接口的类，它们都可以存储键值对 (key-value) 映射，但是它们之间也有一些区别：</p>\n<ul>\n<li><font color='red'>HashMap 是基于哈希表的</font>，它根据键的 hashCode () 方法和取模运算计算出数组下标，然后在对应位置的链表中查找或插入元素。<font color='red'>HashMap 不保证元素的顺序，遍历时取得数据的顺序是完全随机的</font>。</li>\n<li><font color='red'>LinkedHashMap 是继承自 HashMap 的</font>，它<font color='red'>在 HashMap 的基础上增加了一个<strong>双向链表</strong></font>，用来维护元素的插入顺序或访问顺序。<font color='red'>LinkedHashMap 保证元素的顺序，遍历时取得数据的顺序是按照插入或访问的先后顺序</font>。</li>\n<li>HashMap 和 LinkedHashMap 在性能方面：\n<ul>\n<li><font color='gree'>插入、删除元素</font>：<font color='red'>由于 LinkedHashMap 需要额外维护一个双向链表，所以在 <code>插入和删除元素</code> 时会比 HashMap 慢一些</font>。</li>\n<li><font color='gree'>迭代遍历</font>：<font color='red'>LinkedHashMap 在 <code>遍历元素</code> 时会比 HashMap 快一些，因为 LinkedHashMap 的遍历速度只和实际数据有关，和容量无关</font>。而<font color='red'>HashMap 的遍历需要遍历底层数组，以及每个数组元素对应的链表 / 红黑树，数组的长度就是 HashMap 的容量，如果容量太大，那么遍历数组就会花费很多时间</font>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"8-hashmap-和-treemap-的区别度太极-线途游-阿校招\"><a class=\"anchor\" href=\"#8-hashmap-和-treemap-的区别度太极-线途游-阿校招\">#</a> 8. <mark>HashMap 和 TreeMap 的区别</mark>（<em>度，太极</em> *、* 线途游、阿 * 校招）</h4>\n<p>HashMap 和 TreeMap 都是实现了 Map 接口的类，用来存储键值对，但是它们有以下几个方面的区别：</p>\n<ul>\n<li>数据结构：HashMap 是基于<font color='red'>哈希表</font>来实现的，而 TreeMap 是基于<font color='red'>红黑树</font>来实现的</li>\n<li>排序：HashMap<font color='red'>不保证映射的顺序</font>，而 TreeMap 根<font color='red'>据键的自然顺序或者指定的比较器来对键进行排序</font></li>\n<li>空值：HashMap 可以<font color='red'>允许一个 null 键和多个 null 值</font>，而 TreeMap<font color='red'>不允许 null 键，但是可以允许多个 null 值</font></li>\n<li>性能：\n<ul>\n<li>增、删、查：<font color='red'>HashMap 在添加、查找、删除等操作上速度会比较快，因为它只需要计算哈希值和数组下标，而 TreeMap 在这些操作上速度会比较慢，因为它需要维护红黑树的平衡和顺序</font></li>\n<li>内存：<font color=\"red\">HashMap 会占用更多的空间，因为它需要保存一个数组，而 TreeMap 会占用更少的空间，因为它只需要保存节点</font></li>\n<li>另外，HashMap 如果出现哈希冲突或者扩容的话，效率会降低</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"9-hashmap里面实际装的是什么惠\"><a class=\"anchor\" href=\"#9-hashmap里面实际装的是什么惠\">#</a> 9. <mark>HashMap 里面实际装的是什么？</mark>（惠 *）</h4>\n<p>JDK7：HashMap 内部声明了 Entry，实现了 Map 中的 Entry 接口。（key，value 作为 Entry 的两个属性出现）</p>\n<p>JDK8：HashMap 内部声明了 Node，实现了 Map 中的 Entry 接口。（key，value 作为 Node 的两个属性出现）</p>\n<p>HashMap 的内部结构包括以下几个部分：</p>\n<ul>\n<li>一个<font color='gree'>动态数组</font>，用来存放 Node 对象，每个 Node 对象包含一个 Entry 对象，Entry 对象中保存了键、值、哈希值等信息。</li>\n<li>一个<font color='gree'>哈希函数</font>，用来根据键的哈希值计算出数组的下标。</li>\n<li>一个<font color='gree'>负载因子</font>，用来控制数组的扩容时机，当数组中的元素个数超过数组长度乘以负载因子时，就会触发扩容操作。</li>\n<li>一个<font color='gree'>链表或者红黑树</font>，用来<font color='red'>解决哈希冲突，即当多个键的哈希值相同或者映射到同一个数组下标时，就会把这些键值对连接起来，形成一个链表或者红黑树</font>。<font color='red'>链表在元素个数达到 8 时会转换为红黑树，以提高查找效率</font></li>\n</ul>\n<h4 id=\"10-hashmap的key存储在哪里和value存储在一起吗那么value存储在哪里说具体点湖利软件-天伟业\"><a class=\"anchor\" href=\"#10-hashmap的key存储在哪里和value存储在一起吗那么value存储在哪里说具体点湖利软件-天伟业\">#</a> 10. <mark>HashMap 的 key 存储在哪里？和 value 存储在一起吗？那么 value 存储在哪里？说具体点？</mark>（湖 ** 利软件、天 * 伟业）</h4>\n<p>HashMap 的<font color='red'>key 和 value 都存储在 Node 对象中，其中 Node 是 HashMap 的内部类，实现了 Map.Entry 接口</font>。<font color='red'>Node 对象是一个链表节点或者红黑树节点，它有一个 next 属性指向下一个 Node 对象</font>。</p>\n<p><font color='orange'>HashMap 的底层结构是一个动态数组，数组的每个元素是一个 Node 对象，当多个 Node 对象的 key 的哈希值相同或者映射到同一个数组下标时，就会形成一个链表或者红黑树，通过 Node 对象的 next 属性连接起来</font>。</p>\n<p>所以，<font color='red'>可以说 HashMap 的 key 和 value<strong> 存储在动态数组中的 Node 对象中</strong>，Node 对象可以形成<strong>链表或者红黑树</strong>来解决<u>哈希冲突</u></font>。</p>\n<h4 id=\"11-自定义类型可以作为key么阿\"><a class=\"anchor\" href=\"#11-自定义类型可以作为key么阿\">#</a> 11. <mark>自定义类型可以作为 Key 么？</mark>（阿 *）</h4>\n<p>Java 中<font color='red'>自定义类型可以作为 HashMap 的 Key</font>，但是需要注意一些问题：</p>\n<ul>\n<li>自定义类型<font color='red'>必须重写 <code>hashCode()</code>  和 <code>equals()</code>  方法</font>，以保证相同属性的对象有相同的哈希值和相等性判断，否则会导致 HashMap 无法正确存取元素。</li>\n<li>自定义类型的 hashCode () 和 equals () 方法应该遵循以下原则：\n<ul>\n<li><font color='red'>如果两个对象相等，则两个对象的 hashCode () 必须相等</font>；</li>\n<li><font color='red'>如果两个对象不相等，则两个对象的 hashCode ()<strong> 尽量</strong>不要相等，以<strong>减少哈希冲突的可能性</strong></font>；</li>\n<li>equals () 方法应该满足<font color='red'>自反性、对称性、传递性、一致性</font>，即对于任意非空对象 x、y 和 z，有：\n<ul>\n<li>x.equals (x) 为 true；</li>\n<li>x.equals (y) 为 true 当且仅当 y.equals (x) 为 true；</li>\n<li>如果 x.equals (y) 为 true 且 y.equals (z) 为 true，则 x.equals (z) 也为 true；</li>\n<li>多次调用 x.equals (y) 的结果不会改变，除非 x 或 y 的属性发生变化。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><font color='orange'><strong>自定义类型的属性应该是不可变的</strong>，或者至少在作为 HashMap 的 Key 期间不要改变，否则会导致哈希值和相等性判断发生变化，从而导致 HashMap 无法正确存取元素</font>。</li>\n</ul>\n<h3 id=\"collections\"><a class=\"anchor\" href=\"#collections\">#</a> Collections</h3>\n<h4 id=\"1-集合类的工具类是谁用过工具类哪些方法顺\"><a class=\"anchor\" href=\"#1-集合类的工具类是谁用过工具类哪些方法顺\">#</a> 1. 集合类的工具类是谁？用过工具类哪些方法？（顺 *）</h4>\n<p>Collections 是一个集合工具类，它提供了一系列静态方法，用于对集合类（Collection、List、Set、Map 等）进行操作，例如排序、查找、复制、同步等。</p>\n<p>Collections 类的常用方法有：</p>\n<ul>\n<li><font color='gree'>sort</font>(List list)：按照自然顺序对 list 进行升序排序，list 中的元素必须实现 Comparable 接口</li>\n<li><font color='gree'>sort</font>(List list, Comparator c)：按照定制的顺序对 list 进行排序，c 是一个比较器，用来控制排序逻辑</li>\n<li><font color='gree'>reverse</font>(List list)：反转 list 中的元素顺序</li>\n<li><font color='gree'>shuffle</font>(List list)：随机打乱 list 中的元素顺序</li>\n<li><font color='gree'>swap</font>(List list, int i, int j)：交换 list 中 i 和 j 位置的元素</li>\n<li><font color='gree'>fill</font>(List list, Object obj)：用 obj 替换 list 中的所有元素</li>\n<li><font color='gree'><strong>copy</strong></font>(List <font color='red'>dest</font>, List <font color='red'>src</font>)：将 src 中的所有元素复制到 dest 中，<font color='red'>dest 必须至少和 src 一样长</font></li>\n<li><font color='gree'>max</font>(Collection coll)：根据自然顺序返回 coll 中的最大元素，coll 中的元素必须实现 Comparable 接口</li>\n<li><font color='gree'>max</font>(Collection coll, Comparator c)：根据定制的顺序返回 coll 中的最大元素，c 是一个比较器，用来控制比较逻辑</li>\n<li><font color='gree'>min</font>(Collection coll)：根据自然顺序返回 coll 中的最小元素，coll 中的元素必须实现 Comparable 接口</li>\n<li><font color='gree'>min</font>(Collection coll, Comparator c)：根据定制的顺序返回 coll 中的最小元素，c 是一个比较器，用来控制比较逻辑</li>\n<li><font color='gree'>frequency</font>(Collection c, Object o)：返回 o 在 c 中出现的次数</li>\n<li><font color='gree'>indexOfSubList</font>(List <font color='red'>source</font>, List <font color='red'>target</font>)：返回 target 在 source 中第一次出现的索引，如果不存在则返回 - 1</li>\n<li><font color='gree'>lastIndexOfSubList</font>(List source, List target)：返回 target 在 source 中最后一次出现的索引，如果不存在则返回 - 1</li>\n<li><font color='gree'>replaceAll</font>(List list, Object <font color='red'>oldVal</font>, Object <font color='red'>newVal</font>)：用 newVal 替换 list 中所有等于 oldVal 的元素</li>\n<li><font color='gree'>synchronizedCollection</font>(Collection c)：返回一个<font color='red'>线程安全的</font>Collection，它包装了 c</li>\n<li><font color='gree'>synchronizedList</font>(List list)：返回一个线程安全的 List，它包装了 list</li>\n<li><font color='gree'>synchronizedSet</font>(Set s)：返回一个线程安全的 Set，它包装了 s</li>\n<li><font color='gree'>synchronizedMap</font>(Map m)：返回一个线程安全的 Map，它包装了 m</li>\n</ul>\n<h4 id=\"2-collection-和-collections的区别平金服-软\"><a class=\"anchor\" href=\"#2-collection-和-collections的区别平金服-软\">#</a> 2. <mark>Collection 和 Collections 的区别？</mark>（平 * 金服、* 软）</h4>\n<p>Collection 是一个集合<font color='red'>接口</font>，定义了一些操作集合的方法，有<font color='red'>子接口 List 和 Set</font>。</p>\n<p>Collections 是一个集合<font color='red'>工具类</font>，提供了<font color='red'>一系列静态方法</font>去操作 Collection、List、Set、Map 等集合框架。</p>\n<h4 id=\"3-arraylist-如何实现排序阿\"><a class=\"anchor\" href=\"#3-arraylist-如何实现排序阿\">#</a> 3. <mark>ArrayList 如何实现排序？</mark>（阿 *）</h4>\n<p>ArrayList 是一个实现了 List 接口的动态数组，它可以存储任意类型的对象，也可以对其中的元素进行排序。有以下几种方法可以对 ArrayList 进行排序：</p>\n<ul>\n<li>使用<font color='gree'> <code>Collections.sort(List list)</code> </font>方法，它会按照元素的自然顺序（升序）对 list 进行排序，list 中的元素必须实现 Comparable 接口，或者是基本类型的包装类。</li>\n<li>使用<font color='gree'> <code>Collections.sort(List list, Comparator c)</code> </font>方法，它会按照定制的顺序（由 c 指定）对 list 进行排序，c 是一个比较器，用来控制排序逻辑。</li>\n<li>使用<font color='gree'> <code>List.sort(Comparator c)</code> </font>方法，它会按照定制的顺序（由 c 指定）对 list 进行排序，c 是一个比较器，用来控制排序逻辑。这个方法是在 Java 8 中引入的，默认调用 <code>Arrays.sort(Object[] a, Comparator c)</code>  方法。</li>\n<li>使用<font color='gree'> <code>Arrays.sort(Object[] a)</code> </font>方法，它会按照元素的自然顺序（升序）对数组 a 进行排序，a 中的元素必须实现 Comparable 接口，或者是基本类型的包装类。这个方法需要调用 toArray () 先将 ArrayList 转换为数组。</li>\n<li>使用<font color='gree'> <code>Arrays.sort(Object[] a, Comparator c)</code> </font>方法，它会按照定制的顺序（由 c 指定）对数组 a 进行排序，c 是一个比较器，用来控制排序逻辑。这个方法需要调用 toArray () 先将 ArrayList 转换为数组。</li>\n</ul>\n<p>下面给出一些示例代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 创建一个 ArrayList 存储整数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 方式一：使用 Collections.sort (List list) 方法按照自然顺序（升序）排序</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 [1, 3, 5, 7]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 方式二：使用 Collections.sort (List list, Comparator c) 方法按照定制的顺序（降序）排序</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> o2 <span class=\"token operator\">-</span> o1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 降序</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 [7, 5, 3, 1]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 方式三：使用 List.sort (Comparator c) 方法按照定制的顺序（降序）排序</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> o2 <span class=\"token operator\">-</span> o1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 降序</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 [7, 5, 3, 1]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 方式四：使用 Arrays.sort (Object [] a) 方法按照自然顺序（升序）排序</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1 <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 ArrayList 转换为数组</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>array1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>array1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 [1, 3, 5, 7]</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 方式五：使用 Arrays.sort (Object [] a, Comparator c) 方法按照定制的顺序（降序）排序</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array2 <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 ArrayList 转换为数组</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>array2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">return</span> o2 <span class=\"token operator\">-</span> o1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 降序</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>array2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 [7, 5, 3, 1]</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"4-hashmap是否线程安全怎样解决hashmap的线程不安全中卫星\"><a class=\"anchor\" href=\"#4-hashmap是否线程安全怎样解决hashmap的线程不安全中卫星\">#</a> 4. HashMap 是否线程安全，怎样解决 HashMap 的线程不安全（中 * 卫星）</h4>\n<pre><code>类似问题：\n&gt; 怎么实现HashMap线程安全？（*团、*东、顺*）\n</code></pre>\n<p>HashMap 不是线程安全的。如果您希望在多线程环境中使用线程安全的 HashMap，可以使用以下方法之一：</p>\n<ol>\n<li>使用<font color='gree'>Hashtable</font>，它通过对整个表上锁来实现线程安全，但效率较低。</li>\n<li>使用<font color='gree'> <code>Collections.synchronizedMap(Map m)</code> </font>包装 HashMap。这样可以返回一个由指定映射支持的同步（线程安全）映射。</li>\n<li>使用<font color='gree'>ConcurrentHashMap</font>，它是 Java 5 之后引入的一个线程安全的 HashMap。它将哈希表分为 16 个桶（默认值），常用操作（如 get、put、remove）只锁定当前需要用到的桶。</li>\n</ol>\n",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC11%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E5%B8%B8%E7%94%A8%E7%B1%BB%E4%B8%8E%E5%9F%BA%E7%A1%80API%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC11%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E5%B8%B8%E7%94%A8%E7%B1%BB%E4%B8%8E%E5%9F%BA%E7%A1%80API%EF%BC%89/",
            "title": "宋红康_第11章：常用类与基础API",
            "date_published": "2023-11-12T03:06:50.149Z",
            "content_html": "<h1 id=\"第11章随堂复习与企业真题常用类与基础api\"><a class=\"anchor\" href=\"#第11章随堂复习与企业真题常用类与基础api\">#</a> 第 11 章：随堂复习与企业真题（常用类与基础 API）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-font-colorcornflowerbluestring类font\"><a class=\"anchor\" href=\"#1-font-colorcornflowerbluestring类font\">#</a> 1. <font color='cornflowerblue'><mark>String 类</mark></font></h3>\n<ul>\n<li>\n<p>String 的声明：<font color='red'>final 修饰</font>（不能继承）、<font color='red'>实现了 Comparable 接口</font>（可以比较大小）</p>\n</li>\n<li>\n<p>String 的<font color='orange'>不可变性</font></p>\n</li>\n<li>\n<p>String 的<font color='gree'>两种定义方式</font>：① <font color='red'>字面量的定义</font>方式  <code>String s = &quot;hello&quot;</code>  ② <font color='red'>new</font> 的方式： <code>String s = new String(&quot;hello&quot;);</code></p>\n<ul>\n<li>String 的内存解析：<font color='red'>字符串常量池</font>、<font color='red'>堆内存</font>的使用</li>\n<li><code>String s = new String(&quot;hello&quot;);</code>  在内存中创建的对象的个数：一个字符串常量对象，一个堆空间对象。</li>\n</ul>\n</li>\n<li>\n<p>String 的<font color='gree'>连接操作： <code>+</code> </font></p>\n<p><mark><strong><font color='orange'>结论</font>：</strong></mark></p>\n<ul>\n<li>\n<p>常量 + 常量：结果存储在<font color='red'><strong>常量池</strong></font>中，返回此字面量的地址。且常量池中不会存在相同内容的常量。</p>\n<blockquote>\n<p>这里的常量有两种情况：</p>\n<ul>\n<li>字面量</li>\n<li>final 修饰的常量</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p>常量 + <em>变量</em> 或 <em>变量</em> + <em>变量</em>：结果 new 在<font color='red'><strong>堆</strong></font>中，返回堆空间中此字符串对象的地址。</p>\n<blockquote>\n<p>如果变量声明为 final，那么就变成常量了！对应的情况就是 “常量 + 常量”</p>\n</blockquote>\n</li>\n<li>\n<p>拼接后调用 <code>intern()</code> ：返回<font color='red'><strong>常量池</strong></font>中字面量的地址。</p>\n</li>\n<li>\n<p><code>concat()</code>  拼接：哪怕是两个常量对象拼接，结果也是 new 在<font color='red'><strong>堆</strong></font>空间中。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>熟悉 String 的<font color='gree'>构造器</font>、与其他结构之间的<font color='gree'>转换</font>、<font color='gree'>常用方法</font></p>\n<ul>\n<li>编码和解码\n<ul>\n<li><font color='red'>编码</font>：字符、字符串 --&gt; 字节、字节数组。对应着编码集</li>\n<li><font color='red'>解码</font>：字节、字节数组 --&gt; 字符、字符串。对应着解码集</li>\n<li>规则：解码集必须使用当初编码时使用的编码集。只要不一致，就可能出现乱码！</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>String 相关的<font color='gree'>算法问题</font>。</p>\n<ul>\n<li>trim</li>\n<li>字符串反转</li>\n<li>子串出现次数</li>\n<li>最大相同子串</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-font-colorcornflowerbluestringbuffer类font-font-colorcornflowerbluestringbuilder类font\"><a class=\"anchor\" href=\"#2-font-colorcornflowerbluestringbuffer类font-font-colorcornflowerbluestringbuilder类font\">#</a> 2. <font color='cornflowerblue'>StringBuffer 类</font>、<font color='cornflowerblue'>StringBuilder 类</font></h3>\n<ul>\n<li>\n<p>[面试题] String、StringBuffer、StringBuilder 的区别</p>\n<ul>\n<li>\n<p><font color='cornflowerblue'><strong>String</strong></font></p>\n<ul>\n<li>\n<p><font color='red'>不可变</font>的字符序列</p>\n<blockquote>\n<p>private <strong>final</strong> char value[];</p>\n</blockquote>\n</li>\n<li>\n<p><font color='red'>效率最低</font></p>\n</li>\n<li>\n<p>底层使用<font color='red'>char[]</font>数组存储 (JDK8.0 中)，底层使用 byte [] 数组存储（JDK9 及之后）</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong><font color='cornflowerblue'>StringBuffer</font></strong></p>\n<ul>\n<li>\n<p><font color='red'>可变的</font>字符序列</p>\n<blockquote>\n<p>char[] value;</p>\n</blockquote>\n</li>\n<li>\n<p>JDK1.0 引入</p>\n</li>\n<li>\n<p><font color='red'>线程安全</font>（方法有 synchronized 修饰），因此<font color='red'>效率比 StringBuilder 低</font></p>\n</li>\n<li>\n<p>底层使用<font color='red'>char[]</font>数组存储 (JDK8.0 中)，底层使用 byte [] 数组存储（JDK9 及之后）</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong><font color='cornflowerblue'>StringBuilder</font></strong>：</p>\n<ul>\n<li>\n<p><font color='red'>可变的</font>字符序列</p>\n<blockquote>\n<p>char[] value;</p>\n</blockquote>\n</li>\n<li>\n<p>jdk1.5 引入</p>\n</li>\n<li>\n<p><font color='red'>线程不安全</font>的，<font color='red'>效率高</font></p>\n</li>\n<li>\n<p>底层使用<font color='red'>char[]</font>数组存储 (JDK8.0 中)，底层使用 byte [] 数组存储（JDK9 及之后）</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>知道什么场景下使用 StringBuffer、StringBuilder</p>\n<ul>\n<li>如果开发中，需要对字符串进行频繁的增、删、改操作，建议使用 StringBuffer、StringBuilder</li>\n<li>如果开发中，不涉及多线程，建议使用 StringBuilder，因为效率更高</li>\n<li>如果开发中，可以大体确定要操作的字符个数，建议使用带有 int capacity 参数的构造器，可以避免多次扩容，性能更优</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-jdk8之前的日期-时间api\"><a class=\"anchor\" href=\"#3-jdk8之前的日期-时间api\">#</a> 3. jdk8 之前的日期、时间 API</h3>\n<ul>\n<li>System.currentTimeMillis()</li>\n<li>两个 Date 的使用</li>\n<li>SimpleDateFormat 用于格式化、解析</li>\n<li>Calendar 日历类的使用</li>\n</ul>\n<h3 id=\"4-jdk8中新的日期-时间apijavatime包\"><a class=\"anchor\" href=\"#4-jdk8中新的日期-时间apijavatime包\">#</a> 4. jdk8 中新的日期、时间 API——<mark>java.time 包</mark></h3>\n<ul>\n<li>LocalDate、LocalTime、LocalDateTime --&gt; 类似于 Calendar</li>\n<li>Instant  --&gt; 类似于 Date</li>\n<li>DateTimeFormatter ---&gt; 类似于 SimpleDateFormat</li>\n</ul>\n<h3 id=\"5-比较器重点\"><a class=\"anchor\" href=\"#5-比较器重点\">#</a> 5. <mark>比较器 (重点)</mark></h3>\n<ul>\n<li>自然排序 Comparable 接口\n<ul>\n<li>compareTo(Object obj)</li>\n</ul>\n</li>\n<li>定制排序 Comparator 接口\n<ul>\n<li>compare(Object obj1,Object obj2)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-其它api\"><a class=\"anchor\" href=\"#6-其它api\">#</a> 6. 其它 API</h3>\n<p>了解</p>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"21-string\"><a class=\"anchor\" href=\"#21-string\">#</a> 2.1 String</h3>\n<h4 id=\"1-以下两种方式创建的string对象有什么不同团\"><a class=\"anchor\" href=\"#1-以下两种方式创建的string对象有什么不同团\">#</a> 1. 以下两种方式创建的 String 对象有什么不同？（* 团）</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>new 方式创建的 String 对象存储在<font color='red'>堆空间</font>中，此外，如果 “test” 在<font color='red'>字符串常量池</font>中没有定义，还需要定义一个字符串常量对象。</p>\n<p>字面量创建的对象存储在<font color='red'>字符串常量池</font>中。</p>\n<h4 id=\"2-string-s-new-stringxyz创建了几个string-object-新陆\"><a class=\"anchor\" href=\"#2-string-s-new-stringxyz创建了几个string-object-新陆\">#</a> 2. String s = new String (&quot;xyz&quot;); 创建了几个 String Object? （新 * 陆）</h4>\n<p>两个</p>\n<h4 id=\"3-string-aabc-string-babc-问ab网邮箱\"><a class=\"anchor\" href=\"#3-string-aabc-string-babc-问ab网邮箱\">#</a> 3. String a=&quot;abc&quot; String b=&quot;a&quot;+&quot;bc&quot; 问 a==b?（网 * 邮箱）</h4>\n<p>是！都在字符串常量池中，且常量池中不会存在相同内容的常量。</p>\n<h4 id=\"4-string-中-怎样实现阿\"><a class=\"anchor\" href=\"#4-string-中-怎样实现阿\">#</a> <mark>4. String 中 “+” 怎样实现？（阿 *）</mark></h4>\n<p>常量 + 常量 ：首先，在字符串常量池中查找有无拼接结果的字符串常量，如果有则不用创建；否则，在字符串常量池中新建一个字符串常量。</p>\n<p>变量 + 常量 、变量 + 变量：<font color='orange'>创建一个 StringBuilder 的实例，通过 append () 添加字符串，最后调用 toString () 返回一个字符串。（toString () 内部 <strong>new</strong> 一个 String 的实例）</font></p>\n<blockquote>\n<p>Java 中，String 的 “+” 操作是用来连接两个或多个字符串的，例如 &quot;Hello&quot; + &quot;World&quot; 就会得到 &quot;HelloWorld&quot;。</p>\n<p><font color='orange'>如果 &quot;+&quot; 操作符左右有变量参与</font>，那么这个操作在编译时会被转换成 StringBuilder 的 append 方法，<font color='orange'>例如 &quot;Hello&quot; + &quot;World&quot; 会被转换成 <code>new StringBuilder().append(&quot;Hello&quot;).append(&quot;World&quot;).toString()</code> ，在 toString () 方法中会 new 一个 String 实例</font>！这样做的目的是为了提高字符串连接的效率，因为 String 是不可变的，每次 “+” 操作都会创建一个新的 String 对象，而 StringBuilder 是可变的，可以在原有的基础上追加字符串。</p>\n</blockquote>\n<h4 id=\"5-java中string是不是final的凡科技\"><a class=\"anchor\" href=\"#5-java中string是不是final的凡科技\">#</a> 5. Java 中 String 是不是 final 的？（凡 * 科技）</h4>\n<pre><code>类似问题：\n&gt; String被哪些类继承？（网*邮箱）\n&gt; 是否可以继承String类?（湖南*利软件）\n&gt; String 是否可以继承?（阿*）\n</code></pre>\n<p>是，因此不能被继承。</p>\n<h4 id=\"6-string为啥不可变在内存中的具体形态阿\"><a class=\"anchor\" href=\"#6-string为啥不可变在内存中的具体形态阿\">#</a> <mark>6. String 为啥不可变，在内存中的具体形态？（阿 *）</mark></h4>\n<p>因为其底层实现的 char 型数组 value 用了 final 修饰，这是一种<font color='red'>享元设计模式</font>。在开发中字符串的使用极其频繁，所以共用字符串信息，以便节省空间。</p>\n<blockquote>\n<p>Java 中的 String 为什么是不可变的，有以下几个原因：</p>\n<ul>\n<li><strong>安全性</strong>：<font color='gree'>String 类是被 final 修饰的，不能被继承或修改</font>。这样可以<font color='red'>保证 String 在传递过程中不会被篡改</font>，例如作为文件路径、网络地址、数据库连接等敏感信息。</li>\n<li><strong>效率性</strong>：String 类的<font color='gree'>底层实现 char 型数组是被 private final 修饰的，只能在构造函数中赋值一次，此后无法修改</font>。这样可以<font color='red'>避免每次修改都要创建一个新的 String 对象，节省了内存空间和时间开销</font>。同时，String 的不可变性也使得它<font color='red'>可以被缓存和共享</font>，例如字符串常量池、字符串字面量、字符串拼接等。</li>\n<li><strong>一致性</strong>：String 是被 private final 修饰的，它的值在创建后就不会改变。这样可以<font color='red'>保证 String 在多线程环境下不会出现数据不一致的问题，无需额外的同步机制</font>。</li>\n</ul>\n</blockquote>\n<p>String：提供 **<font color='red'>字符串常量池</font>**。</p>\n<blockquote>\n<p>在 jdk6 及之前，字符串常量池在<font color='red'>方法区</font></p>\n<p>之后，在<font color='red'>堆空间</font>中</p>\n</blockquote>\n<h4 id=\"7-string-可以在-switch中使用吗上海睿\"><a class=\"anchor\" href=\"#7-string-可以在-switch中使用吗上海睿\">#</a> <mark>7. String 可以在 switch 中使用吗？(上海 * 睿)</mark></h4>\n<p>从<font color='red'>JDK 7</font>开始，switch 支持字符串 String 类型了 ¹³。但是要注意以下几点：</p>\n<ul>\n<li>\n<p><font color='red'>switch 表达式中的字符串必须是一个<strong> String 对象</strong></font>，不能是 null³⁶。</p>\n</li>\n<li>\n<p><font color='red'>case 标签必须是<strong>字符串常量或字面量</strong></font>，不能是变量或表达式 ¹³。</p>\n<blockquote>\n<p>字符串常量、字面量的区别，主要是在于它们的存储位置和创建方式不同：</p>\n<ul>\n<li>字符串常量（String Constant）是指在程序中<font color='red'>直接用双引号括起来的字符串</font>，例如 &quot;Hello&quot;。这些字符串常量会被编译器放在一个特殊的内存区域，叫做<font color='red'>字符串常量池</font>（String Constant Pool），它是 Java 堆（Heap）的一部分。字符串常量池可以实现字符串的共享，避免重复创建相同的字符串对象⁹⁷。</li>\n<li>字符串字面量（String Literal）是指在程序中<font color='red'>用 new 关键字创建的字符串对象</font>，例如 new String (&quot;Hello&quot;)。这些字符串字面量会被分配在 Java<font color='red'>堆</font>中的普通区域，每次创建都会产生一个新的字符串对象⁹⁷。</li>\n</ul>\n<p>下面是一个示例代码，可以看出字符串常量和字面量的区别：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符串常量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符串常量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符串字面量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符串字面量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true，s1 和 s2 指向同一个字符串常量池中的对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">==</span> s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false，s3 和 s4 指向不同的字符串字面量对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">==</span> s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false，s1 和 s3 指向不同的内存区域</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li>\n<p>switch 语句会根据字符串的 hash 值和 equals 方法来判断匹配的 case²⁶。</p>\n</li>\n</ul>\n<p>下面是一个使用 String 类型的 switch 语句的代码示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> fruit <span class=\"token operator\">=</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//switch 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//switch 语句</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"apple\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">//case 标签</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It is an apple.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"banana\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It is a banana.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"orange\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It is an orange.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It is not a fruit.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"8-string中有哪些方法列举几个闪购\"><a class=\"anchor\" href=\"#8-string中有哪些方法列举几个闪购\">#</a> 8. String 中有哪些方法？列举几个（闪 * 购）</h4>\n<p>角度一：String 与其他结构间的转换</p>\n<ul>\n<li>基本数据类型 / 包装类 --&gt; String\n<ul>\n<li>public <font color='orange'>static</font> String <font color='gree'>valueOf</font>(基本数据类型 / 包装类 xxx)</li>\n</ul>\n</li>\n<li>String --&gt; char[] / byte[]\n<ul>\n<li>public char[] <font color='gree'>toCharArray()</font></li>\n<li>public byte[] <font color='gree'>getBytes()</font></li>\n</ul>\n</li>\n</ul>\n<p>角度二：常用方法...</p>\n<ul>\n<li>isEmpty()；<font color='red'>length()</font>；concat(String str)；</li>\n<li>equals(Object obj)；equalsIgnoreCase(String anotherString)；</li>\n<li><font color='red'>compareTo</font>(String anotherString)；compareToIgnoreCase(String other)；</li>\n<li>toLowerCase()；toUpperCase()；</li>\n<li><font color='red'>trim</font>()；<font color='red'>intern</font>()；</li>\n</ul>\n<p>角度三：查找</p>\n<ul>\n<li><font color='red'>contains</font>(String str)</li>\n<li>indexOf(String str)； indexOf(String str, int fromIndex)；</li>\n<li><font color='red'>lastIndexOf</font>(String str)；lastIndexOf(String str, int fromIndex)；</li>\n</ul>\n<p>角度四：字符串截取</p>\n<ul>\n<li>substring(int beginIndex)；</li>\n<li>substring(int beginIndex, int endIndex)；</li>\n</ul>\n<p>角度五：和 char/char [] 相关</p>\n<ul>\n<li><font color='red'>charAt</font>(int index)</li>\n<li><font color='red'>toCharArray</font>()</li>\n</ul>\n<p>角度六：开头、结尾</p>\n<ul>\n<li><font color='red'>startsWith</font>(String prefix)</li>\n<li>startsWith(String prefix, int offset)</li>\n<li><font color='red'>endsWith</font>(String postfix)</li>\n</ul>\n<p>角度七：替换</p>\n<ul>\n<li><font color='red'>replace</font>(char oldChar, char newChar)</li>\n<li><font color='red'>replaceAll</font>(String regex, String replacement)</li>\n<li><font color='red'>replaceFirst</font>(String regex, String replacement)</li>\n</ul>\n<h4 id=\"9-substring到底做了什么银数据\"><a class=\"anchor\" href=\"#9-substring到底做了什么银数据\">#</a> <mark>9. substring () 到底做了什么？(银 * 数据)</mark></h4>\n<p>substring () 方法的<font color='orange'>底层实现是 <code>new String(value, beginIndex, subLen)</code> ，即创建一个新的字符串对象， <code>value</code>  指向 s 的字符数组，起始索引为 <code>beginIndex</code> ，子串长度为 <code>subLen</code> </font>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefg\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建一个字符串对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// cde</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 底层实现相当于：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// String s1 = new String (s.value, 2, 3); 创建一个新的字符串对象，value 指向 s 的字符数组，起始索引为 2，子串长度为 3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样做的好处是<font color='red'>可以实现字符串的快速共享，节省内存空间</font>，提高效率⁴。但是也有一些缺点，比如：</p>\n<ul>\n<li>如果原字符串很大，而截取的子串很小，那么会造成<font color='red'>内存浪费</font>，因为子串对象仍然持有原字符串的字符数组的引用⁴。</li>\n<li>如果对原字符串或者子串对象进行修改（比如使用 replace () 方法），那么会导致新的字符数组的创建，<font color='red'>增加了时间和空间的开销</font>⁴。</li>\n</ul>\n<h3 id=\"22-string-stringbuffer-stringbuilder\"><a class=\"anchor\" href=\"#22-string-stringbuffer-stringbuilder\">#</a> 2.2 String、StringBuffer、StringBuilder</h3>\n<h4 id=\"1-java中操作字符串有哪些类他们之间有什么区别-南电网\"><a class=\"anchor\" href=\"#1-java中操作字符串有哪些类他们之间有什么区别-南电网\">#</a> <mark>1. Java 中操作字符串有哪些类？他们之间有什么区别。（南 * 电网）</mark></h4>\n<pre><code>类似问题：\n&gt; String 和 StringBuffer区别？(亿*国际、天*隆、*团)\n&gt; StringBuilder和StrignBuffer的区别？（平*金服）\n&gt; StringBuilder和StringBuffer的区别以及实现？（*为）\n</code></pre>\n<pre><code>&gt; String:不可变的字符序列;底层使用char[] （jdk8及之前），底层使用byte[] （jdk9及之后）\n&gt; StringBuffer:可变的字符序列;JDK1.0声明，线程安全的，效率低;底层使用char[] （jdk8及之前），底层使用byte[] （jdk9及之后）\n&gt; StringBuilder:可变的字符序列;JDK5.0声明，线程不安全的,效率高;底层使用char[] （jdk8及之前），底层使用byte[] （jdk9及之后）\n</code></pre>\n<ul>\n<li>\n<p><font color='cornflowerblue'><strong>String</strong></font></p>\n<ul>\n<li>\n<p><font color='red'>不可变</font>的字符序列</p>\n<blockquote>\n<p>private <strong>final</strong> char value[];</p>\n</blockquote>\n</li>\n<li>\n<p><font color='red'>效率最低</font></p>\n</li>\n<li>\n<p>底层使用<font color='red'>char[]</font>数组存储 (JDK8.0 中)，底层使用 byte [] 数组存储（JDK9 及之后）</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong><font color='cornflowerblue'>StringBuffer</font></strong></p>\n<ul>\n<li>\n<p><font color='red'>可变的</font>字符序列</p>\n<blockquote>\n<p>char[] value;</p>\n</blockquote>\n</li>\n<li>\n<p>JDK1.0 引入</p>\n</li>\n<li>\n<p><font color='red'>线程安全</font>（方法有 synchronized 修饰），因此<font color='red'>效率比 StringBuilder 低</font></p>\n</li>\n<li>\n<p>底层使用<font color='red'>char[]</font>数组存储 (JDK8.0 中)，底层使用 byte [] 数组存储（JDK9 及之后）</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong><font color='cornflowerblue'>StringBuilder</font></strong>：</p>\n<ul>\n<li>\n<p><font color='red'>可变的</font>字符序列</p>\n<blockquote>\n<p>char[] value;</p>\n</blockquote>\n</li>\n<li>\n<p>jdk1.5 引入</p>\n</li>\n<li>\n<p><font color='red'>线程不安全</font>的，<font color='red'>效率高</font></p>\n</li>\n<li>\n<p>底层使用<font color='red'>char[]</font>数组存储 (JDK8.0 中)，底层使用 byte [] 数组存储（JDK9 及之后）</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h4 id=\"stringbuffer-stringbuilder的可变性分析\"><a class=\"anchor\" href=\"#stringbuffer-stringbuilder的可变性分析\">#</a> StringBuffer、StringBuilder 的可变性分析</h4>\n<ul>\n<li>\n<p>String</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// final char[] value = new char[0];</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// final char[] value = new char[]&#123;'a','b','c'&#125;;</span></pre></td></tr></table></figure></li>\n<li>\n<p>StringBuilder</p>\n<ul>\n<li>内部属性\n<ul>\n<li>char [] value：存储字符序列</li>\n<li>int count：实际存储的字符个数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StringBuilder</span> sBuilder1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// char[] value = new char[16];</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">StringBuilder</span> sBuilder2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// char[] value = new char[16 + \"abc\".length()];</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sBuilder1<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ac\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// value[0]='a'; value[1]='c';</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sBuilder1<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token char\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// value[2]='b';</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 不断添加... 一旦 count 超过 value.length ()，就需要扩容（扩容为原来的 2 倍 + 2），</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 然后将原来的 value 数组复制到新的 value 数组中。</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"开发启示\"><a class=\"anchor\" href=\"#开发启示\">#</a> 开发启示</h4>\n<ul>\n<li>如果开发中，需要对字符串进行频繁的增、删、改操作，建议使用 StringBuffer、StringBuilder</li>\n<li>如果开发中，不涉及多线程，建议使用 StringBuilder，因为效率更高</li>\n<li>如果开发中，可以大体确定要操作的字符个数，建议使用带有 int capacity 参数的构造器，可以避免多次扩容，性能更优</li>\n</ul>\n</blockquote>\n<h4 id=\"2-string的线程安全问题闪购\"><a class=\"anchor\" href=\"#2-string的线程安全问题闪购\">#</a> <mark>2. String 的线程安全问题（闪 * 购）</mark></h4>\n<blockquote>\n<p>String 类是 Java 中表示字符串的一个类，它有以下特点⁴：</p>\n<ul>\n<li>String 类被 final 修饰，是一个<font color='red'>不可变的类</font>，也就是说一旦创建了一个 String 对象，它的内容就不能被修改 ²³⁵。</li>\n<li>String 类重写了 equals () 和 hashCode () 方法，使得<font color='red'>两个内容相同的 String 对象可以被认为是相等的</font>，并且具有相同的哈希值⁵。</li>\n<li>String 类实现了 Serializable 接口，表示它可以被<font color='red'>序列化和反序列化</font>⁵。</li>\n<li>String 类实现了 Comparable 接口，表示它可以<font color='red'>按照字典顺序进行比较</font>⁵。</li>\n</ul>\n</blockquote>\n<p><font color='orange'>由于<font color='cornflowerblue'><strong>String</strong></font>是不可变的，所以它是线程安全的</font>。也就是说<font color='red'>多个线程可以同时访问同一个 String 对象而不会产生冲突</font>³。但是这也意味着<font color='red'>每次对 String 对象进行修改（比如拼接、替换、截取等操作）都会产生一个新的 String 对象，这会增加<strong>内存开销</strong>和<strong>垃圾回收</strong>的压力</font>³⁴。</p>\n<p>为了解决这个问题，Java 提供了两个类：<strong><font color='cornflowerblue'>StringBuffer</font><strong>和</strong><font color='cornflowerblue'>StringBuilder</font></strong>，它们都<font color='red'>继承自 AbstractStringBuilder 类</font>，可以实现<font color='red'><strong>字符串的可变性</strong></font>和<font color='red'><strong>动态扩容</strong></font>¹。它们的区别在于：</p>\n<ul>\n<li>StringBuffer 是线程安全的，它的方法都使用了 synchronized 关键字进行同步，保证了多线程环境下的数据一致性 ¹。</li>\n<li>StringBuilder 是非线程安全的，它的方法没有使用 synchronized 关键字进行同步，所以它的性能比 StringBuffer 更高，但是在多线程环境下可能会出现数据不一致的问题 ¹。</li>\n</ul>\n<p>因此，在 Java 中使用字符串时，需要根据具体的场景和需求来选择合适的类。一般来说：</p>\n<ul>\n<li>如果字符串内容不需要改变，或者只有少量的改变操作，可以使用 String 类⁴。</li>\n<li>如果字符串内容需要频繁地改变，并且在多线程环境下运行，可以使用 StringBuffer 类 ¹。</li>\n<li>如果字符串内容需要频繁地改变，并且在单线程环境下运行，或者对线程安全没有要求，可以使用 StringBuilder 类 ¹。</li>\n</ul>\n<h4 id=\"3-stringbuilder和stringbuffer的线程安全问题润软件\"><a class=\"anchor\" href=\"#3-stringbuilder和stringbuffer的线程安全问题润软件\">#</a> 3. StringBuilder 和 StringBuffer 的线程安全问题（润 * 软件）</h4>\n<p>见上一题。</p>\n<h3 id=\"23-comparator与comparable\"><a class=\"anchor\" href=\"#23-comparator与comparable\">#</a> 2.3 Comparator 与 Comparable</h3>\n<h4 id=\"1-简单说说-comparable-和-comparator-的区别和场景软力\"><a class=\"anchor\" href=\"#1-简单说说-comparable-和-comparator-的区别和场景软力\">#</a> <mark>1. 简单说说 Comparable 和 Comparator 的区别和场景？（软 ** 力）</mark></h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">自然排序：Comparable 接口</th>\n<th style=\"text-align:center\">定制排序：Comparator 接口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">内部比较器</td>\n<td style=\"text-align:center\">外部比较器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">单一的、唯一的</td>\n<td style=\"text-align:center\">灵活的、多样的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">一劳永逸的</td>\n<td style=\"text-align:center\">临时的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">重写 <code>compareTo(Object obj)</code>  抽象方法</td>\n<td style=\"text-align:center\">重写 <code>compare(Object obj1,Object obj2)</code>  抽象方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">对具体类的声明、内部进行修改</td>\n<td style=\"text-align:center\">将实现类的实例作为参数传递给 sort () 即可</td>\n</tr>\n</tbody>\n</table>\n<p>Comparable 和 Comparator 都是 Java 中用来实现对象比较和排序的接口，它们的区别和场景如下 ²³⁴⁵：</p>\n<ul>\n<li>Comparable 是一个<font color='red'>内部比较器</font>，它定义在要比较的类中，让类<font color='red'>实现 Comparable 接口并重写 compareTo 方法</font>，该方法返回一个整数，表示当前对象和另一个对象的大小关系。如果要让一个类的对象可以按照<font color='red'>自然顺序</font>进行排序，就需要实现 Comparable 接口。</li>\n<li>Comparator 是一个<font color='red'>外部比较器</font>，它定义在要比较的类之外，让一个单独的类<font color='red'>实现 Comparator 接口并重写 compare 方法</font>，该方法也返回一个整数，表示两个对象的大小关系。如果要让一个类的对象可以<font color='red'>按照不同的规则进行排序</font>，就需要使用 Comparator 接口。</li>\n<li>Comparable 和 Comparator 都可以用来对数组或集合中的元素进行排序，但是<font color='red'>Comparable 只能提供一种排序规则，而 Comparator 可以提供多种排序规则</font>。如果要对数组或集合中的元素进行排序，可以使用 Arrays.sort 或 Collections.sort 方法，并传入相应的比较器。</li>\n<li>Comparable 和 Comparator 都可以与 lambda 表达式结合使用，简化代码的编写。例如，可以使用 (a,b)-&gt;a.getName ().compareTo (b.getName ()) 来创建一个按照名称排序的 Comparator 对象。</li>\n</ul>\n<h4 id=\"2-comparable-接口和-comparator-接口实现比较阿\"><a class=\"anchor\" href=\"#2-comparable-接口和-comparator-接口实现比较阿\">#</a> 2. Comparable 接口和 Comparator 接口实现比较（阿 *）</h4>\n<p>Java 中 Comparable 接口和 Comparator 接口都可以用来实现对象的比较和排序，它们的用法如下⁴⁶⁷：</p>\n<ul>\n<li>Comparable 接口是一个内部比较器，它<font color='red'><strong>定义在要比较的类中</strong>，让类实现 Comparable 接口并重写 compareTo 方法</font>，该方法返回一个整数，表示当前对象和另一个对象的大小关系。例如，String 类就实现了 Comparable 接口，可以按照字典顺序进行比较。要使用 Comparable 接口对数组或集合中的元素进行排序，可以使用 Arrays.sort 或 Collections.sort 方法，并不需要传入比较器。</li>\n<li>Comparator 接口是一个外部比较器，它<font color='red'><strong>定义在要比较的类之外</strong>，让一个单独的类实现 Comparator 接口并重写 compare 方法</font>，该方法也返回一个整数，表示两个对象的大小关系。例如，可以创建一个按照年龄排序的 Comparator 对象，用来比较 Student 类的对象。要使用 Comparator 接口对数组或集合中的元素进行排序，可以使用 Arrays.sort 或 Collections.sort 方法，并<font color='red'>传入相应的比较器</font>。</li>\n<li>代码示例：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个 Student 类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 实现 Comparable 接口的 compareTo 方法，按照姓名排序</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 重写 toString 方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Student[name=\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\",age=\"</span><span class=\"token operator\">+</span>age<span class=\"token operator\">+</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 定义一个按照年龄排序的 Comparator 对象</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AgeComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o1<span class=\"token punctuation\">,</span><span class=\"token class-name\">Student</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span>age<span class=\"token operator\">-</span>o2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 测试代码</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 创建一个 Student 数组</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Student</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> students<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Charlie\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"David\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">//------ 使用 Arrays.sort 方法对数组进行排序，不传入比较器，按照姓名排序 ------</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 输出：[Student [name=Alice,age=20], Student [name=Bob,age=18], Student [name=Charlie,age=22], Student [name=David,age=19]]</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//------ 创建一个 AgeComparator 对象 ------</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">AgeComparator</span> ac<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AgeComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 使用 Arrays.sort 方法对数组进行排序，传入比较器，按照年龄排序</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span>ac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 输出：[Student [name=Bob,age=18], Student [name=David,age=19], Student [name=Alice,age=20], Student [name=Charlie,age=22]]</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%89/",
            "title": "宋红康_第10章：多线程",
            "date_published": "2023-11-12T03:06:50.141Z",
            "content_html": "<h1 id=\"第10章随堂复习与企业真题多线程\"><a class=\"anchor\" href=\"#第10章随堂复习与企业真题多线程\">#</a> 第 10 章：随堂复习与企业真题（多线程）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-几个概念\"><a class=\"anchor\" href=\"#1-几个概念\">#</a> 1. 几个概念</h3>\n<pre><code>程序(program)：为完成特定任务，用某种语言编写的`一组指令的集合`。即指一段静态的代码。\n\n进程(process)：程序的一次执行过程，或是正在内存中运行的应用程序。程序是静态的，进程是动态的。\n              进程作为操作系统调度和分配资源的最小单位。\n\n线程(thread)：进程可进一步细化为线程，是程序内部的一条执行路径。\n             线程作为CPU调度和执行的最小单位\n</code></pre>\n<pre><code>线程调度策略\n分时调度：所有线程`轮流使用` CPU 的使用权，并且平均分配每个线程占用 CPU 的时间。\n\n抢占式调度：让`优先级高`的线程以`较大的概率`优先使用 CPU。如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度。\n</code></pre>\n<pre><code>&gt; 单核CPU与多核CPU\n&gt; 并行与并发\n</code></pre>\n<h3 id=\"2-如何创建多线程重点\"><a class=\"anchor\" href=\"#2-如何创建多线程重点\">#</a> 2. <mark>如何创建多线程</mark>（重点）</h3>\n<ul>\n<li>方式 1：继承 Thread 类</li>\n<li>方式 2：实现 Runnable 接口</li>\n<li>方式 3：实现 Callable 接口 （jdk5.0 新增）</li>\n<li>方式 4：使用线程池（jdk5.0 新增）</li>\n</ul>\n<h3 id=\"3-thread类的常用方法-线程的生命周期\"><a class=\"anchor\" href=\"#3-thread类的常用方法-线程的生命周期\">#</a> 3. Thread 类的常用方法、线程的生命周期</h3>\n<pre><code>熟悉常用的构造器和方法：\n1. 线程中的构造器\n- public Thread() :分配一个新的线程对象。\n- public Thread(String name) :分配一个指定名字的新的线程对象。\n- public Thread(Runnable target) :指定创建线程的目标对象，它实现了Runnable接口中的run方法\n- public Thread(Runnable target,String name) :分配一个带有指定目标新的线程对象并指定名字。\n\n2.线程中的常用方法：\n&gt; start():①启动线程 ②调用线程的run()\n&gt; run():将线程要执行的操作，声明在run()中。\n&gt; currentThread():获取当前执行代码对应的线程\n&gt; getName(): 获取线程名\n&gt; setName(): 设置线程名\n&gt; sleep(long millis):静态方法，调用时，可以使得当前线程睡眠指定的毫秒数\n&gt; yield():静态方法，一旦执行此方法，就释放CPU的执行权\n&gt; join(): 在线程a中通过线程b调用join()，意味着线程a进入阻塞状态，直到线程b执行结束，线程a才结束阻塞状态，继续执行。\n&gt; isAlive():判断当前线程是否存活\n\n3. 线程的优先级：\ngetPriority():获取线程的优先级\nsetPriority():设置线程的优先级。范围[1,10]\n\n\nThread类内部声明的三个常量：\n- MAX_PRIORITY（10）：最高优先级\n- MIN _PRIORITY （1）：最低优先级\n- NORM_PRIORITY （5）：普通优先级，默认情况下main线程具有普通优先级。\n</code></pre>\n<p>线程的生命周期：</p>\n<p>jdk5.0 之前：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20221203142900528.png\" alt=\"image-20221203142900528\" /></p>\n<p>jdk5.0 及之后：Thread 类中定义了一个内部类 State</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token constant\">NEW</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token constant\">RUNNABLE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token constant\">BLOCKED</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token constant\">WAITING</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token constant\">TIMED_WAITING</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token constant\">TERMINATED</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20221203143046926.png\" alt=\"image-20221203143046926\" /></p>\n<h3 id=\"4-如何解决线程安全问题重点-难点\"><a class=\"anchor\" href=\"#4-如何解决线程安全问题重点-难点\">#</a> 4. <mark>如何解决线程安全问题</mark> (重点、难点)</h3>\n<ul>\n<li>\n<p>什么是线程的安全问题？多个线程操作共享数据，就有可能出现安全问题。</p>\n</li>\n<li>\n<p>如何解决线程的安全问题？有几种方式？</p>\n<ul>\n<li>\n<p><font color='gree'>同步机制</font>：① 同步代码块 ② 同步方法</p>\n<ul>\n<li>重点关注两个事：共享数据及操作共享数据的代码；<font color='red'>同步监视器（保证<strong>唯一性</strong>）</font></li>\n</ul>\n<pre><code>在实现Runnable接口的方式中，同步监视器可以考虑使用：this。\n在继承Thread类的方式中，同步监视器要慎用this，可以考虑使用：当前类.class。\n</code></pre>\n<pre><code>非静态的同步方法，默认同步监视器是this\n静态的同步方法，默认同步监视器是当前类本身。\n</code></pre>\n</li>\n<li>\n<p>jdk5.0 新增：<font color='gree'>Lock 接口及其实现类</font>。（保证多个线程共用同一个 Lock 的实例）</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-同步机制相关的问题\"><a class=\"anchor\" href=\"#5-同步机制相关的问题\">#</a> 5. 同步机制相关的问题</h3>\n<ul>\n<li>懒汉式的线程安全的写法</li>\n<li>同步机制会带来的问题：死锁\n<ul>\n<li>死锁产生的条件及规避方式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-线程间的通信\"><a class=\"anchor\" href=\"#6-线程间的通信\">#</a> 6. 线程间的通信</h3>\n<ul>\n<li>\n<p>在同步机制下，考虑线程间的通信</p>\n</li>\n<li>\n<p><font color='red'>wait () 、notify () 、notifyAll () 都需要使用在<strong>同步代码块或同步方法</strong>中</font>。</p>\n</li>\n<li>\n<p>高频笔试题：wait () /sleep ()</p>\n</li>\n</ul>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"21-线程概述\"><a class=\"anchor\" href=\"#21-线程概述\">#</a> 2.1 线程概述</h3>\n<h4 id=\"1-什么是线程云网络\"><a class=\"anchor\" href=\"#1-什么是线程云网络\">#</a> 1. 什么是线程 (* 云网络)</h4>\n<ul>\n<li>是进程内部的 <code>一条执行路径</code></li>\n<li>是<font color='orange'>CPU 调度和执行的最小单位</font></li>\n</ul>\n<h4 id=\"2-线程和进程有什么区别团-腾-云网络-神岳-言有物-直科技\"><a class=\"anchor\" href=\"#2-线程和进程有什么区别团-腾-云网络-神岳-言有物-直科技\">#</a> 2. 线程和进程有什么区别 (* 团、腾 *、* 云网络、神 ** 岳、言 * 有物、直 * 科技)</h4>\n<p>进程：对应<font color='red'>一个运行中的程序</font>。是<font color='orange'>操作系统<u>调度和分配资源</u>的最小单位</font></p>\n<p>线程：是运行中的<font color='red'>进程的一条或多条执行路径</font>。是<font color='orange'>CPU<u>调度和执行</u>的最小单位</font></p>\n<h4 id=\"3-多线程使用场景嘉医疗\"><a class=\"anchor\" href=\"#3-多线程使用场景嘉医疗\">#</a> 3. 多线程使用场景（嘉 * 医疗）</h4>\n<ul>\n<li>手机 app 应用的图片的下载</li>\n<li>迅雷的下载</li>\n<li>Tomcat 服务器上 web 应用，多个客户端发起请求，Tomcat 针对多个请求开辟多个线程处理</li>\n</ul>\n<h3 id=\"22-如何实现多线程\"><a class=\"anchor\" href=\"#22-如何实现多线程\">#</a> 2.2 如何实现多线程</h3>\n<h4 id=\"1-如何在java中出实现多线程阿校招-当置业-鸿网络-奥医药-科软-慧-上海驿软件-海科\"><a class=\"anchor\" href=\"#1-如何在java中出实现多线程阿校招-当置业-鸿网络-奥医药-科软-慧-上海驿软件-海科\">#</a> 1. 如何在 Java 中出实现多线程？(阿 * 校招、当 * 置业、鸿 * 网络、奥 * 医药、* 科软、慧 *、上海驿 * 软件、海 * 科)</h4>\n<pre><code>类似问题：\n&gt; 创建多线程用Runnable还是Thread(北京中*瑞飞)\n&gt; 多线程有几种实现方法，都是什么？（锐*（上海）企业管理咨询）\n</code></pre>\n<p>四种：</p>\n<ul>\n<li>继承 Thread 类</li>\n<li>实现 Runnable 接口</li>\n<li>实现 Callable 接口</li>\n<li>线程池</li>\n</ul>\n<h4 id=\"2-thread类中的start和run有什么区别北京中油-爱信-神泰岳-直科技软国际上海学网络\"><a class=\"anchor\" href=\"#2-thread类中的start和run有什么区别北京中油-爱信-神泰岳-直科技软国际上海学网络\">#</a> 2. Thread 类中的 start () 和 run () 有什么区别？(北京中油 **、爱 * 信、神 * 泰岳、直 * 科技，* 软国际，上海 * 学网络)</h4>\n<p>start()：① <font color='red'>开启线程（状态由 NEW 到 RUNNABLE）</font>② 调用线程的 run ()</p>\n<h4 id=\"3-启动一个线程是用run还是start度\"><a class=\"anchor\" href=\"#3-启动一个线程是用run还是start度\">#</a> 3. 启动一个线程是用 run () 还是 start ()?（* 度）</h4>\n<p>start()</p>\n<h4 id=\"4-java中runnable和callable有什么不同平金服-银数据-好在-亿征信-花儿网络\"><a class=\"anchor\" href=\"#4-java中runnable和callable有什么不同平金服-银数据-好在-亿征信-花儿网络\">#</a> 4. Java 中 Runnable 和 Callable 有什么不同？(平 * 金服、银 * 数据、好 * 在、亿 * 征信、花儿 ** 网络)</h4>\n<p>与 Runnable 接口相比， Callable 功能更强大些</p>\n<ul>\n<li>call () 可以<font color='red'>有返回值</font></li>\n<li>call()<font color='red'>可以抛出异常</font></li>\n<li><font color='red'>支持泛型参数</font></li>\n</ul>\n<p>缺点：<font color='red'>如果在主线程中需要获取分线程 call () 的返回值，则此时的主线程是阻塞状态的</font>。</p>\n<h4 id=\"5-什么是线程池为什么要使用它上海明物联网科技\"><a class=\"anchor\" href=\"#5-什么是线程池为什么要使用它上海明物联网科技\">#</a> 5. 什么是线程池，为什么要使用它？(上海明 * 物联网科技)</h4>\n<pre><code>此方式的好处：\n&gt; 提高了程序执行的效率。（因为线程已经提前创建好了）\n&gt; 提高了资源的复用率。（因为执行完的线程并未销毁，而是可以继续执行其他的任务）\n&gt; 可以设置相关的参数，对线程池中的线程的使用进行管理\n</code></pre>\n<p><font color='orange'>提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。</font></p>\n<p><strong>好处：</strong></p>\n<ul>\n<li>\n<p><font color='red'>提高响应速度</font>（因为线程已经提前创建好了）</p>\n</li>\n<li>\n<p><font color='red'>降低资源消耗</font>（因为执行完的线程并未销毁，可以继续执行其他任务）</p>\n</li>\n<li>\n<p><font color='red'><strong>便于线程管理</strong></font>，相关参数如下：</p>\n<ul>\n<li><code>corePoolSize</code> ：核心池的大小</li>\n<li><code>maximumPoolSize</code> ：最大线程数</li>\n<li><code>keepAliveTime</code> ：线程没有任务时最多保持多长时间后会终止</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"23-常用方法-生命周期\"><a class=\"anchor\" href=\"#23-常用方法-生命周期\">#</a> 2.3 常用方法、生命周期</h3>\n<h4 id=\"1-sleep-和-yield区别神泰岳\"><a class=\"anchor\" href=\"#1-sleep-和-yield区别神泰岳\">#</a> 1. sleep () 和 yield () 区别？(神 * 泰岳)</h4>\n<p>sleep ()：一旦调用，就进入<font color='red'>TIMED_WAITING</font>状态</p>\n<p>yield ()：释放 cpu 的执行权，仍处在<font color='red'>RUNNABLE</font>的状态</p>\n<h4 id=\"2-线程创建的中的方法-属性情况招通-数互融\"><a class=\"anchor\" href=\"#2-线程创建的中的方法-属性情况招通-数互融\">#</a> 2. 线程创建的中的方法、属性情况？(招通 **、数 * 互融)</h4>\n<p>继承 Thread 类的方式：</p>\n<ul>\n<li>方法：\n<ul>\n<li>start ()：启动线程，执行 run () 方法。</li>\n<li>run ()：定义线程的执行逻辑。</li>\n<li>sleep ()：让当前线程睡眠一段时间，单位是毫秒。</li>\n<li>interrupt ()：中断线程的执行。</li>\n<li><font color='red'>join()</font>：等待该线程终止。</li>\n</ul>\n</li>\n<li>属性：\n<ul>\n<li>name：线程的名称。</li>\n<li><font color='red'>priority</font>：线程的优先级，取值范围为 1~10，默认值为 5。</li>\n<li>id：线程的唯一标识符，由 JVM 自动生成。</li>\n</ul>\n</li>\n</ul>\n<p>实现 Runnable 接口的方式：</p>\n<ul>\n<li>方法：\n<ul>\n<li>run ()：定义线程的执行逻辑。</li>\n</ul>\n</li>\n<li>属性：\n<ul>\n<li>无。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-线程的生命周期中国电子商务中心-科软-慧\"><a class=\"anchor\" href=\"#3-线程的生命周期中国电子商务中心-科软-慧\">#</a> 3. 线程的生命周期？(中国 ** 电子商务中心、* 科软、慧 *)</h4>\n<p>NEW、RUNNABLE、TERMINATED、<font color='red'>BLOCKED、WAITING、TIMED_WAITING</font></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230316182537207.png\" alt=\"image-20230316182537207\" /></p>\n<h4 id=\"4-线程的基本状态以及状态之间的关系直科技\"><a class=\"anchor\" href=\"#4-线程的基本状态以及状态之间的关系直科技\">#</a> 4. 线程的基本状态以及状态之间的关系？(直 * 科技)</h4>\n<pre><code>类似问题：\n&gt; 线程有哪些状态？如何让线程进入阻塞？（华*中*，*兴）\n&gt; 线程有几个状态，就绪和阻塞有什么不同。（美*）\n&gt; Java的线程都有哪几种状态（字*跳动、*东、*手）\n</code></pre>\n<p>见上一题。</p>\n<h4 id=\"5-stop和suspend方法为何不推荐使用上海驿软件\"><a class=\"anchor\" href=\"#5-stop和suspend方法为何不推荐使用上海驿软件\">#</a> 5. stop () 和 suspend () 方法为何不推荐使用？（上海驿 * 软件）</h4>\n<p>stop ()：一旦执行，线程就结束了，导致<font color='red'>run () 有未执行完毕的代码</font>。stop()<font color='red'>会释放同步监视器，导致线程安全问题</font>。</p>\n<p>suspend ()：与 resume () 搭配使用，会导致<font color='red'>死锁</font>。</p>\n<h4 id=\"6-java-线程优先级是怎么定义的软动力\"><a class=\"anchor\" href=\"#6-java-线程优先级是怎么定义的软动力\">#</a> 6. Java 线程优先级是怎么定义的？（软 * 动力）</h4>\n<p>三个常量：MIN_PRIORITY（1）、NORM_PRIORITY（5）、MAX_PRIORITY（10）。</p>\n<p>范围：[1,10]。</p>\n<h3 id=\"24-线程安全与同步机制\"><a class=\"anchor\" href=\"#24-线程安全与同步机制\">#</a> 2.4 线程安全与同步机制</h3>\n<h4 id=\"1-你如何理解线程安全的线程安全问题是如何造成的软国际\"><a class=\"anchor\" href=\"#1-你如何理解线程安全的线程安全问题是如何造成的软国际\">#</a> 1. 你如何理解线程安全的？线程安全问题是如何造成的？（* 软国际）</h4>\n<pre><code>类似问题：\n&gt; 线程安全说一下？（奥*医药）\n&gt; 对线程安全的理解（*度校招）\n&gt; 什么是线程安全？(银*数据)\n</code></pre>\n<p>线程安全问题通常是由于<font color='red'><u>多个线程</u>同时对<u>共享的数据</u>进行读<strong>写</strong>操作而引起的</font>。</p>\n<h4 id=\"2-多线程共用一个数据变量需要注意什么史夫软件\"><a class=\"anchor\" href=\"#2-多线程共用一个数据变量需要注意什么史夫软件\">#</a> 2. 多线程共用一个数据变量需要注意什么？（史 * 夫软件）</h4>\n<p>线程安全问题</p>\n<h4 id=\"3-多线程保证线程安全一般有几种方式来科技-北京信天\"><a class=\"anchor\" href=\"#3-多线程保证线程安全一般有几种方式来科技-北京信天\">#</a> 3. 多线程保证线程安全一般有几种方式？（来 * 科技、北京 * 信天 *）</h4>\n<pre><code>类似问题：\n&gt; 如何解决其线程安全问题，并且说明为什么这样子去解决？（北京联合**）\n&gt; 请说出你所知道的线程同步的方法。（天*伟业）\n&gt; 哪些方法实现线程安全？（阿*）   \n&gt; 同步有几种实现方法，都是什么? （锐*企业管理咨询）\n&gt; 你在实际编码过程中如何避免线程安全问题？（*软国际）\n&gt; 如何让线程同步?（*手）\n&gt; 多线程下有什么同步措施（阿*校招）\n&gt; 同步有几种实现方法，都是什么？（海*科）\n</code></pre>\n<ul>\n<li>\n<p>同步机制</p>\n<ul>\n<li>同步代码块</li>\n<li>同步方法</li>\n</ul>\n</li>\n<li>\n<p>Lock 接口</p>\n</li>\n</ul>\n<h4 id=\"4-用什么关键字修饰同步方法上海驿软件\"><a class=\"anchor\" href=\"#4-用什么关键字修饰同步方法上海驿软件\">#</a> 4. 用什么关键字修饰同步方法？（上海驿 * 软件）</h4>\n<p>synchronized</p>\n<h4 id=\"5-synchronized加在静态方法和普通方法区别来科技\"><a class=\"anchor\" href=\"#5-synchronized加在静态方法和普通方法区别来科技\">#</a> 5. synchronized 加在静态方法和普通方法区别（来 * 科技）</h4>\n<p>synchronized 声明在方法上时，同步监视器默认为：</p>\n<ul>\n<li>静态的：当前类.class</li>\n<li>非静态的：this</li>\n</ul>\n<h4 id=\"6-java中synchronized和reentrantlock有什么不同三重工\"><a class=\"anchor\" href=\"#6-java中synchronized和reentrantlock有什么不同三重工\">#</a> 6. Java 中 synchronized 和 ReentrantLock 有什么不同 (三 * 重工)</h4>\n<pre><code>类似问题：\n&gt; 多线程安全机制中 synchronized和lock的区别（中*国际、*美、鸿*网络）\n&gt; 怎么实现线程安全，各个实现方法有什么区别？（美*、字*跳动）\n&gt; synchronized 和 lock 区别（阿*、*壳）\n</code></pre>\n<pre><code>synchronized不管是同步代码块还是同步方法，都需要在结束一对&#123;&#125;之后，释放对同步监视器的调用。\nLock是通过两个方法控制需要被同步的代码，更灵活一些。\nLock作为接口，提供了多种实现类，适合更多更复杂的场景，效率更高。\n</code></pre>\n<p><strong>synchronized 与 Lock 的对比</strong></p>\n<ol>\n<li><font color='red'>Lock 是显式锁</font>（手动开启和关闭锁，别忘记关闭锁），<font color='red'>synchronized 是隐式锁</font>，出了作用域、遇到异常等自动解锁</li>\n<li><font color='red'>Lock 只有代码块锁</font>，<font color='red'>synchronized 有代码块锁和方法锁</font></li>\n<li><font color='red'>使用 Lock 锁，JVM 将花费较少的时间来调度线程，性能更好</font>。并且具有<font color='red'>更好的扩展性（提供更多的子类）</font>，更体现面向对象。</li>\n<li>（了解）<font color='red'>Lock 锁可以对读不加锁，对写加锁</font>，synchronized 不可以</li>\n<li>（了解）<font color='red'>Lock 锁可以有多种获取锁的方式，可以从 sleep 的线程中抢到锁</font>，synchronized 不可以</li>\n</ol>\n<blockquote>\n<p>说明：开发建议中处理线程安全问题优先使用顺序为：</p>\n<p>・Lock ----&gt; 同步代码块 ----&gt; 同步方法</p>\n</blockquote>\n<h4 id=\"7-当一个线程进入一个对象的一个synchronized方法后其它线程是否可进入此对象的其它方法鸿网络\"><a class=\"anchor\" href=\"#7-当一个线程进入一个对象的一个synchronized方法后其它线程是否可进入此对象的其它方法鸿网络\">#</a> 7. 当一个线程进入一个对象的一个 synchronized 方法后，其它线程是否可进入此对象的其它方法？（鸿 * 网络）</h4>\n<p>需要看其他方法是否使用 synchronized 修饰，同步监视器的 this 是否是同一个。</p>\n<p>只有<font color='red'>当<strong>使用了 synchronized</strong>，且<strong>同步监视器是同一个</strong>的情况下，就不能访问了</font>。</p>\n<h4 id=\"8-线程同步与阻塞的关系同步一定阻塞吗阻塞一定同步吗阿校招-西安创佳\"><a class=\"anchor\" href=\"#8-线程同步与阻塞的关系同步一定阻塞吗阻塞一定同步吗阿校招-西安创佳\">#</a> 8. 线程同步与阻塞的关系？同步一定阻塞吗？阻塞一定同步吗？（阿 * 校招、西安 * 创佳 *）</h4>\n<p>同步一定阻塞；</p>\n<blockquote>\n<p>互斥是同步的保证，互斥了一定会阻塞</p>\n</blockquote>\n<p>阻塞不一定同步。</p>\n<blockquote>\n<p>Thread.sleep () 的调用也会阻塞，但不一定同步</p>\n</blockquote>\n<h3 id=\"25-死锁\"><a class=\"anchor\" href=\"#25-死锁\">#</a> 2.5 死锁</h3>\n<h4 id=\"1-什么是死锁产生死锁的原因及必要条件腾-阿\"><a class=\"anchor\" href=\"#1-什么是死锁产生死锁的原因及必要条件腾-阿\">#</a> 1. 什么是死锁，产生死锁的原因及必要条件（腾 *、阿 *）</h4>\n<p>什么是死锁：<font color='red'>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源</font>，就形成了线程的死锁。</p>\n<p>死锁的原因：</p>\n<ul>\n<li>\n<p><font color='gree'>互斥</font>条件</p>\n<blockquote>\n<p>同步机制的目的就是为了实现互斥</p>\n</blockquote>\n</li>\n<li>\n<p><font color='gree'>占用且等待</font></p>\n</li>\n<li>\n<p><font color='gree'>不可抢占</font></p>\n</li>\n<li>\n<p><font color='gree'>循环等待</font></p>\n</li>\n</ul>\n<p>如何避免死锁：可以考虑<font color='red'>打破上面的诱发条件</font>。</p>\n<ul>\n<li>\n<p>针对 “互斥条件”：<font color='red'>互斥条件基本上<strong>无法被破坏</strong></font>。因为线程需要通过互斥解决安全问题。</p>\n</li>\n<li>\n<p>针对 “占用且等待”：<font color='red'>可以考虑<strong>一次性申请所有所需的资源</strong></font>，这样就不存在等待的问题。</p>\n</li>\n<li>\n<p>针对 “不可抢占”：占用部分资源的线程在进一步申请其他资源时，如果申请不到，就<font color='red'><strong>主动释放</strong>掉已经占用的资源</font>。</p>\n</li>\n<li>\n<p>针对 “循环等待”：可以<font color='red'>将资源改为<strong>线性顺序</strong>。申请资源时，先申请序号较小的，这样避免循环等待问题</font>。</p>\n</li>\n</ul>\n<h4 id=\"2-如何避免死锁阿-北京蓝-手\"><a class=\"anchor\" href=\"#2-如何避免死锁阿-北京蓝-手\">#</a> 2. 如何避免死锁？(阿 *、北京 * 蓝、* 手)</h4>\n<p>见上。</p>\n<h3 id=\"26-线程通信\"><a class=\"anchor\" href=\"#26-线程通信\">#</a> 2.6 线程通信</h3>\n<h4 id=\"1-java中notify和notifyall有什么区别汇天下\"><a class=\"anchor\" href=\"#1-java中notify和notifyall有什么区别汇天下\">#</a> 1. Java 中 notify () 和 notifyAll () 有什么区别 (汇 * 天下)</h4>\n<p>二者都是 Object 类中的方法，用于在多线程环境下进行线程间的通信。它们的区别在于：</p>\n<ul>\n<li>notify ()：会唤醒被 wait () 的线程中优先级最高的那<font color='gree'>一个</font>线程（如果被 wait () 的多个线程的优先级相同，则随机唤醒一个），使其从等待状态进入到可运行状态，<font color='red'>等待获取锁</font>并从<font color='red'>当初被 wait 的位置</font>继续执行；</li>\n<li>notifyAll ()：会唤醒<font color='gree'>所有</font>正在等待的线程，使它们从等待状态进入到可运行状态，<font color='red'>等待获取锁</font>并从<font color='red'>当初被 wait 的位置</font>继续执行；</li>\n</ul>\n<h4 id=\"2-为什么wait和notify方法要在同步代码块同步方法中调用北京智\"><a class=\"anchor\" href=\"#2-为什么wait和notify方法要在同步代码块同步方法中调用北京智\">#</a> 2. 为什么 wait () 和 notify () 方法要在同步代码块 / 同步方法中调用 (北京 * 智)</h4>\n<p>因为 wait ()、notify () 的<font color='red'>调用者必须是<strong>同步监视器</strong></font>。</p>\n<h4 id=\"3-多线程生产者消费者代码同步-wait-notify编程猫娱乐\"><a class=\"anchor\" href=\"#3-多线程生产者消费者代码同步-wait-notify编程猫娱乐\">#</a> 3. 多线程：生产者，消费者代码（同步、wait、notify 编程）（猫 * 娱乐）</h4>\n<pre><code>类似问题：\n&gt; 如何写代码来解决生产者消费者问题(上海明*物联网)\n&gt; 多线程中生产者和消费者如何保证同步（*为）\n&gt; 消费者生产者，写写伪代码（字*）\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * ClassName: ProducerConsumer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * Package: threadcommunication</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * Description:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 案例：生产者 / 消费者问题</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 生产者（Productor）将产品交给店员（Clerk），而消费者（Customer）从店员处取走产品，店员一次只能持有固定数量的产品（比如：20），</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * 分析：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 1. 是否是多线程问题？是，生产者线程，消费者线程；</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * 2. 是否有共享数据？是，店员（或产品）；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * 3. 是否有线程安全问题？是，店员（或产品）；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * 4. 如何解决线程安全问题？同步机制；</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * 5. 是否涉及线程的通信？是，体现在生产者和消费者之间；</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @Author 贺健翔</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * @Create 2023/3/16 15:06</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clerk</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 店员</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> productCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 产品数量</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 生产产品</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>productCount <span class=\"token operator\">>=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生产者线程进入 WAITING 状态，同时会释放同步监视器！</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            productCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"生产了第\"</span> <span class=\"token operator\">+</span> productCount <span class=\"token operator\">+</span> <span class=\"token string\">\"个产品\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 唤醒被 wait () 的消费者线程</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 消费产品</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">minusProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>productCount <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 消费者线程进入 WAITING 状态，同时会释放同步监视器！</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"消费了第\"</span> <span class=\"token operator\">+</span> productCount <span class=\"token operator\">+</span> <span class=\"token string\">\"个产品\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            productCount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 唤醒被 wait () 的生产者线程</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 生产者</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Clerk</span> clerk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Producer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Clerk</span> clerk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clerk <span class=\"token operator\">=</span> clerk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者开始生产产品\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clerk<span class=\"token punctuation\">.</span><span class=\"token function\">addProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 消费者</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Clerk</span> clerk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Clerk</span> clerk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clerk <span class=\"token operator\">=</span> clerk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者开始消费产品\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clerk<span class=\"token punctuation\">.</span><span class=\"token function\">minusProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token class-name\">Clerk</span> clerk <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Clerk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token class-name\">Producer</span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Producer</span><span class=\"token punctuation\">(</span>clerk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token class-name\">Consumer</span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">(</span>clerk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        producer<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        producer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"4-wait和sleep有什么区别调用这两个函数后线程状态分别作何改变字-东\"><a class=\"anchor\" href=\"#4-wait和sleep有什么区别调用这两个函数后线程状态分别作何改变字-东\">#</a> 4. wait () 和 sleep () 有什么区别？调用这两个函数后，线程状态分别作何改变？（字 *、* 东）</h4>\n<pre><code>类似问题：\n&gt; 线程中sleep()和wait()有什么区别？（外派*度）\n&gt; Java线程阻塞调用 wait 函数和 sleep 区别和联系（阿*）\n&gt; wait和sleep的区别，他们两个谁会释放锁（软*动力、*创）\n</code></pre>\n<p>相同点：一旦执行，都会使得当前线程结束执行状态，<font color='red'>进入阻塞状态（WAITING / TIMED_WAITING）</font>。</p>\n<p>不同点：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">不同点</th>\n<th style=\"text-align:center\">Thread.sleep()</th>\n<th style=\"text-align:center\">Object 类实例的 wait ()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">所属的类</td>\n<td style=\"text-align:center\">Thread 类中的<font color='red'>静态</font>方法</td>\n<td style=\"text-align:center\"><font color='red'>Object 类</font>中的实例方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">适用范围</td>\n<td style=\"text-align:center\">任意</td>\n<td style=\"text-align:center\"><font color='red'>同步代码块或同步方法中</font></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">是否释放同步监视器</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\"><font color='red'>是</font></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">结束方式</td>\n<td style=\"text-align:center\">指定时间一到就结束阻塞（TIMED_WAITING）</td>\n<td style=\"text-align:center\">可以指定时间（TIMED_WAITING），也可以无限等待（WAITING）直到 notify 或 notifyAll</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"27-单例模式线程安全\"><a class=\"anchor\" href=\"#27-单例模式线程安全\">#</a> 2.7 单例模式（线程安全）</h3>\n<h4 id=\"1-手写一个单例模式singleton还要安全的通快递-君科技\"><a class=\"anchor\" href=\"#1-手写一个单例模式singleton还要安全的通快递-君科技\">#</a> 1. 手写一个单例模式 (Singleton)，还要安全的（* 通快递、君 * 科技）</h4>\n<p>饿汉式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 饿汉式单例设计模式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bank</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 1. 私有化类的构造器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 2. 内部创建类的实例对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 4. 要求此对象属性也必须声明为 static 的</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Bank</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 3. 通过 get 方法获取当前类的实例对象，必须声明为 static 的</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Bank</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>安全的懒汉式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bank</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 1. 私有化类的构造器</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 2. 内部创建类的对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 4. 要求此对象也必须声明为静态的</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Bank</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 3. 提供公共的静态方法，返回类的对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 欲解决线程安全问题，只需将此方法声明为同步的即可。因为是静态方法，所以同步监视器默认是当前类.class，是唯一的。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">Bank</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 此处存在线程安全问题：当有多个线程进入到此处时，有可能会创建多个对象</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"2-手写一个懒汉式的单例模式解决其线程安全问题并且说明为什么这样子去解决5\"><a class=\"anchor\" href=\"#2-手写一个懒汉式的单例模式解决其线程安全问题并且说明为什么这样子去解决5\">#</a> 2. 手写一个懒汉式的单例模式 &amp; 解决其线程安全问题，并且说明为什么这样子去解决（5*）</h4>\n<pre><code>类似问题：\n&gt; 手写一个懒汉式的单例模式（北京联合**）\n</code></pre>\n<p>同上。</p>\n",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC09%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC09%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%89/",
            "title": "宋红康_第09章：异常处理",
            "date_published": "2023-11-12T03:06:50.132Z",
            "content_html": "<h1 id=\"第09章随堂复习与企业真题异常处理\"><a class=\"anchor\" href=\"#第09章随堂复习与企业真题异常处理\">#</a> 第 09 章：随堂复习与企业真题（异常处理）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-异常的概述\"><a class=\"anchor\" href=\"#1-异常的概述\">#</a> 1. 异常的概述</h3>\n<pre><code>1. 什么是异常？\n指的是程序在执行过程中，出现的非正常情况，如果不处理最终会导致JVM的非正常停止。\n\n2. 异常的抛出机制\nJava中把不同的异常用不同的类表示，一旦发生某种异常，就`创建该异常类型的对象`，并且抛出（throw）。\n然后程序员可以捕获(catch)到这个异常对象，并处理；如果没有捕获(catch)这个异常对象，那么这个异常\n对象将会导致程序终止。\n\n3. 如何对待异常\n 对于程序出现的异常，一般有两种解决方法：一是遇到错误就终止程序的运行。另一种方法是程序员在编写程序时，\n 就充分考虑到各种可能发生的异常和错误，极力预防和避免。实在无法避免的，要编写相应的代码进行异常的检测、\n 以及`异常的处理`，保证代码的`健壮性`。\n</code></pre>\n<h3 id=\"2-异常的体系结构及常见的异常\"><a class=\"anchor\" href=\"#2-异常的体系结构及常见的异常\">#</a> 2. 异常的体系结构及常见的异常</h3>\n<pre><code>java.lang.Throwable:异常体系的根父类\n    |---java.lang.Error:错误。Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。\n                         一般不编写针对性的代码进行处理。\n               |---- StackOverflowError、OutOfMemoryError\n\n    |---java.lang.Exception:异常。我们可以编写针对性的代码进行处理。\n               |----编译时异常：(受检异常)在执行javac.exe命令时，出现的异常。\n                    |----- ClassNotFoundException\n                    |----- FileNotFoundException\n                    |----- IOException\n               |----运行时异常：(非受检异常)在执行java.exe命令时，出现的异常。\n                    |---- ArrayIndexOutOfBoundsException\n                    |---- NullPointerException\n                    |---- ClassCastException\n                    |---- NumberFormatException\n                    |---- InputMismatchException\n                    |---- ArithmeticException\n</code></pre>\n<pre><code>【面试题】说说你在开发中常见的异常都有哪些？\n\n开发1-2年：\n|----编译时异常：(受检异常)在执行javac.exe命令时，出现的异常。\n    |----- ClassNotFoundException\n    |----- FileNotFoundException\n    |----- IOException\n|----运行时异常：(非受检异常)在执行java.exe命令时，出现的异常。\n    |---- ArrayIndexOutOfBoundsException\n    |---- NullPointerException\n    |---- ClassCastException\n    |---- NumberFormatException\n    |---- InputMismatchException\n    |---- ArithmeticException\n\n开发3年以上：\nOOM。\n</code></pre>\n<h3 id=\"3-异常处理的方式\"><a class=\"anchor\" href=\"#3-异常处理的方式\">#</a> 3. 异常处理的方式</h3>\n<pre><code>过程1：“抛”\n &gt;&quot;自动抛&quot; ：程序在执行的过程当中，一旦出现异常，就会在出现异常的代码处，自动生成对应异常类的对象，并将此对象抛出。\n\n &gt;&quot;手动抛&quot; ：程序在执行的过程当中，不满足指定条件的情况下，我们主动的使用&quot;throw + 异常类的对象&quot;方式抛出异常对象。\n\n\n过程2：“抓”\n    狭义上讲：try-catch的方式捕获异常，并处理。\n    广义上讲：把“抓”理解为“处理”。则此时对应着异常处理的两种方式：① try-catch-finally ② throws\n</code></pre>\n<h4 id=\"31-try-catch-finally\"><a class=\"anchor\" href=\"#31-try-catch-finally\">#</a> 3.1 try-catch-finally</h4>\n<pre><code>1. 基本结构：\ntry&#123;\n   ...... //可能产生异常的代码\n&#125;\ncatch( 异常类型1 e )&#123;\n   ...... //当产生异常类型1型异常时的处置措施\n&#125;\ncatch( 异常类型2 e )&#123;\n   ......     //当产生异常类型2型异常时的处置措施\n&#125;\nfinally&#123;\n   ...... //无论是否发生异常，都无条件执行的语句\n&#125;\n\n2. 使用细节：\n&gt; 将可能出现异常的代码声明在try语句中。一旦代码出现异常，就会自动生成一个对应异常类的对象。并将此对象抛出。\n&gt; 针对于try中抛出的异常类的对象，使用之后的catch语句进行匹配。一旦匹配上，就进入catch语句块进行处理。\n  一旦处理接触，代码就可继续向下执行。\n&gt; 如果声明了多个catch结构，不同的异常类型在不存在子父类关系的情况下，谁声明在上面，谁声明在下面都可以。\n  如果多个异常类型满足子父类的关系，则必须将子类声明在父类结构的上面。否则，报错。\n&gt; catch中异常处理的方式：\n   ① 自己编写输出的语句。\n   ② printStackTrace()：打印异常的详细信息。 （推荐）\n   ③ getMessage()：获取发生异常的原因。\n&gt; try中声明的变量，出了try结构之后，就不可以进行调用了。\n&gt; try-catch结构是可以嵌套使用的。\n</code></pre>\n<pre><code>3. finally的使用说明：\n3.1 finally的理解\n&gt; 我们将一定要被执行的代码声明在finally结构中。\n&gt; 更深刻的理解：无论try中或catch中是否存在仍未被处理的异常，无论try中或catch中是否存在return语句等，finally\n  中声明的语句都一定要被执行。\n\n&gt; finally语句和catch语句是可选的，但finally不能单独使用。\n\n3.2 什么样的代码我们一定要声明在finally中呢？\n&gt; 我们在开发中，有一些资源（比如：输入流、输出流，数据库连接、Socket连接等资源），在使用完以后，必须显式的进行\n关闭操作，否则，GC不会自动的回收这些资源。进而导致内存的泄漏。\n  为了保证这些资源在使用完以后，不管是否出现了未被处理的异常的情况下，这些资源能被关闭。我们必须将这些操作声明\n在finally中！\n</code></pre>\n<h4 id=\"32-throws\"><a class=\"anchor\" href=\"#32-throws\">#</a> 3.2 throws</h4>\n<pre><code>1. 格式：在方法的声明除，使用&quot;throws 异常类型1,异常类型2,...&quot;\n\n2. 举例：\n\npublic void test() throws 异常类型1,异常类型2,.. &#123;\n    //可能存在编译时异常\n&#125;\n\n\n3. 是否真正处理了异常？\n&gt; 从编译是否能通过的角度看，看成是给出了异常万一要是出现时候的解决方案。此方案就是，继续向上抛出(throws)。\n&gt; 但是，此throws的方式，仅是将可能出现的异常抛给了此方法的调用者。此调用者仍然需要考虑如何处理相关异常。\n  从这个角度来看，throws的方式不算是真正意义上处理了异常。\n\n\n4. 方法的重写的要求：(针对于编译时异常来说的)\n子类重写的方法抛出的异常类型可以与父类被重写的方法抛出的异常类型相同，或是父类被重写的方法抛出的异常类型的子类。\n</code></pre>\n<p>开发中的经验之谈：</p>\n<pre><code>开发中，如何选择异常处理的两种方式？(重要、经验之谈)\n- 如果程序代码中，涉及到资源的调用（流、数据库连接、网络连接等），则必须考虑使用try-catch-finally来处理，\n  保证不出现内存泄漏。\n- 如果父类被重写的方法没有throws异常类型，则子类重写的方法中如果出现异常，只能考虑使用try-catch-finally\n  进行处理，不能throws。\n- 开发中，方法a中依次调用了方法b,c,d等方法，方法b,c,d之间是递进关系。此时，如果方法b,c,d中有异常，\n  我们通常选择使用throws，而方法a中通常选择使用try-catch-finally。\n</code></pre>\n<h3 id=\"4-手动throw异常对象\"><a class=\"anchor\" href=\"#4-手动throw异常对象\">#</a> 4. 手动 throw 异常对象</h3>\n<pre><code>在方法内部，满足指定条件的情况下，使用&quot;throw 异常类的对象&quot;的方式抛出。\n</code></pre>\n<h3 id=\"5-如何自定义异常类\"><a class=\"anchor\" href=\"#5-如何自定义异常类\">#</a> 5. 如何自定义异常类</h3>\n<pre><code>① 继承于现有的异常体系。通常继承于RuntimeException \\ Exception\n② 通常提供几个重载的构造器\n③ 提供一个全局常量，声明为：static final long serialVersionUID;\n</code></pre>\n<pre><code>为什么需要自定义异常类？\n我们其实更关心的是，通过异常的名称就能直接判断此异常出现的原因。既然如此，我们就有必要在实际开发场景中，\n不满足我们指定的条件时，指明我们自己特有的异常类。通过此异常类的名称，就能判断出具体出现的问题。\n</code></pre>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"21-异常概述\"><a class=\"anchor\" href=\"#21-异常概述\">#</a> 2.1 异常概述</h3>\n<h4 id=\"1-java的异常体系简单介绍下网\"><a class=\"anchor\" href=\"#1-java的异常体系简单介绍下网\">#</a> 1. Java 的异常体系简单介绍下（网 *）</h4>\n<pre><code>包含问题：\n&gt; 4.异常的顶级接口是什么（软**力）\n&gt; 异常类的继承关系,exception下都有哪些类？（上海*冉信息）\n</code></pre>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java.lang.Throwable:异常体系的根父类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    |---java.lang.Error:错误。Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                         一般不编写针对性的代码进行处理。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>               |---- StackOverflowError、OutOfMemoryError</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    |---java.lang.Exception:异常。我们可以编写针对性的代码进行处理。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>               |----编译时异常：(受检异常)在执行javac.exe命令时，出现的异常。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    |----- ClassNotFoundException</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    |----- FileNotFoundException</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    |----- IOException</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>               |----运行时异常java.lang.RuntimeException：(非受检异常)在执行java.exe命令时，出现的异常。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    |---- ArrayIndexOutOfBoundsException</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    |---- NullPointerException</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    |---- ClassCastException</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    |---- NumberFormatException</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    |---- InputMismatchException</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    |---- ArithmeticException</pre></td></tr></table></figure><h4 id=\"2-java异常处理机制科软\"><a class=\"anchor\" href=\"#2-java异常处理机制科软\">#</a> 2. Java 异常处理机制（* 科软）</h4>\n<ul>\n<li>try-catch-finally</li>\n<li>throws</li>\n</ul>\n<h4 id=\"3-异常的两种类型error和exception的区别上海冠新创-北京中译-度\"><a class=\"anchor\" href=\"#3-异常的两种类型error和exception的区别上海冠新创-北京中译-度\">#</a> 3. 异常的两种类型，Error 和 Exception 的区别 (上海冠 * 新创、北京中 ** 译、* 度)</h4>\n<p>见 1。</p>\n<h4 id=\"4-运行时异常与一般异常有何异同华思为\"><a class=\"anchor\" href=\"#4-运行时异常与一般异常有何异同华思为\">#</a> 4. 运行时异常与一般异常有何异同？（华 * 思为）</h4>\n<p>运行时异常：RuntimeException</p>\n<ul>\n<li><font color='red'>编译可以通过</font>，运行时可能抛出</li>\n<li><font color='red'>出现的概率高</font>一些</li>\n<li>一般针对于运行时异常，都<font color='red'>不处理</font></li>\n</ul>\n<p>一般异常：Exception</p>\n<ul>\n<li><font color='red'>编译不能通过</font></li>\n<li>要求必须在编译之前，<font color='red'>考虑异常的处理</font>，不处理编译不通过。</li>\n</ul>\n<h4 id=\"5-说几个你常见到的异常华油普\"><a class=\"anchor\" href=\"#5-说几个你常见到的异常华油普\">#</a> 5. 说几个你常见到的异常（华油 ** 普）</h4>\n<pre><code>类似问题：\n&gt; 请列出Java中常见的几种异常？（百*园）\n&gt; 给我一个你最常见到的runtime exception。（*蝶）\n</code></pre>\n<p>略</p>\n<h3 id=\"22-try-catch-finally\"><a class=\"anchor\" href=\"#22-try-catch-finally\">#</a> 2.2 try-catch-finally</h3>\n<h4 id=\"1-说说final-finally-finalize的区别北京中译-艾软件-拓思-科软\"><a class=\"anchor\" href=\"#1-说说final-finally-finalize的区别北京中译-艾软件-拓思-科软\">#</a> 1. 说说 final、finally、finalize 的区别（北京中 ** 译、艾 * 软件、拓 * 思、* 科软）</h4>\n<pre><code>类似问题：\n&gt; 1. finally和final的区别（*科软）\n</code></pre>\n<ul>\n<li>\n<p><font color='cornflowerblue'>final</font>：可以用于修饰变量、方法和类，作用是使它们具有不可变性、不可修改性和不可扩展性。</p>\n<ul>\n<li>\n<p>如果一个变量被声明为 final 类型，则该变量的值不能被修改。</p>\n</li>\n<li>\n<p>如果一个方法被声明为 final 类型，则该方法不能被子类重写。</p>\n</li>\n<li>\n<p>如果一个类被声明为 final 类型，则该类不能被继承。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><font color='cornflowerblue'>finally</font>：用于定义在 try-catch 语句块中的一个代码块，<font color='red'>无论异常是否发生，该代码块都会被执行</font>。finally 块通常用于<font color='red'>释放资源、关闭连接、清理内存</font>等操作。在 Java 中，finally 块与 try 和 catch 块一起使用，组成 try-catch-finally 语句块，用于处理异常情况。</p>\n</li>\n<li>\n<p><font color='cornflowerblue'>finalize</font>：是<font color='red'>Object 类中的一个方法</font>，用于<font color='red'>在 Java 垃圾回收器回收一个对象之前调用，用于释放该对象所占用的资源</font>。finalize 方法是 Java 中的一种兜底机制，当程序员没有手动释放资源时，Java 虚拟机会在垃圾回收时调用该方法。</p>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FinalizeExample</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token class-name\">MyObject</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     obj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将对象置为 null，使其成为垃圾对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 请求垃圾回收</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyObject</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">finalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对象被销毁了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上述示例中，我们创建了一个 MyObject 对象，然后将其置为 null，使其成为垃圾对象。然后使用 System.gc () 请求垃圾回收，此时 Java 虚拟机会在垃圾回收过程中调用 MyObject 类中的 finalize 方法，输出 &quot;对象被销毁了！&quot;。</p>\n<p>需要注意的是，<font color='red'>不应该在程序中过多地使用 finalize 方法</font>，因为 finalize 方法的调用时机和频率是不确定的，可能会对程序性能造成影响。同时，我们应该尽量手动释放资源，避免出现资源泄露等问题。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2-如果不使用try-catch程序出现异常会如何上海冠新创科技\"><a class=\"anchor\" href=\"#2-如果不使用try-catch程序出现异常会如何上海冠新创科技\">#</a> 2. 如果不使用 try-catch，程序出现异常会如何？(上海冠 * 新创科技)</h4>\n<p>对于当前方法来讲，如果不使用 try-catch，则在出现异常对象以后会抛出此对象。如果没有处理方案，就<font color='red'>会终止程序的执行</font>。</p>\n<h4 id=\"3-try-catch捕捉的是什么异常北京亿东方\"><a class=\"anchor\" href=\"#3-try-catch捕捉的是什么异常北京亿东方\">#</a> 3. try ... catch 捕捉的是什么异常？（北京亿 * 东方）</h4>\n<p><font color='red'>java.lang.Exception</font>，非 java.lang.Error</p>\n<h4 id=\"4-如果执行finally代码块之前方法返回了结果或者jvm退出了这时finally块中的代码还会执行吗恒电子\"><a class=\"anchor\" href=\"#4-如果执行finally代码块之前方法返回了结果或者jvm退出了这时finally块中的代码还会执行吗恒电子\">#</a> 4. 如果执行 finally 代码块之前方法返回了结果或者 jvm 退出了，这时 finally 块中的代码还会执行吗？(恒 * 电子)</h4>\n<p><font color='orange'>除了特别的： <code>System.exit(0);</code> ，其余情况 finally 代码块都会执行！</font></p>\n<h4 id=\"5-在try语句中有return语句最后写finally语句finally语句中的code会不会执行何时执行如果执行是在return前还是后拓思-华为\"><a class=\"anchor\" href=\"#5-在try语句中有return语句最后写finally语句finally语句中的code会不会执行何时执行如果执行是在return前还是后拓思-华为\">#</a> 5. 在 try 语句中有 return 语句，最后写 finally 语句，finally 语句中的 code 会不会执行？何时执行？如果执行是在 return 前还是后（拓 * 思、华 ** 为）</h4>\n<p><font color='orange'>finally 代码块执行在 return 语句前！</font></p>\n<h4 id=\"6-捕获异常在catch块里一定会进入finally吗catch里能return吗catch里return还会进finally吗在try里return是什么情况蓝\"><a class=\"anchor\" href=\"#6-捕获异常在catch块里一定会进入finally吗catch里能return吗catch里return还会进finally吗在try里return是什么情况蓝\">#</a> 6. 捕获异常在 catch 块里一定会进入 finally 吗？catch 里能 return 吗？catch 里 return 还会进 finally 吗？在 try 里 return 是什么情况？（* 蓝）</h4>\n<p>捕获异常在 catch 块里一定会进入 finally；</p>\n<p>catch 里能 return；</p>\n<p>catch 里 return 还会进 finally；</p>\n<p>在 try 里 return 之前，还会进入 finally；</p>\n<h3 id=\"23-throw与throws\"><a class=\"anchor\" href=\"#23-throw与throws\">#</a> 2.3 throw 与 throws</h3>\n<h4 id=\"1-throw和throws的区别北京亿方-北京新阳光\"><a class=\"anchor\" href=\"#1-throw和throws的区别北京亿方-北京新阳光\">#</a> 1. throw 和 throws 的区别？（北京亿 ** 方、北京新 * 阳光）</h4>\n<p>角度 1：&quot;形&quot;，即使用的格式</p>\n<pre><code>throw:使用在方法内部，“throw 异常类的对象”\nthrows:使用在方法的声明处，&quot;throws 异常类1,异常类2,...&quot;\n</code></pre>\n<p>角度 2：&quot;角色&quot; 或作用不同。</p>\n<pre><code>上游排污，下游治污。\n\n过程1：“抛”\n\t&gt;throw\n过程2：“抓”\n    &gt; try-catch ; throws\n</code></pre>\n<ol>\n<li>\n<p>throw：<font color='red'>在方法内部</font>，用于<font color='red'><strong>主动抛出</strong>一个异常对象</font>；</p>\n</li>\n<li>\n<p>throws：<font color='red'>在方法声明处</font>，用于<font color='red'><strong>声明一个方法</strong>可能抛出的异常类型</font>，用于告诉方法的调用者可能出现哪些异常；</p>\n<blockquote>\n<p>需要注意的是，当一个方法使用 throws 声明了可能会抛出某些异常时，该方法的调用者必须使用 try-catch 语句或者将该异常向上抛出，否则会编译错误。</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"2-子类重写父类抛出异常的方法能否抛出比父类更高级别的异常类顺\"><a class=\"anchor\" href=\"#2-子类重写父类抛出异常的方法能否抛出比父类更高级别的异常类顺\">#</a> 2. 子类重写父类抛出异常的方法，能否抛出比父类更高级别的异常类（顺 *）</h4>\n<p>不能！子类重写父类抛出异常的方法，所声明的异常类型一定 ≤ 父类方法所声明的异常类型。</p>\n<h3 id=\"24-自定义异常\"><a class=\"anchor\" href=\"#24-自定义异常\">#</a> 2.4 自定义异常</h3>\n<h4 id=\"1-如何自定义一个异常软国际\"><a class=\"anchor\" href=\"#1-如何自定义一个异常软国际\">#</a> 1. 如何自定义一个异常？（* 软国际）</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 继承 Exception / RuntimeException</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 2. 序列版本号（static final long）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">23423423435L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 3. 无参构造器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 3. 带参构造器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC08%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E9%AB%98%E7%BA%A7%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC08%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E9%AB%98%E7%BA%A7%EF%BC%89/",
            "title": "宋红康_第08章：面向对象-高级",
            "date_published": "2023-11-12T02:50:53.313Z",
            "content_html": "<h1 id=\"第08章随堂复习与企业真题面向对象-高级\"><a class=\"anchor\" href=\"#第08章随堂复习与企业真题面向对象-高级\">#</a> 第 08 章：随堂复习与企业真题（面向对象 - 高级）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-关键字font-colorcornflowerbluestaticfont\"><a class=\"anchor\" href=\"#1-关键字font-colorcornflowerbluestaticfont\">#</a> 1. 关键字：<font color='cornflowerblue'>static</font></h3>\n<ul>\n<li>\n<p>static：静态的，<font color='red'>随着类的加载而加载、执行</font>。</p>\n</li>\n<li>\n<p>static 用来修饰：属性、方法、代码块、内部类</p>\n</li>\n<li>\n<p>熟悉：static 修饰的类变量、类方法与不使用 static 修饰的区别。</p>\n<ul>\n<li>类变量：类的生命周期内，只有一个。被类的多个实例共享。</li>\n</ul>\n</li>\n<li>\n<p>掌握：我们遇到属性或方法时，需要考虑是否声明为 static 的。</p>\n</li>\n</ul>\n<h3 id=\"2-font-colorcornflowerblue单例模式font或单子模式\"><a class=\"anchor\" href=\"#2-font-colorcornflowerblue单例模式font或单子模式\">#</a> 2. <font color='cornflowerblue'>单例模式</font>（或单子模式）</h3>\n<ul>\n<li>经典的设计模式有 23 种</li>\n<li>解决的问题：在整个软件系统中，<font color='red'>只存在当前类的唯一实例</font>。</li>\n<li>实现方式：饿汉式、懒汉式、枚举类等\n<ul>\n<li>私有化构造器</li>\n<li>提供一个当前类的实例，必须是静态的</li>\n<li>提供一个获取当前类实例的方法，必须是静态的</li>\n</ul>\n</li>\n<li>对比饿汉式和懒汉式\n<ul>\n<li><font color='gree'>饿汉式</font>：<font color='red'>“立即加载”</font>，<font color='red'>线程安全</font>的。</li>\n<li><font color='gree'>懒汉式</font>：<font color='red'>&quot;延迟加载&quot;</font>，<font color='red'>线程不安全</font>。</li>\n</ul>\n</li>\n<li>需要会手写饿汉式和懒汉式</li>\n</ul>\n<h3 id=\"3-理解main方法\"><a class=\"anchor\" href=\"#3-理解main方法\">#</a> 3. 理解 main () 方法</h3>\n<ul>\n<li>public static void main(String[] args){}</li>\n<li>理解 1：作为程序的入口；普通的静态方法</li>\n<li>理解 2：如何使用 main () 与控制台进行数据的交互。\n<ul>\n<li>命令行：java 类名 &quot;Tom&quot; &quot;Jerry&quot; &quot;123&quot;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-类的成员之四font-colorcornflowerblue代码块font\"><a class=\"anchor\" href=\"#4-类的成员之四font-colorcornflowerblue代码块font\">#</a> 4. 类的成员之四：<font color='cornflowerblue'>代码块</font></h3>\n<ul>\n<li>分类：静态代码块、非静态代码块</li>\n<li>使用频率上来讲：用的比较少。</li>\n<li><font color='gree'>静态代码块</font>：随着<font color='red'>类</font>的加载而执行</li>\n<li><font color='gree'>非静态代码块</font>：随着<font color='red'>对象</font>的创建而执行</li>\n</ul>\n<blockquote>\n<p>总结：对象的实例变量可以赋值的位置及先后顺序</p>\n<p>① 默认初始化<br />\n② 显式初始化  或 ⑤ <font color='red'>代码块中初始化</font><br />\n③ <font color='red'>构造器中初始化</font></p>\n<p>④ 有了对象以后，通过 &quot;对象。属性&quot; 或 &quot;对象。方法&quot; 的方法进行赋值</p>\n<p>执行的先后顺序：<br />\n① - ②/⑤ - ③ - ④</p>\n</blockquote>\n<h3 id=\"5-关键字font-colorcornflowerbluefinalfont\"><a class=\"anchor\" href=\"#5-关键字font-colorcornflowerbluefinalfont\">#</a> 5. 关键字：<font color='cornflowerblue'>final</font></h3>\n<ul>\n<li>\n<p>最终的</p>\n</li>\n<li>\n<p>用来修饰：类、方法、变量（成员变量、局部变量）</p>\n<ul>\n<li><font color='red'>类：不能被继承</font></li>\n<li>方法：不能被重写</li>\n<li>变量：是一个 “常量”，一旦赋值不能修改。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-关键字font-colorcornflowerblueabstractfont\"><a class=\"anchor\" href=\"#6-关键字font-colorcornflowerblueabstractfont\">#</a> 6. 关键字：<font color='cornflowerblue'>abstract</font></h3>\n<ul>\n<li>抽象的</li>\n<li>用来修饰：类、方法\n<ul>\n<li>类：抽象类：不能实例化。</li>\n<li>方法：抽象方法：没有方法体，必须由子类实现此方法。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-关键字font-colorcornflowerblueinterfacefont\"><a class=\"anchor\" href=\"#7-关键字font-colorcornflowerblueinterfacefont\">#</a> 7. 关键字：<font color='cornflowerblue'>interface</font></h3>\n<ul>\n<li>\n<p>interface：接口，用来定义一组规范、一种标准。</p>\n</li>\n<li>\n<p>掌握：接口中可以声明的结构。</p>\n<ul>\n<li>\n<p>属性：使用 <code>public static final</code>  修饰，可忽略</p>\n<blockquote>\n<p><font color='gree'>公共静态常量</font></p>\n</blockquote>\n</li>\n<li>\n<p>方法：</p>\n<ul>\n<li>\n<p>jdk8 之前：只能声明抽象方法，使用 <code>public abstract</code>  修饰</p>\n<blockquote>\n<p><font color='gree'>公共抽象方法</font></p>\n</blockquote>\n</li>\n<li>\n<p>jdk8 中：声明 static 方法、default 方法。</p>\n<blockquote>\n<p>公共静态方法、公共默认方法</p>\n</blockquote>\n</li>\n<li>\n<p>jdk9 中：声明 private 方法。</p>\n<blockquote>\n<p>私有方法</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>笔试题：抽象类、接口的对比。</p>\n</li>\n</ul>\n<h3 id=\"8-类的成员之五font-colorcornflowerblue内部类font\"><a class=\"anchor\" href=\"#8-类的成员之五font-colorcornflowerblue内部类font\">#</a> 8. 类的成员之五：<font color='cornflowerblue'>内部类</font></h3>\n<pre><code>&gt; 成员内部类的理解\n&gt; 如何创建成员内部类的实例\n&gt; 如何在成员内部类中调用外部类的结构\n&gt; 局部内部类的基本使用（关注：如何在方法内创建匿名局部内部类的对象）\n</code></pre>\n<h3 id=\"9-枚举类font-colorcornflowerblueenumfont\"><a class=\"anchor\" href=\"#9-枚举类font-colorcornflowerblueenumfont\">#</a> 9. 枚举类：<font color='cornflowerblue'>enum</font></h3>\n<ul>\n<li>掌握：使用 enum 关键字定义枚举类即可。</li>\n</ul>\n<h3 id=\"10-注解font-colorcornflowerblueannotationfont\"><a class=\"anchor\" href=\"#10-注解font-colorcornflowerblueannotationfont\">#</a> 10. 注解：<font color='cornflowerblue'>Annotation</font></h3>\n<ul>\n<li>\n<p><font color='red'>框架 = 注解 + 反射 + 设计模式</font></p>\n</li>\n<li>\n<p>Java 基础阶段：简单。</p>\n<ul>\n<li><font color='gree'>@Override</font>：重写</li>\n<li><font color='gree'>@Deprecated</font>：标记过时</li>\n<li><font color='gree'>@SuppressWarnings</font>：抑制编译器警告</li>\n</ul>\n</li>\n<li>\n<p><font color='cornflowerblue'>元注解</font>：描述注解的注解。</p>\n<ul>\n<li><font color='gree'><strong>@Target</strong></font>：描述注解的<font color='red'>使用范围</font></li>\n<li><font color='gree'><strong>@Retation</strong></font>：描述注解的<font color='red'>生命周期</font></li>\n<li><font color='gree'>@Documented</font>：描述注解<font color='red'>被 javadoc 工具记录</font></li>\n<li><font color='gree'>@Inherited</font>：描述注解<font color='red'>被子类继承</font></li>\n</ul>\n</li>\n<li>\n<p>如何自定义注解。</p>\n</li>\n</ul>\n<h3 id=\"11-包装类的使用\"><a class=\"anchor\" href=\"#11-包装类的使用\">#</a> 11. 包装类的使用</h3>\n<ul>\n<li>掌握：基本数据类型对应的包装类都有哪些？</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230331160011510.png\" alt=\"image-20230331160011510\" /></p>\n<ul>\n<li>\n<p>掌握：基本数据类型、包装类、String 三者之间的转换</p>\n<p><mark>省流</mark>：</p>\n<ul>\n<li>\n<p>基本数据类型 / 包装类 ---&gt; String 类</p>\n<ul>\n<li><font color='orange'> <code>String.valueOf(xxx)</code> </font></li>\n</ul>\n</li>\n<li>\n<p>String 类 ---&gt; 基本数据类型 / 包装类</p>\n<ul>\n<li>\n<p><font color='orange'> <code>包装类.parseXxx(str)</code> </font></p>\n<blockquote>\n<p><font color='red'>如果 str 的内容无法正确转换为对应的基本类型，可能会抛出异常 <code>NumberFormatException</code> </font></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230331160048147.png\" alt=\"image-20230331160048147\" /></p>\n<h3 id=\"12-idea快捷键和debug\"><a class=\"anchor\" href=\"#12-idea快捷键和debug\">#</a> 12. IDEA: 快捷键和 debug</h3>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"21-static关键字\"><a class=\"anchor\" href=\"#21-static关键字\">#</a> 2.1 static 关键字</h3>\n<h4 id=\"1-实例变量和静态变量的区别保丰-软国际-软华-北京明信\"><a class=\"anchor\" href=\"#1-实例变量和静态变量的区别保丰-软国际-软华-北京明信\">#</a> 1. 实例变量和静态变量的区别？（保 * 丰、* 软国际、* 软华 *、北京明 ** 信）</h4>\n<ul>\n<li>\n<p>个数</p>\n<ul>\n<li>实例变量：类的每一个<font color='red'>实例</font>都存有一份；</li>\n<li>静态变量：在内存空间中只有一份，被<font color='red'>类</font>的所有实例所共享；</li>\n</ul>\n</li>\n<li>\n<p>内存位置</p>\n<ul>\n<li>实例变量：<font color='red'>堆空间</font>的实例实体中；</li>\n<li>静态变量：\n<ul>\n<li>JDK6 及之前，存放在方法区；</li>\n<li>JDK7 及之后，存放在<font color='red'>堆空间</font>；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>加载 / 消亡时机</p>\n<ul>\n<li>实例变量：随着<font color='red'>实例的创建</font>而加载；随着实例的消失而消失；</li>\n<li>静态变量：随着<font color='red'>类的加载</font>而加载，而类只会加载一次；随着类的卸载而消失；</li>\n</ul>\n</li>\n<li>\n<p>调用者</p>\n<ul>\n<li>实例变量：实例对象</li>\n<li>静态变量：类 / 实例对象</li>\n</ul>\n</li>\n<li>\n<p>判断是否可以调用（从生命周期的角度解释）</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">静态变量</th>\n<th style=\"text-align:center\">实例变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">类</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">实例对象</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>使用场景</p>\n<ul>\n<li>静态变量：类的所有实例能共享此成员变量，开发中常常将一些常量声明为静态的，如 Math.PI</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-静态属性和静态方法是否可以被继承是否可以被重写以及原因度\"><a class=\"anchor\" href=\"#2-静态属性和静态方法是否可以被继承是否可以被重写以及原因度\">#</a> 2. 静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？（* 度）</h4>\n<pre><code>类似问题：\n&gt; 在java中，可以重载一个static方法吗？可以覆盖一个static方法吗？（Vi*o）\n</code></pre>\n<p>静态属性、静态方法<font color='red'>可以被继承</font>。</p>\n<p>静态方法<font color='red'>可以被重载（overload）</font>。</p>\n<p>静态方法<font color='orange'>不能被重写（override）</font>，不存在多态性。</p>\n<blockquote>\n<p>当父类、子类中出现同名同参数的方法时，只允许两种情况（否则编译报错）：</p>\n<ul>\n<li><font color='gree'>都没用 static</font>修饰：<font color='red'>重写（override）</font></li>\n<li><font color='gree'>都用了 static</font>修饰：仅仅是<font color='red'>同名而已，不存在多态性</font></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token comment\">// 尝试重写父类的静态方法：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token class-name\">Father</span> father <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     father<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 根据阿里巴巴 Java 开发手册，应该避免通过一个类的对象引用访问此类的静态变量或静态方法，应该直接通过类名来访问。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token comment\">// 通过类名访问静态方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token class-name\">Father</span><span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Father\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Son\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h4 id=\"3-是否可以从一个static方法内部发出对非static方法的调用同顺\"><a class=\"anchor\" href=\"#3-是否可以从一个static方法内部发出对非static方法的调用同顺\">#</a> 3. 是否可以从一个 static 方法内部发出对非 static 方法的调用？（同 * 顺）</h4>\n<p><font color='red'>不能<strong>直接调用</strong>非静态方法</font>，<font color='orange'>只能<strong>通过对象</strong>来对非静态方法的调用</font>。</p>\n<h4 id=\"4-被static修饰的成员类-方法-成员变量能否再使用private进行修饰联优势\"><a class=\"anchor\" href=\"#4-被static修饰的成员类-方法-成员变量能否再使用private进行修饰联优势\">#</a> 4. 被 static 修饰的成员 (类、方法、成员变量) 能否再使用 private 进行修饰？（联 * 优势）</h4>\n<p>完全可以。</p>\n<p>除了代码块。</p>\n<blockquote>\n<p>因为代码块本身不能用权限修饰符来修饰</p>\n</blockquote>\n<h3 id=\"22-设计模式\"><a class=\"anchor\" href=\"#22-设计模式\">#</a> 2.2 设计模式</h3>\n<h4 id=\"1-知道哪些设计模式通快递-蚂服\"><a class=\"anchor\" href=\"#1-知道哪些设计模式通快递-蚂服\">#</a> 1. 知道哪些设计模式？（* 通快递、蚂 ** 服）</h4>\n<ul>\n<li>\n<p><font color='cornflowerblue'>单例模式</font></p>\n<ul>\n<li>饿汉式</li>\n<li>懒汉式</li>\n</ul>\n</li>\n<li>\n<p><font color='cornflowerblue'>模板方法</font></p>\n<ul>\n<li>抽象类</li>\n</ul>\n</li>\n<li>\n<p><font color='cornflowerblue'>享元设计模式</font></p>\n<ul>\n<li>包装类中缓存的常量对象</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-开发中都用到了那些设计模式用在什么场合-久国际物流\"><a class=\"anchor\" href=\"#2-开发中都用到了那些设计模式用在什么场合-久国际物流\">#</a> 2. 开发中都用到了那些设计模式？用在什么场合？（久 * 国际物流）</h4>\n<p>略</p>\n<h3 id=\"23-main\"><a class=\"anchor\" href=\"#23-main\">#</a> 2.3 main()</h3>\n<h4 id=\"1-main方法的public能不能换成private为什么凡科技-顺\"><a class=\"anchor\" href=\"#1-main方法的public能不能换成private为什么凡科技-顺\">#</a> 1. main () 方法的 public 能不能换成 private，为什么（凡 * 科技、顺 *）</h4>\n<p>可以改。但是<font color='red'>改完以后就不是程序入口了</font>。</p>\n<h4 id=\"2-main方法中是否可以调用非静态方法浩科技\"><a class=\"anchor\" href=\"#2-main方法中是否可以调用非静态方法浩科技\">#</a> 2. main () 方法中是否可以调用非静态方法？（浩 * 科技）</h4>\n<p><font color='orange'>只<strong>能通过对象</strong>来对非静态方法的调用</font>。</p>\n<h3 id=\"24-代码块\"><a class=\"anchor\" href=\"#24-代码块\">#</a> 2.4 代码块</h3>\n<h4 id=\"1-类的组成和属性赋值执行顺序航拓普\"><a class=\"anchor\" href=\"#1-类的组成和属性赋值执行顺序航拓普\">#</a> 1. 类的组成和属性赋值执行顺序？（航 * 拓普）</h4>\n<pre><code>类似问题：\n&gt; Java中类的变量初始化的顺序？（*壳）\n</code></pre>\n<p>实例变量可以赋值的位置及先后顺序：</p>\n<p>① 默认初始化<br />\n② 显式初始化  或 ⑤ <font color='red'>代码块中初始化</font><br />\n③ <font color='red'>构造器中初始化</font></p>\n<p>④ 有了对象以后，通过 &quot;对象。属性&quot; 或 &quot;对象。方法&quot; 的方法进行赋值</p>\n<p>执行的先后顺序：① - ②/⑤ - ③ - ④</p>\n<h4 id=\"2-静态代码块普通代码块构造方法从类加载开始的执行顺序恒电子\"><a class=\"anchor\" href=\"#2-静态代码块普通代码块构造方法从类加载开始的执行顺序恒电子\">#</a> 2. 静态代码块，普通代码块，构造方法，从类加载开始的执行顺序？（恒 * 电子）</h4>\n<pre><code>类似问题：\n&gt; 类加载成员变量、静态代码块、构造器的加载顺序（*科软、软**力、同*顺）\n&gt; static代码块(静态代码块)是否在类的构造函数之前被执行（联*优势）\n</code></pre>\n<p><font color='orange'>静态代码块 --&gt; 普通代码块 --&gt; 构造器</font></p>\n<h3 id=\"25-final关键字\"><a class=\"anchor\" href=\"#25-final关键字\">#</a> 2.5 final 关键字</h3>\n<h4 id=\"1-描述一下对final理解华博普\"><a class=\"anchor\" href=\"#1-描述一下对final理解华博普\">#</a> 1. 描述一下对 final 理解（华 ** 博普）</h4>\n<p>用来修饰：类、方法、变量（成员变量、局部变量）</p>\n<ul>\n<li><font color='red'>类：不能被继承</font></li>\n<li>方法：不能被重写</li>\n<li>变量：是一个 “常量”，一旦赋值不能修改。</li>\n</ul>\n<h4 id=\"2-判断题使用final修饰一个变量时是引用不能改变引用指向的对象可以改变米\"><a class=\"anchor\" href=\"#2-判断题使用final修饰一个变量时是引用不能改变引用指向的对象可以改变米\">#</a> 2. 判断题：使用 final 修饰一个变量时，是引用不能改变，引用指向的对象可以改变？（* 米）</h4>\n<p>引用不能改变。</p>\n<p><font color='red'>引用指向的对象实体中的属性，如果没有使用 final 修饰，则可以改变</font>。</p>\n<h4 id=\"3-判断题final不能用于修饰构造方法联优势\"><a class=\"anchor\" href=\"#3-判断题final不能用于修饰构造方法联优势\">#</a> 3. 判断题：final 不能用于修饰构造方法？（联 * 优势）</h4>\n<p>是的。无意义</p>\n<h4 id=\"4-final或static-final-修饰成员变量能不能进行操作佳贸易\"><a class=\"anchor\" href=\"#4-final或static-final-修饰成员变量能不能进行操作佳贸易\">#</a> 4. final 或 static final 修饰成员变量，能不能进行 ++ 操作？（佳 * 贸易）</h4>\n<p>不能。因为赋值后不能再修改了</p>\n<h3 id=\"26-抽象类与接口\"><a class=\"anchor\" href=\"#26-抽象类与接口\">#</a> 2.6 抽象类与接口</h3>\n<h4 id=\"1-什么是抽象类如何识别一个抽象类易支付\"><a class=\"anchor\" href=\"#1-什么是抽象类如何识别一个抽象类易支付\">#</a> 1. 什么是抽象类？如何识别一个抽象类？（易 * 支付）</h4>\n<p>使用 abstract 修饰。</p>\n<p>可能有抽象方法。</p>\n<h4 id=\"2-为什么不能用abstract修饰属性-私有方法-构造器-静态方法-final的方法止善\"><a class=\"anchor\" href=\"#2-为什么不能用abstract修饰属性-私有方法-构造器-静态方法-final的方法止善\">#</a> 2. <mark>为什么不能用 abstract 修饰属性、私有方法、构造器、静态方法、final 的方法？</mark>（止 ** 善）</h4>\n<p>为了语言的自洽：</p>\n<ul>\n<li>\n<p>不能用 abstract 修饰<font color='gree'>属性、代码块、构造器</font>；</p>\n<blockquote>\n<ol>\n<li>属性：被 abstract 修饰的内容都是暂未被实现的，比如类、方法。而<font color='red'>属性不存在 &quot;尚未被实现&quot; 的状态</font>，因为在声明属性时会<font color='red'>默认初始化</font>！</li>\n<li>代码块：“尚未被实现” 的状态？那<font color='red'>直接删掉</font>代码块不就好了嘛...</li>\n<li>构造器：abstract 在修饰方法时，要求方法体为空，要求在子类中实现该方法。而<font color='red'>构造方法不能被子类继承</font>，与之矛盾</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>不能用 abstract 修饰<font color='gree'>私有方法、静态方法、final 的方法、final 的类</font>。</p>\n<blockquote>\n<ol>\n<li>私有方法：<font color='red'>子类无法访问到父类的私有方法，因此无法被子类 override</font>，而 abstract 方法必须要被子类实现，矛盾！</li>\n<li>静态方法：<font color='red'>静态方法可以通过类名直接调用，而 abstract 方法是没有方法体的，不能被调用，矛盾</font>！</li>\n<li>final 方法：<font color='red'>final 方法不能被子类 override</font>，同 1</li>\n<li>final 类：<font color='red'>final 类不能被继承</font>，同 1</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"3-接口与抽象类的区别字跳动-阿校招-度校招-计算机技术及应用研究所-航拓普-纬-招晟-汇云通-数信科技-北京永鼎力-上海连科技\"><a class=\"anchor\" href=\"#3-接口与抽象类的区别字跳动-阿校招-度校招-计算机技术及应用研究所-航拓普-纬-招晟-汇云通-数信科技-北京永鼎力-上海连科技\">#</a> 3. 接口与抽象类的区别？（字 * 跳动、阿 * 校招、* 度校招、** 计算机技术及应用研究所、航 * 拓普、纬 *、招 ** 晟、汇 * 云通、数信 ** 科技、北京永 * 鼎力、上海 * 连科技）</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230331160132667.png\" alt=\"image-20230331160132667\" /></p>\n<blockquote>\n<p>在开发中，常看到一个类不是去继承一个已经实现好的类，而是<font color='red'>要么继承抽象类，要么实现接口</font>。</p>\n</blockquote>\n<h4 id=\"4-接口是否可继承接口抽象类是否可实现implements接口抽象类是否可继承实现类concrete-class航拓普-蝶-深圳德科技\"><a class=\"anchor\" href=\"#4-接口是否可继承接口抽象类是否可实现implements接口抽象类是否可继承实现类concrete-class航拓普-蝶-深圳德科技\">#</a> 4. 接口是否可继承接口？抽象类是否可实现（implements）接口？抽象类是否可继承实现类（concrete class）？（航 * 拓普、* 蝶、深圳德 * 科技）</h4>\n<pre><code>类似问题：\n&gt; 接口A可以继承接口B吗?接口A可以实现接口B吗?（久*国际物流）\n</code></pre>\n<p>是；</p>\n<blockquote>\n<p>而且接口之间的继承关系是<font color='red'>多继承</font>的</p>\n</blockquote>\n<p>是；</p>\n<blockquote>\n<p>一个类实现了某接口（有两个公共抽象方法），但该类只实现了其中一个抽象方法，那么该类也就是抽象类。</p>\n</blockquote>\n<p>是；</p>\n<blockquote>\n<p><font color='red'>Object 类</font>是所有类的父类，它本身就是实现类。</p>\n</blockquote>\n<h4 id=\"5-接口可以有自己属性吗华中盛\"><a class=\"anchor\" href=\"#5-接口可以有自己属性吗华中盛\">#</a> 5. 接口可以有自己属性吗？（华 * 中盛）</h4>\n<p>可以。必须是 <code>public static final</code>  的</p>\n<blockquote>\n<p><font color='red'>公共静态常量</font></p>\n</blockquote>\n<h4 id=\"6-访问接口的u默认方法u如何使用上海思\"><a class=\"anchor\" href=\"#6-访问接口的u默认方法u如何使用上海思\">#</a> 6. 访问接口的<u>默认方法</u>如何使用 (上海 * 思)</h4>\n<p>使用<font color='red'>实现类的对象</font>进行调用。</p>\n<p>而且实现<font color='red'>还可以重写此默认方法</font>。</p>\n<h3 id=\"27-内部类\"><a class=\"anchor\" href=\"#27-内部类\">#</a> 2.7 内部类</h3>\n<h4 id=\"1-内部类有哪几种华油普-来科技\"><a class=\"anchor\" href=\"#1-内部类有哪几种华油普-来科技\">#</a> 1. 内部类有哪几种？（华油 ** 普、来 * 科技）</h4>\n<ul>\n<li>\n<p>成员内部类</p>\n<ul>\n<li>静态的</li>\n<li>非静态的</li>\n</ul>\n</li>\n<li>\n<p>局部内部类</p>\n<ul>\n<li>匿名的</li>\n<li>非匿名的</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-内部类的特点说一下招通\"><a class=\"anchor\" href=\"#2-内部类的特点说一下招通\">#</a> 2. 内部类的特点说一下（招通 **）</h4>\n<pre><code>类似问题：\n&gt; 说一下内部类的好处（北京楚*龙）\n&gt; 使用过内部类编程吗，有什么作用（软**力）\n</code></pre>\n<p><strong>成员内部类的使用特征，概括来讲有如下两种角色：</strong></p>\n<ul>\n<li>成员内部类作为 <code>类的成员</code> 的角色：\n<ul>\n<li>和外部类（只能使用 public、缺省）不同，内部类还可以声明为 private 或 protected；</li>\n<li>可以调用外部类的结构。（注意：<font color='red'>在静态内部类中不能使用外部类的非静态成员</font>）</li>\n<li>可以声明为 static 的；</li>\n</ul>\n</li>\n<li>成员内部类作为 <code>类</code> 的角色：\n<ul>\n<li>可以在内部定义属性、方法、构造器等结构</li>\n<li><font color='orange'>可以继承自己的想要继承的父类，实现自己想要实现的父接口们，和外部类的父类和父接口无关</font></li>\n<li><font color='red'>可以声明为 abstract 类 </font>，因此可以被其它的内部类继承</li>\n<li>可以声明为 final 的，表示不能被继承</li>\n<li>编译以后生成 <code>OuterClass$InnerClass.class</code>  字节码文件（也适用于局部内部类）</li>\n</ul>\n</li>\n</ul>\n<p>注意点：</p>\n<ol>\n<li>\n<p>外部类访问成员内部类的成员，需要 “内部类。成员” 或 “内部类对象。成员” 的方式</p>\n</li>\n<li>\n<p>成员内部类可以直接使用外部类的所有成员，包括私有的数据</p>\n</li>\n<li>\n<p>当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的</p>\n</li>\n</ol>\n<h4 id=\"8匿名类说一下阿校招-上海立网络\"><a class=\"anchor\" href=\"#8匿名类说一下阿校招-上海立网络\">#</a> 8. 匿名类说一下（阿 * 校招、上海立 * 网络）</h4>\n<p>匿名类是不能有名字的类，因此不能被引用，只能在创建时用 <strong>new</strong> 语句来声明它们。</p>\n<p>匿名类通常<font color='red'>继承一个父类</font>或<font color='red'>实现一个 / 多个接口</font>。</p>\n<h3 id=\"28-枚举类\"><a class=\"anchor\" href=\"#28-枚举类\">#</a> 2.8 枚举类</h3>\n<h4 id=\"1-枚举可以继承吗顺\"><a class=\"anchor\" href=\"#1-枚举可以继承吗顺\">#</a> 1. 枚举可以继承吗？（顺 *）</h4>\n<p>使用 enum 定义的，<font color='red'>其父类就是 java.lang.Enum 类</font>，就不要再继承其他的类了。</p>\n<h3 id=\"29-包装类\"><a class=\"anchor\" href=\"#29-包装类\">#</a> 2.9 包装类</h3>\n<h4 id=\"1-java基本类型与包装类的区别凡科技\"><a class=\"anchor\" href=\"#1-java基本类型与包装类的区别凡科技\">#</a> 1. Java 基本类型与包装类的区别（凡 * 科技）</h4>\n<p>省流：<font color='red'>基本类型有默认值，而包装类型初始为 null</font>。然后再根据这两个特性进行分业务使用，在阿里巴巴的规范里<font color='red'>所有的 POJO 类必须使用包装类型，而在本地变量推荐使用基本类型</font>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230331160147078.png\" alt=\"image-20230331160147078\" /></p>\n<p>1、在 Java 中，一切皆对象，但<font color='red'>八大基本类型却不是对象</font>。</p>\n<p>2、声明方式的不同，基本类型无需通过 new 关键字来创建，而<font color='red'>包装类型需 new 关键字</font>。</p>\n<p>3、存储方式及位置的不同，<font color='red'>基本类型是直接存储变量的值保存在<strong>栈</strong>中能高效的存取</font>，<font color='red'>包装类型需要通过引用指向实例，具体的实例保存在<strong>堆</strong>中</font>。</p>\n<p>4、初始值的不同，<font color='red'>包装类型的初始值为 null</font>，基本类型的的初始值视具体的类型而定，比如 int 类型的初始值为 0，boolean 类型为 false；</p>\n<p>5、使用方式的不同，比如<font color='red'>与集合类合作使用时只能使用包装类型</font>。</p>\n<p>6、什么时候该用包装类，什么时候用基本类型，看基本的业务来定：这个字段允不允许 null 值，如果允许 null 值，则必然要用封装类，否则值类型就可以了，用到比如泛型和反射调用函数.，就需要用包装类！</p>\n<h3 id=\"210-综合\"><a class=\"anchor\" href=\"#210-综合\">#</a> 2.10 综合</h3>\n<h4 id=\"1-谈谈你对面向对象的理解君科技-航拓普\"><a class=\"anchor\" href=\"#1-谈谈你对面向对象的理解君科技-航拓普\">#</a> 1. 谈谈你对面向对象的理解 (君 * 科技、航 * 拓普、...)</h4>\n<ul>\n<li>面向对象的<font color='gree'>两个要素</font>：<font color='red'>类、对象</font>  ---&gt; 面向对象编程。“万事万物皆对象”。</li>\n<li>面向对象的<font color='gree'>三大特征</font>：<font color='red'>封装、继承、多态</font>。</li>\n<li><font color='gree'>接口</font>，与类并列的结构，作为一个补充：<font color='red'>类可以实现多个接口</font>。</li>\n</ul>\n<h4 id=\"2-面向对象的特征有哪些方面-北京楚龙-深圳德科技-直科技-米奇网络-航拓普\"><a class=\"anchor\" href=\"#2-面向对象的特征有哪些方面-北京楚龙-深圳德科技-直科技-米奇网络-航拓普\">#</a> 2. <mark>面向对象的特征有哪些方面？</mark> （北京楚 * 龙、深圳德 * 科技、直 * 科技、米 * 奇网络、航 * 拓普）</h4>\n<ul>\n<li><font color='cornflowerblue'>封装（Encapsulation）</font>：将对象的属性和行为封装在一个抽象的类中，对外部隐藏其内部实现细节，只暴露必要的方法接口。这样可以避免外部直接访问和修改对象的属性，保证了对象的安全性和一致性。</li>\n<li><font color='cornflowerblue'>继承（Inheritance）</font>：通过一个已经存在的类来派生出一个新的类，新的类具有已有类的所有属性和方法，并且可以添加新的属性和方法，从而实现代码的重用和扩展。Java 中支持单继承和多层继承。</li>\n<li><font color='cornflowerblue'>多态（Polymorphism）</font>：同一种操作作用于不同的对象上面，可以产生不同的效果。\n<ul>\n<li><font color='gree'>编译时多态</font>：通过<font color='red'>方法的重载</font>实现，指在<strong>同</strong>一个类中，有多个方法名相<strong>同</strong>的方法，但是这些方法有着<strong>不同</strong>的参数列表，在编译期我们就可以确定到底调用哪个方法。</li>\n<li><font color='gree'>运行时多态</font>：通过<font color='red'>方法的重写</font>实现，子类重写父类中的方法（包括接口的实现），父类的引用不仅可以指向父类的对象，而且还可以指向子类的对象。当<strong>父类的引用指向子类的引用</strong>时，只有在运行时才能确定调用哪个方法。</li>\n</ul>\n</li>\n<li><font color='cornflowerblue'>抽象（Abstraction）</font>：抽取对象的共性，将其提取为一个抽象的类或接口，然后具体的对象通过继承或实现来实现这个抽象的类或接口。抽象可以减少代码的重复性，提高代码的复用性和可维护性。</li>\n<li><font color='cornflowerblue'>接口（Interface）</font>：接口是<font color='orange'>一种特殊的抽象类</font>，它定义了一组方法的签名，但是没有实现方法的实现。类可以实现一个或多个接口，实现接口的类必须实现接口中定义的所有方法，从而达到了代码重用和灵活性的目的。</li>\n</ul>\n",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC07%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E8%BF%9B%E9%98%B6%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC07%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E8%BF%9B%E9%98%B6%EF%BC%89/",
            "title": "宋红康_第07章：面向对象-进阶",
            "date_published": "2023-11-12T02:49:56.955Z",
            "content_html": "<h1 id=\"第07章随堂复习与企业真题面向对象-进阶\"><a class=\"anchor\" href=\"#第07章随堂复习与企业真题面向对象-进阶\">#</a> 第 07 章：随堂复习与企业真题（面向对象 - 进阶）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-this关键字的使用\"><a class=\"anchor\" href=\"#1-this关键字的使用\">#</a> 1. this 关键字的使用</h3>\n<ul>\n<li>\n<p>this 调用的结构：属性、方法；构造器</p>\n</li>\n<li>\n<p>this 调用属性或方法时，理解为：当前对象或当前正在创建的对象。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 当属性名和形参名同名时，必须使用 this 来区分</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>this (形参列表) 的方式，表示调用当前类中其他的重载的构造器。</p>\n</li>\n</ul>\n<h3 id=\"2-面向对象的特征二继承性\"><a class=\"anchor\" href=\"#2-面向对象的特征二继承性\">#</a> 2. 面向对象的特征二：继承性</h3>\n<ul>\n<li>\n<p>继承性的好处</p>\n<ul>\n<li>减少了代码的冗余，提高了复用性；</li>\n<li>提高了扩展性</li>\n<li>为多态的使用，提供了前提。</li>\n</ul>\n</li>\n<li>\n<p>Java 中继承性的特点</p>\n<ul>\n<li>\n<p><font color='red'>局限性：类的单继承性</font>。后续我们通过类实现接口的方式，解决单继承的局限性。</p>\n<blockquote>\n<p>一个子类只能有一个直接父类</p>\n</blockquote>\n</li>\n<li>\n<p><font color='red'>支持多层继承</font>，一个父类可以声明多个子类。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>基础：class A extends B {}</p>\n</li>\n<li>\n<p>理解：子类就获取了父类中声明的全部的属性、方法。可能受封装性的影响，不能直接调用。</p>\n</li>\n</ul>\n<h3 id=\"3-方法的重写override\"><a class=\"anchor\" href=\"#3-方法的重写override\">#</a> 3. 方法的重写（override）</h3>\n<ul>\n<li>面试题：方法的重载与重写的区别？\n<ul>\n<li>\n<p>方法的重载：<strong>“两同一不同”</strong></p>\n<blockquote>\n<p><font color='red'>同一个类中，相同的类名，不同的形参列表</font></p>\n</blockquote>\n</li>\n<li>\n<p>方法的重写：</p>\n<ul>\n<li>前提：类的继承关系</li>\n<li>子类<font color='red'>对父类中<strong>同名同参数</strong>方法的覆盖、覆写</font>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-super关键字的使用\"><a class=\"anchor\" href=\"#4-super关键字的使用\">#</a> 4. super 关键字的使用</h3>\n<ul>\n<li>super 可以调用的结构：属性、方法；构造器</li>\n<li>super：父类的</li>\n<li>super 调用父类的属性、方法：\n<ul>\n<li>如果子父类中出现了同名的属性，此时使用 super. 的方式，表明调用的是父类中声明的属性。</li>\n<li>子类重写了父类的方法。如果子类的任何一个方法中需要调用父类被重写的方法时，需要使用 super.</li>\n</ul>\n</li>\n<li>super 调用构造器：\n<ul>\n<li><font color='red'>在子类的构造器中，首行要么使用了 &quot;this (形参列表)&quot;，要么使用了 &quot;super (形参列表)&quot;</font>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-熟悉子类对象实例化的全过程\"><a class=\"anchor\" href=\"#5-熟悉子类对象实例化的全过程\">#</a> 5. （熟悉）子类对象实例化的全过程</h3>\n<ul>\n<li>结果上来说：体现为<font color='red'>继承性</font></li>\n<li>过程上来说：<font color='red'>子类调用构造器创建对象时，一定会直接或间接的调用其父类的构造器，以及父类的父类的构造器，...，直到调用到 Object () 的构造器</font>。</li>\n</ul>\n<h3 id=\"6-面向对象的特征三多态性\"><a class=\"anchor\" href=\"#6-面向对象的特征三多态性\">#</a> 6. 面向对象的特征三：多态性</h3>\n<ul>\n<li>\n<p>广义上的理解：子类对象的多态性、方法的重写；方法的重载</p>\n<p>狭义上的理解：子类对象的多态性。</p>\n</li>\n<li>\n<p>格式：Object obj = new String (&quot;hello&quot;);   <font color='orange'>父类的引用指向子类的对象</font>。</p>\n</li>\n<li>\n<p>多态的好处：<font color='red'>减少了大量的重载的方法的定义</font>；开闭原则</p>\n<ul>\n<li>举例：public boolean equals (Object obj)</li>\n<li>多态，无处不在！讲了抽象类、接口以后，会有更好的理解。</li>\n</ul>\n</li>\n<li>\n<p>多态的使用：</p>\n<ul>\n<li>虚拟方法调用。“<font color='red'>编译看左边，运行看右边</font>”。</li>\n<li><font color='red'>属性，不存在多态性，都看左边</font></li>\n</ul>\n</li>\n<li>\n<p><font color='red'>多态的逆过程：向下转型，使用强转符 ()</font>。</p>\n<ul>\n<li><font color='red'>为了避免出现强转时的 <code>ClassCastException</code> ，建议 () 之前使用 <code>instanceOf</code>  进行判断</font>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-object类的使用\"><a class=\"anchor\" href=\"#7-object类的使用\">#</a> 7. Object 类的使用</h3>\n<ul>\n<li><font color='red'>根父类</font></li>\n<li>equals () 的使用\n<ul>\n<li>重写和不重写的区别\n<ul>\n<li>不重写：与 <code>==</code>  相等，比较引用数据类型的内存地址</li>\n<li>重写：比较类的属性值</li>\n</ul>\n</li>\n<li><mark>面试题： == 和 equals ()</mark></li>\n</ul>\n</li>\n<li>toString () 的使用\n<ul>\n<li><font color='gree'>Object 中 toString ()</font>调用后，返回当前对象所属的<font color='red'>类和地址值</font>。</li>\n<li>开发中常常<font color='gree'>重写</font>toString ()，用于返回当前对象的<font color='red'>属性信息</font>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"8-项目二拼电商客户管理系统\"><a class=\"anchor\" href=\"#8-项目二拼电商客户管理系统\">#</a> 8. 项目二：拼电商客户管理系统</h3>\n<ul>\n<li>编写两个类：Customer 、 CustomerList 类（封装了对数组的增删改查操作）</li>\n</ul>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"21-继承性\"><a class=\"anchor\" href=\"#21-继承性\">#</a> 2.1 继承性</h3>\n<h4 id=\"1-父类哪些成员可以被继承属性可以被继承吗可以或者不可以请举下例子-北京明信\"><a class=\"anchor\" href=\"#1-父类哪些成员可以被继承属性可以被继承吗可以或者不可以请举下例子-北京明信\">#</a> 1. 父类哪些成员可以被继承，属性可以被继承吗？可以或者不可以，请举下例子。（北京明 ** 信）</h4>\n<p>父类的<font color='red'>属性、方法可以被继承</font>，<font color='red'>构造器可以被子类调用</font>。</p>\n<h3 id=\"22-重写\"><a class=\"anchor\" href=\"#22-重写\">#</a> 2.2 重写</h3>\n<h4 id=\"1-什么是override与overload的区别顺-软力-明数据-阳科技-中软\"><a class=\"anchor\" href=\"#1-什么是override与overload的区别顺-软力-明数据-阳科技-中软\">#</a> <mark>1. 什么是 Override，与 Overload 的区别</mark>（顺 *、软 ** 力、明 * 数据、阳 * 科技、中 * 软）</h4>\n<p>Overload（重载）：<strong>两同一不同</strong>。</p>\n<blockquote>\n<p>同一个类中，相同的方法名称，不同的形参列表的方法。</p>\n</blockquote>\n<p>Override（重写）：子类对父类中<strong>同名同参数</strong>的方法的覆盖</p>\n<h4 id=\"2-overload的方法是否可以改变返回值的类型新陆\"><a class=\"anchor\" href=\"#2-overload的方法是否可以改变返回值的类型新陆\">#</a> 2. Overload 的方法是否可以改变返回值的类型？（新 * 陆）</h4>\n<p>当然可以！重载仅要求 “在同一个类中，有同样的方法名称，且形参列表不同”，对返回值类型没有要求。</p>\n<h4 id=\"3-构造器constructor是否可以被override\"><a class=\"anchor\" href=\"#3-构造器constructor是否可以被override\">#</a> <mark>3. 构造器 Constructor 是否可以被 override？</mark></h4>\n<p>当然不能！override 要求 “子类对父类中同名同参数的方法进行覆写”，而构造器的名称只能是其所在类的类名，而子类与父类的类名不可能相同。</p>\n<p>但是可以被重载。</p>\n<p>不能！构造器可以重载</p>\n<h4 id=\"4-为什么要有重载我随便命名一个别的函数名不行吗谈谈你是怎么理解的-腾\"><a class=\"anchor\" href=\"#4-为什么要有重载我随便命名一个别的函数名不行吗谈谈你是怎么理解的-腾\">#</a> 4. 为什么要有重载，我随便命名一个别的函数名不行吗？谈谈你是怎么理解的。（腾 *）</h4>\n<p>见名知意。</p>\n<h3 id=\"23-super关键字\"><a class=\"anchor\" href=\"#23-super关键字\">#</a> 2.3 super 关键字</h3>\n<h4 id=\"1-super和this的区别蚂服\"><a class=\"anchor\" href=\"#1-super和this的区别蚂服\">#</a> 1. super 和 this 的区别 (蚂 ** 服)</h4>\n<p>this 调用属性或方法时，理解为：<strong>当前对象</strong>或当前正在创建的对象。</p>\n<p>super 调用<strong>父类</strong>的属性、方法。</p>\n<h4 id=\"2-this-super关键字分别代表什么以及他们各自的使用场景和作用-北京楚龙\"><a class=\"anchor\" href=\"#2-this-super关键字分别代表什么以及他们各自的使用场景和作用-北京楚龙\">#</a> 2. this、super 关键字分别代表什么？以及他们各自的使用场景和作用。（北京楚 * 龙）</h4>\n<p>略</p>\n<h3 id=\"24-多态\"><a class=\"anchor\" href=\"#24-多态\">#</a> 2.4 多态</h3>\n<h4 id=\"1-谈谈你对多态的理解三重工-江智能-银数据-君科技\"><a class=\"anchor\" href=\"#1-谈谈你对多态的理解三重工-江智能-银数据-君科技\">#</a> <mark>1. 谈谈你对多态的理解</mark> (三 * 重工、江 * 智能、银 * 数据、君 * 科技)</h4>\n<ul>\n<li>\n<p>Java 中实现多态的机制是什么？(国 * 电网)</p>\n<blockquote>\n<p><strong><font color='orange'>父类或接口定义的引用变量可以指向子类或实现类的实例对象</font></strong>，而程序调用的方法<font color='red'>在<u>运行期</u>才动态绑定</font>，就是引用变量所指向的具体实现对象的方法，也就是内存里正在运行的那个对象的方法，<font color='red'>而不是引用变量的<u>编译期类型</u>中定义的方法</font>。</p>\n</blockquote>\n</li>\n<li>\n<p>什么是多态？（上 * 银行）</p>\n<blockquote>\n<p>多态是同一个行为具有多个不同表现形式或形态的能力。</p>\n<p>指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p>\n</blockquote>\n</li>\n<li>\n<p>Java 中的多态是什么意思？（贝 *）</p>\n<blockquote>\n<p>体现为 **<font color='orange'>父类引用变量可以指向子类对象</font>**。</p>\n<p>注意：<strong>在使用多态后的父类引用变量调用方法时，会调用子类重写后的方法</strong>。</p>\n<ul>\n<li>\n<p>多态成员变量：编译、运行看左边；</p>\n</li>\n<li>\n<p>多态成员方法：编译看左边，运行看右边；</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2-多态new出来的对象跟不多态new出来的对象区别在哪万智能\"><a class=\"anchor\" href=\"#2-多态new出来的对象跟不多态new出来的对象区别在哪万智能\">#</a> 2.== 多态 new 出来的对象跟不多态 new 出来的对象区别在哪？==（万 * 智能）</h4>\n<p>多态中<font color='red'>成员方法在编译时看左边，运行时看右边</font>。因此，多态 new 出来的对象<font color='red'>会屏蔽子类类特有的属性和方法</font>。</p>\n<h4 id=\"3-说说你认为多态在代码中的体现楚龙\"><a class=\"anchor\" href=\"#3-说说你认为多态在代码中的体现楚龙\">#</a> 3. 说说你认为多态在代码中的体现（楚 * 龙）</h4>\n<p>无处不在！</p>\n<p>略</p>\n<h3 id=\"25-object类\"><a class=\"anchor\" href=\"#25-object类\">#</a> 2.5 Object 类</h3>\n<h4 id=\"1-与equals的区别拓思\"><a class=\"anchor\" href=\"#1-与equals的区别拓思\">#</a> ==1. <mark>与 equals 的区别</mark>（拓 * 思）</h4>\n<pre><code>类似问法：\n&gt; 两个对象A和B，A==B，A.equals(B)有什么区别（华油**普）\n</code></pre>\n<ul>\n<li>\n<p><code>==</code>  ：<font color='red'>对于<u>基本数据类型</u>就是比较值，对于<u>引用数据类型</u>就是比较内存地址</font>；</p>\n</li>\n<li>\n<p><code>equals</code> ：</p>\n<ul>\n<li>\n<p>它是属于 <code>java.lang.Object</code>  类里面的方法，<font color='orange'>如果该方法没有被重写过默认也是 <code>==</code> ，只能对<u>引用数据类型</u>比较内存地址</font>；</p>\n<blockquote>\n<p>因此，<font color='red'>通常情况下，重写 equals 方法，会比较类中的相应属性是否都相等</font>。不然就没有重写的必要了。</p>\n</blockquote>\n</li>\n<li>\n<p>我们可以看到<font color='orange'>String 等类的 <code>equals</code>  方法是被重写过的，因此是比较值的</font>，而且 String 类在日常开发中用的比较多，久而久之，形成了 equals 是比较值的错误观点。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-重写equals方法要注意什么安网络科技\"><a class=\"anchor\" href=\"#2-重写equals方法要注意什么安网络科技\">#</a> <mark>2. 重写 equals 方法要注意什么？</mark>（安 ** 网络科技）</h4>\n<ul>\n<li>明确判定两个对象实体 equals () 的<font color='red'>比较标准</font>，是否需要所有的属性参与</li>\n<li><font color='orange'>对象的属性如果也是自定义的类型，此属性所在类也需要重写 equals ()</font></li>\n</ul>\n<h4 id=\"3-java中所有类的父类是什么他都有什么方法阿校招\"><a class=\"anchor\" href=\"#3-java中所有类的父类是什么他都有什么方法阿校招\">#</a> 3. Java 中所有类的父类是什么？他都有什么方法？（阿 * 校招）</h4>\n<p>java.lang.Object 类：</p>\n<ul>\n<li>equals()</li>\n<li>toString()</li>\n<li>hashCode()</li>\n<li>getClass()</li>\n<li>clone()</li>\n</ul>\n",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC06%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%9F%BA%E7%A1%80%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC06%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%9F%BA%E7%A1%80%EF%BC%89/",
            "title": "宋红康_第06章：面向对象-基础",
            "date_published": "2023-11-12T02:49:24.984Z",
            "content_html": "<h1 id=\"第06章随堂复习与企业真题面向对象-基础\"><a class=\"anchor\" href=\"#第06章随堂复习与企业真题面向对象-基础\">#</a> 第 06 章：随堂复习与企业真题（面向对象 - 基础）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-了解面向过程-vs-面向对象\"><a class=\"anchor\" href=\"#1-了解面向过程-vs-面向对象\">#</a> 1. （了解）面向过程 vs 面向对象</h3>\n<ul>\n<li>不管是面向过程、面向对象，都是程序设计的思路。</li>\n<li>面向过程：以函数为基本单位，适合解决简单问题。比如：开车</li>\n<li>面向对象：以类为基本单位，适合解决复杂问题。比如：造车</li>\n</ul>\n<h3 id=\"2-类-对象\"><a class=\"anchor\" href=\"#2-类-对象\">#</a> 2. 类、对象</h3>\n<ul>\n<li>类：抽象的，概念上的定义</li>\n<li>对象：具体的，类的一个一个的实例。</li>\n<li>面向对象完成具体功能的操作的三步流程（非常重要）</li>\n</ul>\n<pre><code>步骤1：创建类，并设计类的内部成员（属性、方法）\n步骤2：创建类的对象。比如：Phone p1 = new Phone();\n步骤3：通过对象，调用其内部声明的属性或方法，完成相关的功能\n</code></pre>\n<ul>\n<li>对象的内存解析\n<ul>\n<li>创建类的一个对象；创建类的多个对象；方法的调用的内存解析</li>\n</ul>\n</li>\n<li>Java 中内存结构的划分\n<ul>\n<li>Java 中内存结构划分为：<font color='red'> <code>虚拟机栈、堆、方法区</code> </font>；程序计数器、本地方法栈</li>\n<li>虚拟机栈：以栈帧为基本单位，有入栈和出栈操作；每个栈帧入栈操作对应一个方法的执行；方法内的局部变量会存储在栈帧中。</li>\n<li>堆空间：new 出来的结构（数组、对象）：① 数组，数组的元素在堆中 ② 对象的成员变量在堆中。</li>\n<li><font color='red'>方法区：加载的类的模板结构</font>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-类的成员之一属性或成员变量\"><a class=\"anchor\" href=\"#3-类的成员之一属性或成员变量\">#</a> 3. 类的成员之一：属性（或成员变量）</h3>\n<ul>\n<li>成员变量 vs 局部变量\n<ul>\n<li>声明的位置</li>\n<li>内存中存放的位置</li>\n<li>作用域</li>\n<li>权限修饰符</li>\n<li>初始化值</li>\n<li>生命周期</li>\n</ul>\n</li>\n<li>属性 &lt;=&gt; 成员变量 &lt;=&gt;field &lt;=&gt; 字段、域</li>\n</ul>\n<h3 id=\"4-类的成员之二方法\"><a class=\"anchor\" href=\"#4-类的成员之二方法\">#</a> 4. 类的成员之二：方法</h3>\n<ul>\n<li 方法体=\"\">方法的声明：权限修饰符 返回值类型 方法名 (形参列表)\n<ul>\n<li>重点：返回值类型、形参列表</li>\n</ul>\n</li>\n<li>return 关键字的使用</li>\n</ul>\n<h3 id=\"5-再谈方法\"><a class=\"anchor\" href=\"#5-再谈方法\">#</a> 5. 再谈方法</h3>\n<h4 id=\"51-方法的重载overload\"><a class=\"anchor\" href=\"#51-方法的重载overload\">#</a> 5.1 方法的重载 (overload)</h4>\n<ul>\n<li>方法的重载的要求：“两同一不同”</li>\n<li>调用方法时，如何确定调用的是某个指定的方法呢？① 方法名 ② 形参列表</li>\n</ul>\n<h4 id=\"52-可变个数形参的方法\"><a class=\"anchor\" href=\"#52-可变个数形参的方法\">#</a> 5.2 可变个数形参的方法</h4>\n<ul>\n<li>格式： <code>(int ... args)</code></li>\n</ul>\n<h4 id=\"53-方法的参数传递机制font-colorred值传递font重点-难点\"><a class=\"anchor\" href=\"#53-方法的参数传递机制font-colorred值传递font重点-难点\">#</a> 5.3 方法的参数传递机制：<font color='red'>值传递</font>(重点、难点)</h4>\n<pre><code>&gt; 如果形参是基本数据类型的变量，则将实参保存的数据值赋给形参。\n&gt; 如果形参是引用数据类型的变量，则将实参保存的地址值赋给形参。\n</code></pre>\n<h4 id=\"54-递归方法\"><a class=\"anchor\" href=\"#54-递归方法\">#</a> 5.4 递归方法</h4>\n<ul>\n<li>递归方法构成了隐式的循环</li>\n<li>对比：相较于循环结构，递归方法<font color='red'>效率稍低，内存占用偏高</font>。</li>\n</ul>\n<h3 id=\"6-对象数组\"><a class=\"anchor\" href=\"#6-对象数组\">#</a> 6. 对象数组</h3>\n<ul>\n<li>String[] ；Person[] ; Customer[]</li>\n</ul>\n<h3 id=\"7-package-import关键字的使用\"><a class=\"anchor\" href=\"#7-package-import关键字的使用\">#</a> 7. package、import 关键字的使用</h3>\n<ul>\n<li>package：指明声明的类所属的包。</li>\n<li>import：当前类中，如果使用其它包下的类（除 java.lang 包），原则上就需要导入。</li>\n</ul>\n<h3 id=\"8-oop的特征之一font-colorred封装性font\"><a class=\"anchor\" href=\"#8-oop的特征之一font-colorred封装性font\">#</a> 8. oop 的特征之一：<font color='red'>封装性</font></h3>\n<pre><code>Java规定了4种权限修饰，分别是：private、缺省、protected、public。\n我们可以使用4种权限修饰来修饰类及类的内部成员。当这些成员被调用时，体现可见性的大小。\n</code></pre>\n<p>举例：</p>\n<pre><code>&gt; 场景1：私有化(private)类的属性，提供公共(public)的get和set方法，对此属性进行获取或修改\n&gt; 场景2：将类中不需要对外暴露的方法，设置为private\n&gt; 场景3：单例模式中构造器private的了，避免在类的外部创建实例。（放到static关键字后讲）\n</code></pre>\n<p>上理论：程序设计的原则之一</p>\n<pre><code>理论上：\n  -`高内聚`：类的内部数据操作细节自己完成，不允许外部干涉；\n    （Java程序通常以类的形态呈现，相关的功能封装到方法中。）\n  -`低耦合`：仅暴露少量的方法给外部使用，尽量方便外部调用。\n    （给相关的类、方法设置权限，把该隐藏的隐藏起来，该暴露的暴露出去）\n</code></pre>\n<h3 id=\"9-类的成员之三font-colorred构造器font\"><a class=\"anchor\" href=\"#9-类的成员之三font-colorred构造器font\">#</a> 9. 类的成员之三：<font color='red'>构造器</font></h3>\n<ul>\n<li>如何定义：权限修饰符 类名 (形参列表){}</li>\n<li>构造器的作用：① 搭配上 new，用来创建对象 ② 初始化对象的成员变量</li>\n</ul>\n<h3 id=\"10-三个小知识\"><a class=\"anchor\" href=\"#10-三个小知识\">#</a> 10. 三个小知识</h3>\n<h4 id=\"101-类的实例变量的赋值过程重要\"><a class=\"anchor\" href=\"#101-类的实例变量的赋值过程重要\">#</a> 10.1 类的实例变量的赋值过程（重要）</h4>\n<pre><code>1. 在类的属性中，可以有哪些位置给属性赋值？\n① 默认初始化；\n② 显式初始化；\n③ 构造器中初始化；\n**********************************\n④ 通过&quot;对象.方法&quot;的方式赋值；\n⑤ 通过&quot;对象.属性&quot;的方式赋值；\n\n2. 这些位置执行的先后顺序是怎样？\n① - ② - ③ - ④/⑤\n</code></pre>\n<h4 id=\"102-javabean\"><a class=\"anchor\" href=\"#102-javabean\">#</a> 10.2 JavaBean</h4>\n<pre><code>所谓JavaBean，是指符合如下标准的Java类：\n\n- 类是公共的\n- 有一个无参的公共的构造器\n- 有属性，且有对应的get、set方法\n</code></pre>\n<h4 id=\"103-uml类图\"><a class=\"anchor\" href=\"#103-uml类图\">#</a> 10.3 UML 类图</h4>\n<p>熟悉。</p>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"21-类与对象\"><a class=\"anchor\" href=\"#21-类与对象\">#</a> 2.1 类与对象</h3>\n<h4 id=\"1-面向对象面向过程的理解平金服-英达\"><a class=\"anchor\" href=\"#1-面向对象面向过程的理解平金服-英达\">#</a> 1. 面向对象，面向过程的理解？（平 * 金服、英 ** 达）</h4>\n<p>略。</p>\n<h4 id=\"2-java-的引用类型有哪几种阿校招\"><a class=\"anchor\" href=\"#2-java-的引用类型有哪几种阿校招\">#</a> 2. <mark>Java 的引用类型有哪几种</mark>（阿 * 校招）</h4>\n<p>类、数组、<font color='red'>接口；枚举、注解、记录</font></p>\n<h4 id=\"3-类和对象的区别凡科技-上银行\"><a class=\"anchor\" href=\"#3-类和对象的区别凡科技-上银行\">#</a> 3. 类和对象的区别（凡 * 科技、上 * 银行）</h4>\n<ul>\n<li>类：抽象的，概念上的定义</li>\n<li>对象：具体的，类的一个一个的实例。</li>\n</ul>\n<h4 id=\"4-面向对象你解释一下项目中哪些地方用到面向对象燕金融\"><a class=\"anchor\" href=\"#4-面向对象你解释一下项目中哪些地方用到面向对象燕金融\">#</a> 4. 面向对象，你解释一下，项目中哪些地方用到面向对象？（燕 * 金融）</h4>\n<p>“万事万物皆对象”。</p>\n<h3 id=\"22-java内存结构\"><a class=\"anchor\" href=\"#22-java内存结构\">#</a> 2.2 Java 内存结构</h3>\n<h4 id=\"1-java虚拟机中内存划分为哪些区域详细介绍一下神岳-数互融\"><a class=\"anchor\" href=\"#1-java虚拟机中内存划分为哪些区域详细介绍一下神岳-数互融\">#</a> 1. <mark>Java 虚拟机中内存划分为哪些区域，详细介绍一下</mark>（神 ** 岳、数 * 互融）</h4>\n<ul>\n<li>方法区</li>\n<li>堆</li>\n<li>程序计数器</li>\n<li>虚拟机栈</li>\n<li>本地方法栈</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20230305102746980.png\" alt=\"image-20230305102746980\" /></p>\n<h4 id=\"2-对象存在java内存的哪块区域里面阿\"><a class=\"anchor\" href=\"#2-对象存在java内存的哪块区域里面阿\">#</a> 2. 对象存在 Java 内存的哪块区域里面？（阿 *）</h4>\n<p>堆。</p>\n<h3 id=\"23-权限修饰符封装性\"><a class=\"anchor\" href=\"#23-权限修饰符封装性\">#</a> 2.3 权限修饰符（封装性）</h3>\n<h4 id=\"1-private-缺省-protected-public的表格化作用区域爱信-拓思-中瑞飞\"><a class=\"anchor\" href=\"#1-private-缺省-protected-public的表格化作用区域爱信-拓思-中瑞飞\">#</a> 1. <mark>private 、缺省、protected、public 的表格化作用区域</mark>（爱 * 信、拓 * 思、中 * 瑞飞）</h4>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>本类内部</th>\n<th>本包内</th>\n<th>其他包的子类</th>\n<th>其他包非子类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>private</td>\n<td>√</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>缺省</td>\n<td>√</td>\n<td>√</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>×</td>\n</tr>\n<tr>\n<td>public</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-main方法的public能不能换成private为什么凡科技-顺\"><a class=\"anchor\" href=\"#2-main方法的public能不能换成private为什么凡科技-顺\">#</a> 2. <mark>main 方法的 public 能不能换成 private？为什么？</mark>（凡 * 科技、顺 *）</h4>\n<p>能。但是<font color='red'>改以后就不能作为程序的入口了，就只是一个普通的方法</font>。</p>\n<h3 id=\"24-构造器\"><a class=\"anchor\" href=\"#24-构造器\">#</a> 2.4 构造器</h3>\n<h4 id=\"1-构造方法和普通方法的区别凡科技-软动力-中软\"><a class=\"anchor\" href=\"#1-构造方法和普通方法的区别凡科技-软动力-中软\">#</a> 1. <mark>构造方法和普通方法的区别</mark>（凡 * 科技、软 * 动力、中 * 软）</h4>\n<p>编写代码的角度：没有共同点。声明格式、作用都不同。</p>\n<p>字节码文件的角度：构造器会以 <code>&lt;init&gt;()方法</code> 的形态呈现，用以初始化对象。</p>\n<h4 id=\"2-构造器constructor是否可被overload鸿网络\"><a class=\"anchor\" href=\"#2-构造器constructor是否可被overload鸿网络\">#</a> 2. 构造器 Constructor 是否可被 overload?（鸿 * 网络）</h4>\n<p>可以。</p>\n<h4 id=\"3-无参构造器和有参构造器的的作用和应用北京楚龙\"><a class=\"anchor\" href=\"#3-无参构造器和有参构造器的的作用和应用北京楚龙\">#</a> 3. 无参构造器和有参构造器的的作用和应用（北京楚 * 龙）</h4>\n<p>略</p>\n<h3 id=\"25-属性及属性赋值顺序\"><a class=\"anchor\" href=\"#25-属性及属性赋值顺序\">#</a> 2.5 属性及属性赋值顺序</h3>\n<h4 id=\"1-成员变量与局部变量的区别艾软件\"><a class=\"anchor\" href=\"#1-成员变量与局部变量的区别艾软件\">#</a> 1. <mark>成员变量与局部变量的区别</mark>（艾 * 软件）</h4>\n<p>成员变量 vs 局部变量</p>\n<ul>\n<li>声明的位置</li>\n<li>内存中存放的位置</li>\n<li>作用域</li>\n<li>权限修饰符</li>\n<li>初始化值</li>\n<li>生命周期</li>\n</ul>\n<h4 id=\"2-变量赋值和构造方法加载的优先级问题凡科技-博软件\"><a class=\"anchor\" href=\"#2-变量赋值和构造方法加载的优先级问题凡科技-博软件\">#</a> 2. <mark>变量赋值和构造方法加载的优先级问题</mark>（凡 * 科技、博 * 软件）</h4>\n<p>变量显式赋值先于构造器中的赋值。</p>\n<p>如何证明？我看的字节码文件。</p>\n",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC05%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E6%95%B0%E7%BB%84%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC05%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E6%95%B0%E7%BB%84%EF%BC%89/",
            "title": "宋红康_第05章：数组",
            "date_published": "2023-11-12T02:47:48.546Z",
            "content_html": "<h1 id=\"第05章随堂复习与企业真题数组\"><a class=\"anchor\" href=\"#第05章随堂复习与企业真题数组\">#</a> 第 05 章：随堂复习与企业真题（数组）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-数组的概述\"><a class=\"anchor\" href=\"#1-数组的概述\">#</a> 1. 数组的概述</h3>\n<ul>\n<li>数组，就可以理解为多个数据的组合。</li>\n<li>是程序中的容器：数组、集合框架（第 12 章，List、Set、Map）</li>\n<li>数组存储的数据的特点：依次紧密排列的、有序的、可以重复的</li>\n<li>此时的数组、集合框架都是在内存中对多个数据的存储。</li>\n<li>数组的其它特点：一旦初始化，其长度就是确定的、不可更改的</li>\n</ul>\n<h3 id=\"2-一维数组的使用重要\"><a class=\"anchor\" href=\"#2-一维数组的使用重要\">#</a> 2. 一维数组的使用（重要）</h3>\n<pre><code>&gt; 数组的声明和初始化\n\tint[] arr = new int[10];\n\tString[] arr1 = new String[]&#123;&quot;Tom&quot;,&quot;Jerry&quot;&#125;;\n&gt; 调用数组的指定元素:使用角标、索引、index\n\t&gt;index从0开始！\n&gt; 数组的属性：length,表示数组的长度\n&gt; 数组的遍历\n&gt; 数组元素的默认初始化值\n&gt; 一维数组的内存解析（难）\n\t前提：在main()中声明变量：int[] arr = new int[]&#123;1,2,3&#125;;\n\t&gt; 虚拟机栈：main()作为一个栈帧，压入栈空间中。在main()栈帧中，存储着arr变量。arr记录着数组实体的首地址值。\n\t&gt; 堆：数组实体存储在堆空间中。\n</code></pre>\n<h3 id=\"3-二维数组的使用难点\"><a class=\"anchor\" href=\"#3-二维数组的使用难点\">#</a> 3. 二维数组的使用（难点）</h3>\n<ul>\n<li>二维数组：一维数组的元素，又是一个唯一数组，则构成了二维数组。</li>\n</ul>\n<pre><code>&gt; 数组的声明和初始化\n&gt; 调用数组的指定元素\n&gt; 数组的属性：length,表示数组的长度\n&gt; 数组的遍历\n&gt; 数组元素的默认初始化值\n&gt; 二维数组的内存解析（难）\n</code></pre>\n<h3 id=\"4-数组的常用算法重要\"><a class=\"anchor\" href=\"#4-数组的常用算法重要\">#</a> 4. <mark>数组的常用算法（重要）</mark></h3>\n<ul>\n<li>数值型数组的特征值的计算：最大值、最小值、总和、平均值等</li>\n<li>数组元素的赋值。比如：杨辉三角；彩票随机生成数（6 位；1-30；不能重复）；回形数</li>\n<li>数组的复制、赋值</li>\n<li>数组的反转</li>\n<li>数组的扩容、缩容</li>\n<li>数组的查找\n<ul>\n<li>线性查找</li>\n<li><font color='red'>二分法查找（前提：数组有序）</font></li>\n</ul>\n</li>\n<li>数组的排序\n<ul>\n<li>冒泡排序：最简单</li>\n<li><font color='red'>快速排序：最常用</font></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-arrays工具类的使用\"><a class=\"anchor\" href=\"#5-arrays工具类的使用\">#</a> 5. Arrays 工具类的使用</h3>\n<ul>\n<li>熟悉一下内部的常用的方法\n<ul>\n<li>toString() / sort() / binarySearch()</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-数组中的常见异常\"><a class=\"anchor\" href=\"#6-数组中的常见异常\">#</a> 6. 数组中的常见异常</h3>\n<ul>\n<li>ArrayIndexOutOfBoundsException</li>\n<li>NullPointerException</li>\n</ul>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"1-数组有没有length这个方法-string有没有length这个方法蓝\"><a class=\"anchor\" href=\"#1-数组有没有length这个方法-string有没有length这个方法蓝\">#</a> <mark>1. 数组有没有 length () 这个方法？String 有没有 length () 这个方法？（* 蓝）</mark></h3>\n<p>数组没有 length ()，是 length 属性。</p>\n<blockquote>\n<p>arr.length</p>\n</blockquote>\n<p>String 有 length ()。</p>\n<blockquote>\n<p>str.length()</p>\n</blockquote>\n<h3 id=\"2-有数组int-arr用java代码将数组元素顺序颠倒闪购\"><a class=\"anchor\" href=\"#2-有数组int-arr用java代码将数组元素顺序颠倒闪购\">#</a> <mark>2. 有数组 int [] arr，用 Java 代码将数组元素顺序颠倒（闪 * 购）</mark></h3>\n<p>略</p>\n<h3 id=\"3-为什么数组要从0开始编号而不是1中支付\"><a class=\"anchor\" href=\"#3-为什么数组要从0开始编号而不是1中支付\">#</a> <mark>3. 为什么数组要从 0 开始编号，而不是 1 (中 * 支付)</mark></h3>\n<p>数组的索引，表示了<font color='red'><strong>数组元素距离首地址的偏离量</strong></font>。因为第 1 个元素的地址与首地址相同，所以偏移量就是 0。所以从 0 开始。</p>\n<h3 id=\"4-数组有什么排序的方式手写一下平保险\"><a class=\"anchor\" href=\"#4-数组有什么排序的方式手写一下平保险\">#</a> <mark>4. 数组有什么排序的方式，手写一下（平 * 保险）</mark></h3>\n<p>冒泡。</p>\n<p>快排。（讲完递归方法以后，大家就可以练习一下）</p>\n<h3 id=\"5-常见排序算法说下快排过程时间复杂度5到家\"><a class=\"anchor\" href=\"#5-常见排序算法说下快排过程时间复杂度5到家\">#</a> <mark>5. 常见排序算法，说下快排过程，时间复杂度？（5 * 到家）</mark></h3>\n<p>见课件。</p>\n<p>快排：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h3 id=\"6-二分算法实现数组的查找神舟天软件\"><a class=\"anchor\" href=\"#6-二分算法实现数组的查找神舟天软件\">#</a> <mark>6. 二分算法实现数组的查找（神舟 * 天软件）</mark></h3>\n<p>略</p>\n<h3 id=\"7-怎么求数组的最大子序列和携\"><a class=\"anchor\" href=\"#7-怎么求数组的最大子序列和携\">#</a> <mark>7. 怎么求数组的最大子序列和（携 *）</mark></h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> excise9_max_subArray <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         * 输入一个整形数组，数组里有正数也有负数。数组中连续的一个或多个整数组成一个子数组，每个子数组都有一个和。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         * 求所有子数组的和的最大值。要求时间复杂度为 O (n)。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         例如：输入的数组为 1, -2, 3, 10, -4, 7, 2, -5，和最大的子数组为 3, 10, -4, 7, 2，</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         因此输出为该子数组的和 18。*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> tmpSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录当前子数组的和</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            tmpSum <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmpSum <span class=\"token operator\">></span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                res <span class=\"token operator\">=</span> tmpSum<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新最大值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmpSum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                tmpSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果当前子数组的和小于 0，就抛弃</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"8-arrays-类的排序方法是什么如何实现排序的阿-阿校招\"><a class=\"anchor\" href=\"#8-arrays-类的排序方法是什么如何实现排序的阿-阿校招\">#</a> <mark>8. Arrays 类的排序方法是什么？如何实现排序的？（阿 *、阿 * 校招）</mark></h3>\n<p>快速排序。</p>\n",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC04%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC04%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%89/",
            "title": "宋红康_第04章：IDEA安装与使用",
            "date_published": "2023-11-12T02:47:14.930Z",
            "content_html": "<h1 id=\"第04章随堂复习与企业真题idea安装与使用\"><a class=\"anchor\" href=\"#第04章随堂复习与企业真题idea安装与使用\">#</a> 第 04 章：随堂复习与企业真题（IDEA 安装与使用）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"1-idea的认识\"><a class=\"anchor\" href=\"#1-idea的认识\">#</a> 1. IDEA 的认识</h3>\n<ul>\n<li>IDEA (集成功能强大、符合人体工程学（设置人性化）)</li>\n<li>Eclipse</li>\n</ul>\n<h3 id=\"2-idea的下载-安装-卸载\"><a class=\"anchor\" href=\"#2-idea的下载-安装-卸载\">#</a> 2. IDEA 的下载、安装、卸载</h3>\n<ul>\n<li>卸载：使用控制面板进行卸载，注意删除 c 盘指定目录下的两个文件目录：jetbrains</li>\n<li>下载：从官网进行下载：旗舰版（收费版）</li>\n<li>安装：傻瓜式的安装 --&gt; 注册</li>\n</ul>\n<h3 id=\"3-工程等结构\"><a class=\"anchor\" href=\"#3-工程等结构\">#</a> 3. 工程等结构</h3>\n<ul>\n<li>工程、模块、包、类等概念。</li>\n<li>掌握：如何创建工程、如何创建模块、如何导入其他项目中的模块、如何创建包、如何创建类、如何运行</li>\n<li>了解：如何删除模块</li>\n</ul>\n<h3 id=\"4-熟悉jdk的结构\"><a class=\"anchor\" href=\"#4-熟悉jdk的结构\">#</a> 4. 熟悉 JDK 的结构</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20221115165103208.png\" alt=\"image-20221115165103208\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20221115165123046.png\" alt=\"image-20221115165123046\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/hjx159/picture-bed/main/img/image-20221115165138209.png\" alt=\"image-20221115165138209\" /></p>\n<h3 id=\"5-详细的设置\"><a class=\"anchor\" href=\"#5-详细的设置\">#</a> 5. 详细的设置</h3>\n<p>略</p>\n<h3 id=\"6-代码模板-快捷键-调试程序debug\"><a class=\"anchor\" href=\"#6-代码模板-快捷键-调试程序debug\">#</a> 6. 代码模板、快捷键、调试程序（debug）</h3>\n<p>后续讲解。</p>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"1-开发中你接触过的开发工具都有哪些\"><a class=\"anchor\" href=\"#1-开发中你接触过的开发工具都有哪些\">#</a> 1. 开发中你接触过的开发工具都有哪些？</h3>\n<p>IDEA</p>\n<h3 id=\"2-谈谈你对eclipse和idea使用上的感受\"><a class=\"anchor\" href=\"#2-谈谈你对eclipse和idea使用上的感受\">#</a> 2. 谈谈你对 Eclipse 和 IDEA 使用上的感受？</h3>\n<p>Eclipse 不够人性化。</p>\n",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC03%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC03%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%EF%BC%89/",
            "title": "宋红康_第03章：流程控制语句",
            "date_published": "2023-11-12T02:46:31.550Z",
            "content_html": "<h1 id=\"第03章随堂复习与企业真题流程控制语句\"><a class=\"anchor\" href=\"#第03章随堂复习与企业真题流程控制语句\">#</a> 第 03 章：随堂复习与企业真题（流程控制语句）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"11-了解流程控制结构\"><a class=\"anchor\" href=\"#11-了解流程控制结构\">#</a> 1.1 （了解）流程控制结构</h3>\n<ul>\n<li>顺序结构</li>\n<li>分支结构\n<ul>\n<li>if-else</li>\n<li>switch-case</li>\n</ul>\n</li>\n<li>循环结构\n<ul>\n<li>for</li>\n<li>while</li>\n<li>do-while</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-分支结构之1if-else\"><a class=\"anchor\" href=\"#12-分支结构之1if-else\">#</a> 1.2 分支结构之 1：if-else</h3>\n<ul>\n<li>在程序中，凡是遇到了需要使用分支结构的地方，都可以考虑使用 if-else。</li>\n<li>if-else 嵌套的练习多关注</li>\n</ul>\n<h4 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h4>\n<pre><code class=\"language-JAVA\">/*\n分支结构1：if-else条件判断结构\n\n1. 格式\n格式1：\nif(条件表达式)｛\n  \t语句块;\n｝\n\n格式2：&quot;二选一&quot;\nif(条件表达式) &#123; \n  \t语句块1;\n&#125;else&#123;\n  \t语句块2;\n&#125;\n\n格式3：&quot;多选一&quot;\nif (条件表达式1) &#123;\n  \t语句块1;\n&#125; else if (条件表达式2) &#123;\n  \t语句块2;\n&#125;\n...\n&#125;else if (条件表达式n) &#123;\n \t语句块n;\n&#125; else &#123;\n  \t语句块n+1;\n&#125;\n\n\n*/\nclass IfElseTest &#123;\n\tpublic static void main(String[] args) &#123;\n\t\t\n\t\t/*\n\t\t案例1：成年人心率的正常范围是每分钟60-100次。体检时，\n\t\t如果心率不在此范围内，则提示需要做进一步的检查。\n\t\t*/\n\t\tint heartBeats = 89;\n\t\t//错误的写法：if(60 &lt;= heartBeats &lt;= 100)&#123;\n\n\t\tif(heartBeats &lt; 60 || heartBeats &gt; 100)&#123;\n\t\t\tSystem.out.println(&quot;你需要做进一步的检查&quot;);\n\t\t&#125;\n\n\t\tSystem.out.println(&quot;体检结束&quot;);\n\n\t\t//**********************************\n\t\t/*\n\t\t案例2：定义一个整数，判定是偶数还是奇数    \n\t\t*/\n\t\tint num = 13;\n\t\tif(num % 2 == 0)&#123;\n\t\t\tSystem.out.println(num + &quot;是偶数&quot;);\n\t\t&#125;else&#123;\n\t\t\tSystem.out.println(num + &quot;是奇数&quot;);\n\t\t&#125;\n\t&#125;\n&#125;\n\n</code></pre>\n<h4 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>岳小鹏参加 Java 考试，他和父亲岳不群达成承诺：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>如果：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>成绩为 100 分时，奖励一辆跑车；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>成绩为 (80，99] 时，奖励一辆山地自行车；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>当成绩为 [60,80] 时，奖励环球影城一日游；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>其它时，胖揍一顿。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>说明：默认成绩是在 [0,100] 范围内</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>结论：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>1. 如果多个条件表达式之间没有交集（理解是互斥关系），则哪个条件表达式声明在上面，哪个声明在下面都可以。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   如果多个条件表达式之间是包含关系，则需要将范围小的条件表达式声明在范围大的条件表达式的上面。否则，范围小的条件表达式不可能被执行。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IfElseTest1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> score <span class=\"token operator\">=</span> <span class=\"token number\">61</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 1：</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tif (score == 100)&#123;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tSystem.out.println (\"奖励一辆跑车\");</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t&#125; else if (score > 80 &amp;&amp; score &lt;= 99)&#123;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tSystem.out.println (\"奖励一辆山地自行车\");</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t&#125; else if (score >= 60 &amp;&amp; score &lt;= 80)&#123;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tSystem.out.println (\"奖励环球影城一日游\");</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t&#125; else &#123;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\tSystem.out.println (\"胖揍一顿\");</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t&#125;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 2：</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tscore <span class=\"token operator\">=</span> <span class=\"token number\">88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">==</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奖励一辆跑车\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">></span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奖励一辆山地自行车\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奖励环球影城一日游\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"胖揍一顿\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">// 特别的：</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">==</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奖励一辆跑车\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">></span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奖励一辆山地自行车\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奖励环球影城一日游\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token comment\">/*else &#123;</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\tSystem.out.println (\"胖揍一顿\");</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t&#125;</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>测试 if-else 的嵌套使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>案例：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>由键盘输入三个整数分别存入变量 num1、num2、num3，对它们进行排序 (使用 if-else if-else)，并且从小到大输出。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>拓展：你能实现从大到小顺序的排列吗？</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>1. 从开发经验上讲，没有写过超过三层的嵌套 if-else 结构。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>2. 如果 if-else 中的执行语句块中只有一行执行语句，则此执行语句所在的一对 &#123;&#125; 可以省略。但是，不建议省略</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IfElseTest2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">44</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">//int num1 = 30,num2 = 21,num3 = 44;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">>=</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num3 <span class=\"token operator\">>=</span> num1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> num1 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num3 <span class=\"token operator\">&lt;=</span> num2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num3 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> num2 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> num3 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//System.out.println(num2 + \",\" + num3 + \",\" + num1);\t</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// num1 &lt; num2</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num3 <span class=\"token operator\">>=</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> num2 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num3 <span class=\"token operator\">&lt;=</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num3 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> num1 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> num3 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"13-分支结构之2switch-case\"><a class=\"anchor\" href=\"#13-分支结构之2switch-case\">#</a> 1.3 分支结构之 2：switch-case</h3>\n<ul>\n<li>\n<p>在特殊的场景下，分支结构可以考虑使用 switch-case</p>\n<ul>\n<li><font color='red'>指定的数据类型：byte \\ short \\ char \\ int ; 枚举类（jdk5.0）\\ String (jdk7.0)</font></li>\n<li>可以考虑的常量值有限且取值情况不多。</li>\n</ul>\n</li>\n<li>\n<p>特别之处：<font color='red'>case 穿透</font>。</p>\n</li>\n<li>\n<p>在能使用 switch-case 的情况下，推荐使用 switch-case，因为<font color='red'>比 if-else 效率稍高</font></p>\n</li>\n</ul>\n<h4 id=\"基本语法-2\"><a class=\"anchor\" href=\"#基本语法-2\">#</a> 基本语法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>分支结构之 switch-case 的使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1. 语法格式</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>switch (表达式)&#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcase 常量 1:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t// 执行语句 1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t//break;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcase 常量 2:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t// 执行语句 2</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t//break;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t...</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tdefault:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t// 执行语句 2</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t//break;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>2. 执行过程：</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>根据表达式中的值，依次匹配 case 语句。一旦与某一个 case 中的常量相等，那么就执行此 case 中的执行语句。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>执行完此执行语句之后，</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t情况 1：遇到 break，则执行 break 后，跳出当前的 switch-case 结构</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t情况 2：没有遇到 break，则继续执行其后的 case 中的执行语句。 ---> case 穿透</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t...</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t   直到遇到 break 或者执行完所有的 case 及 default 中的语句，退出当前的 switch-case 结构</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>3. 说明：</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>① switch 中的表达式只能是特定的数据类型。如下：byte \\ short \\ char \\ int \\ 枚举 (JDK5.0 新增) \\ String (JDK7.0 新增)</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>② case 后都是跟的常量，使用表达式与这些常量做相等的判断，不能进行范围的判断。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>③ 开发中，使用 switch-case 时，通常 case 匹配的情况都有限。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>④ break: 可以使用在 switch-case 中。一旦执行此 break 关键字，就跳出当前的 switch-case 结构</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>⑤ default：类似于 if-else 中的 else 结构。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>           default 是可选的，而且位置是灵活的。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>4. switch-case 与 if-else 之间的转换</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>① 开发中凡是可以使用 switch-case 结构的场景，都可以改写为 if-else。反之，不成立</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>② 开发中，如果一个具体问题既可以使用 switch-case，又可以使用 if-else 的时候，推荐使用 switch-case。</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  为什么？switch-case 相较于 if-else 效率稍高。</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SwitchCaseTest</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结束当前的 switch-case 结构</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"other\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//break; </span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token comment\">// 另例：</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> season <span class=\"token operator\">=</span> <span class=\"token string\">\"summer\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>season<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">\"spring\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春暖花开\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">\"summer\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏日炎炎\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">\"autumn\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋高气爽\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">\"winter\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬雪皑皑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token comment\">/*default:</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                System.out.println (\"季节输入有误\");</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                break;</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t*/</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token comment\">// 错误的例子：编译不通过</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\tint number = 20;</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\tswitch (number)&#123;</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\tcase number > 0:</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t\tSystem.out.println (\"正数\");</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                break;</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\tcase number &lt; 0:</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\t\tSystem.out.println (\"负数\");</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                break;</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\tdefault:</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t\tSystem.out.println (\"零\");</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                break;</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t&#125;</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"案例-2\"><a class=\"anchor\" href=\"#案例-2\">#</a> 案例</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>案例 3：使用 switch-case 实现：对学生成绩大于 60 分的，输出 “合格”。低于 60 分的，输出 “不合格”。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SwitchCaseTest1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">// 定义一个学生成绩的变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> score <span class=\"token operator\">=</span> <span class=\"token number\">78</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// 根据需求，进行分支</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 1：</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tswitch (score)&#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tcase 0:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\tSystem.out.println (\"不及格\");</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\tbreak;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tcase 1:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\tSystem.out.println (\"不及格\");</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\tbreak;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t//...</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\tcase 100:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\tSystem.out.println (\"及格\");</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\tbreak;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tdefault:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\tSystem.out.println (\"成绩输入有误\");</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\tbreak;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t&#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 2：体会 case 穿透</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成绩输入有误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 3：</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成绩输入有误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>案例：编写程序：从键盘上输入 2023 年的 “month” 和 “day”，要求通过程序输出输入的日期为 2023 年的第几天。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SwitchCaseTest2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">//1. 使用 Scanner，从键盘获取 2023 年的 month、day</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入2023年的月份：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 阻塞式方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入2023年的天：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 假设用户输入的数据是合法的。后期我们在开发中，使用正则表达式进行校验。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">//2. 使用 switch-case 实现分支结构</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> sumDays <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录总天数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 1：不推荐。存在数据的冗余</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tswitch(month)&#123;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tcase 1:</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\tsumDays = day;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\tbreak;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tcase 2:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\tsumDays = 31 + day;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\tbreak;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tcase 3:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\tsumDays = 31 + 28 + day;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\tbreak;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tcase 4:</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\tsumDays = 31 + 28 + 31 + day;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\tbreak;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t//...</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\tcase 12:</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\tsumDays = 31 + 28 + ... + 30 + day;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\tbreak;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t&#125;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 2：</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">12</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\tsumDays <span class=\"token operator\">+=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\tsumDays <span class=\"token operator\">+=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\tsumDays <span class=\"token operator\">+=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t\tsumDays <span class=\"token operator\">+=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\tsumDays <span class=\"token operator\">+=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\tsumDays <span class=\"token operator\">+=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\tsumDays <span class=\"token operator\">+=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t\tsumDays <span class=\"token operator\">+=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\tsumDays <span class=\"token operator\">+=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t\tsumDays <span class=\"token operator\">+=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//28:2 月份的总天数</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t\tsumDays <span class=\"token operator\">+=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//31:1 月份的总天数</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t\tsumDays <span class=\"token operator\">+=</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//break;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2023年\"</span> <span class=\"token operator\">+</span> month <span class=\"token operator\">+</span> <span class=\"token string\">\"月\"</span> <span class=\"token operator\">+</span> day <span class=\"token operator\">+</span> <span class=\"token string\">\"日是当前的第\"</span> <span class=\"token operator\">+</span> sumDays <span class=\"token operator\">+</span> <span class=\"token string\">\"天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\tinput<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 为了防止内存泄漏</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"14-循环结构之1for\"><a class=\"anchor\" href=\"#14-循环结构之1for\">#</a> 1.4 循环结构之 1：for</h3>\n<ul>\n<li>凡是循环结构，都有 4 个要素：①初始化条件 ②循环条件（是 boolean 类型） ③ 循环体 ④ 迭代条件</li>\n<li>应用场景：<font color='red'>有明确的遍历的次数</font>。 for(int i = 1;i &lt;= 100;i++)</li>\n</ul>\n<h4 id=\"基本语法-3\"><a class=\"anchor\" href=\"#基本语法-3\">#</a> 基本语法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>循环结构之一：for 循环</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1. Java 中规范了 3 种循环结构：for、while、do-while</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>2. 凡是循环结构，就一定会有 4 个要素：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>① 初始化条件</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>② 循环条件 ---> 一定是 boolean 类型的变量或表达式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>③ 循环体</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>④ 迭代部分</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>3. for 循环的格式</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>for (①;②;④)&#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t③</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>执行过程：① - ② - ③ - ④ - ② - ③ - ④ - ... - ②</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ForTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">// 需求 1：题目：输出 5 行 HelloWorld</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tSystem.out.println(\"HelloWorld\");</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tSystem.out.println(\"HelloWorld\");</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tSystem.out.println(\"HelloWorld\");</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tSystem.out.println(\"HelloWorld\");</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tSystem.out.println(\"HelloWorld\");</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 此时编译不通过。因为 i 已经出了其作用域范围。</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">//System.out.println(i);</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">// 需求 2：</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token comment\">// 输出结果：abcbc</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 换行</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">// 需求 3：遍历 1-100 以内的偶数，并获取偶数的个数，获取所有的偶数的和</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录偶数的个数</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录所有偶数的和</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t\tsum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">//sum = sum + i;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"偶数的个数为：\"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"偶数的总和为：\"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"案例-3\"><a class=\"anchor\" href=\"#案例-3\">#</a> 案例</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>题目：输出所有的水仙花数，所谓水仙花数是指一个 3 位数，其各个位上数字立方和等于其本身。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>例如： 153 = 1*1*1 + 3*3*3 + 5*5*5</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ForTest1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// 遍历所有的 3 位数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">999</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token comment\">// 针对于每一个三位数 i，获取其各个位上数值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> ge <span class=\"token operator\">=</span> i <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> shi <span class=\"token operator\">=</span> i <span class=\"token operator\">/</span> <span class=\"token number\">10</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 或 int shi = i % 100 / 10</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> bai <span class=\"token operator\">=</span> i <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token comment\">// 判断是否满足水仙花数的规则</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> ge <span class=\"token operator\">*</span> ge <span class=\"token operator\">*</span> ge <span class=\"token operator\">+</span> shi <span class=\"token operator\">*</span> shi <span class=\"token operator\">*</span> shi <span class=\"token operator\">+</span> bai <span class=\"token operator\">*</span> bai <span class=\"token operator\">*</span> bai<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>案例：输入两个正整数 m 和 n，求其最大公约数和最小公倍数。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>比如：12 和 20 的最大公约数是 4，最小公倍数是 60。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>约数：12 为例，约数有 1,2,3,4,6,12</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      20 为例，约数有 1,2,4,5,10,20</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>倍数：12 为例，倍数有 12,24,36,48,60,72,....</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      20 为例，倍数有 20,40,60,80,....</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>说明：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>1. 我们可以在循环结构中使用 break。一旦执行 break，就跳出（或结束）当前循环结构。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>2. 如何结束一个循环结构？</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t方式 1：循环条件不满足。（即循环条件执行完以后是 false）</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t方式 2：在循环体中执行了 break</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ForTest2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 获取 m 和 n 中的较小值</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> m <span class=\"token operator\">:</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">// 需求 1：最大公约数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 1：</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> min<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//System.out.println(i);</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\tresult <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 2：推荐</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最大公约数为：\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一旦执行，就跳出当前循环结构。</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token comment\">// 需求 2：最小公倍数</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> m <span class=\"token operator\">:</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> max<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> m <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> m <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">%</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最小公倍数为：\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"15-循环结构之2while\"><a class=\"anchor\" href=\"#15-循环结构之2while\">#</a> 1.5 循环结构之 2：while</h3>\n<ul>\n<li>应用场景：<font color='red'>没有明确的遍历次数</font>。</li>\n</ul>\n<h4 id=\"基本语法-4\"><a class=\"anchor\" href=\"#基本语法-4\">#</a> 基本语法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>循环结构之一：while 循环</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>1. 凡是循环结构，就一定会有 4 个要素：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>① 初始化条件</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>② 循环条件 ---> 一定是 boolean 类型的变量或表达式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>③ 循环体</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>④ 迭代部分</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>2.while 的格式</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>①</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>while (②)&#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t③</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t④</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>3. 执行过程：① - ② - ③ - ④ - ② - ③ - ④ - ... - ②</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>4. for 循环与 while 循环可以相互转换！</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>5. for 循环和 while 循环的小区别：初始化条件的作用域范围不同。while 循环中的初始化条件在 while 循环结束后，依然有效。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">WhileTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">// 需求 1：遍历 50 次 HelloWorld</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一定要小心！不要丢了</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 需求 2：遍历 1-100 以内的偶数，并获取偶数的个数，获取所有的偶数的和</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录偶数的个数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录偶数的总和</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\tsum <span class=\"token operator\">+=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tj<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"偶数的个数为：\"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"偶数的总和为：\"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"案例-4\"><a class=\"anchor\" href=\"#案例-4\">#</a> 案例</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>随机生成一个 100 以内的数，猜这个随机数是多少？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>从键盘输入数，如果大了，提示大了；如果小了，提示小了；如果对了，就不再猜了，并统计一共猜了多少次。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>提示：生成一个 [a,b] 范围的随机数的方式：(int)(Math.random () * (b - a + 1) + a)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">WhileTest1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">//1. 生成一个 [1,100] 范围的随机整数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> random <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">//2. 使用 Scanner，从键盘获取数据</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> scan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入1-100范围的一个整数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> guess <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">//3. 声明一个变量，记录猜的次数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> guessCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">//4. 使用循环结构，进行多次循环的对比和获取数据</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>random <span class=\"token operator\">!=</span> guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>guess <span class=\"token operator\">></span> random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入的数据大了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>guess <span class=\"token operator\">&lt;</span> random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入的数据小了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//else&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token comment\">//\tbreak;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入1-100范围的一个整数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\tguess <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\tguessCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token comment\">// 能结束结束，就意味着 random 和 guess 相等了</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"恭喜你！猜对了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"共猜了\"</span> <span class=\"token operator\">+</span> guessCount <span class=\"token operator\">+</span> <span class=\"token string\">\"次\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tscan<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>世界最高山峰是珠穆朗玛峰，它的高度是 8848.86 米，假如我有一张足够大的纸，它的厚度是 0.1 毫米。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>请问，我折叠多少次，可以折成珠穆朗玛峰的高度？</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">WhileTest2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">//1. 声明珠峰的高度、纸的默认厚度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> paper <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 单位：毫米</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> zf <span class=\"token operator\">=</span> <span class=\"token number\">8848860</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 单位：毫米</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">//2. 定义一个变量，记录折纸的次数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">//3. 通过循环结构，不断调整纸的厚度 （当纸的厚度超过珠峰高度时，停止循环）</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>paper <span class=\"token operator\">&lt;=</span> zf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tpaper <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"paper的高度为:\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>paper <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",超过了珠峰的高度\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>zf<span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"共折纸\"</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">+</span> <span class=\"token string\">\"次\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"16-循环结构之3do-while\"><a class=\"anchor\" href=\"#16-循环结构之3do-while\">#</a> 1.6 循环结构之 3：do-while</h3>\n<ul>\n<li><font color='red'>至少会执行一次循环体</font>。</li>\n<li>开发中，使用的较少</li>\n</ul>\n<h4 id=\"基本语法-5\"><a class=\"anchor\" href=\"#基本语法-5\">#</a> 基本语法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>循环结构之一：do-while 循环</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>1. 凡是循环结构，就一定会有 4 个要素：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>① 初始化条件</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>② 循环条件 ---> 一定是 boolean 类型的变量或表达式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>③ 循环体</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>④ 迭代部分</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>2. do-while 的格式</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>①</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>do &#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t③</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t④</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>&#125; while (②);</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>执行过程：① - ③ - ④ - ② - ③ - ④ - .... - ②</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>3. 说明：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>1) do-while 循环至少执行一次循环体。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>2) for、while、do-while 循环三者之间是可以相互转换的。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>3) do-while 循环结构，在开发中，相较于 for、while 循环来讲，使用的较少。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DoWhileTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token comment\">// 需求：遍历 100 以内的偶数，并输出偶数的个数和总和</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录偶数的个数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录偶数的总和</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\tsum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"偶数的个数为：\"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"偶数的总和为：\"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">//***************************</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"while:hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\tnum1<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do-while:hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\tnum2<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"案例-5\"><a class=\"anchor\" href=\"#案例-5\">#</a> 案例</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>题目：模拟 ATM 取款</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>声明变量 balance 并初始化为 0，用以表示银行账户的余额，下面通过 ATM 机程序实现存款，取款等功能。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>=========ATM========</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   1、存款</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   2、取款</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   3、显示余额</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   4、退出</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>请选择 (1-4)：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DoWhileTest1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">//1. 定义 balance 的变量，记录账户余额</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> balance <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 控制循环的结束</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> scan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 实例化 Scanner</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token comment\">//2. 声明 ATM 取款的界面</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=========ATM========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"   1、存款\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"   2、取款\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"   3、显示余额\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"   4、退出\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请选择(1-4)：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token comment\">//3. 使用 Scanner 获取用户的选择</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> selection <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>selection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//4. 根据用户的选择，决定执行存款、取款、显示余额、退出的操作</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入存款的金额：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">double</span> money1 <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>money1 <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t\t\tbalance <span class=\"token operator\">+=</span> money1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入取款的金额：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">double</span> money2 <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\t\t</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>money2 <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> money2 <span class=\"token operator\">&lt;=</span> balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t\t\tbalance <span class=\"token operator\">-=</span> money2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的数据有误或余额不足\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"账户余额为：\"</span> <span class=\"token operator\">+</span> balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"感谢使用，欢迎下次光临^_^\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入有误，请重新输入\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//break;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token comment\">// 关闭资源</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\tscan<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"17-无限循环\"><a class=\"anchor\" href=\"#17-无限循环\">#</a> 1.7 “无限” 循环</h3>\n<h4 id=\"基本语法-6\"><a class=\"anchor\" href=\"#基本语法-6\">#</a> 基本语法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\"无限\" 循环结构的使用</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>1. 格式： while (true)  或  for (;;)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>2. 开发中，有时并不确定需要循环多少次，需要根据循环体内部某些条件，来控制循环的结束（使用 break）。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>3. 如果此循环结构不能终止，则构成了死循环！开发中要避免出现死循环。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ForWhileTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tfor(;;)&#123;//while(true)&#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tSystem.out.println(\"I love you!\");</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t&#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 死循环的后面不能有执行语句。</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">//System.out.println(\"end\");</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"案例-6\"><a class=\"anchor\" href=\"#案例-6\">#</a> 案例</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>案例：从键盘读入个数不确定的整数，并判断读入的正数和负数的个数，输入为 0 时结束程序。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ForWhileTest1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> scan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> positiveCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录正数的个数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> negativeCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录负数的个数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//while(true)&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入一个整数(输入为0时结束程序)：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取用户输入的整数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 正数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\tpositiveCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 负数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\tnegativeCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 零</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"程序结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正数的个数为：\"</span> <span class=\"token operator\">+</span> positiveCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"负数的个数为：\"</span> <span class=\"token operator\">+</span> negativeCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tscan<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"18-嵌套循环\"><a class=\"anchor\" href=\"#18-嵌套循环\">#</a> 1.8 嵌套循环</h3>\n<h4 id=\"基本语法-7\"><a class=\"anchor\" href=\"#基本语法-7\">#</a> 基本语法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>嵌套循环的使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1. 嵌套循环：是指一个循环结构 A 的循环体是另一个循环结构 B。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>- 外层循环：循环结构 A</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>- 内层循环：循环结构 B</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>2. 说明：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>1）内层循环充当了外层循环的循环体。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>2）对于两层嵌套循环来说，外层循环控制行数，内层循环控制列数。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>3）举例：外层循环执行 m 次，内层循环执行 n 次，则内层循环的循环体共执行 m * n 次</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>4）实际开发中，我们不会出现三层以上的循环结构，三层的循环结构都很少见。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ForForTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">//******</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n##################\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t******</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t******</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t******</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t******</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t******</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t\t\ti (第几行)\t\tj (每一行中 * 的个数)</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t*\t\t\t\t1\t\t\t\t1</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t**\t\t\t\t2\t\t\t\t2</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t***\t\t\t\t3\t\t\t\t3</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t****\t\t\t4\t\t\t\t4</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t*****\t\t\t5\t\t\t\t5</pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\t\t\ti (第几行)\t\tj (每一行中 * 的个数)\t\ti + j = 7 --> j = 7 - i</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t******\t\t\t1\t\t\t\t6</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t*****\t\t\t2\t\t\t\t5</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t****\t\t\t3\t\t\t\t4</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t***\t\t\t\t4\t\t\t\t3</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t**\t\t\t\t5\t\t\t\t2</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t*\t\t\t\t6\t\t\t\t1</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">7</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t\t\t\ti (第几行)\tj (每一行中 - 的个数)\t\tk (每一行中 * 的个数)    2*i + j = 10 --->j = 10 - 2*i</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>--------*\t\t\t\t1\t\t\t\t8\t\t\t\t1                k = 2 * i - 1</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>------* * *\t\t\t\t2\t\t\t\t6\t\t\t\t3</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>----* * * * *\t\t\t3\t\t\t\t4\t\t\t\t5</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>--* * * * * * *\t\t\t4\t\t\t\t2\t\t\t\t7</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>* * * * * * * * *\t\t5\t\t\t\t0\t\t\t\t9</pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  * * * * * * * </pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    * * * * * </pre></td></tr><tr><td data-num=\"93\"></td><td><pre>      * * * </pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        * </pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token comment\">// 上半部分</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token comment\">// -</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token comment\">// *</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"* \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"案例-7\"><a class=\"anchor\" href=\"#案例-7\">#</a> 案例</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>练习：九九乘法表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">NineNineTable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> j <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"19-关键字break-continue\"><a class=\"anchor\" href=\"#19-关键字break-continue\">#</a> 1.9 关键字 break、continue</h3>\n<ul>\n<li><font color='red'>break 在开发中常用</font>；而 continue 较少使用</li>\n<li>笔试题：break 和 continue 的区别。</li>\n</ul>\n<h4 id=\"基本语法-8\"><a class=\"anchor\" href=\"#基本语法-8\">#</a> 基本语法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1. break 和 continue 关键字的使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t\t使用范围\t\t\t在循环结构中的作用\t\t\t\t\t相同点</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>break:\t\t\tswitch-case</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t循环结构中\t\t\t结束（或跳出）当前循环结构\t\t\t在此关键字的后面不能声明执行语句。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>continue:\t\t循环结构中\t\t\t结束（或跳出）当次循环\t\t\t\t在此关键字的后面不能声明执行语句。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>2. 了解带标签的 break 和 continue 的使用</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>3. 开发中，break 的使用频率要远高于 continue。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BreakContinueTest</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//break;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 编译不通过</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//System.out.println (\"今晚上迪丽热巴要约我！\");</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token comment\">//*****************************</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tlabel<span class=\"token operator\">:</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//break;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//continue;\t</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 了解</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//break label;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//continue label;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"110-项目1谷粒记账软件\"><a class=\"anchor\" href=\"#110-项目1谷粒记账软件\">#</a> 1.10 项目 1：谷粒记账软件</h3>\n<ul>\n<li>特点 1：代码量更大，逻辑更复杂  ---&gt; 推荐大家一定写一写，而且多写几遍。</li>\n<li>特点 2：内部不包含新的知识点。 ---&gt; 不太着急写。</li>\n</ul>\n<h3 id=\"111-scanner类的使用\"><a class=\"anchor\" href=\"#111-scanner类的使用\">#</a> 1.11 Scanner 类的使用</h3>\n<h4 id=\"基本语法-9\"><a class=\"anchor\" href=\"#基本语法-9\">#</a> 基本语法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如何从键盘获取不同类型（基本数据类型、String 类型）的变量：使用 Scanner 类。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1. 使用 Scanner 获取不同类型数据的步骤</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>步骤 1：导包 import java.util.Scanner;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>步骤 2：提供（或创建）一个 Scanner 类的实例</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>步骤 3：调用 Scanner 类中的方法，获取指定类型的变量 (nextXxx ())</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>步骤 4：关闭资源，调用 Scanner 类的 close ()</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>2. 案例：小明注册某交友网站，要求录入个人相关信息。如下：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>请输入你的网名、你的年龄、你的体重、你是否单身、你的性别等情况。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>3. Scanner 类中提供了获取 byte \\ short \\ int \\ long \\float \\double \\boolean \\ String 类型变量的方法。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   注意，没有提供获取 char 类型变量的方法。需要使用 next ().charAt (0)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 步骤 1：导包 import java.util.Scanner;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ScannerTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 步骤 2：提供（或创建）一个 Scanner 类的实例</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> scan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"欢迎光临你来我往交友网\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你的网名：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">// 步骤 3：调用 Scanner 类中的方法，获取指定类型的变量</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你的年龄：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你的体重：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> weight <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你是否单身（单身：true;不单身：false）：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> isSingle <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextBoolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你的性别(男\\\\女)：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> gender <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"网名：\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\",年龄: \"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> <span class=\"token string\">\",体重：\"</span> <span class=\"token operator\">+</span> weight <span class=\"token operator\">+</span> <span class=\"token string\">\",是否单身：\"</span> <span class=\"token operator\">+</span> isSingle <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token string\">\",性别：\"</span> <span class=\"token operator\">+</span> gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"注册完成，欢迎继续进入体验！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">// 步骤 4：关闭资源，调用 Scanner 类的 close ()</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tscan<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"案例-8\"><a class=\"anchor\" href=\"#案例-8\">#</a> 案例</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ScannerExer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> scan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你的身高：(cm)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你的财富：(以千万为单位)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> wealth <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">// 关于是否帅问题，我们使用 String 类型接收</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"帅否？(是/否)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> isHandsome <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// 判断</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">>=</span> <span class=\"token number\">180</span> <span class=\"token operator\">&amp;&amp;</span> wealth <span class=\"token operator\">>=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">&amp;&amp;</span> isHandsome<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 知识点：判断两个字符串是否相等，使用 String 的 equals ()</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我一定要嫁给他!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">>=</span> <span class=\"token number\">180</span> <span class=\"token operator\">||</span> wealth <span class=\"token operator\">>=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">||</span> isHandsome<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"嫁吧，比上不足，比下有余。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不嫁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">// 关闭资源</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tscan<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"112-获取随机数\"><a class=\"anchor\" href=\"#112-获取随机数\">#</a> 1.12 获取随机数</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如何获取一个随机数？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1. 可以使用 Java 提供的 API:Math 类的 random () </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>2. random () 调用以后，会返回一个 [0.0,1.0) 范围的 double 型的随机数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>3. 需求 1：获取一个 [0,100] 范围的随机整数？</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   需求 2：获取一个 [1,100] 范围的随机整数？</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>4. 需求：获取一个 [a,b] 范围的随机整数？</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   (int)(Math.random () * (b - a + 1)) + a</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> d1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1 = \"</span> <span class=\"token operator\">+</span> d1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//[0.0,1.0) --> [0.0,101.0) --->[0,100]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 = \"</span> <span class=\"token operator\">+</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[0.0,1.0) --> [0.0,100.0) --->[0,99] ---> [1,100]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"113-体会算法的魅力\"><a class=\"anchor\" href=\"#113-体会算法的魅力\">#</a> 1.13 体会算法的魅力</h3>\n<ul>\n<li>基本实现</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如何获取一个随机数？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1. 可以使用 Java 提供的 API:Math 类的 random () </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>2. random () 调用以后，会返回一个 [0.0,1.0) 范围的 double 型的随机数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>3. 需求 1：获取一个 [0,100] 范围的随机整数？</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   需求 2：获取一个 [1,100] 范围的随机整数？</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>4. 需求：获取一个 [a,b] 范围的随机整数？</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   (int)(Math.random () * (b - a + 1)) + a</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> d1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1 = \"</span> <span class=\"token operator\">+</span> d1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//[0.0,1.0) --> [0.0,101.0) --->[0,100]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 = \"</span> <span class=\"token operator\">+</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[0.0,1.0) --> [0.0,100.0) --->[0,99] ---> [1,100]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>测试性能：方式 1</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>遍历 100000 以内的所有的质数。体会不同的算法实现，其性能的差别</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>此 PrimeNumberTest1.java 是实现方式 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PrimeNumberTest1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 获取系统当前的时间：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> isFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录质数的个数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历 100000 以内的自然数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token comment\">// 判定 i 是否是质数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> j <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t\tisFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token comment\">// 重置 isFlag</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tisFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// 获取系统当前的时间：</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"质数的总个数为：\"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//9592</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"花费的时间为：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//7209</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>测试性能：方式 2</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>遍历 100000 以内的所有的质数。体会不同的算法实现，其性能的差别</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>此 PrimeNumberTest2.java 是方式 2，针对于 PrimeNumberTest1.java 中算法的优化</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PrimeNumberTest2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 获取系统当前的时间：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> isFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录质数的个数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历 100000 以内的自然数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token comment\">// 判定 i 是否是质数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> j <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t\tisFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 针对于非质数有效果。</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token comment\">// 重置 isFlag</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\tisFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">// 获取系统当前的时间：</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"质数的总个数为：\"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//9592</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"花费的时间为：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//7209 --> 加上 break:659 --> 加上 Math.sqrt ():6</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"1-break和continue的作用智图\"><a class=\"anchor\" href=\"#1-break和continue的作用智图\">#</a> 1. break 和 continue 的作用 (智 * 图)</h3>\n<p>略</p>\n<h3 id=\"2-if分支语句和switch分支语句的异同之处智图\"><a class=\"anchor\" href=\"#2-if分支语句和switch分支语句的异同之处智图\">#</a> 2. if 分支语句和 switch 分支语句的异同之处 (智 * 图)</h3>\n<ul>\n<li>if-else 语句优势\n<ul>\n<li>if 语句的条件是一个布尔类型值，if 条件表达式为 true 则进入分支，可以用于<font color='red'>范围</font>的判断，也可以用于等<font color='red'>值</font>的判断，<font color='red'> <code>使用范围更广</code> </font>。</li>\n<li>switch 语句的条件是一个<font color='red'>常量值</font>（byte,short,int,char, 枚举，String），只能判断某个变量或表达式的结果是否等于某个常量值， <code>使用场景较狭窄</code> 。</li>\n</ul>\n</li>\n<li>switch 语句优势\n<ul>\n<li>当条件是判断某个变量或表达式是否等于某个固定的常量值时，使用 if 和 switch 都可以，习惯上<font color='red'>使用 switch 更多，因为 <code>效率稍高</code> 。</font>当条件是区间范围的判断时，只能使用 if 语句。</li>\n<li>使用<font color='red'>switch 可以利用 <code>穿透性</code> </font>，同时执行多个分支，而 if...else 没有穿透性。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-什么时候用语句if什么时候选用语句switch灵伴来科技\"><a class=\"anchor\" href=\"#3-什么时候用语句if什么时候选用语句switch灵伴来科技\">#</a> 3. 什么时候用语句 if，什么时候选用语句 switch (灵伴 * 来科技)</h3>\n<p>同上</p>\n<h3 id=\"4-switch语句中忘写break会发生什么北京蓝\"><a class=\"anchor\" href=\"#4-switch语句中忘写break会发生什么北京蓝\">#</a> 4. switch 语句中忘写 break 会发生什么 (北京 * 蓝)</h3>\n<p>case 穿透</p>\n<h3 id=\"5-java支持哪些类型循环上海睿\"><a class=\"anchor\" href=\"#5-java支持哪些类型循环上海睿\">#</a> 5. Java 支持哪些类型循环 (上海 * 睿)</h3>\n<ul>\n<li>for;while;do-while</li>\n<li>增强 for （或 foreach），放到集合中讲解</li>\n</ul>\n<h3 id=\"6-while和do-while循环的区别国科技研究院\"><a class=\"anchor\" href=\"#6-while和do-while循环的区别国科技研究院\">#</a> 6. while 和 do while 循环的区别 (国 * 科技研究院)</h3>\n<ul>\n<li>do-while 至少会执行一次。</li>\n</ul>\n",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        },
        {
            "id": "http://example.com/java/java-se/java-excise/%E7%AC%AC02%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%89/",
            "url": "http://example.com/java/java-se/java-excise/%E7%AC%AC02%E7%AB%A0%EF%BC%9A%E9%9A%8F%E5%A0%82%E5%A4%8D%E4%B9%A0%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%A2%98%EF%BC%88%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%89/",
            "title": "宋红康_第02章：变量与运算符",
            "date_published": "2023-11-12T02:45:38.316Z",
            "content_html": "<h1 id=\"第02章随堂复习与企业真题变量与运算符\"><a class=\"anchor\" href=\"#第02章随堂复习与企业真题变量与运算符\">#</a> 第 02 章：随堂复习与企业真题（变量与运算符）</h1>\n<hr />\n<h2 id=\"一-随堂复习\"><a class=\"anchor\" href=\"#一-随堂复习\">#</a> 一、随堂复习</h2>\n<h3 id=\"11-关键字-保留字\"><a class=\"anchor\" href=\"#11-关键字-保留字\">#</a> 1.1 关键字、保留字</h3>\n<ul>\n<li>\n<p>关键字：被 Java 赋予特殊含义的字符串。</p>\n<ul>\n<li>官方规范中有 50 个关键字</li>\n<li>true、false、null 虽然不是关键字，但是可以当做关键字来看待。</li>\n</ul>\n</li>\n<li>\n<p>保留字：goto 、 const</p>\n</li>\n</ul>\n<h3 id=\"12-标识符\"><a class=\"anchor\" href=\"#12-标识符\">#</a> 1.2 标识符</h3>\n<ul>\n<li>标识符：凡是可以自己命名的地方，都是标识符。\n<ul>\n<li>比如：类名、变量名、方法名、接口名、包名、常量名等</li>\n</ul>\n</li>\n<li>记住：标识符命名的规则（必须要遵守的，否则编译不通过）</li>\n</ul>\n<pre><code>&gt; 由26个英文字母大小写，0-9 ，_或 $ 组成\n&gt; 数字不可以开头。\n&gt; 不可以使用关键字和保留字，但能包含关键字和保留字。\n&gt; Java中严格区分大小写，长度无限制。\n&gt; 标识符不能包含空格。\n</code></pre>\n<ul>\n<li>记住：标识符命名的规范（建议遵守。如果不遵守，编译和运行都能正常执行。只是容易被人鄙视）</li>\n</ul>\n<pre><code>&gt; 包名：多单词组成时所有字母都小写：xxxyyyzzz。\n  例如：java.lang、com.atguigu.bean\n  \n&gt; 类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz\n  例如：HelloWorld，String，System等\n  \n&gt; 变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz\n  例如：age,name,bookName,main,binarySearch,getName\n  \n&gt; 常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ\n  例如：MAX_VALUE,PI,DEFAULT_CAPACITY\n</code></pre>\n<ul>\n<li>“见名知意”</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IdentifierTest</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> abc <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//age : 标识符</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> gender <span class=\"token operator\">=</span> <span class=\"token char\">'男'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> <span class=\"token char\">'女'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">// 不推荐的写法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">//int myage = 12;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">//System.out.println(myage);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> myAge <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> _a$bc<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>class 1abc&#123;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Public</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">class</span> publicstatic<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BiaoShiFuTest</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"13-变量的基本使用重点\"><a class=\"anchor\" href=\"#13-变量的基本使用重点\">#</a> 1.3 变量的基本使用（重点）</h3>\n<ol>\n<li>变量的理解：内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化</li>\n<li>变量的构成包含三个要素：数据类型、变量名、存储的值</li>\n<li>Java 中变量声明的格式：数据类型 变量名 = 变量值</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">// 定义变量的方式 1：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> gender<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 过程 1：变量的声明</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tgender <span class=\"token operator\">=</span> <span class=\"token char\">'男'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 过程 2：变量的赋值（或初始化）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tgender <span class=\"token operator\">=</span> <span class=\"token char\">'女'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">// 定义变量的方式 2：声明与初始化合并</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age = \"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gender = \"</span> <span class=\"token operator\">+</span> gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 在同一个作用域内，不能声明两个同名的变量</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">//char gender = ' 女 ';</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tgender <span class=\"token operator\">=</span> <span class=\"token char\">'男'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">// 由于 number 前没有声明类型，即当前 number 变量没有提前定义。所以编译不通过。</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">//number = 10;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span> b1 <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">//b1 超出了 byte 的范围，编译不通过。</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">//b1 = 128;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main123</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token comment\">//System.out.println(\"gender = \" + gender);</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> gender <span class=\"token operator\">=</span> <span class=\"token char\">'女'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>说明：</p>\n<ol>\n<li>定义变量时，变量名要遵循标识符命名的规则和规范。</li>\n<li>说明：<br />\n① 变量都有其作用域。变量只在作用域内是有效的，出了作用域就失效了。<br />\n② 在同一个作用域内，不能声明两个同名的变量<br />\n③ 定义好变量以后，就可以通过变量名的方式对变量进行调用和运算。<br />\n④ 变量值在赋值时，必须满足变量的数据类型，并且在数据类型有效的范围内变化。</li>\n</ol>\n<h3 id=\"14-基本数据类型变量的使用重点\"><a class=\"anchor\" href=\"#14-基本数据类型变量的使用重点\">#</a> 1.4 基本数据类型变量的使用（重点）</h3>\n<p>1、Java 中的变量按照数据类型来分类：</p>\n<pre><code>\n\t基本数据类型（8种）:\n\t\t整型：byte \\ short \\ int \\ long \n\t\t浮点型：float \\ double \n\t\t字符型：char\n\t\t布尔型：boolean\n\n\t引用数据类型：\n\t\t类(class)\n\t\t数组(array)\n\t\t接口(interface)\n\n\t\t枚举(enum)\n\t\t注解(annotation)\n\t\t记录(record)\n</code></pre>\n<p>测试整型和浮点型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>测试整型和浮点型变量的使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableTest1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">//1. 测试整型变量的使用</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">//byte (1 字节 = 8bit) \\ short (2 字节) \\ int (4 字节) \\ long (8 字节) </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span> b1 <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span> b2 <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 编译不通过。因为超出了 byte 的存储范围</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">//byte b3 = 128;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">short</span> s1 <span class=\"token operator\">=</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i1 <span class=\"token operator\">=</span> <span class=\"token number\">123234123</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">//① 声明 long 类型变量时，需要提供后缀。后缀为 'l' 或 'L'</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">long</span> l1 <span class=\"token operator\">=</span> <span class=\"token number\">123123123L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">//② 开发中，大家定义整型变量时，没有特殊情况的话，通常都声明为 int 类型。</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">//2. 测试浮点类型变量的使用</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">//float \\ double</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> d1 <span class=\"token operator\">=</span> <span class=\"token number\">12.3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">//① 声明 long 类型变量时，需要提供后缀。后缀为 'f' 或 'F'</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">12.3f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f1 = \"</span> <span class=\"token operator\">+</span> f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token comment\">//② 开发中，大家定义浮点型变量时，没有特殊情况的话，通常都声明为 double 类型，因为精度更高。</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token comment\">//③ float 类型表数范围要大于 long 类型的表数范围。但是精度不高。</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// 测试浮点型变量的精度</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">// 结论：通过测试发现浮点型变量的精度不高。如果在开发中，需要极高的精度，需要使用 BigDecimal 类替换浮点型变量。</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">// 测试 1</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">// 测试 2:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> ff1 <span class=\"token operator\">=</span> <span class=\"token number\">123123123f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> ff2 <span class=\"token operator\">=</span> ff1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ff1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ff2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ff1 <span class=\"token operator\">==</span> ff2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试字符型和布尔型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>测试字符类型和布尔类型的使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableTest2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">//1. 字符类型：char (2 字节)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">// 表示形式 1：使用一对 '' 表示，内部有且仅有一个字符</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> <span class=\"token char\">'中'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> c3 <span class=\"token operator\">=</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> c4 <span class=\"token operator\">=</span> <span class=\"token char\">'%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> c5 <span class=\"token operator\">=</span> <span class=\"token char\">'γ'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">// 编译不通过</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">//char c6 = '';</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">//char c7 = 'ab';</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">// 表示形式 2：直接使用 Unicode 值来表示字符型常量。</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> c8 <span class=\"token operator\">=</span> <span class=\"token char\">'\\u0036'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 表示形式 3：使用转义字符</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> c9 <span class=\"token operator\">=</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> c10 <span class=\"token operator\">=</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> c10 <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token comment\">// 表示形式 4：使用具体字符对应的数值（比如 ASCII 码）</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> c11 <span class=\"token operator\">=</span> <span class=\"token number\">97</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c11<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//a</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> c12 <span class=\"token operator\">=</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> c13 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">//2. 布尔类型：boolean</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token comment\">//① 只有两个取值：true 、 false</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> bo1 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> bo2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token comment\">// 编译不通过</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">//boolean bo3 = 0;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token comment\">//② 常使用在流程控制语句中。比如：条件判断、循环结构等</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> isMarried <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isMarried<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"很遗憾，不能参加单身派对了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"可以多谈几个女朋友或男朋友\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token comment\">//③ 了解：我们不谈 boolean 类型占用的空间大小。但是，真正在内存中分配的话，使用的是 4 个字节。</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"15-基本数据类型变量间的运算规则重点\"><a class=\"anchor\" href=\"#15-基本数据类型变量间的运算规则重点\">#</a> 1.5 基本数据类型变量间的运算规则（重点）</h3>\n<h4 id=\"151-自动类型提升\"><a class=\"anchor\" href=\"#151-自动类型提升\">#</a> 1.5.1 自动类型提升</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>测试基本数据类型变量间的运算规则。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1. 这里提到可以做运算的基本数据类型有 7 种，不包含 boolean 类型。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>2. 运算规则包括：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t① 自动类型提升</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t② 强制类型转换</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>3. 此 VariableTest3.java 用来测试自动类型提升</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>规则：当容量小的变量与容量大的变量做运算时，结果自动转换为容量大的数据类型。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    byte 、short 、char ---> int  --->  long  ---> float ---> double</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t特别的：byte、short、char 类型的变量之间做运算，结果为 int 类型。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>说明：此时的容量小或大，并非指占用的内存空间的大小，而是指表示数据的范围的大小。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     long (8 字节) 、 float (4 字节)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableTest3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i2 <span class=\"token operator\">=</span> i1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">long</span> l1 <span class=\"token operator\">=</span> i1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> f1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span> b1 <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i3 <span class=\"token operator\">=</span> b1 <span class=\"token operator\">+</span> i1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 编译不通过</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">//byte b2 = b1 + i1;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">//**********************************************</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token comment\">// 特殊的情况 1：byte、short 之间做运算</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span> b3 <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">short</span> s1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// 编译不通过</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token comment\">//short s2 = b3 + s1;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\ti3 <span class=\"token operator\">=</span> b3 <span class=\"token operator\">+</span> s1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span> b4 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">// 编译不通过</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">//byte b5 = b3 + b4;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token comment\">// 特殊的情况 2：char</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token comment\">// 编译不通过</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token comment\">//char c2 = c1 + b3;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i4 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">+</span> b3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token comment\">//**********************************************</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token comment\">// 练习 1：</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">long</span> l2 <span class=\"token operator\">=</span> <span class=\"token number\">123L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token keyword\">long</span> l3 <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 理解为：自动类型提升 （int--->long）</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token comment\">//long l4 = 123123123123; //123123123123 理解为 int 类型，因为超出了 int 范围，所以报错。</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token keyword\">long</span> l5 <span class=\"token operator\">=</span> <span class=\"token number\">123123123123L</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此时的 123123123123L 就是使用 8 个字节存储的 long 类型的值</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token comment\">// 练习 2：</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> f2 <span class=\"token operator\">=</span> <span class=\"token number\">12.3F</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token comment\">// 编译不通过</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token comment\">//float f3 = 12.3; // 不满足自动类型提升的规则（double --> float）。所以报错</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token comment\">// 练习 3：</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token comment\">// 规定 1：整型常量，规定是 int 类型。</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span> b5 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token comment\">//byte b6 = b5 + 1;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> ii1 <span class=\"token operator\">=</span> b5 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token comment\">// 规定 2：浮点型常量，规定是 double 类型。</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> dd1 <span class=\"token operator\">=</span> b5 <span class=\"token operator\">+</span> <span class=\"token number\">12.3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t<span class=\"token comment\">// 练习 4：说明为什么不允许变量名是数字开头的。为了 “自洽”</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\tint 123L = 12;</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\tlong l6 = 123L;</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"152-强制类型转换\"><a class=\"anchor\" href=\"#152-强制类型转换\">#</a> 1.5.2 强制类型转换</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>此 VariableTest4.java 用来测试强制类型转换</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>规则：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>1. 如果需要将容量大的变量的类型转换为容量小的变量的类型，需要使用强制类型转换</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>2. 强制类型转换需要使用强转符：()。在 () 内指明要转换为的数据类型。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>3. 强制类型转换过程中，可能导致精度损失。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableTest4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> d1 <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 自动类型提升</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 编译失败</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">//int i1 = d1;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>d1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">long</span> l1 <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">// 编译失败</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">//short s1 = l1;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">short</span> s2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span>l1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">// 练习</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i3 <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> f1 <span class=\"token operator\">=</span> i3<span class=\"token punctuation\">;</span><span class=\"token comment\">// 自动类型提升</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//12.0</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> f2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>i3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译可以通过。只不过可以省略 () 而已。</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 精度损失的例子 1：</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> d2 <span class=\"token operator\">=</span> <span class=\"token number\">12.9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>d2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token comment\">// 精度损失的例子 2：</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i5 <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span> b1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>i5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//-128</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token comment\">// 实际开发举例：</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span> b2 <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token function\">method</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">long</span> l2 <span class=\"token operator\">=</span> <span class=\"token number\">12L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token comment\">// 编译不通过</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token comment\">//method(l2);</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">//int num = b2; 自动类型提升</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num = \"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"16-string类的使用-与基本数据类型变量间的运算重点\"><a class=\"anchor\" href=\"#16-string类的使用-与基本数据类型变量间的运算重点\">#</a> 1.6 String 类的使用、与基本数据类型变量间的运算（重点）</h3>\n<ul>\n<li>String 的认识：字符串。使用一对 &quot;&quot; 表示，内部包含 0 个、1 个或多个字符。</li>\n<li>String 与 8 种基本数据类型变量间的运算：+。运算的结果是 String 类型。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>基本数据类型与 String 的运算</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>一、关于 String 的理解</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>1. String 类，属于引用数据类型，俗称字符串。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>2. String 类型的变量，可以使用一对 \"\" 的方式进行赋值。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>3. String 声明的字符串内部，可以包含 0 个，1 个或多个字符。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>二、String 与基本数据类型变量间的运算</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>1. 这里的基本数据类型包括 boolean 在内的 8 种。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>2. String 与基本数据类型变量间只能做连接运算，使用 \"+\" 表示。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>3. 运算的结果是 String 类型。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">StringTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//char c1 = 'a';</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 测试连接运算</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> b1 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str4 <span class=\"token operator\">+</span> b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> str5 <span class=\"token operator\">=</span> str4 <span class=\"token operator\">+</span> b1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> str6 <span class=\"token operator\">=</span> str4 <span class=\"token operator\">+</span> b1 <span class=\"token operator\">+</span> num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//hellotrue10</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">// 思考：如下的声明编译能通过吗？不能</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token comment\">//String str7 = b1 + num1 + str4;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">// 如何将 String 类型的变量转换为基本数据类型？</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> str8 <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不能考虑转换为基本数据类型的。</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> str9 <span class=\"token operator\">=</span> num2 <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//\"10\"</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token comment\">// 编译不通过</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">//int num3 = (int)str9;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">// 如何实现呢？使用 Integer 类。暂时大家了解。</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>str9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num3 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>练习 1</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>要求填写自己的姓名、年龄、性别、体重、婚姻状况（已婚用 true 表示，单身用 false 表示）、联系方式等等。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">StringExer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"李进\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> gender <span class=\"token operator\">=</span> <span class=\"token char\">'男'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> weight <span class=\"token operator\">=</span> <span class=\"token number\">130.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> isMarried <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> phoneNumber <span class=\"token operator\">=</span> <span class=\"token string\">\"13012341234\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> info <span class=\"token operator\">=</span> <span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\",age = \"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> <span class=\"token string\">\",gender = \"</span> <span class=\"token operator\">+</span> gender <span class=\"token operator\">+</span> <span class=\"token string\">\",weight = \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tweight <span class=\"token operator\">+</span> <span class=\"token string\">\",isMarried = \"</span> <span class=\"token operator\">+</span> isMarried <span class=\"token operator\">+</span> <span class=\"token string\">\",phoneNumber = \"</span> <span class=\"token operator\">+</span> phoneNumber<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>练习 2</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">StringExer1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token comment\">// 练习 1：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">//String str1 = 4;                       // 判断对错：no</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token number\">3.5f</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 判断 str2 对错：yes</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 输出：3.5</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out <span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token operator\">+</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 输出：7Hello!</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 输出：Hello!34</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 输出：98Hello!</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token operator\">+</span><span class=\"token char\">'a'</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 输出：Helloa1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">// 练习 2：</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*    *\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 输出：*    *</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\\t*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 输出：*\t*</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 输出：*\t*</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token char\">'*'</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 输出：*\t*</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token char\">'*'</span> <span class=\"token operator\">+</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 输出：51*</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token char\">'*'</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 输出：*\t*</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">+</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 输出：*\t*</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token char\">'*'</span> <span class=\"token operator\">+</span> <span class=\"token char\">'\\t'</span> <span class=\"token operator\">+</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 输出：93</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"17-常识进制的认识\"><a class=\"anchor\" href=\"#17-常识进制的认识\">#</a> 1.7 常识：进制的认识</h3>\n<ul>\n<li>熟悉：二进制（以 0B、0b 开头）、十进制、八进制（以 0 开头）、十六进制（以 0x 或 0X 开头）的声明方式。</li>\n<li>二进制的理解\n<ul>\n<li>正数：原码、反码、补码三码合一。</li>\n<li>负数：原码、反码、补码不相同。了解三者之间的关系。</li>\n<li>计算机的底层是以 <code>补码</code> 的方式存储数据的。</li>\n</ul>\n</li>\n<li>熟悉：二进制与十进制之间的转换</li>\n<li>了解：二进制与八进制、十六进制间的转换</li>\n</ul>\n<h3 id=\"18-运算符较常用的是重点\"><a class=\"anchor\" href=\"#18-运算符较常用的是重点\">#</a> 1.8 运算符（较常用的是重点）</h3>\n<h4 id=\"181-算术运算符\"><a class=\"anchor\" href=\"#181-算术运算符\">#</a> 1.8.1 算术运算符</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>测试运算符的使用 1：算术运算符的使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>1. +  -  +  -  *  /  %  (前)++  (后)++  (前)--  (后)--  +</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AriTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">//*******************************</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">// 除法： /</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> m1 <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> k1 <span class=\"token operator\">=</span> m1 <span class=\"token operator\">/</span> n1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m1 <span class=\"token operator\">/</span> n1 <span class=\"token operator\">*</span> n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">//*******************************</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 取模（或取余）： %</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i1 <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> j1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i1 <span class=\"token operator\">%</span> j1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 开发中，经常用来判断某个数 num1 能整除另外一个数 num2。  num1 % num2 == 0</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 比如：判断 num1 是否是偶数： num1 % 2 == 0</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">// 结论：取模以后，结果与被模数的符号相同</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> j2 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i2 <span class=\"token operator\">%</span> j2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//-2</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i3 <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> j3 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i3 <span class=\"token operator\">%</span> j3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i4 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> j4 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i4 <span class=\"token operator\">%</span> j4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//-2</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token comment\">//*******************************</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">//(前)++ : 先自增 1，再运算</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token comment\">//(后)++ : 先运算，后自增 1</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b1 <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>a1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1 = \"</span> <span class=\"token operator\">+</span> a1 <span class=\"token operator\">+</span> <span class=\"token string\">\",b1 = \"</span> <span class=\"token operator\">+</span> b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a1 = 11,b1 = 11</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b2 <span class=\"token operator\">=</span> a2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a2 = \"</span> <span class=\"token operator\">+</span> a2 <span class=\"token operator\">+</span> <span class=\"token string\">\",b2 = \"</span> <span class=\"token operator\">+</span> b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a2 = 11,b2 = 10</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token comment\">// 练习 1：</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token comment\">//i++;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//11</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token comment\">// 练习 2：</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token keyword\">short</span> s1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 1：</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token comment\">// 编译不通过</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token comment\">//s1 = s1 + 1;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token comment\">//s1 = (short)(s1 + 1);</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token comment\">//System.out.println(s1);</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 2：</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\ts1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token comment\">//*******************************</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token comment\">//(前)-- : 先自减 1，再运算</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token comment\">//(后)-- : 先运算，再自减 1</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token comment\">// 略</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token comment\">// 结论：++ 或 -- 运算，不会改变变量的数据类型！</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token comment\">//+ : 连接符，只适用于 String 与其他类型的变量间的运算，而且运算的结果也是 String 类型。</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>练习 1：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>随意给出一个三位的整数，打印显示它的个位数，十位数，百位数的值。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>格式如下：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>数字 xxx 的情况如下：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>个位数：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>十位数：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>百位数：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>例如：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>数字 153 的情况如下：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>个位数：3</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>十位数：5</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>百位数：1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AriExer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">153</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> ge <span class=\"token operator\">=</span> num <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 个位</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> shi <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> <span class=\"token number\">10</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 十位。或者 int shi = num % 100 / 10</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> bai <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"个位是：\"</span> <span class=\"token operator\">+</span> ge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"十位是：\"</span> <span class=\"token operator\">+</span> shi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"百位是：\"</span> <span class=\"token operator\">+</span> bai<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>练习 2：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>案例 2：为抵抗洪水，战士连续作战 89 小时，编程计算共多少天零多少小时？</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AriExer1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> hours <span class=\"token operator\">=</span> <span class=\"token number\">89</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> hours <span class=\"token operator\">/</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> hour <span class=\"token operator\">=</span> hours <span class=\"token operator\">%</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"共奋战了\"</span> <span class=\"token operator\">+</span> day <span class=\"token operator\">+</span> <span class=\"token string\">\"天零\"</span> <span class=\"token operator\">+</span> hour <span class=\"token operator\">+</span> <span class=\"token string\">\"小时\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// 额外的练习 1：</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5+5=\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5+5=\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 额外的练习 2：</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span> bb1 <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tbb1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bb1 = \"</span> <span class=\"token operator\">+</span> bb1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 额外的练习 3：</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">//int i = 1;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">//int j = i++ + ++i * i++;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">//System.out.println(\"j = \" + j);//10</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token comment\">// 额外的练习 4：</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tm <span class=\"token operator\">=</span> m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"182-赋值运算符\"><a class=\"anchor\" href=\"#182-赋值运算符\">#</a> 1.8.2 赋值运算符</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>测试运算符的使用 2：赋值运算符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1. =   +=、 -=、*=、 /=、%=  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>2. 说明：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>① 当 “=” 两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>② 支持连续赋值。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>③ +=、 -=、*=、 /=、%=  操作，不会改变变量本身的数据类型。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SetValueTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">//***********************************</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">long</span> l <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自动类型提升</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 强制类型转换</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">// 操作方式 1：</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 操作方式 2：连续赋值</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">// 或合并：int a2,b2;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\ta2 <span class=\"token operator\">=</span> b2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a2 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token comment\">// 操作方式 3：</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">//int a3 = 10;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">//int b3 = 20;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a3 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>b3 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a3 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> b3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">//***********************************</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// 说明 += 的使用</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> m1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tm1 <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类似于 m1 = m1 + 5;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span> by1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tby1 <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//by1 = by1 + 5 操作会编译报错。应该写为： by1 = (byte)(by1 + 5);</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>by1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> m2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tm2 <span class=\"token operator\">*=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// m2 = (int)(m2 * 0.1)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token comment\">// 练习 1：如何实现变量的值增加 2。</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 1：</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\tn1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 2：推荐</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tn2 <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token comment\">// 错误的写法：</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token comment\">//int n3 = 10;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token comment\">//n3++++;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token comment\">// 练习 2：如何实现变量的值增加 1。</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 1：</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\ti1 <span class=\"token operator\">=</span> i1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 2：</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\ti2 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 3：推荐</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i3 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\ti3<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//++i3;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"183-比较运算符\"><a class=\"anchor\" href=\"#183-比较运算符\">#</a> 1.8.3 比较运算符</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>测试运算符的使用 3：比较运算符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1.  ==  !=  >   &lt;   >=   &lt;=  instanceof</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>2. 说明</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>① instanceof 在面向对象的多态性的位置讲解。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>② ==  !=  >   &lt;   >=   &lt;= 适用于基本数据类型。(细节：>   &lt;   >=   &lt;= 不适用于 boolean 类型)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  运算的结果为 boolean 类型。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>③ 了解： ==  !=  可以适用于引用数据类型</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>④ 区分：== 与 = </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompareTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> m1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> m2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> compare1 <span class=\"token operator\">=</span> m1 <span class=\"token operator\">></span> m2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>compare1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">==</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">=</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//20</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> b1 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> b2 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1 <span class=\"token operator\">==</span> b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1 <span class=\"token operator\">=</span> b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"184-逻辑运算符\"><a class=\"anchor\" href=\"#184-逻辑运算符\">#</a> 1.8.4 逻辑运算符</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>测试运算符的使用 4：逻辑运算符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1.  &amp; &amp;&amp;  |  ||  ! ^</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>2. 说明：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>① 逻辑运算符针对的都是 boolean 类型的变量进行的操作</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>② 逻辑运算符运算的结果也是 boolean 类型。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>③ 逻辑运算符常使用条件判断结构、循环结构中</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LogicTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t区分：&amp; 和 &amp;&amp;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t1、相同点：两个符号表达的都是 \"且\" 的关系。只有当符号左右两边的类型值均为 true 时，结果才为 true。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t2、执行过程：</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t1）如果符号左边是 true，则 & amp; 、&amp;&amp; 都会执行符号右边的操作</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t2）如果符号左边是 false，则 &amp; 会继续执行符号右边的操作</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t                           &amp;&amp; 不会执行符号右边的操作</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t3、开发中，我们推荐使用 & amp;&amp; </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> b1 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tb1 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b1 <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>num1<span class=\"token operator\">++</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"床前明月光\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我叫郭德纲\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 = \"</span> <span class=\"token operator\">+</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> b2 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tb2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b2 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>num2<span class=\"token operator\">++</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"床前明月光\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我叫郭德纲\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 = \"</span> <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token comment\">//********************************************</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t区分：| 和 ||</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t1、相同点：两个符号表达的都是 \"或\" 的关系。只要符号两边存在 true 的情况，结果就为 true.</pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t2、执行过程：</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t1）如果符号左边是 false，则 | 、|| 都会执行符号右边的操作</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t2）如果符号左边是 true，则 | 会继续执行符号右边的操作</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t                          || 不会执行符号右边的操作</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t3、开发中，我们推荐使用 ||</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> b3 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\tb3 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b3 <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>num3<span class=\"token operator\">++</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"床前明月光\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我叫郭德纲\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num3 = \"</span> <span class=\"token operator\">+</span> num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> b4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\tb4 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num4 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b4 <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>num4<span class=\"token operator\">++</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"床前明月光\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我叫郭德纲\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num4 = \"</span> <span class=\"token operator\">+</span> num4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>练习：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1. 定义类 LogicExer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>2. 定义 main 方法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>3. 定义一个 int 类型变量 a, 变量 b, 都赋值为 20</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>4. 定义 boolean 类型变量 bo1 , 判断 ++a 是否被 3 整除，并且 a++ 是否被 7 整除，将结果赋值给 bo1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>5. 输出 a 的值，bo1 的值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>6. 定义 boolean 类型变量 bo2 , 判断 b++ 是否被 3 整除，并且 ++b 是否被 7 整除，将结果赋值给 bo2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>7. 输出 b 的值，bo2 的值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LogicExer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\ta <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> bo1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">++</span> <span class=\"token operator\">%</span> <span class=\"token number\">7</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = \"</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\",bo1 = \"</span> <span class=\"token operator\">+</span> bo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">boolean</span> bo2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">++</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>b <span class=\"token operator\">%</span> <span class=\"token number\">7</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b = \"</span> <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> <span class=\"token string\">\",bo2 = \"</span> <span class=\"token operator\">+</span> bo2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"185-位运算符了解\"><a class=\"anchor\" href=\"#185-位运算符了解\">#</a> 1.8.5 位运算符 (了解)</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>测试运算符的使用 5：位运算符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1. &lt;&lt;   >>   >>>   &amp;  |  ^  ~</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>2. 说明：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>① &lt;&lt;   >>   >>>   &amp;  |  ^  ~ ：针对数值类型的变量或常量进行运算，运算的结果也是数值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>② </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&lt;&lt; : 在一定范围内，每向左移动一位，结果就在原有的基础上 * 2。（对于正数、负数都适用）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>>> : 在一定范围内，每向右移动一位，结果就在原有的基础上 / 2。（对于正数、负数都适用）</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>3. 面试题：高效的方式计算 2 * 8 ？ </pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>2 &lt;&lt; 3 或 8 &lt;&lt; 1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BitTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &lt;&lt; 1 : \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &lt;&lt; 2 : \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &lt;&lt; 3 : \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &lt;&lt; 28 : \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1 &lt;&lt; 29 : \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 过犹不及</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 &lt;&lt; 1 : \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 &lt;&lt; 2 : \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2 &lt;&lt; 3 : \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>练习：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>案例 2：如何交换两个 int 型变量的值？String 呢？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BitExer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m = \"</span> <span class=\"token operator\">+</span> m <span class=\"token operator\">+</span> <span class=\"token string\">\",n = \"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">// 交换两个变量的值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 1：声明一个临时变量。（推荐）</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">//int temp = m;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">//m = n;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">//n = temp;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 2：优点：不需要定义临时变量。  缺点：难、适用性差（不适用于非数值类型）、可能超出 int 的范围</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">//m = m + n; //30 = 10 + 20;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">//n = m - n; //10 = 30 - 20;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">//m = m - n; //20 = 30 - 10;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">// 方式 3：优点：不需要定义临时变量。  缺点：真难、适用性差（不适用于非数值类型）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tm <span class=\"token operator\">=</span> m <span class=\"token operator\">^</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tn <span class=\"token operator\">=</span> m <span class=\"token operator\">^</span> n<span class=\"token punctuation\">;</span><span class=\"token comment\">//(m ^ n) ^ n ---> m</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tm <span class=\"token operator\">=</span> m <span class=\"token operator\">^</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m = \"</span> <span class=\"token operator\">+</span> m <span class=\"token operator\">+</span> <span class=\"token string\">\",n = \"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"186-条件运算符\"><a class=\"anchor\" href=\"#186-条件运算符\">#</a> 1.8.6 条件运算符</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>测试运算符的使用 6：条件运算符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1. (条件表达式)? 表达式 1 : 表达式 2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>2. 说明：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>① 条件表达式的结果是 boolean 类型。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>② 如果条件表达式的结果是 true，则执行表达式 1。否则，执行表达式 2。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>③ 表达式 1 和 表达式 2 需要是相同的类型或能兼容的类型。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>④ 开发中，凡是可以使用条件运算符的位置，都可以改写为 if-else。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          反之，能使用 if-else 结构，不一定能改写为条件运算符。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  建议，在二者都能使用的情况下，推荐使用条件运算符。因为执行效率稍高。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConditionTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token string\">\"表达式1\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"表达式2\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 练习 1：获取两个整数的较大值</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> m <span class=\"token operator\">:</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"较大值为：\"</span> <span class=\"token operator\">+</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 练习 2：获取三个整数的最大值</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">23</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> tempMax <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> j<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> i <span class=\"token operator\">:</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> finalMax <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tempMax <span class=\"token operator\">></span> k<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> tempMax <span class=\"token operator\">:</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>finalMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// 合并以后的写法：不推荐</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> finalMax1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> j<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> i <span class=\"token operator\">:</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> k<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> j<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> i <span class=\"token operator\">:</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>finalMax1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"187-运算符的优先级\"><a class=\"anchor\" href=\"#187-运算符的优先级\">#</a> 1.8.7 运算符的优先级</h4>\n<ul>\n<li>如果想体现优先级比较高，使用 ()</li>\n<li>我们在编写一行执行语句时，不要出现太多的运算符。</li>\n</ul>\n<h2 id=\"二-企业真题\"><a class=\"anchor\" href=\"#二-企业真题\">#</a> 二、企业真题</h2>\n<h3 id=\"1-高效的方式计算2-8的值-文辉-轮科技\"><a class=\"anchor\" href=\"#1-高效的方式计算2-8的值-文辉-轮科技\">#</a> 1. 高效的方式计算 2 * 8 的值 (文 ** 辉、轮 * 科技)</h3>\n<p>使用 &lt;&lt; 。例如：2&lt;&lt;3 或 8&lt;&lt;1</p>\n<h3 id=\"2-和的区别恒电子-度\"><a class=\"anchor\" href=\"#2-和的区别恒电子-度\">#</a> 2. &amp; 和 &amp;&amp; 的区别？(恒 * 电子、* 度)</h3>\n<p>略，后者短路</p>\n<h3 id=\"3-java中的基本类型有哪些string-是最基本的数据类型吗恒电子\"><a class=\"anchor\" href=\"#3-java中的基本类型有哪些string-是最基本的数据类型吗恒电子\">#</a> 3. Java 中的基本类型有哪些？String 是最基本的数据类型吗？(恒 * 电子)</h3>\n<p>四类八种。</p>\n<p>String 不是，属于引用数据类型。</p>\n<h3 id=\"4-java中的基本数据类型包括哪些米\"><a class=\"anchor\" href=\"#4-java中的基本数据类型包括哪些米\">#</a> 4. Java 中的基本数据类型包括哪些？（* 米）</h3>\n<pre><code>类似问题：\n&gt; Java的基础数据类型有哪些？String是吗？（贝壳）\n</code></pre>\n<p>略</p>\n<h3 id=\"5-java开发中计算金额时使用什么数据类型5到家\"><a class=\"anchor\" href=\"#5-java开发中计算金额时使用什么数据类型5到家\">#</a> <mark>5. Java 开发中计算金额时使用什么数据类型？（5 * 到家）</mark></h3>\n<p>不能使用 float 或 double，因为精度不高。</p>\n<p>使用<font color='red'><strong>BigDecimal 类</strong></font>替换，可以实现任意精度的数据的运算。</p>\n<h3 id=\"6-char型变量中能不能存储一个中文汉字为什么通快递\"><a class=\"anchor\" href=\"#6-char型变量中能不能存储一个中文汉字为什么通快递\">#</a> <mark>6. char 型变量中能不能存储一个中文汉字，为什么？(* 通快递)</mark></h3>\n<p>可以的。char c1 = ' 中 ';</p>\n<p>char c2 = 'a'。</p>\n<p><font color='red'>因为 char 使用的是<strong> unicode 字符集</strong>，包含了世界范围的所有的字符</font>。</p>\n<h3 id=\"7-代码分析君科技-新陆\"><a class=\"anchor\" href=\"#7-代码分析君科技-新陆\">#</a> 7. 代码分析 (君 * 科技、新 * 陆)</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">short</span> s1<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s1<span class=\"token operator\">=</span>s1<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 有什么错？  = 右边是 int 类型。需要强转</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">short</span> s1<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s1<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有什么错？没错</span></pre></td></tr></table></figure><h3 id=\"8-int-i0-ii执行这两句化后变量-i-的值为软\"><a class=\"anchor\" href=\"#8-int-i0-ii执行这两句化后变量-i-的值为软\">#</a> <mark>8. int i=0; i=i++ 执行这两句化后变量 i 的值为（* 软）</mark></h3>\n<p>0。</p>\n<h3 id=\"9-如何将两个变量的值互换北京彩-中外译咨询\"><a class=\"anchor\" href=\"#9-如何将两个变量的值互换北京彩-中外译咨询\">#</a> 9. 如何将两个变量的值互换（北京 * 彩、中外 * 译咨询）</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> temp <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s1 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s2 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"10-boolean-占几个字节阿巴\"><a class=\"anchor\" href=\"#10-boolean-占几个字节阿巴\">#</a> <mark>10. boolean 占几个字节（阿 ** 巴）</mark></h3>\n<pre><code>编译时不谈占几个字节。\n\n但是JVM在给boolean类型分配内存空间时，boolean类型的变量占据一个槽位(slot，等于4个字节)。\n细节：true:1  false:0\n\n&gt;拓展：在内存中，byte\\short\\char\\boolean\\int\\float : 占用1个slot\n              double\\long :占用2个slot\n</code></pre>\n<h3 id=\"11-为什么java中01-02结果不是03字跳动\"><a class=\"anchor\" href=\"#11-为什么java中01-02结果不是03字跳动\">#</a> <mark>11. 为什么 Java 中 0.1 + 0.2 结果不是 0.3？（字 * 跳动）</mark></h3>\n<p>在代码中测试 0.1 + 0.2，你会惊讶的发现，结果不是 0.3，而是 0.3000……4。这是为什么？</p>\n<p>几乎所有现代的编程语言都会遇到上述问题，包括 JavaScript、Ruby、Python、Swift 和 Go 等。引发这个问题的原因是，它们都<strong>采用了<font color='cornflowerblue'> <code>IEEE 754标准</code> </font></strong>。</p>\n<blockquote>\n<p>IEEE 是指 “电气与电子工程师协会”，其在 1985 年发布了一个 IEEE 754 计算标准，根据这个标准，小数的二进制表达能够有最大的精度上限提升。但无论如何，物理边界是突破不了的，它仍然 **<font color='red'> <code>不能实现“每一个十进制小数，都对应一个二进制小数”</code> </font>**。正因如此，产生了 0.1 + 0.2 不等于 0.3 的问题。</p>\n</blockquote>\n<p>具体的：</p>\n<p><strong><font color='red'>整数变为二进制，能够做到 “每个十进制整数都有对应的二进制数”</font></strong>，比如数字 3，二进制就是 11；再比如，数字 43 就是二进制 101011，这个毫无争议。</p>\n<p><strong><font color='red'>对于小数，并不能做到 “每个小数都有对应的二进制数字”</font></strong>。举例来说，二进制小数 0.0001 表示十进制数 0.0625 （至于它是如何计算的，不用深究）；二进制小数 0.0010 表示十进制数 0.125；二进制小数 0.0011 表示十进制数 0.1875。看，对于四位的二进制小数，二进制小数虽然是连贯的，但是十进制小数却不是连贯的。比如，你无法用四位二进制小数的形式表示 0.125 ~ 0.1875 之间的十进制小数。</p>\n<p>所以在编程中，<strong><font color='red'>遇见小数判断相等情况，比如开发银行、交易等系统，可以采用 <code>四舍五入</code> 或者 “ <code>同乘同除</code> ” 等方式进行验证，避免上述问题</font></strong>。</p>\n",
            "tags": [
                "Java",
                "Java基础",
                "Java基础-真题"
            ]
        }
    ]
}